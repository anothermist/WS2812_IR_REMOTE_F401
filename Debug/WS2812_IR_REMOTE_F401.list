
WS2812_IR_REMOTE_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005468  08005468  00015468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054e4  080054e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080054e4  080054e4  000154e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054ec  080054ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054ec  080054ec  000154ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054f0  080054f0  000154f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080054f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014c0  20000070  08005564  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001530  08005564  00021530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea00  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002055  00000000  00000000  0002eaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00030af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  00031798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cdc  00000000  00000000  00032370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f004  00000000  00000000  0004904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da0e  00000000  00000000  00058050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5a5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a30  00000000  00000000  000e5ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005450 	.word	0x08005450

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005450 	.word	0x08005450

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__gedf2>:
 800085c:	f04f 3cff 	mov.w	ip, #4294967295
 8000860:	e006      	b.n	8000870 <__cmpdf2+0x4>
 8000862:	bf00      	nop

08000864 <__ledf2>:
 8000864:	f04f 0c01 	mov.w	ip, #1
 8000868:	e002      	b.n	8000870 <__cmpdf2+0x4>
 800086a:	bf00      	nop

0800086c <__cmpdf2>:
 800086c:	f04f 0c01 	mov.w	ip, #1
 8000870:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000874:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000878:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800087c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000880:	bf18      	it	ne
 8000882:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000886:	d01b      	beq.n	80008c0 <__cmpdf2+0x54>
 8000888:	b001      	add	sp, #4
 800088a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800088e:	bf0c      	ite	eq
 8000890:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000894:	ea91 0f03 	teqne	r1, r3
 8000898:	bf02      	ittt	eq
 800089a:	ea90 0f02 	teqeq	r0, r2
 800089e:	2000      	moveq	r0, #0
 80008a0:	4770      	bxeq	lr
 80008a2:	f110 0f00 	cmn.w	r0, #0
 80008a6:	ea91 0f03 	teq	r1, r3
 80008aa:	bf58      	it	pl
 80008ac:	4299      	cmppl	r1, r3
 80008ae:	bf08      	it	eq
 80008b0:	4290      	cmpeq	r0, r2
 80008b2:	bf2c      	ite	cs
 80008b4:	17d8      	asrcs	r0, r3, #31
 80008b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ba:	f040 0001 	orr.w	r0, r0, #1
 80008be:	4770      	bx	lr
 80008c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d102      	bne.n	80008d0 <__cmpdf2+0x64>
 80008ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ce:	d107      	bne.n	80008e0 <__cmpdf2+0x74>
 80008d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008d8:	d1d6      	bne.n	8000888 <__cmpdf2+0x1c>
 80008da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008de:	d0d3      	beq.n	8000888 <__cmpdf2+0x1c>
 80008e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdrcmple>:
 80008e8:	4684      	mov	ip, r0
 80008ea:	4610      	mov	r0, r2
 80008ec:	4662      	mov	r2, ip
 80008ee:	468c      	mov	ip, r1
 80008f0:	4619      	mov	r1, r3
 80008f2:	4663      	mov	r3, ip
 80008f4:	e000      	b.n	80008f8 <__aeabi_cdcmpeq>
 80008f6:	bf00      	nop

080008f8 <__aeabi_cdcmpeq>:
 80008f8:	b501      	push	{r0, lr}
 80008fa:	f7ff ffb7 	bl	800086c <__cmpdf2>
 80008fe:	2800      	cmp	r0, #0
 8000900:	bf48      	it	mi
 8000902:	f110 0f00 	cmnmi.w	r0, #0
 8000906:	bd01      	pop	{r0, pc}

08000908 <__aeabi_dcmpeq>:
 8000908:	f84d ed08 	str.w	lr, [sp, #-8]!
 800090c:	f7ff fff4 	bl	80008f8 <__aeabi_cdcmpeq>
 8000910:	bf0c      	ite	eq
 8000912:	2001      	moveq	r0, #1
 8000914:	2000      	movne	r0, #0
 8000916:	f85d fb08 	ldr.w	pc, [sp], #8
 800091a:	bf00      	nop

0800091c <__aeabi_dcmplt>:
 800091c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000920:	f7ff ffea 	bl	80008f8 <__aeabi_cdcmpeq>
 8000924:	bf34      	ite	cc
 8000926:	2001      	movcc	r0, #1
 8000928:	2000      	movcs	r0, #0
 800092a:	f85d fb08 	ldr.w	pc, [sp], #8
 800092e:	bf00      	nop

08000930 <__aeabi_dcmple>:
 8000930:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000934:	f7ff ffe0 	bl	80008f8 <__aeabi_cdcmpeq>
 8000938:	bf94      	ite	ls
 800093a:	2001      	movls	r0, #1
 800093c:	2000      	movhi	r0, #0
 800093e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000942:	bf00      	nop

08000944 <__aeabi_dcmpge>:
 8000944:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000948:	f7ff ffce 	bl	80008e8 <__aeabi_cdrcmple>
 800094c:	bf94      	ite	ls
 800094e:	2001      	movls	r0, #1
 8000950:	2000      	movhi	r0, #0
 8000952:	f85d fb08 	ldr.w	pc, [sp], #8
 8000956:	bf00      	nop

08000958 <__aeabi_dcmpgt>:
 8000958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800095c:	f7ff ffc4 	bl	80008e8 <__aeabi_cdrcmple>
 8000960:	bf34      	ite	cc
 8000962:	2001      	movcc	r0, #1
 8000964:	2000      	movcs	r0, #0
 8000966:	f85d fb08 	ldr.w	pc, [sp], #8
 800096a:	bf00      	nop

0800096c <__aeabi_uldivmod>:
 800096c:	b953      	cbnz	r3, 8000984 <__aeabi_uldivmod+0x18>
 800096e:	b94a      	cbnz	r2, 8000984 <__aeabi_uldivmod+0x18>
 8000970:	2900      	cmp	r1, #0
 8000972:	bf08      	it	eq
 8000974:	2800      	cmpeq	r0, #0
 8000976:	bf1c      	itt	ne
 8000978:	f04f 31ff 	movne.w	r1, #4294967295
 800097c:	f04f 30ff 	movne.w	r0, #4294967295
 8000980:	f000 b974 	b.w	8000c6c <__aeabi_idiv0>
 8000984:	f1ad 0c08 	sub.w	ip, sp, #8
 8000988:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800098c:	f000 f806 	bl	800099c <__udivmoddi4>
 8000990:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000994:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000998:	b004      	add	sp, #16
 800099a:	4770      	bx	lr

0800099c <__udivmoddi4>:
 800099c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009a0:	9d08      	ldr	r5, [sp, #32]
 80009a2:	4604      	mov	r4, r0
 80009a4:	468e      	mov	lr, r1
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d14d      	bne.n	8000a46 <__udivmoddi4+0xaa>
 80009aa:	428a      	cmp	r2, r1
 80009ac:	4694      	mov	ip, r2
 80009ae:	d969      	bls.n	8000a84 <__udivmoddi4+0xe8>
 80009b0:	fab2 f282 	clz	r2, r2
 80009b4:	b152      	cbz	r2, 80009cc <__udivmoddi4+0x30>
 80009b6:	fa01 f302 	lsl.w	r3, r1, r2
 80009ba:	f1c2 0120 	rsb	r1, r2, #32
 80009be:	fa20 f101 	lsr.w	r1, r0, r1
 80009c2:	fa0c fc02 	lsl.w	ip, ip, r2
 80009c6:	ea41 0e03 	orr.w	lr, r1, r3
 80009ca:	4094      	lsls	r4, r2
 80009cc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009d0:	0c21      	lsrs	r1, r4, #16
 80009d2:	fbbe f6f8 	udiv	r6, lr, r8
 80009d6:	fa1f f78c 	uxth.w	r7, ip
 80009da:	fb08 e316 	mls	r3, r8, r6, lr
 80009de:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009e2:	fb06 f107 	mul.w	r1, r6, r7
 80009e6:	4299      	cmp	r1, r3
 80009e8:	d90a      	bls.n	8000a00 <__udivmoddi4+0x64>
 80009ea:	eb1c 0303 	adds.w	r3, ip, r3
 80009ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80009f2:	f080 811f 	bcs.w	8000c34 <__udivmoddi4+0x298>
 80009f6:	4299      	cmp	r1, r3
 80009f8:	f240 811c 	bls.w	8000c34 <__udivmoddi4+0x298>
 80009fc:	3e02      	subs	r6, #2
 80009fe:	4463      	add	r3, ip
 8000a00:	1a5b      	subs	r3, r3, r1
 8000a02:	b2a4      	uxth	r4, r4
 8000a04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a08:	fb08 3310 	mls	r3, r8, r0, r3
 8000a0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a10:	fb00 f707 	mul.w	r7, r0, r7
 8000a14:	42a7      	cmp	r7, r4
 8000a16:	d90a      	bls.n	8000a2e <__udivmoddi4+0x92>
 8000a18:	eb1c 0404 	adds.w	r4, ip, r4
 8000a1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a20:	f080 810a 	bcs.w	8000c38 <__udivmoddi4+0x29c>
 8000a24:	42a7      	cmp	r7, r4
 8000a26:	f240 8107 	bls.w	8000c38 <__udivmoddi4+0x29c>
 8000a2a:	4464      	add	r4, ip
 8000a2c:	3802      	subs	r0, #2
 8000a2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a32:	1be4      	subs	r4, r4, r7
 8000a34:	2600      	movs	r6, #0
 8000a36:	b11d      	cbz	r5, 8000a40 <__udivmoddi4+0xa4>
 8000a38:	40d4      	lsrs	r4, r2
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000a40:	4631      	mov	r1, r6
 8000a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a46:	428b      	cmp	r3, r1
 8000a48:	d909      	bls.n	8000a5e <__udivmoddi4+0xc2>
 8000a4a:	2d00      	cmp	r5, #0
 8000a4c:	f000 80ef 	beq.w	8000c2e <__udivmoddi4+0x292>
 8000a50:	2600      	movs	r6, #0
 8000a52:	e9c5 0100 	strd	r0, r1, [r5]
 8000a56:	4630      	mov	r0, r6
 8000a58:	4631      	mov	r1, r6
 8000a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a5e:	fab3 f683 	clz	r6, r3
 8000a62:	2e00      	cmp	r6, #0
 8000a64:	d14a      	bne.n	8000afc <__udivmoddi4+0x160>
 8000a66:	428b      	cmp	r3, r1
 8000a68:	d302      	bcc.n	8000a70 <__udivmoddi4+0xd4>
 8000a6a:	4282      	cmp	r2, r0
 8000a6c:	f200 80f9 	bhi.w	8000c62 <__udivmoddi4+0x2c6>
 8000a70:	1a84      	subs	r4, r0, r2
 8000a72:	eb61 0303 	sbc.w	r3, r1, r3
 8000a76:	2001      	movs	r0, #1
 8000a78:	469e      	mov	lr, r3
 8000a7a:	2d00      	cmp	r5, #0
 8000a7c:	d0e0      	beq.n	8000a40 <__udivmoddi4+0xa4>
 8000a7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a82:	e7dd      	b.n	8000a40 <__udivmoddi4+0xa4>
 8000a84:	b902      	cbnz	r2, 8000a88 <__udivmoddi4+0xec>
 8000a86:	deff      	udf	#255	; 0xff
 8000a88:	fab2 f282 	clz	r2, r2
 8000a8c:	2a00      	cmp	r2, #0
 8000a8e:	f040 8092 	bne.w	8000bb6 <__udivmoddi4+0x21a>
 8000a92:	eba1 010c 	sub.w	r1, r1, ip
 8000a96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a9a:	fa1f fe8c 	uxth.w	lr, ip
 8000a9e:	2601      	movs	r6, #1
 8000aa0:	0c20      	lsrs	r0, r4, #16
 8000aa2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000aa6:	fb07 1113 	mls	r1, r7, r3, r1
 8000aaa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000aae:	fb0e f003 	mul.w	r0, lr, r3
 8000ab2:	4288      	cmp	r0, r1
 8000ab4:	d908      	bls.n	8000ac8 <__udivmoddi4+0x12c>
 8000ab6:	eb1c 0101 	adds.w	r1, ip, r1
 8000aba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000abe:	d202      	bcs.n	8000ac6 <__udivmoddi4+0x12a>
 8000ac0:	4288      	cmp	r0, r1
 8000ac2:	f200 80cb 	bhi.w	8000c5c <__udivmoddi4+0x2c0>
 8000ac6:	4643      	mov	r3, r8
 8000ac8:	1a09      	subs	r1, r1, r0
 8000aca:	b2a4      	uxth	r4, r4
 8000acc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ad0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ad4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ad8:	fb0e fe00 	mul.w	lr, lr, r0
 8000adc:	45a6      	cmp	lr, r4
 8000ade:	d908      	bls.n	8000af2 <__udivmoddi4+0x156>
 8000ae0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ae8:	d202      	bcs.n	8000af0 <__udivmoddi4+0x154>
 8000aea:	45a6      	cmp	lr, r4
 8000aec:	f200 80bb 	bhi.w	8000c66 <__udivmoddi4+0x2ca>
 8000af0:	4608      	mov	r0, r1
 8000af2:	eba4 040e 	sub.w	r4, r4, lr
 8000af6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000afa:	e79c      	b.n	8000a36 <__udivmoddi4+0x9a>
 8000afc:	f1c6 0720 	rsb	r7, r6, #32
 8000b00:	40b3      	lsls	r3, r6
 8000b02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b12:	431c      	orrs	r4, r3
 8000b14:	40f9      	lsrs	r1, r7
 8000b16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b22:	0c20      	lsrs	r0, r4, #16
 8000b24:	fa1f fe8c 	uxth.w	lr, ip
 8000b28:	fb09 1118 	mls	r1, r9, r8, r1
 8000b2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b30:	fb08 f00e 	mul.w	r0, r8, lr
 8000b34:	4288      	cmp	r0, r1
 8000b36:	fa02 f206 	lsl.w	r2, r2, r6
 8000b3a:	d90b      	bls.n	8000b54 <__udivmoddi4+0x1b8>
 8000b3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b44:	f080 8088 	bcs.w	8000c58 <__udivmoddi4+0x2bc>
 8000b48:	4288      	cmp	r0, r1
 8000b4a:	f240 8085 	bls.w	8000c58 <__udivmoddi4+0x2bc>
 8000b4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b52:	4461      	add	r1, ip
 8000b54:	1a09      	subs	r1, r1, r0
 8000b56:	b2a4      	uxth	r4, r4
 8000b58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b68:	458e      	cmp	lr, r1
 8000b6a:	d908      	bls.n	8000b7e <__udivmoddi4+0x1e2>
 8000b6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b74:	d26c      	bcs.n	8000c50 <__udivmoddi4+0x2b4>
 8000b76:	458e      	cmp	lr, r1
 8000b78:	d96a      	bls.n	8000c50 <__udivmoddi4+0x2b4>
 8000b7a:	3802      	subs	r0, #2
 8000b7c:	4461      	add	r1, ip
 8000b7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b82:	fba0 9402 	umull	r9, r4, r0, r2
 8000b86:	eba1 010e 	sub.w	r1, r1, lr
 8000b8a:	42a1      	cmp	r1, r4
 8000b8c:	46c8      	mov	r8, r9
 8000b8e:	46a6      	mov	lr, r4
 8000b90:	d356      	bcc.n	8000c40 <__udivmoddi4+0x2a4>
 8000b92:	d053      	beq.n	8000c3c <__udivmoddi4+0x2a0>
 8000b94:	b15d      	cbz	r5, 8000bae <__udivmoddi4+0x212>
 8000b96:	ebb3 0208 	subs.w	r2, r3, r8
 8000b9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ba2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ba6:	40f1      	lsrs	r1, r6
 8000ba8:	431f      	orrs	r7, r3
 8000baa:	e9c5 7100 	strd	r7, r1, [r5]
 8000bae:	2600      	movs	r6, #0
 8000bb0:	4631      	mov	r1, r6
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	f1c2 0320 	rsb	r3, r2, #32
 8000bba:	40d8      	lsrs	r0, r3
 8000bbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000bc4:	4091      	lsls	r1, r2
 8000bc6:	4301      	orrs	r1, r0
 8000bc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000bd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000bd8:	0c0b      	lsrs	r3, r1, #16
 8000bda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000bde:	fb00 f60e 	mul.w	r6, r0, lr
 8000be2:	429e      	cmp	r6, r3
 8000be4:	fa04 f402 	lsl.w	r4, r4, r2
 8000be8:	d908      	bls.n	8000bfc <__udivmoddi4+0x260>
 8000bea:	eb1c 0303 	adds.w	r3, ip, r3
 8000bee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bf2:	d22f      	bcs.n	8000c54 <__udivmoddi4+0x2b8>
 8000bf4:	429e      	cmp	r6, r3
 8000bf6:	d92d      	bls.n	8000c54 <__udivmoddi4+0x2b8>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	4463      	add	r3, ip
 8000bfc:	1b9b      	subs	r3, r3, r6
 8000bfe:	b289      	uxth	r1, r1
 8000c00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c04:	fb07 3316 	mls	r3, r7, r6, r3
 8000c08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c10:	428b      	cmp	r3, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x28a>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c1c:	d216      	bcs.n	8000c4c <__udivmoddi4+0x2b0>
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d914      	bls.n	8000c4c <__udivmoddi4+0x2b0>
 8000c22:	3e02      	subs	r6, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	1ac9      	subs	r1, r1, r3
 8000c28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c2c:	e738      	b.n	8000aa0 <__udivmoddi4+0x104>
 8000c2e:	462e      	mov	r6, r5
 8000c30:	4628      	mov	r0, r5
 8000c32:	e705      	b.n	8000a40 <__udivmoddi4+0xa4>
 8000c34:	4606      	mov	r6, r0
 8000c36:	e6e3      	b.n	8000a00 <__udivmoddi4+0x64>
 8000c38:	4618      	mov	r0, r3
 8000c3a:	e6f8      	b.n	8000a2e <__udivmoddi4+0x92>
 8000c3c:	454b      	cmp	r3, r9
 8000c3e:	d2a9      	bcs.n	8000b94 <__udivmoddi4+0x1f8>
 8000c40:	ebb9 0802 	subs.w	r8, r9, r2
 8000c44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c48:	3801      	subs	r0, #1
 8000c4a:	e7a3      	b.n	8000b94 <__udivmoddi4+0x1f8>
 8000c4c:	4646      	mov	r6, r8
 8000c4e:	e7ea      	b.n	8000c26 <__udivmoddi4+0x28a>
 8000c50:	4620      	mov	r0, r4
 8000c52:	e794      	b.n	8000b7e <__udivmoddi4+0x1e2>
 8000c54:	4640      	mov	r0, r8
 8000c56:	e7d1      	b.n	8000bfc <__udivmoddi4+0x260>
 8000c58:	46d0      	mov	r8, sl
 8000c5a:	e77b      	b.n	8000b54 <__udivmoddi4+0x1b8>
 8000c5c:	3b02      	subs	r3, #2
 8000c5e:	4461      	add	r1, ip
 8000c60:	e732      	b.n	8000ac8 <__udivmoddi4+0x12c>
 8000c62:	4630      	mov	r0, r6
 8000c64:	e709      	b.n	8000a7a <__udivmoddi4+0xde>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	e742      	b.n	8000af2 <__udivmoddi4+0x156>

08000c6c <__aeabi_idiv0>:
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop

08000c70 <HAL_TIM_PeriodElapsedCallback>:
#include "ir_remote.h"

volatile irparams_t irparams;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	if(htim == &TIMER_IR)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a56      	ldr	r2, [pc, #344]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	f040 809b 	bne.w	8000db8 <HAL_TIM_PeriodElapsedCallback+0x148>
	{
		uint8_t irdata = RECIV_PIN;
 8000c82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c86:	4854      	ldr	r0, [pc, #336]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000c88:	f001 fd02 	bl	8002690 <HAL_GPIO_ReadPin>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	73fb      	strb	r3, [r7, #15]

		irparams.timer++;  // One more 50uS tick
 8000c90:	4b52      	ldr	r3, [pc, #328]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000c92:	885b      	ldrh	r3, [r3, #2]
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	3301      	adds	r3, #1
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	4b50      	ldr	r3, [pc, #320]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000c9c:	805a      	strh	r2, [r3, #2]
		if(irparams.rawlen >= RAWBUF) irparams.rcvstate = STATE_OVERFLOW;  // Buffer overflow
 8000c9e:	4b4f      	ldr	r3, [pc, #316]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000ca0:	785b      	ldrb	r3, [r3, #1]

		switch(irparams.rcvstate)
 8000ca2:	4b4e      	ldr	r3, [pc, #312]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	3b02      	subs	r3, #2
 8000caa:	2b04      	cmp	r3, #4
 8000cac:	f200 808d 	bhi.w	8000dca <HAL_TIM_PeriodElapsedCallback+0x15a>
 8000cb0:	a201      	add	r2, pc, #4	; (adr r2, 8000cb8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb6:	bf00      	nop
 8000cb8:	08000ccd 	.word	0x08000ccd
 8000cbc:	08000d21 	.word	0x08000d21
 8000cc0:	08000d55 	.word	0x08000d55
 8000cc4:	08000d9b 	.word	0x08000d9b
 8000cc8:	08000da9 	.word	0x08000da9
		{
			case STATE_IDLE: // In the middle of a gap
				if(irdata == MARK)
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d174      	bne.n	8000dbc <HAL_TIM_PeriodElapsedCallback+0x14c>
				{
					if(irparams.timer < GAP_TICKS)  // Not big enough to be a gap.
 8000cd2:	4b42      	ldr	r3, [pc, #264]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000cd4:	885b      	ldrh	r3, [r3, #2]
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	2b63      	cmp	r3, #99	; 0x63
 8000cda:	d803      	bhi.n	8000ce4 <HAL_TIM_PeriodElapsedCallback+0x74>
					{
						irparams.timer = 0;
 8000cdc:	4b3f      	ldr	r3, [pc, #252]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	805a      	strh	r2, [r3, #2]
						irparams.timer = 0;
						irparams.rcvstate = STATE_MARK;
					}
				}

			break;
 8000ce2:	e06b      	b.n	8000dbc <HAL_TIM_PeriodElapsedCallback+0x14c>
						irparams.overflow = 0;
 8000ce4:	4b3d      	ldr	r3, [pc, #244]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						irparams.rawlen  = 0;
 8000cec:	4b3b      	ldr	r3, [pc, #236]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	705a      	strb	r2, [r3, #1]
						irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8000cf2:	4b3a      	ldr	r3, [pc, #232]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000cf4:	785b      	ldrb	r3, [r3, #1]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	1c5a      	adds	r2, r3, #1
 8000cfa:	b2d1      	uxtb	r1, r2
 8000cfc:	4a37      	ldr	r2, [pc, #220]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000cfe:	7051      	strb	r1, [r2, #1]
 8000d00:	4618      	mov	r0, r3
 8000d02:	4b36      	ldr	r3, [pc, #216]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000d04:	885b      	ldrh	r3, [r3, #2]
 8000d06:	b299      	uxth	r1, r3
 8000d08:	4a34      	ldr	r2, [pc, #208]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000d0a:	0043      	lsls	r3, r0, #1
 8000d0c:	4413      	add	r3, r2
 8000d0e:	460a      	mov	r2, r1
 8000d10:	809a      	strh	r2, [r3, #4]
						irparams.timer = 0;
 8000d12:	4b32      	ldr	r3, [pc, #200]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	805a      	strh	r2, [r3, #2]
						irparams.rcvstate = STATE_MARK;
 8000d18:	4b30      	ldr	r3, [pc, #192]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	701a      	strb	r2, [r3, #0]
			break;
 8000d1e:	e04d      	b.n	8000dbc <HAL_TIM_PeriodElapsedCallback+0x14c>

			case STATE_MARK:  // Timing Mark
				if(irdata == SPACE) // Mark ended; Record time
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d14c      	bne.n	8000dc0 <HAL_TIM_PeriodElapsedCallback+0x150>
				{
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8000d26:	4b2d      	ldr	r3, [pc, #180]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000d28:	785b      	ldrb	r3, [r3, #1]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	1c5a      	adds	r2, r3, #1
 8000d2e:	b2d1      	uxtb	r1, r2
 8000d30:	4a2a      	ldr	r2, [pc, #168]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000d32:	7051      	strb	r1, [r2, #1]
 8000d34:	4618      	mov	r0, r3
 8000d36:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000d38:	885b      	ldrh	r3, [r3, #2]
 8000d3a:	b299      	uxth	r1, r3
 8000d3c:	4a27      	ldr	r2, [pc, #156]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000d3e:	0043      	lsls	r3, r0, #1
 8000d40:	4413      	add	r3, r2
 8000d42:	460a      	mov	r2, r1
 8000d44:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 8000d46:	4b25      	ldr	r3, [pc, #148]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_SPACE;
 8000d4c:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000d4e:	2204      	movs	r2, #4
 8000d50:	701a      	strb	r2, [r3, #0]
				}

			break;
 8000d52:	e035      	b.n	8000dc0 <HAL_TIM_PeriodElapsedCallback+0x150>

			case STATE_SPACE:  // Timing Space
				if(irdata == MARK) // Space just ended; Record time
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d116      	bne.n	8000d88 <HAL_TIM_PeriodElapsedCallback+0x118>
				{
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8000d5a:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000d5c:	785b      	ldrb	r3, [r3, #1]
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	1c5a      	adds	r2, r3, #1
 8000d62:	b2d1      	uxtb	r1, r2
 8000d64:	4a1d      	ldr	r2, [pc, #116]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000d66:	7051      	strb	r1, [r2, #1]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000d6c:	885b      	ldrh	r3, [r3, #2]
 8000d6e:	b299      	uxth	r1, r3
 8000d70:	4a1a      	ldr	r2, [pc, #104]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000d72:	0043      	lsls	r3, r0, #1
 8000d74:	4413      	add	r3, r2
 8000d76:	460a      	mov	r2, r1
 8000d78:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_MARK;
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000d82:	2203      	movs	r2, #3
 8000d84:	701a      	strb	r2, [r3, #0]
				else if(irparams.timer > GAP_TICKS) // Space
				{
					irparams.rcvstate = STATE_STOP;
				}

			break;
 8000d86:	e01d      	b.n	8000dc4 <HAL_TIM_PeriodElapsedCallback+0x154>
				else if(irparams.timer > GAP_TICKS) // Space
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000d8a:	885b      	ldrh	r3, [r3, #2]
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	2b64      	cmp	r3, #100	; 0x64
 8000d90:	d918      	bls.n	8000dc4 <HAL_TIM_PeriodElapsedCallback+0x154>
					irparams.rcvstate = STATE_STOP;
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000d94:	2205      	movs	r2, #5
 8000d96:	701a      	strb	r2, [r3, #0]
			break;
 8000d98:	e014      	b.n	8000dc4 <HAL_TIM_PeriodElapsedCallback+0x154>

			case STATE_STOP:  // Waiting; Measuring Gap
			 	if(irdata == MARK) irparams.timer = 0;  // Reset gap timer
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d113      	bne.n	8000dc8 <HAL_TIM_PeriodElapsedCallback+0x158>
 8000da0:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	805a      	strh	r2, [r3, #2]
			break;
 8000da6:	e00f      	b.n	8000dc8 <HAL_TIM_PeriodElapsedCallback+0x158>

			case STATE_OVERFLOW:  // Flag up a read overflow; Stop the State Machine
				irparams.overflow = 1;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				irparams.rcvstate = STATE_STOP;
 8000db0:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000db2:	2205      	movs	r2, #5
 8000db4:	701a      	strb	r2, [r3, #0]
			break;
 8000db6:	e008      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x15a>
		}
	}
 8000db8:	bf00      	nop
 8000dba:	e006      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x15a>
			break;
 8000dbc:	bf00      	nop
 8000dbe:	e004      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x15a>
			break;
 8000dc0:	bf00      	nop
 8000dc2:	e002      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x15a>
			break;
 8000dc4:	bf00      	nop
 8000dc6:	e000      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x15a>
			break;
 8000dc8:	bf00      	nop
}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200002dc 	.word	0x200002dc
 8000dd8:	40020800 	.word	0x40020800
 8000ddc:	2000008c 	.word	0x2000008c

08000de0 <ir_decode>:

int16_t ir_decode(decode_results *results)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	if(irparams.rcvstate != STATE_STOP) return 0;
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <ir_decode+0x54>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b05      	cmp	r3, #5
 8000df0:	d001      	beq.n	8000df6 <ir_decode+0x16>
 8000df2:	2300      	movs	r3, #0
 8000df4:	e01a      	b.n	8000e2c <ir_decode+0x4c>

	results->rawbuf = irparams.rawbuf;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a0f      	ldr	r2, [pc, #60]	; (8000e38 <ir_decode+0x58>)
 8000dfa:	609a      	str	r2, [r3, #8]
	results->rawlen = irparams.rawlen;
 8000dfc:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <ir_decode+0x54>)
 8000dfe:	785b      	ldrb	r3, [r3, #1]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	b21a      	sxth	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	819a      	strh	r2, [r3, #12]
	results->overflow = irparams.overflow;
 8000e08:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <ir_decode+0x54>)
 8000e0a:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	b21a      	sxth	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	81da      	strh	r2, [r3, #14]

	if(decodeHash(results)) return 1;
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f000 f87e 	bl	8000f18 <decodeHash>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <ir_decode+0x46>
 8000e22:	2301      	movs	r3, #1
 8000e24:	e002      	b.n	8000e2c <ir_decode+0x4c>
	ir_enableIRIn();
 8000e26:	f000 f809 	bl	8000e3c <ir_enableIRIn>
	return 0;
 8000e2a:	2300      	movs	r3, #0
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	2000008c 	.word	0x2000008c
 8000e38:	20000090 	.word	0x20000090

08000e3c <ir_enableIRIn>:

void ir_enableIRIn()
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 8000e40:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <ir_enableIRIn+0x24>)
 8000e42:	2202      	movs	r2, #2
 8000e44:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <ir_enableIRIn+0x24>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	705a      	strb	r2, [r3, #1]

	__HAL_TIM_SET_COUNTER(&TIMER_IR, 0x0000);
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <ir_enableIRIn+0x28>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2200      	movs	r2, #0
 8000e52:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&TIMER_IR);
 8000e54:	4803      	ldr	r0, [pc, #12]	; (8000e64 <ir_enableIRIn+0x28>)
 8000e56:	f002 f8db 	bl	8003010 <HAL_TIM_Base_Start_IT>
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	2000008c 	.word	0x2000008c
 8000e64:	200002dc 	.word	0x200002dc

08000e68 <ir_resume>:

void ir_resume() // Restart the ISR state machine
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <ir_resume+0x1c>)
 8000e6e:	2202      	movs	r2, #2
 8000e70:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <ir_resume+0x1c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	705a      	strb	r2, [r3, #1]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	2000008c 	.word	0x2000008c

08000e88 <compare>:

int16_t compare(uint16_t oldval, uint16_t newval)
{
 8000e88:	b5b0      	push	{r4, r5, r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	460a      	mov	r2, r1
 8000e92:	80fb      	strh	r3, [r7, #6]
 8000e94:	4613      	mov	r3, r2
 8000e96:	80bb      	strh	r3, [r7, #4]
	if(newval < oldval * .8) return 0;
 8000e98:	88bb      	ldrh	r3, [r7, #4]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fc74 	bl	8000788 <__aeabi_i2d>
 8000ea0:	4604      	mov	r4, r0
 8000ea2:	460d      	mov	r5, r1
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fc6e 	bl	8000788 <__aeabi_i2d>
 8000eac:	a318      	add	r3, pc, #96	; (adr r3, 8000f10 <compare+0x88>)
 8000eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb2:	f7ff f9ed 	bl	8000290 <__aeabi_dmul>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4620      	mov	r0, r4
 8000ebc:	4629      	mov	r1, r5
 8000ebe:	f7ff fd2d 	bl	800091c <__aeabi_dcmplt>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <compare+0x44>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	e01a      	b.n	8000f02 <compare+0x7a>
	else if(oldval < newval * .8) return 2;
 8000ecc:	88fb      	ldrh	r3, [r7, #6]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fc5a 	bl	8000788 <__aeabi_i2d>
 8000ed4:	4604      	mov	r4, r0
 8000ed6:	460d      	mov	r5, r1
 8000ed8:	88bb      	ldrh	r3, [r7, #4]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fc54 	bl	8000788 <__aeabi_i2d>
 8000ee0:	a30b      	add	r3, pc, #44	; (adr r3, 8000f10 <compare+0x88>)
 8000ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee6:	f7ff f9d3 	bl	8000290 <__aeabi_dmul>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	4620      	mov	r0, r4
 8000ef0:	4629      	mov	r1, r5
 8000ef2:	f7ff fd13 	bl	800091c <__aeabi_dcmplt>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <compare+0x78>
 8000efc:	2302      	movs	r3, #2
 8000efe:	e000      	b.n	8000f02 <compare+0x7a>
	else return 1;
 8000f00:	2301      	movs	r3, #1
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bdb0      	pop	{r4, r5, r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	f3af 8000 	nop.w
 8000f10:	9999999a 	.word	0x9999999a
 8000f14:	3fe99999 	.word	0x3fe99999

08000f18 <decodeHash>:

#define FNV_PRIME_32 16777619
#define FNV_BASIS_32 2166136261

int32_t decodeHash(decode_results *results)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	int32_t hash = FNV_BASIS_32;
 8000f20:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <decodeHash+0x90>)
 8000f22:	60fb      	str	r3, [r7, #12]

	if(results->rawlen < 6) return 0;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000f2a:	2b05      	cmp	r3, #5
 8000f2c:	dc01      	bgt.n	8000f32 <decodeHash+0x1a>
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e035      	b.n	8000f9e <decodeHash+0x86>

	for(int16_t i = 1; (i + 2) < results->rawlen; i++)
 8000f32:	2301      	movs	r3, #1
 8000f34:	817b      	strh	r3, [r7, #10]
 8000f36:	e023      	b.n	8000f80 <decodeHash+0x68>
	{
		int16_t value = compare(results->rawbuf[i], results->rawbuf[i+2]);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	4413      	add	r3, r2
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	b298      	uxth	r0, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f50:	3302      	adds	r3, #2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	4413      	add	r3, r2
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f7ff ff94 	bl	8000e88 <compare>
 8000f60:	4603      	mov	r3, r0
 8000f62:	813b      	strh	r3, [r7, #8]
		hash = (hash * FNV_PRIME_32) ^ value;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4a11      	ldr	r2, [pc, #68]	; (8000fac <decodeHash+0x94>)
 8000f68:	fb03 f202 	mul.w	r2, r3, r2
 8000f6c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f70:	4053      	eors	r3, r2
 8000f72:	60fb      	str	r3, [r7, #12]
	for(int16_t i = 1; (i + 2) < results->rawlen; i++)
 8000f74:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	817b      	strh	r3, [r7, #10]
 8000f80:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f84:	3302      	adds	r3, #2
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	dbd3      	blt.n	8000f38 <decodeHash+0x20>
	}

	results->value = hash;
 8000f90:	68fa      	ldr	r2, [r7, #12]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	601a      	str	r2, [r3, #0]
	results->bits = 32;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2220      	movs	r2, #32
 8000f9a:	809a      	strh	r2, [r3, #4]
	return 1;
 8000f9c:	2301      	movs	r3, #1
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	811c9dc5 	.word	0x811c9dc5
 8000fac:	01000193 	.word	0x01000193

08000fb0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b094      	sub	sp, #80	; 0x50
 8000fb4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fb6:	f000 fccf 	bl	8001958 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fba:	f000 f867 	bl	800108c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fbe:	f000 fa05 	bl	80013cc <MX_GPIO_Init>
	MX_DMA_Init();
 8000fc2:	f000 f9e3 	bl	800138c <MX_DMA_Init>
	MX_TIM1_Init();
 8000fc6:	f000 f8cb 	bl	8001160 <MX_TIM1_Init>
	MX_TIM4_Init();
 8000fca:	f000 f969 	bl	80012a0 <MX_TIM4_Init>
	MX_USART1_UART_Init();
 8000fce:	f000 f9b3 	bl	8001338 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	ir_enableIRIn();
 8000fd2:	f7ff ff33 	bl	8000e3c <ir_enableIRIn>
	char trans_str[64] = { 0, };
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	f107 0308 	add.w	r3, r7, #8
 8000fde:	223c      	movs	r2, #60	; 0x3c
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f003 fdaa 	bl	8004b3c <memset>
	snprintf(trans_str, 64, "IR-receiver\r\n");
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	4a24      	ldr	r2, [pc, #144]	; (800107c <main+0xcc>)
 8000fec:	2140      	movs	r1, #64	; 0x40
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f003 fdac 	bl	8004b4c <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) trans_str, strlen(trans_str), 100);
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff f8f2 	bl	80001e0 <strlen>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	1d39      	adds	r1, r7, #4
 8001002:	2364      	movs	r3, #100	; 0x64
 8001004:	481e      	ldr	r0, [pc, #120]	; (8001080 <main+0xd0>)
 8001006:	f003 f9fa 	bl	80043fe <HAL_UART_Transmit>

	for (uint16_t i = 0; i < 40; i++) {
 800100a:	2300      	movs	r3, #0
 800100c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001010:	e00d      	b.n	800102e <main+0x7e>
		ws2812_pixel_rgb_to_buf_dma(1, 0, 1, i);
 8001012:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001016:	2201      	movs	r2, #1
 8001018:	2100      	movs	r1, #0
 800101a:	2001      	movs	r0, #1
 800101c:	f000 fbc8 	bl	80017b0 <ws2812_pixel_rgb_to_buf_dma>

		ws2812_light();
 8001020:	f000 fc60 	bl	80018e4 <ws2812_light>
	for (uint16_t i = 0; i < 40; i++) {
 8001024:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001028:	3301      	adds	r3, #1
 800102a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800102e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001032:	2b27      	cmp	r3, #39	; 0x27
 8001034:	d9ed      	bls.n	8001012 <main+0x62>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (ir_decode(&results)) {
 8001036:	4813      	ldr	r0, [pc, #76]	; (8001084 <main+0xd4>)
 8001038:	f7ff fed2 	bl	8000de0 <ir_decode>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d0f9      	beq.n	8001036 <main+0x86>
			snprintf(trans_str, 64, "Code: HEX %p DEC %lu\r\n",
					(void*) results.value, results.value);
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <main+0xd4>)
 8001044:	681b      	ldr	r3, [r3, #0]
			snprintf(trans_str, 64, "Code: HEX %p DEC %lu\r\n",
 8001046:	461a      	mov	r2, r3
 8001048:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <main+0xd4>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	1d38      	adds	r0, r7, #4
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	4613      	mov	r3, r2
 8001052:	4a0d      	ldr	r2, [pc, #52]	; (8001088 <main+0xd8>)
 8001054:	2140      	movs	r1, #64	; 0x40
 8001056:	f003 fd79 	bl	8004b4c <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) trans_str, strlen(trans_str),
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff f8bf 	bl	80001e0 <strlen>
 8001062:	4603      	mov	r3, r0
 8001064:	b29a      	uxth	r2, r3
 8001066:	1d39      	adds	r1, r7, #4
 8001068:	2364      	movs	r3, #100	; 0x64
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <main+0xd0>)
 800106c:	f003 f9c7 	bl	80043fe <HAL_UART_Transmit>
					100);
			HAL_Delay(50);
 8001070:	2032      	movs	r0, #50	; 0x32
 8001072:	f000 fce3 	bl	8001a3c <HAL_Delay>
			ir_resume();
 8001076:	f7ff fef7 	bl	8000e68 <ir_resume>
		if (ir_decode(&results)) {
 800107a:	e7dc      	b.n	8001036 <main+0x86>
 800107c:	08005468 	.word	0x08005468
 8001080:	20000384 	.word	0x20000384
 8001084:	200003c8 	.word	0x200003c8
 8001088:	08005478 	.word	0x08005478

0800108c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b094      	sub	sp, #80	; 0x50
 8001090:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001092:	f107 0320 	add.w	r3, r7, #32
 8001096:	2230      	movs	r2, #48	; 0x30
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f003 fd4e 	bl	8004b3c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	4b28      	ldr	r3, [pc, #160]	; (8001158 <SystemClock_Config+0xcc>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	4a27      	ldr	r2, [pc, #156]	; (8001158 <SystemClock_Config+0xcc>)
 80010ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010be:	6413      	str	r3, [r2, #64]	; 0x40
 80010c0:	4b25      	ldr	r3, [pc, #148]	; (8001158 <SystemClock_Config+0xcc>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010cc:	2300      	movs	r3, #0
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	4b22      	ldr	r3, [pc, #136]	; (800115c <SystemClock_Config+0xd0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010d8:	4a20      	ldr	r2, [pc, #128]	; (800115c <SystemClock_Config+0xd0>)
 80010da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4b1e      	ldr	r3, [pc, #120]	; (800115c <SystemClock_Config+0xd0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ec:	2302      	movs	r3, #2
 80010ee:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f0:	2301      	movs	r3, #1
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010f4:	2310      	movs	r3, #16
 80010f6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f8:	2302      	movs	r3, #2
 80010fa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010fc:	2300      	movs	r3, #0
 80010fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001100:	2308      	movs	r3, #8
 8001102:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 8001104:	2354      	movs	r3, #84	; 0x54
 8001106:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001108:	2302      	movs	r3, #2
 800110a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800110c:	2304      	movs	r3, #4
 800110e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001110:	f107 0320 	add.w	r3, r7, #32
 8001114:	4618      	mov	r0, r3
 8001116:	f001 fad3 	bl	80026c0 <HAL_RCC_OscConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0x98>
		Error_Handler();
 8001120:	f000 f99e 	bl	8001460 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001124:	230f      	movs	r3, #15
 8001126:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001128:	2302      	movs	r3, #2
 800112a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001134:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800113a:	f107 030c 	add.w	r3, r7, #12
 800113e:	2102      	movs	r1, #2
 8001140:	4618      	mov	r0, r3
 8001142:	f001 fd35 	bl	8002bb0 <HAL_RCC_ClockConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0xc4>
		Error_Handler();
 800114c:	f000 f988 	bl	8001460 <Error_Handler>
	}
}
 8001150:	bf00      	nop
 8001152:	3750      	adds	r7, #80	; 0x50
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40023800 	.word	0x40023800
 800115c:	40007000 	.word	0x40007000

08001160 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b096      	sub	sp, #88	; 0x58
 8001164:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001166:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001174:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800117e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]
 800118e:	615a      	str	r2, [r3, #20]
 8001190:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2220      	movs	r2, #32
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f003 fccf 	bl	8004b3c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800119e:	4b3e      	ldr	r3, [pc, #248]	; (8001298 <MX_TIM1_Init+0x138>)
 80011a0:	4a3e      	ldr	r2, [pc, #248]	; (800129c <MX_TIM1_Init+0x13c>)
 80011a2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80011a4:	4b3c      	ldr	r3, [pc, #240]	; (8001298 <MX_TIM1_Init+0x138>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011aa:	4b3b      	ldr	r3, [pc, #236]	; (8001298 <MX_TIM1_Init+0x138>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 104;
 80011b0:	4b39      	ldr	r3, [pc, #228]	; (8001298 <MX_TIM1_Init+0x138>)
 80011b2:	2268      	movs	r2, #104	; 0x68
 80011b4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b6:	4b38      	ldr	r3, [pc, #224]	; (8001298 <MX_TIM1_Init+0x138>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80011bc:	4b36      	ldr	r3, [pc, #216]	; (8001298 <MX_TIM1_Init+0x138>)
 80011be:	2200      	movs	r2, #0
 80011c0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c2:	4b35      	ldr	r3, [pc, #212]	; (8001298 <MX_TIM1_Init+0x138>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80011c8:	4833      	ldr	r0, [pc, #204]	; (8001298 <MX_TIM1_Init+0x138>)
 80011ca:	f001 fed1 	bl	8002f70 <HAL_TIM_Base_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM1_Init+0x78>
		Error_Handler();
 80011d4:	f000 f944 	bl	8001460 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011dc:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80011de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011e2:	4619      	mov	r1, r3
 80011e4:	482c      	ldr	r0, [pc, #176]	; (8001298 <MX_TIM1_Init+0x138>)
 80011e6:	f002 fb49 	bl	800387c <HAL_TIM_ConfigClockSource>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM1_Init+0x94>
		Error_Handler();
 80011f0:	f000 f936 	bl	8001460 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80011f4:	4828      	ldr	r0, [pc, #160]	; (8001298 <MX_TIM1_Init+0x138>)
 80011f6:	f001 ff6d 	bl	80030d4 <HAL_TIM_PWM_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM1_Init+0xa4>
		Error_Handler();
 8001200:	f000 f92e 	bl	8001460 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800120c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001210:	4619      	mov	r1, r3
 8001212:	4821      	ldr	r0, [pc, #132]	; (8001298 <MX_TIM1_Init+0x138>)
 8001214:	f002 ffd2 	bl	80041bc <HAL_TIMEx_MasterConfigSynchronization>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM1_Init+0xc2>
			!= HAL_OK) {
		Error_Handler();
 800121e:	f000 f91f 	bl	8001460 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001222:	2360      	movs	r3, #96	; 0x60
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800122a:	2300      	movs	r3, #0
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800122e:	2300      	movs	r3, #0
 8001230:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800123a:	2300      	movs	r3, #0
 800123c:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 800123e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001242:	2200      	movs	r2, #0
 8001244:	4619      	mov	r1, r3
 8001246:	4814      	ldr	r0, [pc, #80]	; (8001298 <MX_TIM1_Init+0x138>)
 8001248:	f002 fa56 	bl	80036f8 <HAL_TIM_PWM_ConfigChannel>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM1_Init+0xf6>
			!= HAL_OK) {
		Error_Handler();
 8001252:	f000 f905 	bl	8001460 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800126a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800126e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	4619      	mov	r1, r3
 8001278:	4807      	ldr	r0, [pc, #28]	; (8001298 <MX_TIM1_Init+0x138>)
 800127a:	f003 f80d 	bl	8004298 <HAL_TIMEx_ConfigBreakDeadTime>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM1_Init+0x128>
			!= HAL_OK) {
		Error_Handler();
 8001284:	f000 f8ec 	bl	8001460 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001288:	4803      	ldr	r0, [pc, #12]	; (8001298 <MX_TIM1_Init+0x138>)
 800128a:	f000 f989 	bl	80015a0 <HAL_TIM_MspPostInit>

}
 800128e:	bf00      	nop
 8001290:	3758      	adds	r7, #88	; 0x58
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000294 	.word	0x20000294
 800129c:	40010000 	.word	0x40010000

080012a0 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80012b4:	463b      	mov	r3, r7
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80012bc:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <MX_TIM4_Init+0x90>)
 80012be:	4a1d      	ldr	r2, [pc, #116]	; (8001334 <MX_TIM4_Init+0x94>)
 80012c0:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 83;
 80012c2:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <MX_TIM4_Init+0x90>)
 80012c4:	2253      	movs	r2, #83	; 0x53
 80012c6:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c8:	4b19      	ldr	r3, [pc, #100]	; (8001330 <MX_TIM4_Init+0x90>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 49;
 80012ce:	4b18      	ldr	r3, [pc, #96]	; (8001330 <MX_TIM4_Init+0x90>)
 80012d0:	2231      	movs	r2, #49	; 0x31
 80012d2:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <MX_TIM4_Init+0x90>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MX_TIM4_Init+0x90>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 80012e0:	4813      	ldr	r0, [pc, #76]	; (8001330 <MX_TIM4_Init+0x90>)
 80012e2:	f001 fe45 	bl	8002f70 <HAL_TIM_Base_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM4_Init+0x50>
		Error_Handler();
 80012ec:	f000 f8b8 	bl	8001460 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	4619      	mov	r1, r3
 80012fc:	480c      	ldr	r0, [pc, #48]	; (8001330 <MX_TIM4_Init+0x90>)
 80012fe:	f002 fabd 	bl	800387c <HAL_TIM_ConfigClockSource>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM4_Init+0x6c>
		Error_Handler();
 8001308:	f000 f8aa 	bl	8001460 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001314:	463b      	mov	r3, r7
 8001316:	4619      	mov	r1, r3
 8001318:	4805      	ldr	r0, [pc, #20]	; (8001330 <MX_TIM4_Init+0x90>)
 800131a:	f002 ff4f 	bl	80041bc <HAL_TIMEx_MasterConfigSynchronization>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM4_Init+0x88>
			!= HAL_OK) {
		Error_Handler();
 8001324:	f000 f89c 	bl	8001460 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001328:	bf00      	nop
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	200002dc 	.word	0x200002dc
 8001334:	40000800 	.word	0x40000800

08001338 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <MX_USART1_UART_Init+0x4c>)
 800133e:	4a12      	ldr	r2, [pc, #72]	; (8001388 <MX_USART1_UART_Init+0x50>)
 8001340:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <MX_USART1_UART_Init+0x4c>)
 8001344:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001348:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MX_USART1_UART_Init+0x4c>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <MX_USART1_UART_Init+0x4c>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <MX_USART1_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MX_USART1_UART_Init+0x4c>)
 800135e:	220c      	movs	r2, #12
 8001360:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <MX_USART1_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_USART1_UART_Init+0x4c>)
 800136a:	2200      	movs	r2, #0
 800136c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_USART1_UART_Init+0x4c>)
 8001370:	f002 fff8 	bl	8004364 <HAL_UART_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800137a:	f000 f871 	bl	8001460 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000384 	.word	0x20000384
 8001388:	40011000 	.word	0x40011000

0800138c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <MX_DMA_Init+0x3c>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <MX_DMA_Init+0x3c>)
 800139c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <MX_DMA_Init+0x3c>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	2039      	movs	r0, #57	; 0x39
 80013b4:	f000 fc41 	bl	8001c3a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80013b8:	2039      	movs	r0, #57	; 0x39
 80013ba:	f000 fc5a 	bl	8001c72 <HAL_NVIC_EnableIRQ>

}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800

080013cc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	4b1c      	ldr	r3, [pc, #112]	; (8001458 <MX_GPIO_Init+0x8c>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a1b      	ldr	r2, [pc, #108]	; (8001458 <MX_GPIO_Init+0x8c>)
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b19      	ldr	r3, [pc, #100]	; (8001458 <MX_GPIO_Init+0x8c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <MX_GPIO_Init+0x8c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a14      	ldr	r2, [pc, #80]	; (8001458 <MX_GPIO_Init+0x8c>)
 8001408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <MX_GPIO_Init+0x8c>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <MX_GPIO_Init+0x8c>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <MX_GPIO_Init+0x8c>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <MX_GPIO_Init+0x8c>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : IR_REC_Pin */
	GPIO_InitStruct.Pin = IR_REC_Pin;
 8001436:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800143a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143c:	2300      	movs	r3, #0
 800143e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(IR_REC_GPIO_Port, &GPIO_InitStruct);
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	4619      	mov	r1, r3
 800144a:	4804      	ldr	r0, [pc, #16]	; (800145c <MX_GPIO_Init+0x90>)
 800144c:	f000 ff9c 	bl	8002388 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001450:	bf00      	nop
 8001452:	3720      	adds	r7, #32
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40023800 	.word	0x40023800
 800145c:	40020800 	.word	0x40020800

08001460 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001464:	b672      	cpsid	i
}
 8001466:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001468:	e7fe      	b.n	8001468 <Error_Handler+0x8>
	...

0800146c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <HAL_MspInit+0x4c>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	4a0f      	ldr	r2, [pc, #60]	; (80014b8 <HAL_MspInit+0x4c>)
 800147c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001480:	6453      	str	r3, [r2, #68]	; 0x44
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <HAL_MspInit+0x4c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_MspInit+0x4c>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <HAL_MspInit+0x4c>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_MspInit+0x4c>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800

080014bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a30      	ldr	r2, [pc, #192]	; (800158c <HAL_TIM_Base_MspInit+0xd0>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d13f      	bne.n	800154e <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b2f      	ldr	r3, [pc, #188]	; (8001590 <HAL_TIM_Base_MspInit+0xd4>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	4a2e      	ldr	r2, [pc, #184]	; (8001590 <HAL_TIM_Base_MspInit+0xd4>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6453      	str	r3, [r2, #68]	; 0x44
 80014de:	4b2c      	ldr	r3, [pc, #176]	; (8001590 <HAL_TIM_Base_MspInit+0xd4>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80014ea:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <HAL_TIM_Base_MspInit+0xd8>)
 80014ec:	4a2a      	ldr	r2, [pc, #168]	; (8001598 <HAL_TIM_Base_MspInit+0xdc>)
 80014ee:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80014f0:	4b28      	ldr	r3, [pc, #160]	; (8001594 <HAL_TIM_Base_MspInit+0xd8>)
 80014f2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80014f6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014f8:	4b26      	ldr	r3, [pc, #152]	; (8001594 <HAL_TIM_Base_MspInit+0xd8>)
 80014fa:	2240      	movs	r2, #64	; 0x40
 80014fc:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014fe:	4b25      	ldr	r3, [pc, #148]	; (8001594 <HAL_TIM_Base_MspInit+0xd8>)
 8001500:	2200      	movs	r2, #0
 8001502:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001504:	4b23      	ldr	r3, [pc, #140]	; (8001594 <HAL_TIM_Base_MspInit+0xd8>)
 8001506:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800150a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800150c:	4b21      	ldr	r3, [pc, #132]	; (8001594 <HAL_TIM_Base_MspInit+0xd8>)
 800150e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001512:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001514:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <HAL_TIM_Base_MspInit+0xd8>)
 8001516:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800151a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800151c:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <HAL_TIM_Base_MspInit+0xd8>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001522:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <HAL_TIM_Base_MspInit+0xd8>)
 8001524:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001528:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800152a:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <HAL_TIM_Base_MspInit+0xd8>)
 800152c:	2200      	movs	r2, #0
 800152e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001530:	4818      	ldr	r0, [pc, #96]	; (8001594 <HAL_TIM_Base_MspInit+0xd8>)
 8001532:	f000 fbb9 	bl	8001ca8 <HAL_DMA_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 800153c:	f7ff ff90 	bl	8001460 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a14      	ldr	r2, [pc, #80]	; (8001594 <HAL_TIM_Base_MspInit+0xd8>)
 8001544:	625a      	str	r2, [r3, #36]	; 0x24
 8001546:	4a13      	ldr	r2, [pc, #76]	; (8001594 <HAL_TIM_Base_MspInit+0xd8>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800154c:	e01a      	b.n	8001584 <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM4)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a12      	ldr	r2, [pc, #72]	; (800159c <HAL_TIM_Base_MspInit+0xe0>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d115      	bne.n	8001584 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <HAL_TIM_Base_MspInit+0xd4>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <HAL_TIM_Base_MspInit+0xd4>)
 8001562:	f043 0304 	orr.w	r3, r3, #4
 8001566:	6413      	str	r3, [r2, #64]	; 0x40
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_TIM_Base_MspInit+0xd4>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001574:	2200      	movs	r2, #0
 8001576:	2100      	movs	r1, #0
 8001578:	201e      	movs	r0, #30
 800157a:	f000 fb5e 	bl	8001c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800157e:	201e      	movs	r0, #30
 8001580:	f000 fb77 	bl	8001c72 <HAL_NVIC_EnableIRQ>
}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40010000 	.word	0x40010000
 8001590:	40023800 	.word	0x40023800
 8001594:	20000324 	.word	0x20000324
 8001598:	40026428 	.word	0x40026428
 800159c:	40000800 	.word	0x40000800

080015a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a12      	ldr	r2, [pc, #72]	; (8001608 <HAL_TIM_MspPostInit+0x68>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d11e      	bne.n	8001600 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_TIM_MspPostInit+0x6c>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a10      	ldr	r2, [pc, #64]	; (800160c <HAL_TIM_MspPostInit+0x6c>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_TIM_MspPostInit+0x6c>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015f0:	2301      	movs	r3, #1
 80015f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	4619      	mov	r1, r3
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <HAL_TIM_MspPostInit+0x70>)
 80015fc:	f000 fec4 	bl	8002388 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001600:	bf00      	nop
 8001602:	3720      	adds	r7, #32
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40010000 	.word	0x40010000
 800160c:	40023800 	.word	0x40023800
 8001610:	40020000 	.word	0x40020000

08001614 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	; 0x28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a19      	ldr	r2, [pc, #100]	; (8001698 <HAL_UART_MspInit+0x84>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d12c      	bne.n	8001690 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <HAL_UART_MspInit+0x88>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	4a17      	ldr	r2, [pc, #92]	; (800169c <HAL_UART_MspInit+0x88>)
 8001640:	f043 0310 	orr.w	r3, r3, #16
 8001644:	6453      	str	r3, [r2, #68]	; 0x44
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_UART_MspInit+0x88>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f003 0310 	and.w	r3, r3, #16
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_UART_MspInit+0x88>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a10      	ldr	r2, [pc, #64]	; (800169c <HAL_UART_MspInit+0x88>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <HAL_UART_MspInit+0x88>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800166e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167c:	2303      	movs	r3, #3
 800167e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001680:	2307      	movs	r3, #7
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <HAL_UART_MspInit+0x8c>)
 800168c:	f000 fe7c 	bl	8002388 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001690:	bf00      	nop
 8001692:	3728      	adds	r7, #40	; 0x28
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40011000 	.word	0x40011000
 800169c:	40023800 	.word	0x40023800
 80016a0:	40020000 	.word	0x40020000

080016a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <NMI_Handler+0x4>

080016aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <HardFault_Handler+0x4>

080016b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <MemManage_Handler+0x4>

080016b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <BusFault_Handler+0x4>

080016bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <UsageFault_Handler+0x4>

080016c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f0:	f000 f984 	bl	80019fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <TIM4_IRQHandler+0x10>)
 80016fe:	f001 fef3 	bl	80034e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200002dc 	.word	0x200002dc

0800170c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001710:	4802      	ldr	r0, [pc, #8]	; (800171c <DMA2_Stream1_IRQHandler+0x10>)
 8001712:	f000 fbcf 	bl	8001eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000324 	.word	0x20000324

08001720 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001728:	4a14      	ldr	r2, [pc, #80]	; (800177c <_sbrk+0x5c>)
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <_sbrk+0x60>)
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <_sbrk+0x64>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d102      	bne.n	8001742 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <_sbrk+0x64>)
 800173e:	4a12      	ldr	r2, [pc, #72]	; (8001788 <_sbrk+0x68>)
 8001740:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <_sbrk+0x64>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	429a      	cmp	r2, r3
 800174e:	d207      	bcs.n	8001760 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001750:	f003 f9ca 	bl	8004ae8 <__errno>
 8001754:	4603      	mov	r3, r0
 8001756:	220c      	movs	r2, #12
 8001758:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800175a:	f04f 33ff 	mov.w	r3, #4294967295
 800175e:	e009      	b.n	8001774 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001760:	4b08      	ldr	r3, [pc, #32]	; (8001784 <_sbrk+0x64>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001766:	4b07      	ldr	r3, [pc, #28]	; (8001784 <_sbrk+0x64>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	4a05      	ldr	r2, [pc, #20]	; (8001784 <_sbrk+0x64>)
 8001770:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001772:	68fb      	ldr	r3, [r7, #12]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20010000 	.word	0x20010000
 8001780:	00000400 	.word	0x00000400
 8001784:	200003d8 	.word	0x200003d8
 8001788:	20001530 	.word	0x20001530

0800178c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <SystemInit+0x20>)
 8001792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001796:	4a05      	ldr	r2, [pc, #20]	; (80017ac <SystemInit+0x20>)
 8001798:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800179c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <ws2812_pixel_rgb_to_buf_dma>:

extern TIM_HandleTypeDef TIMER_WS2812;

uint16_t BUF_DMA[ARRAY_LEN] = { 0 };

void ws2812_pixel_rgb_to_buf_dma(uint8_t Rpixel, uint8_t Gpixel, uint8_t Bpixel, uint16_t posX) {
 80017b0:	b490      	push	{r4, r7}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4604      	mov	r4, r0
 80017b8:	4608      	mov	r0, r1
 80017ba:	4611      	mov	r1, r2
 80017bc:	461a      	mov	r2, r3
 80017be:	4623      	mov	r3, r4
 80017c0:	71fb      	strb	r3, [r7, #7]
 80017c2:	4603      	mov	r3, r0
 80017c4:	71bb      	strb	r3, [r7, #6]
 80017c6:	460b      	mov	r3, r1
 80017c8:	717b      	strb	r3, [r7, #5]
 80017ca:	4613      	mov	r3, r2
 80017cc:	807b      	strh	r3, [r7, #2]
	volatile uint16_t i;
	for (i = 0; i < 8; i++) {
 80017ce:	2300      	movs	r3, #0
 80017d0:	81fb      	strh	r3, [r7, #14]
 80017d2:	e07a      	b.n	80018ca <ws2812_pixel_rgb_to_buf_dma+0x11a>
		if (BitIsSet(Rpixel,(7 - i)) == 1)
 80017d4:	79fa      	ldrb	r2, [r7, #7]
 80017d6:	89fb      	ldrh	r3, [r7, #14]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	f1c3 0307 	rsb	r3, r3, #7
 80017de:	fa42 f303 	asr.w	r3, r2, r3
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00e      	beq.n	8001808 <ws2812_pixel_rgb_to_buf_dma+0x58>
			BUF_DMA[DELAY_LEN + posX * 24 + i + 8] = H;
 80017ea:	887a      	ldrh	r2, [r7, #2]
 80017ec:	4613      	mov	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	3330      	adds	r3, #48	; 0x30
 80017f6:	89fa      	ldrh	r2, [r7, #14]
 80017f8:	b292      	uxth	r2, r2
 80017fa:	4413      	add	r3, r2
 80017fc:	3308      	adds	r3, #8
 80017fe:	4a38      	ldr	r2, [pc, #224]	; (80018e0 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8001800:	2141      	movs	r1, #65	; 0x41
 8001802:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001806:	e00d      	b.n	8001824 <ws2812_pixel_rgb_to_buf_dma+0x74>
		else
			BUF_DMA[DELAY_LEN + posX * 24 + i + 8] = L;
 8001808:	887a      	ldrh	r2, [r7, #2]
 800180a:	4613      	mov	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4413      	add	r3, r2
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	3330      	adds	r3, #48	; 0x30
 8001814:	89fa      	ldrh	r2, [r7, #14]
 8001816:	b292      	uxth	r2, r2
 8001818:	4413      	add	r3, r2
 800181a:	3308      	adds	r3, #8
 800181c:	4a30      	ldr	r2, [pc, #192]	; (80018e0 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 800181e:	211a      	movs	r1, #26
 8001820:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		if (BitIsSet(Gpixel,(7 - i)) == 1)
 8001824:	79ba      	ldrb	r2, [r7, #6]
 8001826:	89fb      	ldrh	r3, [r7, #14]
 8001828:	b29b      	uxth	r3, r3
 800182a:	f1c3 0307 	rsb	r3, r3, #7
 800182e:	fa42 f303 	asr.w	r3, r2, r3
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00d      	beq.n	8001856 <ws2812_pixel_rgb_to_buf_dma+0xa6>
			BUF_DMA[DELAY_LEN + posX * 24 + i + 0] = H;
 800183a:	887a      	ldrh	r2, [r7, #2]
 800183c:	4613      	mov	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	3330      	adds	r3, #48	; 0x30
 8001846:	89fa      	ldrh	r2, [r7, #14]
 8001848:	b292      	uxth	r2, r2
 800184a:	4413      	add	r3, r2
 800184c:	4a24      	ldr	r2, [pc, #144]	; (80018e0 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 800184e:	2141      	movs	r1, #65	; 0x41
 8001850:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001854:	e00c      	b.n	8001870 <ws2812_pixel_rgb_to_buf_dma+0xc0>
		else
			BUF_DMA[DELAY_LEN + posX * 24 + i + 0] = L;
 8001856:	887a      	ldrh	r2, [r7, #2]
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	3330      	adds	r3, #48	; 0x30
 8001862:	89fa      	ldrh	r2, [r7, #14]
 8001864:	b292      	uxth	r2, r2
 8001866:	4413      	add	r3, r2
 8001868:	4a1d      	ldr	r2, [pc, #116]	; (80018e0 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 800186a:	211a      	movs	r1, #26
 800186c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		if (BitIsSet(Bpixel,(7 - i)) == 1)
 8001870:	797a      	ldrb	r2, [r7, #5]
 8001872:	89fb      	ldrh	r3, [r7, #14]
 8001874:	b29b      	uxth	r3, r3
 8001876:	f1c3 0307 	rsb	r3, r3, #7
 800187a:	fa42 f303 	asr.w	r3, r2, r3
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00e      	beq.n	80018a4 <ws2812_pixel_rgb_to_buf_dma+0xf4>
			BUF_DMA[DELAY_LEN + posX * 24 + i + 16] = H;
 8001886:	887a      	ldrh	r2, [r7, #2]
 8001888:	4613      	mov	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4413      	add	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	3330      	adds	r3, #48	; 0x30
 8001892:	89fa      	ldrh	r2, [r7, #14]
 8001894:	b292      	uxth	r2, r2
 8001896:	4413      	add	r3, r2
 8001898:	3310      	adds	r3, #16
 800189a:	4a11      	ldr	r2, [pc, #68]	; (80018e0 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 800189c:	2141      	movs	r1, #65	; 0x41
 800189e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80018a2:	e00d      	b.n	80018c0 <ws2812_pixel_rgb_to_buf_dma+0x110>
		else
			BUF_DMA[DELAY_LEN + posX * 24 + i + 16] = L;
 80018a4:	887a      	ldrh	r2, [r7, #2]
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	3330      	adds	r3, #48	; 0x30
 80018b0:	89fa      	ldrh	r2, [r7, #14]
 80018b2:	b292      	uxth	r2, r2
 80018b4:	4413      	add	r3, r2
 80018b6:	3310      	adds	r3, #16
 80018b8:	4a09      	ldr	r2, [pc, #36]	; (80018e0 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 80018ba:	211a      	movs	r1, #26
 80018bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < 8; i++) {
 80018c0:	89fb      	ldrh	r3, [r7, #14]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	3301      	adds	r3, #1
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	81fb      	strh	r3, [r7, #14]
 80018ca:	89fb      	ldrh	r3, [r7, #14]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	2b07      	cmp	r3, #7
 80018d0:	d980      	bls.n	80017d4 <ws2812_pixel_rgb_to_buf_dma+0x24>
	}
}
 80018d2:	bf00      	nop
 80018d4:	bf00      	nop
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc90      	pop	{r4, r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	200003dc 	.word	0x200003dc

080018e4 <ws2812_light>:

void ws2812_light(void) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&TIMER_WS2812, TIMER_WS2812_CH, (uint32_t*) &BUF_DMA, ARRAY_LEN *2);
 80018e8:	f241 1310 	movw	r3, #4368	; 0x1110
 80018ec:	4a03      	ldr	r2, [pc, #12]	; (80018fc <ws2812_light+0x18>)
 80018ee:	2100      	movs	r1, #0
 80018f0:	4803      	ldr	r0, [pc, #12]	; (8001900 <ws2812_light+0x1c>)
 80018f2:	f001 fc49 	bl	8003188 <HAL_TIM_PWM_Start_DMA>
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200003dc 	.word	0x200003dc
 8001900:	20000294 	.word	0x20000294

08001904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800193c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001908:	480d      	ldr	r0, [pc, #52]	; (8001940 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800190a:	490e      	ldr	r1, [pc, #56]	; (8001944 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800190c:	4a0e      	ldr	r2, [pc, #56]	; (8001948 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800190e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001910:	e002      	b.n	8001918 <LoopCopyDataInit>

08001912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001916:	3304      	adds	r3, #4

08001918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800191c:	d3f9      	bcc.n	8001912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191e:	4a0b      	ldr	r2, [pc, #44]	; (800194c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001920:	4c0b      	ldr	r4, [pc, #44]	; (8001950 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001924:	e001      	b.n	800192a <LoopFillZerobss>

08001926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001928:	3204      	adds	r2, #4

0800192a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800192c:	d3fb      	bcc.n	8001926 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800192e:	f7ff ff2d 	bl	800178c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001932:	f003 f8df 	bl	8004af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001936:	f7ff fb3b 	bl	8000fb0 <main>
  bx  lr    
 800193a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800193c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001944:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001948:	080054f4 	.word	0x080054f4
  ldr r2, =_sbss
 800194c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001950:	20001530 	.word	0x20001530

08001954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001954:	e7fe      	b.n	8001954 <ADC_IRQHandler>
	...

08001958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800195c:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <HAL_Init+0x40>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0d      	ldr	r2, [pc, #52]	; (8001998 <HAL_Init+0x40>)
 8001962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001966:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001968:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <HAL_Init+0x40>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <HAL_Init+0x40>)
 800196e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001972:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <HAL_Init+0x40>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a07      	ldr	r2, [pc, #28]	; (8001998 <HAL_Init+0x40>)
 800197a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001980:	2003      	movs	r0, #3
 8001982:	f000 f94f 	bl	8001c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001986:	200f      	movs	r0, #15
 8001988:	f000 f808 	bl	800199c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800198c:	f7ff fd6e 	bl	800146c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40023c00 	.word	0x40023c00

0800199c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_InitTick+0x54>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_InitTick+0x58>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4619      	mov	r1, r3
 80019ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 f967 	bl	8001c8e <HAL_SYSTICK_Config>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e00e      	b.n	80019e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b0f      	cmp	r3, #15
 80019ce:	d80a      	bhi.n	80019e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d0:	2200      	movs	r2, #0
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	f000 f92f 	bl	8001c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019dc:	4a06      	ldr	r2, [pc, #24]	; (80019f8 <HAL_InitTick+0x5c>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	e000      	b.n	80019e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000000 	.word	0x20000000
 80019f4:	20000008 	.word	0x20000008
 80019f8:	20000004 	.word	0x20000004

080019fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_IncTick+0x20>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_IncTick+0x24>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <HAL_IncTick+0x24>)
 8001a0e:	6013      	str	r3, [r2, #0]
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20000008 	.word	0x20000008
 8001a20:	2000151c 	.word	0x2000151c

08001a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return uwTick;
 8001a28:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <HAL_GetTick+0x14>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	2000151c 	.word	0x2000151c

08001a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a44:	f7ff ffee 	bl	8001a24 <HAL_GetTick>
 8001a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a54:	d005      	beq.n	8001a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <HAL_Delay+0x44>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4413      	add	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a62:	bf00      	nop
 8001a64:	f7ff ffde 	bl	8001a24 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d8f7      	bhi.n	8001a64 <HAL_Delay+0x28>
  {
  }
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000008 	.word	0x20000008

08001a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab6:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	60d3      	str	r3, [r2, #12]
}
 8001abc:	bf00      	nop
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad0:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	0a1b      	lsrs	r3, r3, #8
 8001ad6:	f003 0307 	and.w	r3, r3, #7
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	db0b      	blt.n	8001b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	f003 021f 	and.w	r2, r3, #31
 8001b00:	4907      	ldr	r1, [pc, #28]	; (8001b20 <__NVIC_EnableIRQ+0x38>)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	095b      	lsrs	r3, r3, #5
 8001b08:	2001      	movs	r0, #1
 8001b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000e100 	.word	0xe000e100

08001b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	6039      	str	r1, [r7, #0]
 8001b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	db0a      	blt.n	8001b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	490c      	ldr	r1, [pc, #48]	; (8001b70 <__NVIC_SetPriority+0x4c>)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	0112      	lsls	r2, r2, #4
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	440b      	add	r3, r1
 8001b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b4c:	e00a      	b.n	8001b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	4908      	ldr	r1, [pc, #32]	; (8001b74 <__NVIC_SetPriority+0x50>)
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	3b04      	subs	r3, #4
 8001b5c:	0112      	lsls	r2, r2, #4
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	440b      	add	r3, r1
 8001b62:	761a      	strb	r2, [r3, #24]
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000e100 	.word	0xe000e100
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b089      	sub	sp, #36	; 0x24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f1c3 0307 	rsb	r3, r3, #7
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	bf28      	it	cs
 8001b96:	2304      	movcs	r3, #4
 8001b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	2b06      	cmp	r3, #6
 8001ba0:	d902      	bls.n	8001ba8 <NVIC_EncodePriority+0x30>
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3b03      	subs	r3, #3
 8001ba6:	e000      	b.n	8001baa <NVIC_EncodePriority+0x32>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43da      	mvns	r2, r3
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	401a      	ands	r2, r3
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bca:	43d9      	mvns	r1, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd0:	4313      	orrs	r3, r2
         );
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3724      	adds	r7, #36	; 0x24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf0:	d301      	bcc.n	8001bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e00f      	b.n	8001c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bf6:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <SysTick_Config+0x40>)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bfe:	210f      	movs	r1, #15
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295
 8001c04:	f7ff ff8e 	bl	8001b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <SysTick_Config+0x40>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c0e:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <SysTick_Config+0x40>)
 8001c10:	2207      	movs	r2, #7
 8001c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	e000e010 	.word	0xe000e010

08001c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff ff29 	bl	8001a84 <__NVIC_SetPriorityGrouping>
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b086      	sub	sp, #24
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	4603      	mov	r3, r0
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
 8001c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c4c:	f7ff ff3e 	bl	8001acc <__NVIC_GetPriorityGrouping>
 8001c50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	68b9      	ldr	r1, [r7, #8]
 8001c56:	6978      	ldr	r0, [r7, #20]
 8001c58:	f7ff ff8e 	bl	8001b78 <NVIC_EncodePriority>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c62:	4611      	mov	r1, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff5d 	bl	8001b24 <__NVIC_SetPriority>
}
 8001c6a:	bf00      	nop
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	4603      	mov	r3, r0
 8001c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff31 	bl	8001ae8 <__NVIC_EnableIRQ>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff ffa2 	bl	8001be0 <SysTick_Config>
 8001c9c:	4603      	mov	r3, r0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cb4:	f7ff feb6 	bl	8001a24 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e099      	b.n	8001df8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0201 	bic.w	r2, r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ce4:	e00f      	b.n	8001d06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ce6:	f7ff fe9d 	bl	8001a24 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b05      	cmp	r3, #5
 8001cf2:	d908      	bls.n	8001d06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e078      	b.n	8001df8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1e8      	bne.n	8001ce6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	4b38      	ldr	r3, [pc, #224]	; (8001e00 <HAL_DMA_Init+0x158>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d107      	bne.n	8001d70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f023 0307 	bic.w	r3, r3, #7
 8001d86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d117      	bne.n	8001dca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00e      	beq.n	8001dca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 fa6f 	bl	8002290 <DMA_CheckFifoParam>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d008      	beq.n	8001dca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2240      	movs	r2, #64	; 0x40
 8001dbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e016      	b.n	8001df8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 fa26 	bl	8002224 <DMA_CalcBaseAndBitshift>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de0:	223f      	movs	r2, #63	; 0x3f
 8001de2:	409a      	lsls	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	f010803f 	.word	0xf010803f

08001e04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
 8001e10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d101      	bne.n	8001e2a <HAL_DMA_Start_IT+0x26>
 8001e26:	2302      	movs	r3, #2
 8001e28:	e040      	b.n	8001eac <HAL_DMA_Start_IT+0xa8>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d12f      	bne.n	8001e9e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2202      	movs	r2, #2
 8001e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68b9      	ldr	r1, [r7, #8]
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 f9b8 	bl	80021c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5c:	223f      	movs	r2, #63	; 0x3f
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0216 	orr.w	r2, r2, #22
 8001e72:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d007      	beq.n	8001e8c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0208 	orr.w	r2, r2, #8
 8001e8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	e005      	b.n	8001eaa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ec0:	4b8e      	ldr	r3, [pc, #568]	; (80020fc <HAL_DMA_IRQHandler+0x248>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a8e      	ldr	r2, [pc, #568]	; (8002100 <HAL_DMA_IRQHandler+0x24c>)
 8001ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eca:	0a9b      	lsrs	r3, r3, #10
 8001ecc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ede:	2208      	movs	r2, #8
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d01a      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d013      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0204 	bic.w	r2, r2, #4
 8001f06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0c:	2208      	movs	r2, #8
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f18:	f043 0201 	orr.w	r2, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f24:	2201      	movs	r2, #1
 8001f26:	409a      	lsls	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d012      	beq.n	8001f56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00b      	beq.n	8001f56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f42:	2201      	movs	r2, #1
 8001f44:	409a      	lsls	r2, r3
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4e:	f043 0202 	orr.w	r2, r3, #2
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d012      	beq.n	8001f8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00b      	beq.n	8001f8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f78:	2204      	movs	r2, #4
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f84:	f043 0204 	orr.w	r2, r3, #4
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f90:	2210      	movs	r2, #16
 8001f92:	409a      	lsls	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d043      	beq.n	8002024 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d03c      	beq.n	8002024 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fae:	2210      	movs	r2, #16
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d018      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d108      	bne.n	8001fe4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d024      	beq.n	8002024 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	4798      	blx	r3
 8001fe2:	e01f      	b.n	8002024 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01b      	beq.n	8002024 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4798      	blx	r3
 8001ff4:	e016      	b.n	8002024 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002000:	2b00      	cmp	r3, #0
 8002002:	d107      	bne.n	8002014 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0208 	bic.w	r2, r2, #8
 8002012:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002028:	2220      	movs	r2, #32
 800202a:	409a      	lsls	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 808f 	beq.w	8002154 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0310 	and.w	r3, r3, #16
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 8087 	beq.w	8002154 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204a:	2220      	movs	r2, #32
 800204c:	409a      	lsls	r2, r3
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b05      	cmp	r3, #5
 800205c:	d136      	bne.n	80020cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0216 	bic.w	r2, r2, #22
 800206c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695a      	ldr	r2, [r3, #20]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800207c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d103      	bne.n	800208e <HAL_DMA_IRQHandler+0x1da>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800208a:	2b00      	cmp	r3, #0
 800208c:	d007      	beq.n	800209e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0208 	bic.w	r2, r2, #8
 800209c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a2:	223f      	movs	r2, #63	; 0x3f
 80020a4:	409a      	lsls	r2, r3
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d07e      	beq.n	80021c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	4798      	blx	r3
        }
        return;
 80020ca:	e079      	b.n	80021c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d01d      	beq.n	8002116 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10d      	bne.n	8002104 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d031      	beq.n	8002154 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	4798      	blx	r3
 80020f8:	e02c      	b.n	8002154 <HAL_DMA_IRQHandler+0x2a0>
 80020fa:	bf00      	nop
 80020fc:	20000000 	.word	0x20000000
 8002100:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002108:	2b00      	cmp	r3, #0
 800210a:	d023      	beq.n	8002154 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	4798      	blx	r3
 8002114:	e01e      	b.n	8002154 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10f      	bne.n	8002144 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0210 	bic.w	r2, r2, #16
 8002132:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002158:	2b00      	cmp	r3, #0
 800215a:	d032      	beq.n	80021c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d022      	beq.n	80021ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2205      	movs	r2, #5
 800216c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0201 	bic.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	3301      	adds	r3, #1
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	429a      	cmp	r2, r3
 800218a:	d307      	bcc.n	800219c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f2      	bne.n	8002180 <HAL_DMA_IRQHandler+0x2cc>
 800219a:	e000      	b.n	800219e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800219c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d005      	beq.n	80021c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	4798      	blx	r3
 80021be:	e000      	b.n	80021c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80021c0:	bf00      	nop
    }
  }
}
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2b40      	cmp	r3, #64	; 0x40
 80021f4:	d108      	bne.n	8002208 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002206:	e007      	b.n	8002218 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	60da      	str	r2, [r3, #12]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	3b10      	subs	r3, #16
 8002234:	4a14      	ldr	r2, [pc, #80]	; (8002288 <DMA_CalcBaseAndBitshift+0x64>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	091b      	lsrs	r3, r3, #4
 800223c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800223e:	4a13      	ldr	r2, [pc, #76]	; (800228c <DMA_CalcBaseAndBitshift+0x68>)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4413      	add	r3, r2
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2b03      	cmp	r3, #3
 8002250:	d909      	bls.n	8002266 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800225a:	f023 0303 	bic.w	r3, r3, #3
 800225e:	1d1a      	adds	r2, r3, #4
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	659a      	str	r2, [r3, #88]	; 0x58
 8002264:	e007      	b.n	8002276 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800226e:	f023 0303 	bic.w	r3, r3, #3
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	aaaaaaab 	.word	0xaaaaaaab
 800228c:	080054a8 	.word	0x080054a8

08002290 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d11f      	bne.n	80022ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d856      	bhi.n	800235e <DMA_CheckFifoParam+0xce>
 80022b0:	a201      	add	r2, pc, #4	; (adr r2, 80022b8 <DMA_CheckFifoParam+0x28>)
 80022b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b6:	bf00      	nop
 80022b8:	080022c9 	.word	0x080022c9
 80022bc:	080022db 	.word	0x080022db
 80022c0:	080022c9 	.word	0x080022c9
 80022c4:	0800235f 	.word	0x0800235f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d046      	beq.n	8002362 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022d8:	e043      	b.n	8002362 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022e2:	d140      	bne.n	8002366 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022e8:	e03d      	b.n	8002366 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022f2:	d121      	bne.n	8002338 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d837      	bhi.n	800236a <DMA_CheckFifoParam+0xda>
 80022fa:	a201      	add	r2, pc, #4	; (adr r2, 8002300 <DMA_CheckFifoParam+0x70>)
 80022fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002300:	08002311 	.word	0x08002311
 8002304:	08002317 	.word	0x08002317
 8002308:	08002311 	.word	0x08002311
 800230c:	08002329 	.word	0x08002329
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
      break;
 8002314:	e030      	b.n	8002378 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d025      	beq.n	800236e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002326:	e022      	b.n	800236e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002330:	d11f      	bne.n	8002372 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002336:	e01c      	b.n	8002372 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d903      	bls.n	8002346 <DMA_CheckFifoParam+0xb6>
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d003      	beq.n	800234c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002344:	e018      	b.n	8002378 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	73fb      	strb	r3, [r7, #15]
      break;
 800234a:	e015      	b.n	8002378 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002350:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00e      	beq.n	8002376 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	73fb      	strb	r3, [r7, #15]
      break;
 800235c:	e00b      	b.n	8002376 <DMA_CheckFifoParam+0xe6>
      break;
 800235e:	bf00      	nop
 8002360:	e00a      	b.n	8002378 <DMA_CheckFifoParam+0xe8>
      break;
 8002362:	bf00      	nop
 8002364:	e008      	b.n	8002378 <DMA_CheckFifoParam+0xe8>
      break;
 8002366:	bf00      	nop
 8002368:	e006      	b.n	8002378 <DMA_CheckFifoParam+0xe8>
      break;
 800236a:	bf00      	nop
 800236c:	e004      	b.n	8002378 <DMA_CheckFifoParam+0xe8>
      break;
 800236e:	bf00      	nop
 8002370:	e002      	b.n	8002378 <DMA_CheckFifoParam+0xe8>
      break;   
 8002372:	bf00      	nop
 8002374:	e000      	b.n	8002378 <DMA_CheckFifoParam+0xe8>
      break;
 8002376:	bf00      	nop
    }
  } 
  
  return status; 
 8002378:	7bfb      	ldrb	r3, [r7, #15]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop

08002388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002388:	b480      	push	{r7}
 800238a:	b089      	sub	sp, #36	; 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
 80023a2:	e159      	b.n	8002658 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023a4:	2201      	movs	r2, #1
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	429a      	cmp	r2, r3
 80023be:	f040 8148 	bne.w	8002652 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d005      	beq.n	80023da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d130      	bne.n	800243c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	2203      	movs	r2, #3
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002410:	2201      	movs	r2, #1
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	f003 0201 	and.w	r2, r3, #1
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	2b03      	cmp	r3, #3
 8002446:	d017      	beq.n	8002478 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	2203      	movs	r2, #3
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d123      	bne.n	80024cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	08da      	lsrs	r2, r3, #3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3208      	adds	r2, #8
 800248c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002490:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	220f      	movs	r2, #15
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	08da      	lsrs	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3208      	adds	r2, #8
 80024c6:	69b9      	ldr	r1, [r7, #24]
 80024c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	2203      	movs	r2, #3
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 0203 	and.w	r2, r3, #3
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 80a2 	beq.w	8002652 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	4b57      	ldr	r3, [pc, #348]	; (8002670 <HAL_GPIO_Init+0x2e8>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	4a56      	ldr	r2, [pc, #344]	; (8002670 <HAL_GPIO_Init+0x2e8>)
 8002518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800251c:	6453      	str	r3, [r2, #68]	; 0x44
 800251e:	4b54      	ldr	r3, [pc, #336]	; (8002670 <HAL_GPIO_Init+0x2e8>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800252a:	4a52      	ldr	r2, [pc, #328]	; (8002674 <HAL_GPIO_Init+0x2ec>)
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	089b      	lsrs	r3, r3, #2
 8002530:	3302      	adds	r3, #2
 8002532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	220f      	movs	r2, #15
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a49      	ldr	r2, [pc, #292]	; (8002678 <HAL_GPIO_Init+0x2f0>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d019      	beq.n	800258a <HAL_GPIO_Init+0x202>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a48      	ldr	r2, [pc, #288]	; (800267c <HAL_GPIO_Init+0x2f4>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d013      	beq.n	8002586 <HAL_GPIO_Init+0x1fe>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a47      	ldr	r2, [pc, #284]	; (8002680 <HAL_GPIO_Init+0x2f8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d00d      	beq.n	8002582 <HAL_GPIO_Init+0x1fa>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a46      	ldr	r2, [pc, #280]	; (8002684 <HAL_GPIO_Init+0x2fc>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d007      	beq.n	800257e <HAL_GPIO_Init+0x1f6>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a45      	ldr	r2, [pc, #276]	; (8002688 <HAL_GPIO_Init+0x300>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d101      	bne.n	800257a <HAL_GPIO_Init+0x1f2>
 8002576:	2304      	movs	r3, #4
 8002578:	e008      	b.n	800258c <HAL_GPIO_Init+0x204>
 800257a:	2307      	movs	r3, #7
 800257c:	e006      	b.n	800258c <HAL_GPIO_Init+0x204>
 800257e:	2303      	movs	r3, #3
 8002580:	e004      	b.n	800258c <HAL_GPIO_Init+0x204>
 8002582:	2302      	movs	r3, #2
 8002584:	e002      	b.n	800258c <HAL_GPIO_Init+0x204>
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <HAL_GPIO_Init+0x204>
 800258a:	2300      	movs	r3, #0
 800258c:	69fa      	ldr	r2, [r7, #28]
 800258e:	f002 0203 	and.w	r2, r2, #3
 8002592:	0092      	lsls	r2, r2, #2
 8002594:	4093      	lsls	r3, r2
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800259c:	4935      	ldr	r1, [pc, #212]	; (8002674 <HAL_GPIO_Init+0x2ec>)
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	089b      	lsrs	r3, r3, #2
 80025a2:	3302      	adds	r3, #2
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025aa:	4b38      	ldr	r3, [pc, #224]	; (800268c <HAL_GPIO_Init+0x304>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ce:	4a2f      	ldr	r2, [pc, #188]	; (800268c <HAL_GPIO_Init+0x304>)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025d4:	4b2d      	ldr	r3, [pc, #180]	; (800268c <HAL_GPIO_Init+0x304>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025f8:	4a24      	ldr	r2, [pc, #144]	; (800268c <HAL_GPIO_Init+0x304>)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025fe:	4b23      	ldr	r3, [pc, #140]	; (800268c <HAL_GPIO_Init+0x304>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002622:	4a1a      	ldr	r2, [pc, #104]	; (800268c <HAL_GPIO_Init+0x304>)
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002628:	4b18      	ldr	r3, [pc, #96]	; (800268c <HAL_GPIO_Init+0x304>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800264c:	4a0f      	ldr	r2, [pc, #60]	; (800268c <HAL_GPIO_Init+0x304>)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3301      	adds	r3, #1
 8002656:	61fb      	str	r3, [r7, #28]
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	2b0f      	cmp	r3, #15
 800265c:	f67f aea2 	bls.w	80023a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002660:	bf00      	nop
 8002662:	bf00      	nop
 8002664:	3724      	adds	r7, #36	; 0x24
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800
 8002674:	40013800 	.word	0x40013800
 8002678:	40020000 	.word	0x40020000
 800267c:	40020400 	.word	0x40020400
 8002680:	40020800 	.word	0x40020800
 8002684:	40020c00 	.word	0x40020c00
 8002688:	40021000 	.word	0x40021000
 800268c:	40013c00 	.word	0x40013c00

08002690 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	887b      	ldrh	r3, [r7, #2]
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026a8:	2301      	movs	r3, #1
 80026aa:	73fb      	strb	r3, [r7, #15]
 80026ac:	e001      	b.n	80026b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e267      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d075      	beq.n	80027ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026de:	4b88      	ldr	r3, [pc, #544]	; (8002900 <HAL_RCC_OscConfig+0x240>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 030c 	and.w	r3, r3, #12
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d00c      	beq.n	8002704 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ea:	4b85      	ldr	r3, [pc, #532]	; (8002900 <HAL_RCC_OscConfig+0x240>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d112      	bne.n	800271c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026f6:	4b82      	ldr	r3, [pc, #520]	; (8002900 <HAL_RCC_OscConfig+0x240>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002702:	d10b      	bne.n	800271c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002704:	4b7e      	ldr	r3, [pc, #504]	; (8002900 <HAL_RCC_OscConfig+0x240>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d05b      	beq.n	80027c8 <HAL_RCC_OscConfig+0x108>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d157      	bne.n	80027c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e242      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002724:	d106      	bne.n	8002734 <HAL_RCC_OscConfig+0x74>
 8002726:	4b76      	ldr	r3, [pc, #472]	; (8002900 <HAL_RCC_OscConfig+0x240>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a75      	ldr	r2, [pc, #468]	; (8002900 <HAL_RCC_OscConfig+0x240>)
 800272c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	e01d      	b.n	8002770 <HAL_RCC_OscConfig+0xb0>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800273c:	d10c      	bne.n	8002758 <HAL_RCC_OscConfig+0x98>
 800273e:	4b70      	ldr	r3, [pc, #448]	; (8002900 <HAL_RCC_OscConfig+0x240>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a6f      	ldr	r2, [pc, #444]	; (8002900 <HAL_RCC_OscConfig+0x240>)
 8002744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	4b6d      	ldr	r3, [pc, #436]	; (8002900 <HAL_RCC_OscConfig+0x240>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a6c      	ldr	r2, [pc, #432]	; (8002900 <HAL_RCC_OscConfig+0x240>)
 8002750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	e00b      	b.n	8002770 <HAL_RCC_OscConfig+0xb0>
 8002758:	4b69      	ldr	r3, [pc, #420]	; (8002900 <HAL_RCC_OscConfig+0x240>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a68      	ldr	r2, [pc, #416]	; (8002900 <HAL_RCC_OscConfig+0x240>)
 800275e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002762:	6013      	str	r3, [r2, #0]
 8002764:	4b66      	ldr	r3, [pc, #408]	; (8002900 <HAL_RCC_OscConfig+0x240>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a65      	ldr	r2, [pc, #404]	; (8002900 <HAL_RCC_OscConfig+0x240>)
 800276a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800276e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d013      	beq.n	80027a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7ff f954 	bl	8001a24 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002780:	f7ff f950 	bl	8001a24 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b64      	cmp	r3, #100	; 0x64
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e207      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002792:	4b5b      	ldr	r3, [pc, #364]	; (8002900 <HAL_RCC_OscConfig+0x240>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCC_OscConfig+0xc0>
 800279e:	e014      	b.n	80027ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7ff f940 	bl	8001a24 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a8:	f7ff f93c 	bl	8001a24 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b64      	cmp	r3, #100	; 0x64
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e1f3      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ba:	4b51      	ldr	r3, [pc, #324]	; (8002900 <HAL_RCC_OscConfig+0x240>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0xe8>
 80027c6:	e000      	b.n	80027ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d063      	beq.n	800289e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027d6:	4b4a      	ldr	r3, [pc, #296]	; (8002900 <HAL_RCC_OscConfig+0x240>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 030c 	and.w	r3, r3, #12
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00b      	beq.n	80027fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027e2:	4b47      	ldr	r3, [pc, #284]	; (8002900 <HAL_RCC_OscConfig+0x240>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d11c      	bne.n	8002828 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ee:	4b44      	ldr	r3, [pc, #272]	; (8002900 <HAL_RCC_OscConfig+0x240>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d116      	bne.n	8002828 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027fa:	4b41      	ldr	r3, [pc, #260]	; (8002900 <HAL_RCC_OscConfig+0x240>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d005      	beq.n	8002812 <HAL_RCC_OscConfig+0x152>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d001      	beq.n	8002812 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e1c7      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002812:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <HAL_RCC_OscConfig+0x240>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4937      	ldr	r1, [pc, #220]	; (8002900 <HAL_RCC_OscConfig+0x240>)
 8002822:	4313      	orrs	r3, r2
 8002824:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002826:	e03a      	b.n	800289e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d020      	beq.n	8002872 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002830:	4b34      	ldr	r3, [pc, #208]	; (8002904 <HAL_RCC_OscConfig+0x244>)
 8002832:	2201      	movs	r2, #1
 8002834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002836:	f7ff f8f5 	bl	8001a24 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800283e:	f7ff f8f1 	bl	8001a24 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e1a8      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002850:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <HAL_RCC_OscConfig+0x240>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285c:	4b28      	ldr	r3, [pc, #160]	; (8002900 <HAL_RCC_OscConfig+0x240>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	4925      	ldr	r1, [pc, #148]	; (8002900 <HAL_RCC_OscConfig+0x240>)
 800286c:	4313      	orrs	r3, r2
 800286e:	600b      	str	r3, [r1, #0]
 8002870:	e015      	b.n	800289e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002872:	4b24      	ldr	r3, [pc, #144]	; (8002904 <HAL_RCC_OscConfig+0x244>)
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7ff f8d4 	bl	8001a24 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002880:	f7ff f8d0 	bl	8001a24 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e187      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002892:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <HAL_RCC_OscConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d036      	beq.n	8002918 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d016      	beq.n	80028e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <HAL_RCC_OscConfig+0x248>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b8:	f7ff f8b4 	bl	8001a24 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028c0:	f7ff f8b0 	bl	8001a24 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e167      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d2:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_RCC_OscConfig+0x240>)
 80028d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0x200>
 80028de:	e01b      	b.n	8002918 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e0:	4b09      	ldr	r3, [pc, #36]	; (8002908 <HAL_RCC_OscConfig+0x248>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e6:	f7ff f89d 	bl	8001a24 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ec:	e00e      	b.n	800290c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ee:	f7ff f899 	bl	8001a24 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d907      	bls.n	800290c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e150      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4e2>
 8002900:	40023800 	.word	0x40023800
 8002904:	42470000 	.word	0x42470000
 8002908:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800290c:	4b88      	ldr	r3, [pc, #544]	; (8002b30 <HAL_RCC_OscConfig+0x470>)
 800290e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1ea      	bne.n	80028ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 8097 	beq.w	8002a54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002926:	2300      	movs	r3, #0
 8002928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800292a:	4b81      	ldr	r3, [pc, #516]	; (8002b30 <HAL_RCC_OscConfig+0x470>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10f      	bne.n	8002956 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	4b7d      	ldr	r3, [pc, #500]	; (8002b30 <HAL_RCC_OscConfig+0x470>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	4a7c      	ldr	r2, [pc, #496]	; (8002b30 <HAL_RCC_OscConfig+0x470>)
 8002940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002944:	6413      	str	r3, [r2, #64]	; 0x40
 8002946:	4b7a      	ldr	r3, [pc, #488]	; (8002b30 <HAL_RCC_OscConfig+0x470>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294e:	60bb      	str	r3, [r7, #8]
 8002950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002952:	2301      	movs	r3, #1
 8002954:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002956:	4b77      	ldr	r3, [pc, #476]	; (8002b34 <HAL_RCC_OscConfig+0x474>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295e:	2b00      	cmp	r3, #0
 8002960:	d118      	bne.n	8002994 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002962:	4b74      	ldr	r3, [pc, #464]	; (8002b34 <HAL_RCC_OscConfig+0x474>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a73      	ldr	r2, [pc, #460]	; (8002b34 <HAL_RCC_OscConfig+0x474>)
 8002968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800296c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800296e:	f7ff f859 	bl	8001a24 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002976:	f7ff f855 	bl	8001a24 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e10c      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002988:	4b6a      	ldr	r3, [pc, #424]	; (8002b34 <HAL_RCC_OscConfig+0x474>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d106      	bne.n	80029aa <HAL_RCC_OscConfig+0x2ea>
 800299c:	4b64      	ldr	r3, [pc, #400]	; (8002b30 <HAL_RCC_OscConfig+0x470>)
 800299e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a0:	4a63      	ldr	r2, [pc, #396]	; (8002b30 <HAL_RCC_OscConfig+0x470>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	6713      	str	r3, [r2, #112]	; 0x70
 80029a8:	e01c      	b.n	80029e4 <HAL_RCC_OscConfig+0x324>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b05      	cmp	r3, #5
 80029b0:	d10c      	bne.n	80029cc <HAL_RCC_OscConfig+0x30c>
 80029b2:	4b5f      	ldr	r3, [pc, #380]	; (8002b30 <HAL_RCC_OscConfig+0x470>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b6:	4a5e      	ldr	r2, [pc, #376]	; (8002b30 <HAL_RCC_OscConfig+0x470>)
 80029b8:	f043 0304 	orr.w	r3, r3, #4
 80029bc:	6713      	str	r3, [r2, #112]	; 0x70
 80029be:	4b5c      	ldr	r3, [pc, #368]	; (8002b30 <HAL_RCC_OscConfig+0x470>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	4a5b      	ldr	r2, [pc, #364]	; (8002b30 <HAL_RCC_OscConfig+0x470>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	6713      	str	r3, [r2, #112]	; 0x70
 80029ca:	e00b      	b.n	80029e4 <HAL_RCC_OscConfig+0x324>
 80029cc:	4b58      	ldr	r3, [pc, #352]	; (8002b30 <HAL_RCC_OscConfig+0x470>)
 80029ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d0:	4a57      	ldr	r2, [pc, #348]	; (8002b30 <HAL_RCC_OscConfig+0x470>)
 80029d2:	f023 0301 	bic.w	r3, r3, #1
 80029d6:	6713      	str	r3, [r2, #112]	; 0x70
 80029d8:	4b55      	ldr	r3, [pc, #340]	; (8002b30 <HAL_RCC_OscConfig+0x470>)
 80029da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029dc:	4a54      	ldr	r2, [pc, #336]	; (8002b30 <HAL_RCC_OscConfig+0x470>)
 80029de:	f023 0304 	bic.w	r3, r3, #4
 80029e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d015      	beq.n	8002a18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ec:	f7ff f81a 	bl	8001a24 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f2:	e00a      	b.n	8002a0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029f4:	f7ff f816 	bl	8001a24 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e0cb      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0a:	4b49      	ldr	r3, [pc, #292]	; (8002b30 <HAL_RCC_OscConfig+0x470>)
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0ee      	beq.n	80029f4 <HAL_RCC_OscConfig+0x334>
 8002a16:	e014      	b.n	8002a42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a18:	f7ff f804 	bl	8001a24 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1e:	e00a      	b.n	8002a36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a20:	f7ff f800 	bl	8001a24 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e0b5      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a36:	4b3e      	ldr	r3, [pc, #248]	; (8002b30 <HAL_RCC_OscConfig+0x470>)
 8002a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1ee      	bne.n	8002a20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a42:	7dfb      	ldrb	r3, [r7, #23]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d105      	bne.n	8002a54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a48:	4b39      	ldr	r3, [pc, #228]	; (8002b30 <HAL_RCC_OscConfig+0x470>)
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	4a38      	ldr	r2, [pc, #224]	; (8002b30 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 80a1 	beq.w	8002ba0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a5e:	4b34      	ldr	r3, [pc, #208]	; (8002b30 <HAL_RCC_OscConfig+0x470>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d05c      	beq.n	8002b24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d141      	bne.n	8002af6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a72:	4b31      	ldr	r3, [pc, #196]	; (8002b38 <HAL_RCC_OscConfig+0x478>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a78:	f7fe ffd4 	bl	8001a24 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a80:	f7fe ffd0 	bl	8001a24 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e087      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a92:	4b27      	ldr	r3, [pc, #156]	; (8002b30 <HAL_RCC_OscConfig+0x470>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69da      	ldr	r2, [r3, #28]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	019b      	lsls	r3, r3, #6
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab4:	085b      	lsrs	r3, r3, #1
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	041b      	lsls	r3, r3, #16
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	061b      	lsls	r3, r3, #24
 8002ac2:	491b      	ldr	r1, [pc, #108]	; (8002b30 <HAL_RCC_OscConfig+0x470>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ac8:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <HAL_RCC_OscConfig+0x478>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ace:	f7fe ffa9 	bl	8001a24 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad6:	f7fe ffa5 	bl	8001a24 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e05c      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae8:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <HAL_RCC_OscConfig+0x470>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0f0      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x416>
 8002af4:	e054      	b.n	8002ba0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af6:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <HAL_RCC_OscConfig+0x478>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afc:	f7fe ff92 	bl	8001a24 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b04:	f7fe ff8e 	bl	8001a24 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e045      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b16:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <HAL_RCC_OscConfig+0x470>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x444>
 8002b22:	e03d      	b.n	8002ba0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d107      	bne.n	8002b3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e038      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4e2>
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40007000 	.word	0x40007000
 8002b38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <HAL_RCC_OscConfig+0x4ec>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d028      	beq.n	8002b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d121      	bne.n	8002b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d11a      	bne.n	8002b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d111      	bne.n	8002b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b82:	085b      	lsrs	r3, r3, #1
 8002b84:	3b01      	subs	r3, #1
 8002b86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d107      	bne.n	8002b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e000      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800

08002bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0cc      	b.n	8002d5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc4:	4b68      	ldr	r3, [pc, #416]	; (8002d68 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d90c      	bls.n	8002bec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd2:	4b65      	ldr	r3, [pc, #404]	; (8002d68 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bda:	4b63      	ldr	r3, [pc, #396]	; (8002d68 <HAL_RCC_ClockConfig+0x1b8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d001      	beq.n	8002bec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e0b8      	b.n	8002d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d020      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c04:	4b59      	ldr	r3, [pc, #356]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	4a58      	ldr	r2, [pc, #352]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c1c:	4b53      	ldr	r3, [pc, #332]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	4a52      	ldr	r2, [pc, #328]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c28:	4b50      	ldr	r3, [pc, #320]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	494d      	ldr	r1, [pc, #308]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d044      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d107      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4e:	4b47      	ldr	r3, [pc, #284]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d119      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e07f      	b.n	8002d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d003      	beq.n	8002c6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	d107      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6e:	4b3f      	ldr	r3, [pc, #252]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d109      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e06f      	b.n	8002d5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7e:	4b3b      	ldr	r3, [pc, #236]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e067      	b.n	8002d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c8e:	4b37      	ldr	r3, [pc, #220]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f023 0203 	bic.w	r2, r3, #3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4934      	ldr	r1, [pc, #208]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ca0:	f7fe fec0 	bl	8001a24 <HAL_GetTick>
 8002ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca6:	e00a      	b.n	8002cbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca8:	f7fe febc 	bl	8001a24 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e04f      	b.n	8002d5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cbe:	4b2b      	ldr	r3, [pc, #172]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 020c 	and.w	r2, r3, #12
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d1eb      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd0:	4b25      	ldr	r3, [pc, #148]	; (8002d68 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d20c      	bcs.n	8002cf8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cde:	4b22      	ldr	r3, [pc, #136]	; (8002d68 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce6:	4b20      	ldr	r3, [pc, #128]	; (8002d68 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e032      	b.n	8002d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d008      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d04:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	4916      	ldr	r1, [pc, #88]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d009      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d22:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	490e      	ldr	r1, [pc, #56]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d36:	f000 f821 	bl	8002d7c <HAL_RCC_GetSysClockFreq>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	490a      	ldr	r1, [pc, #40]	; (8002d70 <HAL_RCC_ClockConfig+0x1c0>)
 8002d48:	5ccb      	ldrb	r3, [r1, r3]
 8002d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d4e:	4a09      	ldr	r2, [pc, #36]	; (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d52:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fe fe20 	bl	800199c <HAL_InitTick>

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40023c00 	.word	0x40023c00
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	08005490 	.word	0x08005490
 8002d74:	20000000 	.word	0x20000000
 8002d78:	20000004 	.word	0x20000004

08002d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d80:	b090      	sub	sp, #64	; 0x40
 8002d82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	637b      	str	r3, [r7, #52]	; 0x34
 8002d88:	2300      	movs	r3, #0
 8002d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d94:	4b59      	ldr	r3, [pc, #356]	; (8002efc <HAL_RCC_GetSysClockFreq+0x180>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 030c 	and.w	r3, r3, #12
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d00d      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0x40>
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	f200 80a1 	bhi.w	8002ee8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d002      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x34>
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d003      	beq.n	8002db6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dae:	e09b      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002db0:	4b53      	ldr	r3, [pc, #332]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x184>)
 8002db2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002db4:	e09b      	b.n	8002eee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002db6:	4b53      	ldr	r3, [pc, #332]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x188>)
 8002db8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dba:	e098      	b.n	8002eee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dbc:	4b4f      	ldr	r3, [pc, #316]	; (8002efc <HAL_RCC_GetSysClockFreq+0x180>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dc4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dc6:	4b4d      	ldr	r3, [pc, #308]	; (8002efc <HAL_RCC_GetSysClockFreq+0x180>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d028      	beq.n	8002e24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd2:	4b4a      	ldr	r3, [pc, #296]	; (8002efc <HAL_RCC_GetSysClockFreq+0x180>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	099b      	lsrs	r3, r3, #6
 8002dd8:	2200      	movs	r2, #0
 8002dda:	623b      	str	r3, [r7, #32]
 8002ddc:	627a      	str	r2, [r7, #36]	; 0x24
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002de4:	2100      	movs	r1, #0
 8002de6:	4b47      	ldr	r3, [pc, #284]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x188>)
 8002de8:	fb03 f201 	mul.w	r2, r3, r1
 8002dec:	2300      	movs	r3, #0
 8002dee:	fb00 f303 	mul.w	r3, r0, r3
 8002df2:	4413      	add	r3, r2
 8002df4:	4a43      	ldr	r2, [pc, #268]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x188>)
 8002df6:	fba0 1202 	umull	r1, r2, r0, r2
 8002dfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dfc:	460a      	mov	r2, r1
 8002dfe:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e02:	4413      	add	r3, r2
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e08:	2200      	movs	r2, #0
 8002e0a:	61bb      	str	r3, [r7, #24]
 8002e0c:	61fa      	str	r2, [r7, #28]
 8002e0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e16:	f7fd fda9 	bl	800096c <__aeabi_uldivmod>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4613      	mov	r3, r2
 8002e20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e22:	e053      	b.n	8002ecc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e24:	4b35      	ldr	r3, [pc, #212]	; (8002efc <HAL_RCC_GetSysClockFreq+0x180>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	099b      	lsrs	r3, r3, #6
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	617a      	str	r2, [r7, #20]
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e36:	f04f 0b00 	mov.w	fp, #0
 8002e3a:	4652      	mov	r2, sl
 8002e3c:	465b      	mov	r3, fp
 8002e3e:	f04f 0000 	mov.w	r0, #0
 8002e42:	f04f 0100 	mov.w	r1, #0
 8002e46:	0159      	lsls	r1, r3, #5
 8002e48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e4c:	0150      	lsls	r0, r2, #5
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	ebb2 080a 	subs.w	r8, r2, sl
 8002e56:	eb63 090b 	sbc.w	r9, r3, fp
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e6e:	ebb2 0408 	subs.w	r4, r2, r8
 8002e72:	eb63 0509 	sbc.w	r5, r3, r9
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	00eb      	lsls	r3, r5, #3
 8002e80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e84:	00e2      	lsls	r2, r4, #3
 8002e86:	4614      	mov	r4, r2
 8002e88:	461d      	mov	r5, r3
 8002e8a:	eb14 030a 	adds.w	r3, r4, sl
 8002e8e:	603b      	str	r3, [r7, #0]
 8002e90:	eb45 030b 	adc.w	r3, r5, fp
 8002e94:	607b      	str	r3, [r7, #4]
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ea2:	4629      	mov	r1, r5
 8002ea4:	028b      	lsls	r3, r1, #10
 8002ea6:	4621      	mov	r1, r4
 8002ea8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002eac:	4621      	mov	r1, r4
 8002eae:	028a      	lsls	r2, r1, #10
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	60fa      	str	r2, [r7, #12]
 8002ebc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ec0:	f7fd fd54 	bl	800096c <__aeabi_uldivmod>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4613      	mov	r3, r2
 8002eca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <HAL_RCC_GetSysClockFreq+0x180>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	0c1b      	lsrs	r3, r3, #16
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002edc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ee6:	e002      	b.n	8002eee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x184>)
 8002eea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3740      	adds	r7, #64	; 0x40
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002efa:	bf00      	nop
 8002efc:	40023800 	.word	0x40023800
 8002f00:	00f42400 	.word	0x00f42400
 8002f04:	017d7840 	.word	0x017d7840

08002f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f0c:	4b03      	ldr	r3, [pc, #12]	; (8002f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	20000000 	.word	0x20000000

08002f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f24:	f7ff fff0 	bl	8002f08 <HAL_RCC_GetHCLKFreq>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	0a9b      	lsrs	r3, r3, #10
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	4903      	ldr	r1, [pc, #12]	; (8002f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f36:	5ccb      	ldrb	r3, [r1, r3]
 8002f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40023800 	.word	0x40023800
 8002f44:	080054a0 	.word	0x080054a0

08002f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f4c:	f7ff ffdc 	bl	8002f08 <HAL_RCC_GetHCLKFreq>
 8002f50:	4602      	mov	r2, r0
 8002f52:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	0b5b      	lsrs	r3, r3, #13
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	4903      	ldr	r1, [pc, #12]	; (8002f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f5e:	5ccb      	ldrb	r3, [r1, r3]
 8002f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	080054a0 	.word	0x080054a0

08002f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e041      	b.n	8003006 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fe fa90 	bl	80014bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3304      	adds	r3, #4
 8002fac:	4619      	mov	r1, r3
 8002fae:	4610      	mov	r0, r2
 8002fb0:	f000 fe38 	bl	8003c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b01      	cmp	r3, #1
 8003022:	d001      	beq.n	8003028 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e044      	b.n	80030b2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0201 	orr.w	r2, r2, #1
 800303e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1e      	ldr	r2, [pc, #120]	; (80030c0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d018      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x6c>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003052:	d013      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x6c>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a1a      	ldr	r2, [pc, #104]	; (80030c4 <HAL_TIM_Base_Start_IT+0xb4>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00e      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x6c>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a19      	ldr	r2, [pc, #100]	; (80030c8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d009      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x6c>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a17      	ldr	r2, [pc, #92]	; (80030cc <HAL_TIM_Base_Start_IT+0xbc>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d004      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x6c>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a16      	ldr	r2, [pc, #88]	; (80030d0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d111      	bne.n	80030a0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b06      	cmp	r3, #6
 800308c:	d010      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f042 0201 	orr.w	r2, r2, #1
 800309c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800309e:	e007      	b.n	80030b0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40010000 	.word	0x40010000
 80030c4:	40000400 	.word	0x40000400
 80030c8:	40000800 	.word	0x40000800
 80030cc:	40000c00 	.word	0x40000c00
 80030d0:	40014000 	.word	0x40014000

080030d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e041      	b.n	800316a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f839 	bl	8003172 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3304      	adds	r3, #4
 8003110:	4619      	mov	r1, r3
 8003112:	4610      	mov	r0, r2
 8003114:	f000 fd86 	bl	8003c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d109      	bne.n	80031b4 <HAL_TIM_PWM_Start_DMA+0x2c>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	bf0c      	ite	eq
 80031ac:	2301      	moveq	r3, #1
 80031ae:	2300      	movne	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	e022      	b.n	80031fa <HAL_TIM_PWM_Start_DMA+0x72>
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d109      	bne.n	80031ce <HAL_TIM_PWM_Start_DMA+0x46>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	bf0c      	ite	eq
 80031c6:	2301      	moveq	r3, #1
 80031c8:	2300      	movne	r3, #0
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	e015      	b.n	80031fa <HAL_TIM_PWM_Start_DMA+0x72>
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d109      	bne.n	80031e8 <HAL_TIM_PWM_Start_DMA+0x60>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	bf0c      	ite	eq
 80031e0:	2301      	moveq	r3, #1
 80031e2:	2300      	movne	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	e008      	b.n	80031fa <HAL_TIM_PWM_Start_DMA+0x72>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	bf0c      	ite	eq
 80031f4:	2301      	moveq	r3, #1
 80031f6:	2300      	movne	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80031fe:	2302      	movs	r3, #2
 8003200:	e15d      	b.n	80034be <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d109      	bne.n	800321c <HAL_TIM_PWM_Start_DMA+0x94>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b01      	cmp	r3, #1
 8003212:	bf0c      	ite	eq
 8003214:	2301      	moveq	r3, #1
 8003216:	2300      	movne	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	e022      	b.n	8003262 <HAL_TIM_PWM_Start_DMA+0xda>
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b04      	cmp	r3, #4
 8003220:	d109      	bne.n	8003236 <HAL_TIM_PWM_Start_DMA+0xae>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b01      	cmp	r3, #1
 800322c:	bf0c      	ite	eq
 800322e:	2301      	moveq	r3, #1
 8003230:	2300      	movne	r3, #0
 8003232:	b2db      	uxtb	r3, r3
 8003234:	e015      	b.n	8003262 <HAL_TIM_PWM_Start_DMA+0xda>
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2b08      	cmp	r3, #8
 800323a:	d109      	bne.n	8003250 <HAL_TIM_PWM_Start_DMA+0xc8>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b01      	cmp	r3, #1
 8003246:	bf0c      	ite	eq
 8003248:	2301      	moveq	r3, #1
 800324a:	2300      	movne	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	e008      	b.n	8003262 <HAL_TIM_PWM_Start_DMA+0xda>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b01      	cmp	r3, #1
 800325a:	bf0c      	ite	eq
 800325c:	2301      	moveq	r3, #1
 800325e:	2300      	movne	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d024      	beq.n	80032b0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d104      	bne.n	8003276 <HAL_TIM_PWM_Start_DMA+0xee>
 800326c:	887b      	ldrh	r3, [r7, #2]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e123      	b.n	80034be <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d104      	bne.n	8003286 <HAL_TIM_PWM_Start_DMA+0xfe>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003284:	e016      	b.n	80032b4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2b04      	cmp	r3, #4
 800328a:	d104      	bne.n	8003296 <HAL_TIM_PWM_Start_DMA+0x10e>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003294:	e00e      	b.n	80032b4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2b08      	cmp	r3, #8
 800329a:	d104      	bne.n	80032a6 <HAL_TIM_PWM_Start_DMA+0x11e>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032a4:	e006      	b.n	80032b4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2202      	movs	r2, #2
 80032aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032ae:	e001      	b.n	80032b4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e104      	b.n	80034be <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b0c      	cmp	r3, #12
 80032b8:	f200 80ae 	bhi.w	8003418 <HAL_TIM_PWM_Start_DMA+0x290>
 80032bc:	a201      	add	r2, pc, #4	; (adr r2, 80032c4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80032be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c2:	bf00      	nop
 80032c4:	080032f9 	.word	0x080032f9
 80032c8:	08003419 	.word	0x08003419
 80032cc:	08003419 	.word	0x08003419
 80032d0:	08003419 	.word	0x08003419
 80032d4:	08003341 	.word	0x08003341
 80032d8:	08003419 	.word	0x08003419
 80032dc:	08003419 	.word	0x08003419
 80032e0:	08003419 	.word	0x08003419
 80032e4:	08003389 	.word	0x08003389
 80032e8:	08003419 	.word	0x08003419
 80032ec:	08003419 	.word	0x08003419
 80032f0:	08003419 	.word	0x08003419
 80032f4:	080033d1 	.word	0x080033d1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	4a72      	ldr	r2, [pc, #456]	; (80034c8 <HAL_TIM_PWM_Start_DMA+0x340>)
 80032fe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	4a71      	ldr	r2, [pc, #452]	; (80034cc <HAL_TIM_PWM_Start_DMA+0x344>)
 8003306:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	4a70      	ldr	r2, [pc, #448]	; (80034d0 <HAL_TIM_PWM_Start_DMA+0x348>)
 800330e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	3334      	adds	r3, #52	; 0x34
 800331c:	461a      	mov	r2, r3
 800331e:	887b      	ldrh	r3, [r7, #2]
 8003320:	f7fe fd70 	bl	8001e04 <HAL_DMA_Start_IT>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e0c7      	b.n	80034be <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333c:	60da      	str	r2, [r3, #12]
      break;
 800333e:	e06e      	b.n	800341e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	4a60      	ldr	r2, [pc, #384]	; (80034c8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003346:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	4a5f      	ldr	r2, [pc, #380]	; (80034cc <HAL_TIM_PWM_Start_DMA+0x344>)
 800334e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	4a5e      	ldr	r2, [pc, #376]	; (80034d0 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003356:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3338      	adds	r3, #56	; 0x38
 8003364:	461a      	mov	r2, r3
 8003366:	887b      	ldrh	r3, [r7, #2]
 8003368:	f7fe fd4c 	bl	8001e04 <HAL_DMA_Start_IT>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e0a3      	b.n	80034be <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003384:	60da      	str	r2, [r3, #12]
      break;
 8003386:	e04a      	b.n	800341e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	4a4e      	ldr	r2, [pc, #312]	; (80034c8 <HAL_TIM_PWM_Start_DMA+0x340>)
 800338e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	4a4d      	ldr	r2, [pc, #308]	; (80034cc <HAL_TIM_PWM_Start_DMA+0x344>)
 8003396:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	4a4c      	ldr	r2, [pc, #304]	; (80034d0 <HAL_TIM_PWM_Start_DMA+0x348>)
 800339e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	333c      	adds	r3, #60	; 0x3c
 80033ac:	461a      	mov	r2, r3
 80033ae:	887b      	ldrh	r3, [r7, #2]
 80033b0:	f7fe fd28 	bl	8001e04 <HAL_DMA_Start_IT>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e07f      	b.n	80034be <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033cc:	60da      	str	r2, [r3, #12]
      break;
 80033ce:	e026      	b.n	800341e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d4:	4a3c      	ldr	r2, [pc, #240]	; (80034c8 <HAL_TIM_PWM_Start_DMA+0x340>)
 80033d6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	4a3b      	ldr	r2, [pc, #236]	; (80034cc <HAL_TIM_PWM_Start_DMA+0x344>)
 80033de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	4a3a      	ldr	r2, [pc, #232]	; (80034d0 <HAL_TIM_PWM_Start_DMA+0x348>)
 80033e6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3340      	adds	r3, #64	; 0x40
 80033f4:	461a      	mov	r2, r3
 80033f6:	887b      	ldrh	r3, [r7, #2]
 80033f8:	f7fe fd04 	bl	8001e04 <HAL_DMA_Start_IT>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e05b      	b.n	80034be <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003414:	60da      	str	r2, [r3, #12]
      break;
 8003416:	e002      	b.n	800341e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	75fb      	strb	r3, [r7, #23]
      break;
 800341c:	bf00      	nop
  }

  if (status == HAL_OK)
 800341e:	7dfb      	ldrb	r3, [r7, #23]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d14b      	bne.n	80034bc <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2201      	movs	r2, #1
 800342a:	68b9      	ldr	r1, [r7, #8]
 800342c:	4618      	mov	r0, r3
 800342e:	f000 fe9f 	bl	8004170 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a27      	ldr	r2, [pc, #156]	; (80034d4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d107      	bne.n	800344c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800344a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a20      	ldr	r2, [pc, #128]	; (80034d4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d018      	beq.n	8003488 <HAL_TIM_PWM_Start_DMA+0x300>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800345e:	d013      	beq.n	8003488 <HAL_TIM_PWM_Start_DMA+0x300>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1c      	ldr	r2, [pc, #112]	; (80034d8 <HAL_TIM_PWM_Start_DMA+0x350>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00e      	beq.n	8003488 <HAL_TIM_PWM_Start_DMA+0x300>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1b      	ldr	r2, [pc, #108]	; (80034dc <HAL_TIM_PWM_Start_DMA+0x354>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d009      	beq.n	8003488 <HAL_TIM_PWM_Start_DMA+0x300>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a19      	ldr	r2, [pc, #100]	; (80034e0 <HAL_TIM_PWM_Start_DMA+0x358>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d004      	beq.n	8003488 <HAL_TIM_PWM_Start_DMA+0x300>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a18      	ldr	r2, [pc, #96]	; (80034e4 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d111      	bne.n	80034ac <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	2b06      	cmp	r3, #6
 8003498:	d010      	beq.n	80034bc <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f042 0201 	orr.w	r2, r2, #1
 80034a8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034aa:	e007      	b.n	80034bc <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80034bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	08003b15 	.word	0x08003b15
 80034cc:	08003bbd 	.word	0x08003bbd
 80034d0:	08003a83 	.word	0x08003a83
 80034d4:	40010000 	.word	0x40010000
 80034d8:	40000400 	.word	0x40000400
 80034dc:	40000800 	.word	0x40000800
 80034e0:	40000c00 	.word	0x40000c00
 80034e4:	40014000 	.word	0x40014000

080034e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d122      	bne.n	8003544 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b02      	cmp	r3, #2
 800350a:	d11b      	bne.n	8003544 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0202 	mvn.w	r2, #2
 8003514:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fa77 	bl	8003a1e <HAL_TIM_IC_CaptureCallback>
 8003530:	e005      	b.n	800353e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fa69 	bl	8003a0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fa7a 	bl	8003a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b04      	cmp	r3, #4
 8003550:	d122      	bne.n	8003598 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b04      	cmp	r3, #4
 800355e:	d11b      	bne.n	8003598 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0204 	mvn.w	r2, #4
 8003568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2202      	movs	r2, #2
 800356e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 fa4d 	bl	8003a1e <HAL_TIM_IC_CaptureCallback>
 8003584:	e005      	b.n	8003592 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 fa3f 	bl	8003a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fa50 	bl	8003a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d122      	bne.n	80035ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f003 0308 	and.w	r3, r3, #8
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d11b      	bne.n	80035ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f06f 0208 	mvn.w	r2, #8
 80035bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2204      	movs	r2, #4
 80035c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fa23 	bl	8003a1e <HAL_TIM_IC_CaptureCallback>
 80035d8:	e005      	b.n	80035e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fa15 	bl	8003a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 fa26 	bl	8003a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f003 0310 	and.w	r3, r3, #16
 80035f6:	2b10      	cmp	r3, #16
 80035f8:	d122      	bne.n	8003640 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f003 0310 	and.w	r3, r3, #16
 8003604:	2b10      	cmp	r3, #16
 8003606:	d11b      	bne.n	8003640 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0210 	mvn.w	r2, #16
 8003610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2208      	movs	r2, #8
 8003616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f9f9 	bl	8003a1e <HAL_TIM_IC_CaptureCallback>
 800362c:	e005      	b.n	800363a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f9eb 	bl	8003a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f9fc 	bl	8003a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b01      	cmp	r3, #1
 800364c:	d10e      	bne.n	800366c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b01      	cmp	r3, #1
 800365a:	d107      	bne.n	800366c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0201 	mvn.w	r2, #1
 8003664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fd fb02 	bl	8000c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003676:	2b80      	cmp	r3, #128	; 0x80
 8003678:	d10e      	bne.n	8003698 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003684:	2b80      	cmp	r3, #128	; 0x80
 8003686:	d107      	bne.n	8003698 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 fe5c 	bl	8004350 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a2:	2b40      	cmp	r3, #64	; 0x40
 80036a4:	d10e      	bne.n	80036c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b0:	2b40      	cmp	r3, #64	; 0x40
 80036b2:	d107      	bne.n	80036c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f9cb 	bl	8003a5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	2b20      	cmp	r3, #32
 80036d0:	d10e      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f003 0320 	and.w	r3, r3, #32
 80036dc:	2b20      	cmp	r3, #32
 80036de:	d107      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f06f 0220 	mvn.w	r2, #32
 80036e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 fe26 	bl	800433c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036f0:	bf00      	nop
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003712:	2302      	movs	r3, #2
 8003714:	e0ae      	b.n	8003874 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b0c      	cmp	r3, #12
 8003722:	f200 809f 	bhi.w	8003864 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003726:	a201      	add	r2, pc, #4	; (adr r2, 800372c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372c:	08003761 	.word	0x08003761
 8003730:	08003865 	.word	0x08003865
 8003734:	08003865 	.word	0x08003865
 8003738:	08003865 	.word	0x08003865
 800373c:	080037a1 	.word	0x080037a1
 8003740:	08003865 	.word	0x08003865
 8003744:	08003865 	.word	0x08003865
 8003748:	08003865 	.word	0x08003865
 800374c:	080037e3 	.word	0x080037e3
 8003750:	08003865 	.word	0x08003865
 8003754:	08003865 	.word	0x08003865
 8003758:	08003865 	.word	0x08003865
 800375c:	08003823 	.word	0x08003823
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68b9      	ldr	r1, [r7, #8]
 8003766:	4618      	mov	r0, r3
 8003768:	f000 fadc 	bl	8003d24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699a      	ldr	r2, [r3, #24]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0208 	orr.w	r2, r2, #8
 800377a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699a      	ldr	r2, [r3, #24]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0204 	bic.w	r2, r2, #4
 800378a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6999      	ldr	r1, [r3, #24]
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	619a      	str	r2, [r3, #24]
      break;
 800379e:	e064      	b.n	800386a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68b9      	ldr	r1, [r7, #8]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fb22 	bl	8003df0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699a      	ldr	r2, [r3, #24]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6999      	ldr	r1, [r3, #24]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	021a      	lsls	r2, r3, #8
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	619a      	str	r2, [r3, #24]
      break;
 80037e0:	e043      	b.n	800386a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68b9      	ldr	r1, [r7, #8]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 fb6d 	bl	8003ec8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	69da      	ldr	r2, [r3, #28]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f042 0208 	orr.w	r2, r2, #8
 80037fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	69da      	ldr	r2, [r3, #28]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0204 	bic.w	r2, r2, #4
 800380c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	69d9      	ldr	r1, [r3, #28]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	691a      	ldr	r2, [r3, #16]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	61da      	str	r2, [r3, #28]
      break;
 8003820:	e023      	b.n	800386a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68b9      	ldr	r1, [r7, #8]
 8003828:	4618      	mov	r0, r3
 800382a:	f000 fbb7 	bl	8003f9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	69da      	ldr	r2, [r3, #28]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800383c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	69da      	ldr	r2, [r3, #28]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800384c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	69d9      	ldr	r1, [r3, #28]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	021a      	lsls	r2, r3, #8
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	61da      	str	r2, [r3, #28]
      break;
 8003862:	e002      	b.n	800386a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	75fb      	strb	r3, [r7, #23]
      break;
 8003868:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003872:	7dfb      	ldrb	r3, [r7, #23]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_TIM_ConfigClockSource+0x1c>
 8003894:	2302      	movs	r3, #2
 8003896:	e0b4      	b.n	8003a02 <HAL_TIM_ConfigClockSource+0x186>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038d0:	d03e      	beq.n	8003950 <HAL_TIM_ConfigClockSource+0xd4>
 80038d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038d6:	f200 8087 	bhi.w	80039e8 <HAL_TIM_ConfigClockSource+0x16c>
 80038da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038de:	f000 8086 	beq.w	80039ee <HAL_TIM_ConfigClockSource+0x172>
 80038e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e6:	d87f      	bhi.n	80039e8 <HAL_TIM_ConfigClockSource+0x16c>
 80038e8:	2b70      	cmp	r3, #112	; 0x70
 80038ea:	d01a      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0xa6>
 80038ec:	2b70      	cmp	r3, #112	; 0x70
 80038ee:	d87b      	bhi.n	80039e8 <HAL_TIM_ConfigClockSource+0x16c>
 80038f0:	2b60      	cmp	r3, #96	; 0x60
 80038f2:	d050      	beq.n	8003996 <HAL_TIM_ConfigClockSource+0x11a>
 80038f4:	2b60      	cmp	r3, #96	; 0x60
 80038f6:	d877      	bhi.n	80039e8 <HAL_TIM_ConfigClockSource+0x16c>
 80038f8:	2b50      	cmp	r3, #80	; 0x50
 80038fa:	d03c      	beq.n	8003976 <HAL_TIM_ConfigClockSource+0xfa>
 80038fc:	2b50      	cmp	r3, #80	; 0x50
 80038fe:	d873      	bhi.n	80039e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003900:	2b40      	cmp	r3, #64	; 0x40
 8003902:	d058      	beq.n	80039b6 <HAL_TIM_ConfigClockSource+0x13a>
 8003904:	2b40      	cmp	r3, #64	; 0x40
 8003906:	d86f      	bhi.n	80039e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003908:	2b30      	cmp	r3, #48	; 0x30
 800390a:	d064      	beq.n	80039d6 <HAL_TIM_ConfigClockSource+0x15a>
 800390c:	2b30      	cmp	r3, #48	; 0x30
 800390e:	d86b      	bhi.n	80039e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003910:	2b20      	cmp	r3, #32
 8003912:	d060      	beq.n	80039d6 <HAL_TIM_ConfigClockSource+0x15a>
 8003914:	2b20      	cmp	r3, #32
 8003916:	d867      	bhi.n	80039e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003918:	2b00      	cmp	r3, #0
 800391a:	d05c      	beq.n	80039d6 <HAL_TIM_ConfigClockSource+0x15a>
 800391c:	2b10      	cmp	r3, #16
 800391e:	d05a      	beq.n	80039d6 <HAL_TIM_ConfigClockSource+0x15a>
 8003920:	e062      	b.n	80039e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6818      	ldr	r0, [r3, #0]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	6899      	ldr	r1, [r3, #8]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f000 fbfd 	bl	8004130 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003944:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	609a      	str	r2, [r3, #8]
      break;
 800394e:	e04f      	b.n	80039f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6818      	ldr	r0, [r3, #0]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	6899      	ldr	r1, [r3, #8]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f000 fbe6 	bl	8004130 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003972:	609a      	str	r2, [r3, #8]
      break;
 8003974:	e03c      	b.n	80039f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	6859      	ldr	r1, [r3, #4]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	461a      	mov	r2, r3
 8003984:	f000 fb5a 	bl	800403c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2150      	movs	r1, #80	; 0x50
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fbb3 	bl	80040fa <TIM_ITRx_SetConfig>
      break;
 8003994:	e02c      	b.n	80039f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	6859      	ldr	r1, [r3, #4]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	461a      	mov	r2, r3
 80039a4:	f000 fb79 	bl	800409a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2160      	movs	r1, #96	; 0x60
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fba3 	bl	80040fa <TIM_ITRx_SetConfig>
      break;
 80039b4:	e01c      	b.n	80039f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	6859      	ldr	r1, [r3, #4]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	461a      	mov	r2, r3
 80039c4:	f000 fb3a 	bl	800403c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2140      	movs	r1, #64	; 0x40
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 fb93 	bl	80040fa <TIM_ITRx_SetConfig>
      break;
 80039d4:	e00c      	b.n	80039f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4619      	mov	r1, r3
 80039e0:	4610      	mov	r0, r2
 80039e2:	f000 fb8a 	bl	80040fa <TIM_ITRx_SetConfig>
      break;
 80039e6:	e003      	b.n	80039f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	73fb      	strb	r3, [r7, #15]
      break;
 80039ec:	e000      	b.n	80039f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d107      	bne.n	8003aaa <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aa8:	e02a      	b.n	8003b00 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d107      	bne.n	8003ac4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ac2:	e01d      	b.n	8003b00 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d107      	bne.n	8003ade <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2204      	movs	r2, #4
 8003ad2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003adc:	e010      	b.n	8003b00 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d107      	bne.n	8003af8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2208      	movs	r2, #8
 8003aec:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003af6:	e003      	b.n	8003b00 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f7ff ffb4 	bl	8003a6e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	771a      	strb	r2, [r3, #28]
}
 8003b0c:	bf00      	nop
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b20:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d10b      	bne.n	8003b44 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d136      	bne.n	8003ba8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b42:	e031      	b.n	8003ba8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d10b      	bne.n	8003b66 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2202      	movs	r2, #2
 8003b52:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d125      	bne.n	8003ba8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b64:	e020      	b.n	8003ba8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d10b      	bne.n	8003b88 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2204      	movs	r2, #4
 8003b74:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d114      	bne.n	8003ba8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b86:	e00f      	b.n	8003ba8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d10a      	bne.n	8003ba8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2208      	movs	r2, #8
 8003b96:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d103      	bne.n	8003ba8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f7ff ff42 	bl	8003a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	771a      	strb	r2, [r3, #28]
}
 8003bb4:	bf00      	nop
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d103      	bne.n	8003bdc <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	771a      	strb	r2, [r3, #28]
 8003bda:	e019      	b.n	8003c10 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d103      	bne.n	8003bee <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2202      	movs	r2, #2
 8003bea:	771a      	strb	r2, [r3, #28]
 8003bec:	e010      	b.n	8003c10 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d103      	bne.n	8003c00 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2204      	movs	r2, #4
 8003bfc:	771a      	strb	r2, [r3, #28]
 8003bfe:	e007      	b.n	8003c10 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d102      	bne.n	8003c10 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2208      	movs	r2, #8
 8003c0e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f7ff ff18 	bl	8003a46 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	771a      	strb	r2, [r3, #28]
}
 8003c1c:	bf00      	nop
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a34      	ldr	r2, [pc, #208]	; (8003d08 <TIM_Base_SetConfig+0xe4>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d00f      	beq.n	8003c5c <TIM_Base_SetConfig+0x38>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c42:	d00b      	beq.n	8003c5c <TIM_Base_SetConfig+0x38>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a31      	ldr	r2, [pc, #196]	; (8003d0c <TIM_Base_SetConfig+0xe8>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d007      	beq.n	8003c5c <TIM_Base_SetConfig+0x38>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a30      	ldr	r2, [pc, #192]	; (8003d10 <TIM_Base_SetConfig+0xec>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d003      	beq.n	8003c5c <TIM_Base_SetConfig+0x38>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a2f      	ldr	r2, [pc, #188]	; (8003d14 <TIM_Base_SetConfig+0xf0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d108      	bne.n	8003c6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a25      	ldr	r2, [pc, #148]	; (8003d08 <TIM_Base_SetConfig+0xe4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d01b      	beq.n	8003cae <TIM_Base_SetConfig+0x8a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7c:	d017      	beq.n	8003cae <TIM_Base_SetConfig+0x8a>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a22      	ldr	r2, [pc, #136]	; (8003d0c <TIM_Base_SetConfig+0xe8>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d013      	beq.n	8003cae <TIM_Base_SetConfig+0x8a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a21      	ldr	r2, [pc, #132]	; (8003d10 <TIM_Base_SetConfig+0xec>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d00f      	beq.n	8003cae <TIM_Base_SetConfig+0x8a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a20      	ldr	r2, [pc, #128]	; (8003d14 <TIM_Base_SetConfig+0xf0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d00b      	beq.n	8003cae <TIM_Base_SetConfig+0x8a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a1f      	ldr	r2, [pc, #124]	; (8003d18 <TIM_Base_SetConfig+0xf4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d007      	beq.n	8003cae <TIM_Base_SetConfig+0x8a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a1e      	ldr	r2, [pc, #120]	; (8003d1c <TIM_Base_SetConfig+0xf8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d003      	beq.n	8003cae <TIM_Base_SetConfig+0x8a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a1d      	ldr	r2, [pc, #116]	; (8003d20 <TIM_Base_SetConfig+0xfc>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d108      	bne.n	8003cc0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a08      	ldr	r2, [pc, #32]	; (8003d08 <TIM_Base_SetConfig+0xe4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d103      	bne.n	8003cf4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	615a      	str	r2, [r3, #20]
}
 8003cfa:	bf00      	nop
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40010000 	.word	0x40010000
 8003d0c:	40000400 	.word	0x40000400
 8003d10:	40000800 	.word	0x40000800
 8003d14:	40000c00 	.word	0x40000c00
 8003d18:	40014000 	.word	0x40014000
 8003d1c:	40014400 	.word	0x40014400
 8003d20:	40014800 	.word	0x40014800

08003d24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	f023 0201 	bic.w	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0303 	bic.w	r3, r3, #3
 8003d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f023 0302 	bic.w	r3, r3, #2
 8003d6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a1c      	ldr	r2, [pc, #112]	; (8003dec <TIM_OC1_SetConfig+0xc8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d10c      	bne.n	8003d9a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f023 0308 	bic.w	r3, r3, #8
 8003d86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f023 0304 	bic.w	r3, r3, #4
 8003d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a13      	ldr	r2, [pc, #76]	; (8003dec <TIM_OC1_SetConfig+0xc8>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d111      	bne.n	8003dc6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	621a      	str	r2, [r3, #32]
}
 8003de0:	bf00      	nop
 8003de2:	371c      	adds	r7, #28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	40010000 	.word	0x40010000

08003df0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	f023 0210 	bic.w	r2, r3, #16
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	021b      	lsls	r3, r3, #8
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f023 0320 	bic.w	r3, r3, #32
 8003e3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a1e      	ldr	r2, [pc, #120]	; (8003ec4 <TIM_OC2_SetConfig+0xd4>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d10d      	bne.n	8003e6c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	011b      	lsls	r3, r3, #4
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a15      	ldr	r2, [pc, #84]	; (8003ec4 <TIM_OC2_SetConfig+0xd4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d113      	bne.n	8003e9c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	621a      	str	r2, [r3, #32]
}
 8003eb6:	bf00      	nop
 8003eb8:	371c      	adds	r7, #28
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40010000 	.word	0x40010000

08003ec8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0303 	bic.w	r3, r3, #3
 8003efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	021b      	lsls	r3, r3, #8
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a1d      	ldr	r2, [pc, #116]	; (8003f98 <TIM_OC3_SetConfig+0xd0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d10d      	bne.n	8003f42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	021b      	lsls	r3, r3, #8
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a14      	ldr	r2, [pc, #80]	; (8003f98 <TIM_OC3_SetConfig+0xd0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d113      	bne.n	8003f72 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	621a      	str	r2, [r3, #32]
}
 8003f8c:	bf00      	nop
 8003f8e:	371c      	adds	r7, #28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	40010000 	.word	0x40010000

08003f9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	021b      	lsls	r3, r3, #8
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fe6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	031b      	lsls	r3, r3, #12
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a10      	ldr	r2, [pc, #64]	; (8004038 <TIM_OC4_SetConfig+0x9c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d109      	bne.n	8004010 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004002:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	019b      	lsls	r3, r3, #6
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4313      	orrs	r3, r2
 800400e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	621a      	str	r2, [r3, #32]
}
 800402a:	bf00      	nop
 800402c:	371c      	adds	r7, #28
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40010000 	.word	0x40010000

0800403c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	f023 0201 	bic.w	r2, r3, #1
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f023 030a 	bic.w	r3, r3, #10
 8004078:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4313      	orrs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	621a      	str	r2, [r3, #32]
}
 800408e:	bf00      	nop
 8004090:	371c      	adds	r7, #28
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800409a:	b480      	push	{r7}
 800409c:	b087      	sub	sp, #28
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	f023 0210 	bic.w	r2, r3, #16
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	031b      	lsls	r3, r3, #12
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	4313      	orrs	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	621a      	str	r2, [r3, #32]
}
 80040ee:	bf00      	nop
 80040f0:	371c      	adds	r7, #28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b085      	sub	sp, #20
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004110:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4313      	orrs	r3, r2
 8004118:	f043 0307 	orr.w	r3, r3, #7
 800411c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	609a      	str	r2, [r3, #8]
}
 8004124:	bf00      	nop
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
 800413c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800414a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	021a      	lsls	r2, r3, #8
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	431a      	orrs	r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4313      	orrs	r3, r2
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	4313      	orrs	r3, r2
 800415c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	609a      	str	r2, [r3, #8]
}
 8004164:	bf00      	nop
 8004166:	371c      	adds	r7, #28
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f003 031f 	and.w	r3, r3, #31
 8004182:	2201      	movs	r2, #1
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6a1a      	ldr	r2, [r3, #32]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	43db      	mvns	r3, r3
 8004192:	401a      	ands	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a1a      	ldr	r2, [r3, #32]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	f003 031f 	and.w	r3, r3, #31
 80041a2:	6879      	ldr	r1, [r7, #4]
 80041a4:	fa01 f303 	lsl.w	r3, r1, r3
 80041a8:	431a      	orrs	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	621a      	str	r2, [r3, #32]
}
 80041ae:	bf00      	nop
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
	...

080041bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e050      	b.n	8004276 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a1c      	ldr	r2, [pc, #112]	; (8004284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d018      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004220:	d013      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a18      	ldr	r2, [pc, #96]	; (8004288 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00e      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a16      	ldr	r2, [pc, #88]	; (800428c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d009      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a15      	ldr	r2, [pc, #84]	; (8004290 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d004      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a13      	ldr	r2, [pc, #76]	; (8004294 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d10c      	bne.n	8004264 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004250:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	4313      	orrs	r3, r2
 800425a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	40010000 	.word	0x40010000
 8004288:	40000400 	.word	0x40000400
 800428c:	40000800 	.word	0x40000800
 8004290:	40000c00 	.word	0x40000c00
 8004294:	40014000 	.word	0x40014000

08004298 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d101      	bne.n	80042b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80042b0:	2302      	movs	r3, #2
 80042b2:	e03d      	b.n	8004330 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	4313      	orrs	r3, r2
 800430e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	4313      	orrs	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e03f      	b.n	80043f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7fd f942 	bl	8001614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2224      	movs	r2, #36	; 0x24
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f929 	bl	8004600 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695a      	ldr	r2, [r3, #20]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68da      	ldr	r2, [r3, #12]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b08a      	sub	sp, #40	; 0x28
 8004402:	af02      	add	r7, sp, #8
 8004404:	60f8      	str	r0, [r7, #12]
 8004406:	60b9      	str	r1, [r7, #8]
 8004408:	603b      	str	r3, [r7, #0]
 800440a:	4613      	mov	r3, r2
 800440c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b20      	cmp	r3, #32
 800441c:	d17c      	bne.n	8004518 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <HAL_UART_Transmit+0x2c>
 8004424:	88fb      	ldrh	r3, [r7, #6]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e075      	b.n	800451a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <HAL_UART_Transmit+0x3e>
 8004438:	2302      	movs	r3, #2
 800443a:	e06e      	b.n	800451a <HAL_UART_Transmit+0x11c>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2221      	movs	r2, #33	; 0x21
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004452:	f7fd fae7 	bl	8001a24 <HAL_GetTick>
 8004456:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	88fa      	ldrh	r2, [r7, #6]
 800445c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	88fa      	ldrh	r2, [r7, #6]
 8004462:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800446c:	d108      	bne.n	8004480 <HAL_UART_Transmit+0x82>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d104      	bne.n	8004480 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004476:	2300      	movs	r3, #0
 8004478:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	61bb      	str	r3, [r7, #24]
 800447e:	e003      	b.n	8004488 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004484:	2300      	movs	r3, #0
 8004486:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004490:	e02a      	b.n	80044e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2200      	movs	r2, #0
 800449a:	2180      	movs	r1, #128	; 0x80
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 f840 	bl	8004522 <UART_WaitOnFlagUntilTimeout>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e036      	b.n	800451a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10b      	bne.n	80044ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	461a      	mov	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	3302      	adds	r3, #2
 80044c6:	61bb      	str	r3, [r7, #24]
 80044c8:	e007      	b.n	80044da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	781a      	ldrb	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	3301      	adds	r3, #1
 80044d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1cf      	bne.n	8004492 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2200      	movs	r2, #0
 80044fa:	2140      	movs	r1, #64	; 0x40
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 f810 	bl	8004522 <UART_WaitOnFlagUntilTimeout>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e006      	b.n	800451a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	e000      	b.n	800451a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004518:	2302      	movs	r3, #2
  }
}
 800451a:	4618      	mov	r0, r3
 800451c:	3720      	adds	r7, #32
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b090      	sub	sp, #64	; 0x40
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	603b      	str	r3, [r7, #0]
 800452e:	4613      	mov	r3, r2
 8004530:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004532:	e050      	b.n	80045d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453a:	d04c      	beq.n	80045d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800453c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800453e:	2b00      	cmp	r3, #0
 8004540:	d007      	beq.n	8004552 <UART_WaitOnFlagUntilTimeout+0x30>
 8004542:	f7fd fa6f 	bl	8001a24 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800454e:	429a      	cmp	r2, r3
 8004550:	d241      	bcs.n	80045d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	330c      	adds	r3, #12
 8004558:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004568:	63fb      	str	r3, [r7, #60]	; 0x3c
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	330c      	adds	r3, #12
 8004570:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004572:	637a      	str	r2, [r7, #52]	; 0x34
 8004574:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004576:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004578:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800457a:	e841 2300 	strex	r3, r2, [r1]
 800457e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1e5      	bne.n	8004552 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3314      	adds	r3, #20
 800458c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	e853 3f00 	ldrex	r3, [r3]
 8004594:	613b      	str	r3, [r7, #16]
   return(result);
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	63bb      	str	r3, [r7, #56]	; 0x38
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3314      	adds	r3, #20
 80045a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045a6:	623a      	str	r2, [r7, #32]
 80045a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045aa:	69f9      	ldr	r1, [r7, #28]
 80045ac:	6a3a      	ldr	r2, [r7, #32]
 80045ae:	e841 2300 	strex	r3, r2, [r1]
 80045b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1e5      	bne.n	8004586 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2220      	movs	r2, #32
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e00f      	b.n	80045f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	4013      	ands	r3, r2
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	bf0c      	ite	eq
 80045e6:	2301      	moveq	r3, #1
 80045e8:	2300      	movne	r3, #0
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	461a      	mov	r2, r3
 80045ee:	79fb      	ldrb	r3, [r7, #7]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d09f      	beq.n	8004534 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3740      	adds	r7, #64	; 0x40
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004604:	b0c0      	sub	sp, #256	; 0x100
 8004606:	af00      	add	r7, sp, #0
 8004608:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800460c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461c:	68d9      	ldr	r1, [r3, #12]
 800461e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	ea40 0301 	orr.w	r3, r0, r1
 8004628:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800462a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	431a      	orrs	r2, r3
 8004638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	431a      	orrs	r2, r3
 8004640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800464c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004658:	f021 010c 	bic.w	r1, r1, #12
 800465c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004666:	430b      	orrs	r3, r1
 8004668:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800466a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800467a:	6999      	ldr	r1, [r3, #24]
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	ea40 0301 	orr.w	r3, r0, r1
 8004686:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	4b8f      	ldr	r3, [pc, #572]	; (80048cc <UART_SetConfig+0x2cc>)
 8004690:	429a      	cmp	r2, r3
 8004692:	d005      	beq.n	80046a0 <UART_SetConfig+0xa0>
 8004694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	4b8d      	ldr	r3, [pc, #564]	; (80048d0 <UART_SetConfig+0x2d0>)
 800469c:	429a      	cmp	r2, r3
 800469e:	d104      	bne.n	80046aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046a0:	f7fe fc52 	bl	8002f48 <HAL_RCC_GetPCLK2Freq>
 80046a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80046a8:	e003      	b.n	80046b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046aa:	f7fe fc39 	bl	8002f20 <HAL_RCC_GetPCLK1Freq>
 80046ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046bc:	f040 810c 	bne.w	80048d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046c4:	2200      	movs	r2, #0
 80046c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80046ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80046ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80046d2:	4622      	mov	r2, r4
 80046d4:	462b      	mov	r3, r5
 80046d6:	1891      	adds	r1, r2, r2
 80046d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80046da:	415b      	adcs	r3, r3
 80046dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80046e2:	4621      	mov	r1, r4
 80046e4:	eb12 0801 	adds.w	r8, r2, r1
 80046e8:	4629      	mov	r1, r5
 80046ea:	eb43 0901 	adc.w	r9, r3, r1
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004702:	4690      	mov	r8, r2
 8004704:	4699      	mov	r9, r3
 8004706:	4623      	mov	r3, r4
 8004708:	eb18 0303 	adds.w	r3, r8, r3
 800470c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004710:	462b      	mov	r3, r5
 8004712:	eb49 0303 	adc.w	r3, r9, r3
 8004716:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800471a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004726:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800472a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800472e:	460b      	mov	r3, r1
 8004730:	18db      	adds	r3, r3, r3
 8004732:	653b      	str	r3, [r7, #80]	; 0x50
 8004734:	4613      	mov	r3, r2
 8004736:	eb42 0303 	adc.w	r3, r2, r3
 800473a:	657b      	str	r3, [r7, #84]	; 0x54
 800473c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004740:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004744:	f7fc f912 	bl	800096c <__aeabi_uldivmod>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4b61      	ldr	r3, [pc, #388]	; (80048d4 <UART_SetConfig+0x2d4>)
 800474e:	fba3 2302 	umull	r2, r3, r3, r2
 8004752:	095b      	lsrs	r3, r3, #5
 8004754:	011c      	lsls	r4, r3, #4
 8004756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800475a:	2200      	movs	r2, #0
 800475c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004760:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004764:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004768:	4642      	mov	r2, r8
 800476a:	464b      	mov	r3, r9
 800476c:	1891      	adds	r1, r2, r2
 800476e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004770:	415b      	adcs	r3, r3
 8004772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004774:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004778:	4641      	mov	r1, r8
 800477a:	eb12 0a01 	adds.w	sl, r2, r1
 800477e:	4649      	mov	r1, r9
 8004780:	eb43 0b01 	adc.w	fp, r3, r1
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004790:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004794:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004798:	4692      	mov	sl, r2
 800479a:	469b      	mov	fp, r3
 800479c:	4643      	mov	r3, r8
 800479e:	eb1a 0303 	adds.w	r3, sl, r3
 80047a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047a6:	464b      	mov	r3, r9
 80047a8:	eb4b 0303 	adc.w	r3, fp, r3
 80047ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80047c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80047c4:	460b      	mov	r3, r1
 80047c6:	18db      	adds	r3, r3, r3
 80047c8:	643b      	str	r3, [r7, #64]	; 0x40
 80047ca:	4613      	mov	r3, r2
 80047cc:	eb42 0303 	adc.w	r3, r2, r3
 80047d0:	647b      	str	r3, [r7, #68]	; 0x44
 80047d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80047da:	f7fc f8c7 	bl	800096c <__aeabi_uldivmod>
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	4611      	mov	r1, r2
 80047e4:	4b3b      	ldr	r3, [pc, #236]	; (80048d4 <UART_SetConfig+0x2d4>)
 80047e6:	fba3 2301 	umull	r2, r3, r3, r1
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	2264      	movs	r2, #100	; 0x64
 80047ee:	fb02 f303 	mul.w	r3, r2, r3
 80047f2:	1acb      	subs	r3, r1, r3
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80047fa:	4b36      	ldr	r3, [pc, #216]	; (80048d4 <UART_SetConfig+0x2d4>)
 80047fc:	fba3 2302 	umull	r2, r3, r3, r2
 8004800:	095b      	lsrs	r3, r3, #5
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004808:	441c      	add	r4, r3
 800480a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800480e:	2200      	movs	r2, #0
 8004810:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004814:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004818:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800481c:	4642      	mov	r2, r8
 800481e:	464b      	mov	r3, r9
 8004820:	1891      	adds	r1, r2, r2
 8004822:	63b9      	str	r1, [r7, #56]	; 0x38
 8004824:	415b      	adcs	r3, r3
 8004826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004828:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800482c:	4641      	mov	r1, r8
 800482e:	1851      	adds	r1, r2, r1
 8004830:	6339      	str	r1, [r7, #48]	; 0x30
 8004832:	4649      	mov	r1, r9
 8004834:	414b      	adcs	r3, r1
 8004836:	637b      	str	r3, [r7, #52]	; 0x34
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004844:	4659      	mov	r1, fp
 8004846:	00cb      	lsls	r3, r1, #3
 8004848:	4651      	mov	r1, sl
 800484a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800484e:	4651      	mov	r1, sl
 8004850:	00ca      	lsls	r2, r1, #3
 8004852:	4610      	mov	r0, r2
 8004854:	4619      	mov	r1, r3
 8004856:	4603      	mov	r3, r0
 8004858:	4642      	mov	r2, r8
 800485a:	189b      	adds	r3, r3, r2
 800485c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004860:	464b      	mov	r3, r9
 8004862:	460a      	mov	r2, r1
 8004864:	eb42 0303 	adc.w	r3, r2, r3
 8004868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800486c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004878:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800487c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004880:	460b      	mov	r3, r1
 8004882:	18db      	adds	r3, r3, r3
 8004884:	62bb      	str	r3, [r7, #40]	; 0x28
 8004886:	4613      	mov	r3, r2
 8004888:	eb42 0303 	adc.w	r3, r2, r3
 800488c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800488e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004892:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004896:	f7fc f869 	bl	800096c <__aeabi_uldivmod>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	4b0d      	ldr	r3, [pc, #52]	; (80048d4 <UART_SetConfig+0x2d4>)
 80048a0:	fba3 1302 	umull	r1, r3, r3, r2
 80048a4:	095b      	lsrs	r3, r3, #5
 80048a6:	2164      	movs	r1, #100	; 0x64
 80048a8:	fb01 f303 	mul.w	r3, r1, r3
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	3332      	adds	r3, #50	; 0x32
 80048b2:	4a08      	ldr	r2, [pc, #32]	; (80048d4 <UART_SetConfig+0x2d4>)
 80048b4:	fba2 2303 	umull	r2, r3, r2, r3
 80048b8:	095b      	lsrs	r3, r3, #5
 80048ba:	f003 0207 	and.w	r2, r3, #7
 80048be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4422      	add	r2, r4
 80048c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048c8:	e105      	b.n	8004ad6 <UART_SetConfig+0x4d6>
 80048ca:	bf00      	nop
 80048cc:	40011000 	.word	0x40011000
 80048d0:	40011400 	.word	0x40011400
 80048d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048dc:	2200      	movs	r2, #0
 80048de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80048e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80048e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80048ea:	4642      	mov	r2, r8
 80048ec:	464b      	mov	r3, r9
 80048ee:	1891      	adds	r1, r2, r2
 80048f0:	6239      	str	r1, [r7, #32]
 80048f2:	415b      	adcs	r3, r3
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
 80048f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048fa:	4641      	mov	r1, r8
 80048fc:	1854      	adds	r4, r2, r1
 80048fe:	4649      	mov	r1, r9
 8004900:	eb43 0501 	adc.w	r5, r3, r1
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	f04f 0300 	mov.w	r3, #0
 800490c:	00eb      	lsls	r3, r5, #3
 800490e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004912:	00e2      	lsls	r2, r4, #3
 8004914:	4614      	mov	r4, r2
 8004916:	461d      	mov	r5, r3
 8004918:	4643      	mov	r3, r8
 800491a:	18e3      	adds	r3, r4, r3
 800491c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004920:	464b      	mov	r3, r9
 8004922:	eb45 0303 	adc.w	r3, r5, r3
 8004926:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800492a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004936:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004946:	4629      	mov	r1, r5
 8004948:	008b      	lsls	r3, r1, #2
 800494a:	4621      	mov	r1, r4
 800494c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004950:	4621      	mov	r1, r4
 8004952:	008a      	lsls	r2, r1, #2
 8004954:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004958:	f7fc f808 	bl	800096c <__aeabi_uldivmod>
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	4b60      	ldr	r3, [pc, #384]	; (8004ae4 <UART_SetConfig+0x4e4>)
 8004962:	fba3 2302 	umull	r2, r3, r3, r2
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	011c      	lsls	r4, r3, #4
 800496a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800496e:	2200      	movs	r2, #0
 8004970:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004974:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004978:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800497c:	4642      	mov	r2, r8
 800497e:	464b      	mov	r3, r9
 8004980:	1891      	adds	r1, r2, r2
 8004982:	61b9      	str	r1, [r7, #24]
 8004984:	415b      	adcs	r3, r3
 8004986:	61fb      	str	r3, [r7, #28]
 8004988:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800498c:	4641      	mov	r1, r8
 800498e:	1851      	adds	r1, r2, r1
 8004990:	6139      	str	r1, [r7, #16]
 8004992:	4649      	mov	r1, r9
 8004994:	414b      	adcs	r3, r1
 8004996:	617b      	str	r3, [r7, #20]
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049a4:	4659      	mov	r1, fp
 80049a6:	00cb      	lsls	r3, r1, #3
 80049a8:	4651      	mov	r1, sl
 80049aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049ae:	4651      	mov	r1, sl
 80049b0:	00ca      	lsls	r2, r1, #3
 80049b2:	4610      	mov	r0, r2
 80049b4:	4619      	mov	r1, r3
 80049b6:	4603      	mov	r3, r0
 80049b8:	4642      	mov	r2, r8
 80049ba:	189b      	adds	r3, r3, r2
 80049bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049c0:	464b      	mov	r3, r9
 80049c2:	460a      	mov	r2, r1
 80049c4:	eb42 0303 	adc.w	r3, r2, r3
 80049c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80049d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80049d8:	f04f 0200 	mov.w	r2, #0
 80049dc:	f04f 0300 	mov.w	r3, #0
 80049e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80049e4:	4649      	mov	r1, r9
 80049e6:	008b      	lsls	r3, r1, #2
 80049e8:	4641      	mov	r1, r8
 80049ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049ee:	4641      	mov	r1, r8
 80049f0:	008a      	lsls	r2, r1, #2
 80049f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80049f6:	f7fb ffb9 	bl	800096c <__aeabi_uldivmod>
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	4b39      	ldr	r3, [pc, #228]	; (8004ae4 <UART_SetConfig+0x4e4>)
 8004a00:	fba3 1302 	umull	r1, r3, r3, r2
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	2164      	movs	r1, #100	; 0x64
 8004a08:	fb01 f303 	mul.w	r3, r1, r3
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	011b      	lsls	r3, r3, #4
 8004a10:	3332      	adds	r3, #50	; 0x32
 8004a12:	4a34      	ldr	r2, [pc, #208]	; (8004ae4 <UART_SetConfig+0x4e4>)
 8004a14:	fba2 2303 	umull	r2, r3, r2, r3
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a1e:	441c      	add	r4, r3
 8004a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a24:	2200      	movs	r2, #0
 8004a26:	673b      	str	r3, [r7, #112]	; 0x70
 8004a28:	677a      	str	r2, [r7, #116]	; 0x74
 8004a2a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a2e:	4642      	mov	r2, r8
 8004a30:	464b      	mov	r3, r9
 8004a32:	1891      	adds	r1, r2, r2
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	415b      	adcs	r3, r3
 8004a38:	60fb      	str	r3, [r7, #12]
 8004a3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a3e:	4641      	mov	r1, r8
 8004a40:	1851      	adds	r1, r2, r1
 8004a42:	6039      	str	r1, [r7, #0]
 8004a44:	4649      	mov	r1, r9
 8004a46:	414b      	adcs	r3, r1
 8004a48:	607b      	str	r3, [r7, #4]
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	f04f 0300 	mov.w	r3, #0
 8004a52:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a56:	4659      	mov	r1, fp
 8004a58:	00cb      	lsls	r3, r1, #3
 8004a5a:	4651      	mov	r1, sl
 8004a5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a60:	4651      	mov	r1, sl
 8004a62:	00ca      	lsls	r2, r1, #3
 8004a64:	4610      	mov	r0, r2
 8004a66:	4619      	mov	r1, r3
 8004a68:	4603      	mov	r3, r0
 8004a6a:	4642      	mov	r2, r8
 8004a6c:	189b      	adds	r3, r3, r2
 8004a6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a70:	464b      	mov	r3, r9
 8004a72:	460a      	mov	r2, r1
 8004a74:	eb42 0303 	adc.w	r3, r2, r3
 8004a78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	663b      	str	r3, [r7, #96]	; 0x60
 8004a84:	667a      	str	r2, [r7, #100]	; 0x64
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	f04f 0300 	mov.w	r3, #0
 8004a8e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a92:	4649      	mov	r1, r9
 8004a94:	008b      	lsls	r3, r1, #2
 8004a96:	4641      	mov	r1, r8
 8004a98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a9c:	4641      	mov	r1, r8
 8004a9e:	008a      	lsls	r2, r1, #2
 8004aa0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004aa4:	f7fb ff62 	bl	800096c <__aeabi_uldivmod>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4b0d      	ldr	r3, [pc, #52]	; (8004ae4 <UART_SetConfig+0x4e4>)
 8004aae:	fba3 1302 	umull	r1, r3, r3, r2
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	2164      	movs	r1, #100	; 0x64
 8004ab6:	fb01 f303 	mul.w	r3, r1, r3
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	3332      	adds	r3, #50	; 0x32
 8004ac0:	4a08      	ldr	r2, [pc, #32]	; (8004ae4 <UART_SetConfig+0x4e4>)
 8004ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac6:	095b      	lsrs	r3, r3, #5
 8004ac8:	f003 020f 	and.w	r2, r3, #15
 8004acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4422      	add	r2, r4
 8004ad4:	609a      	str	r2, [r3, #8]
}
 8004ad6:	bf00      	nop
 8004ad8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004adc:	46bd      	mov	sp, r7
 8004ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ae2:	bf00      	nop
 8004ae4:	51eb851f 	.word	0x51eb851f

08004ae8 <__errno>:
 8004ae8:	4b01      	ldr	r3, [pc, #4]	; (8004af0 <__errno+0x8>)
 8004aea:	6818      	ldr	r0, [r3, #0]
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	2000000c 	.word	0x2000000c

08004af4 <__libc_init_array>:
 8004af4:	b570      	push	{r4, r5, r6, lr}
 8004af6:	4d0d      	ldr	r5, [pc, #52]	; (8004b2c <__libc_init_array+0x38>)
 8004af8:	4c0d      	ldr	r4, [pc, #52]	; (8004b30 <__libc_init_array+0x3c>)
 8004afa:	1b64      	subs	r4, r4, r5
 8004afc:	10a4      	asrs	r4, r4, #2
 8004afe:	2600      	movs	r6, #0
 8004b00:	42a6      	cmp	r6, r4
 8004b02:	d109      	bne.n	8004b18 <__libc_init_array+0x24>
 8004b04:	4d0b      	ldr	r5, [pc, #44]	; (8004b34 <__libc_init_array+0x40>)
 8004b06:	4c0c      	ldr	r4, [pc, #48]	; (8004b38 <__libc_init_array+0x44>)
 8004b08:	f000 fca2 	bl	8005450 <_init>
 8004b0c:	1b64      	subs	r4, r4, r5
 8004b0e:	10a4      	asrs	r4, r4, #2
 8004b10:	2600      	movs	r6, #0
 8004b12:	42a6      	cmp	r6, r4
 8004b14:	d105      	bne.n	8004b22 <__libc_init_array+0x2e>
 8004b16:	bd70      	pop	{r4, r5, r6, pc}
 8004b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b1c:	4798      	blx	r3
 8004b1e:	3601      	adds	r6, #1
 8004b20:	e7ee      	b.n	8004b00 <__libc_init_array+0xc>
 8004b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b26:	4798      	blx	r3
 8004b28:	3601      	adds	r6, #1
 8004b2a:	e7f2      	b.n	8004b12 <__libc_init_array+0x1e>
 8004b2c:	080054ec 	.word	0x080054ec
 8004b30:	080054ec 	.word	0x080054ec
 8004b34:	080054ec 	.word	0x080054ec
 8004b38:	080054f0 	.word	0x080054f0

08004b3c <memset>:
 8004b3c:	4402      	add	r2, r0
 8004b3e:	4603      	mov	r3, r0
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d100      	bne.n	8004b46 <memset+0xa>
 8004b44:	4770      	bx	lr
 8004b46:	f803 1b01 	strb.w	r1, [r3], #1
 8004b4a:	e7f9      	b.n	8004b40 <memset+0x4>

08004b4c <sniprintf>:
 8004b4c:	b40c      	push	{r2, r3}
 8004b4e:	b530      	push	{r4, r5, lr}
 8004b50:	4b17      	ldr	r3, [pc, #92]	; (8004bb0 <sniprintf+0x64>)
 8004b52:	1e0c      	subs	r4, r1, #0
 8004b54:	681d      	ldr	r5, [r3, #0]
 8004b56:	b09d      	sub	sp, #116	; 0x74
 8004b58:	da08      	bge.n	8004b6c <sniprintf+0x20>
 8004b5a:	238b      	movs	r3, #139	; 0x8b
 8004b5c:	602b      	str	r3, [r5, #0]
 8004b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b62:	b01d      	add	sp, #116	; 0x74
 8004b64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b68:	b002      	add	sp, #8
 8004b6a:	4770      	bx	lr
 8004b6c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004b70:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004b74:	bf14      	ite	ne
 8004b76:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004b7a:	4623      	moveq	r3, r4
 8004b7c:	9304      	str	r3, [sp, #16]
 8004b7e:	9307      	str	r3, [sp, #28]
 8004b80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b84:	9002      	str	r0, [sp, #8]
 8004b86:	9006      	str	r0, [sp, #24]
 8004b88:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004b8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004b8e:	ab21      	add	r3, sp, #132	; 0x84
 8004b90:	a902      	add	r1, sp, #8
 8004b92:	4628      	mov	r0, r5
 8004b94:	9301      	str	r3, [sp, #4]
 8004b96:	f000 f869 	bl	8004c6c <_svfiprintf_r>
 8004b9a:	1c43      	adds	r3, r0, #1
 8004b9c:	bfbc      	itt	lt
 8004b9e:	238b      	movlt	r3, #139	; 0x8b
 8004ba0:	602b      	strlt	r3, [r5, #0]
 8004ba2:	2c00      	cmp	r4, #0
 8004ba4:	d0dd      	beq.n	8004b62 <sniprintf+0x16>
 8004ba6:	9b02      	ldr	r3, [sp, #8]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	701a      	strb	r2, [r3, #0]
 8004bac:	e7d9      	b.n	8004b62 <sniprintf+0x16>
 8004bae:	bf00      	nop
 8004bb0:	2000000c 	.word	0x2000000c

08004bb4 <__ssputs_r>:
 8004bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bb8:	688e      	ldr	r6, [r1, #8]
 8004bba:	429e      	cmp	r6, r3
 8004bbc:	4682      	mov	sl, r0
 8004bbe:	460c      	mov	r4, r1
 8004bc0:	4690      	mov	r8, r2
 8004bc2:	461f      	mov	r7, r3
 8004bc4:	d838      	bhi.n	8004c38 <__ssputs_r+0x84>
 8004bc6:	898a      	ldrh	r2, [r1, #12]
 8004bc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004bcc:	d032      	beq.n	8004c34 <__ssputs_r+0x80>
 8004bce:	6825      	ldr	r5, [r4, #0]
 8004bd0:	6909      	ldr	r1, [r1, #16]
 8004bd2:	eba5 0901 	sub.w	r9, r5, r1
 8004bd6:	6965      	ldr	r5, [r4, #20]
 8004bd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004be0:	3301      	adds	r3, #1
 8004be2:	444b      	add	r3, r9
 8004be4:	106d      	asrs	r5, r5, #1
 8004be6:	429d      	cmp	r5, r3
 8004be8:	bf38      	it	cc
 8004bea:	461d      	movcc	r5, r3
 8004bec:	0553      	lsls	r3, r2, #21
 8004bee:	d531      	bpl.n	8004c54 <__ssputs_r+0xa0>
 8004bf0:	4629      	mov	r1, r5
 8004bf2:	f000 fb63 	bl	80052bc <_malloc_r>
 8004bf6:	4606      	mov	r6, r0
 8004bf8:	b950      	cbnz	r0, 8004c10 <__ssputs_r+0x5c>
 8004bfa:	230c      	movs	r3, #12
 8004bfc:	f8ca 3000 	str.w	r3, [sl]
 8004c00:	89a3      	ldrh	r3, [r4, #12]
 8004c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c06:	81a3      	strh	r3, [r4, #12]
 8004c08:	f04f 30ff 	mov.w	r0, #4294967295
 8004c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c10:	6921      	ldr	r1, [r4, #16]
 8004c12:	464a      	mov	r2, r9
 8004c14:	f000 fabe 	bl	8005194 <memcpy>
 8004c18:	89a3      	ldrh	r3, [r4, #12]
 8004c1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c22:	81a3      	strh	r3, [r4, #12]
 8004c24:	6126      	str	r6, [r4, #16]
 8004c26:	6165      	str	r5, [r4, #20]
 8004c28:	444e      	add	r6, r9
 8004c2a:	eba5 0509 	sub.w	r5, r5, r9
 8004c2e:	6026      	str	r6, [r4, #0]
 8004c30:	60a5      	str	r5, [r4, #8]
 8004c32:	463e      	mov	r6, r7
 8004c34:	42be      	cmp	r6, r7
 8004c36:	d900      	bls.n	8004c3a <__ssputs_r+0x86>
 8004c38:	463e      	mov	r6, r7
 8004c3a:	6820      	ldr	r0, [r4, #0]
 8004c3c:	4632      	mov	r2, r6
 8004c3e:	4641      	mov	r1, r8
 8004c40:	f000 fab6 	bl	80051b0 <memmove>
 8004c44:	68a3      	ldr	r3, [r4, #8]
 8004c46:	1b9b      	subs	r3, r3, r6
 8004c48:	60a3      	str	r3, [r4, #8]
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	4433      	add	r3, r6
 8004c4e:	6023      	str	r3, [r4, #0]
 8004c50:	2000      	movs	r0, #0
 8004c52:	e7db      	b.n	8004c0c <__ssputs_r+0x58>
 8004c54:	462a      	mov	r2, r5
 8004c56:	f000 fba5 	bl	80053a4 <_realloc_r>
 8004c5a:	4606      	mov	r6, r0
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	d1e1      	bne.n	8004c24 <__ssputs_r+0x70>
 8004c60:	6921      	ldr	r1, [r4, #16]
 8004c62:	4650      	mov	r0, sl
 8004c64:	f000 fabe 	bl	80051e4 <_free_r>
 8004c68:	e7c7      	b.n	8004bfa <__ssputs_r+0x46>
	...

08004c6c <_svfiprintf_r>:
 8004c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c70:	4698      	mov	r8, r3
 8004c72:	898b      	ldrh	r3, [r1, #12]
 8004c74:	061b      	lsls	r3, r3, #24
 8004c76:	b09d      	sub	sp, #116	; 0x74
 8004c78:	4607      	mov	r7, r0
 8004c7a:	460d      	mov	r5, r1
 8004c7c:	4614      	mov	r4, r2
 8004c7e:	d50e      	bpl.n	8004c9e <_svfiprintf_r+0x32>
 8004c80:	690b      	ldr	r3, [r1, #16]
 8004c82:	b963      	cbnz	r3, 8004c9e <_svfiprintf_r+0x32>
 8004c84:	2140      	movs	r1, #64	; 0x40
 8004c86:	f000 fb19 	bl	80052bc <_malloc_r>
 8004c8a:	6028      	str	r0, [r5, #0]
 8004c8c:	6128      	str	r0, [r5, #16]
 8004c8e:	b920      	cbnz	r0, 8004c9a <_svfiprintf_r+0x2e>
 8004c90:	230c      	movs	r3, #12
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	f04f 30ff 	mov.w	r0, #4294967295
 8004c98:	e0d1      	b.n	8004e3e <_svfiprintf_r+0x1d2>
 8004c9a:	2340      	movs	r3, #64	; 0x40
 8004c9c:	616b      	str	r3, [r5, #20]
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ca2:	2320      	movs	r3, #32
 8004ca4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ca8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cac:	2330      	movs	r3, #48	; 0x30
 8004cae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004e58 <_svfiprintf_r+0x1ec>
 8004cb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cb6:	f04f 0901 	mov.w	r9, #1
 8004cba:	4623      	mov	r3, r4
 8004cbc:	469a      	mov	sl, r3
 8004cbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cc2:	b10a      	cbz	r2, 8004cc8 <_svfiprintf_r+0x5c>
 8004cc4:	2a25      	cmp	r2, #37	; 0x25
 8004cc6:	d1f9      	bne.n	8004cbc <_svfiprintf_r+0x50>
 8004cc8:	ebba 0b04 	subs.w	fp, sl, r4
 8004ccc:	d00b      	beq.n	8004ce6 <_svfiprintf_r+0x7a>
 8004cce:	465b      	mov	r3, fp
 8004cd0:	4622      	mov	r2, r4
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	4638      	mov	r0, r7
 8004cd6:	f7ff ff6d 	bl	8004bb4 <__ssputs_r>
 8004cda:	3001      	adds	r0, #1
 8004cdc:	f000 80aa 	beq.w	8004e34 <_svfiprintf_r+0x1c8>
 8004ce0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ce2:	445a      	add	r2, fp
 8004ce4:	9209      	str	r2, [sp, #36]	; 0x24
 8004ce6:	f89a 3000 	ldrb.w	r3, [sl]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f000 80a2 	beq.w	8004e34 <_svfiprintf_r+0x1c8>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cfa:	f10a 0a01 	add.w	sl, sl, #1
 8004cfe:	9304      	str	r3, [sp, #16]
 8004d00:	9307      	str	r3, [sp, #28]
 8004d02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d06:	931a      	str	r3, [sp, #104]	; 0x68
 8004d08:	4654      	mov	r4, sl
 8004d0a:	2205      	movs	r2, #5
 8004d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d10:	4851      	ldr	r0, [pc, #324]	; (8004e58 <_svfiprintf_r+0x1ec>)
 8004d12:	f7fb fa6d 	bl	80001f0 <memchr>
 8004d16:	9a04      	ldr	r2, [sp, #16]
 8004d18:	b9d8      	cbnz	r0, 8004d52 <_svfiprintf_r+0xe6>
 8004d1a:	06d0      	lsls	r0, r2, #27
 8004d1c:	bf44      	itt	mi
 8004d1e:	2320      	movmi	r3, #32
 8004d20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d24:	0711      	lsls	r1, r2, #28
 8004d26:	bf44      	itt	mi
 8004d28:	232b      	movmi	r3, #43	; 0x2b
 8004d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d32:	2b2a      	cmp	r3, #42	; 0x2a
 8004d34:	d015      	beq.n	8004d62 <_svfiprintf_r+0xf6>
 8004d36:	9a07      	ldr	r2, [sp, #28]
 8004d38:	4654      	mov	r4, sl
 8004d3a:	2000      	movs	r0, #0
 8004d3c:	f04f 0c0a 	mov.w	ip, #10
 8004d40:	4621      	mov	r1, r4
 8004d42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d46:	3b30      	subs	r3, #48	; 0x30
 8004d48:	2b09      	cmp	r3, #9
 8004d4a:	d94e      	bls.n	8004dea <_svfiprintf_r+0x17e>
 8004d4c:	b1b0      	cbz	r0, 8004d7c <_svfiprintf_r+0x110>
 8004d4e:	9207      	str	r2, [sp, #28]
 8004d50:	e014      	b.n	8004d7c <_svfiprintf_r+0x110>
 8004d52:	eba0 0308 	sub.w	r3, r0, r8
 8004d56:	fa09 f303 	lsl.w	r3, r9, r3
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	9304      	str	r3, [sp, #16]
 8004d5e:	46a2      	mov	sl, r4
 8004d60:	e7d2      	b.n	8004d08 <_svfiprintf_r+0x9c>
 8004d62:	9b03      	ldr	r3, [sp, #12]
 8004d64:	1d19      	adds	r1, r3, #4
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	9103      	str	r1, [sp, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	bfbb      	ittet	lt
 8004d6e:	425b      	neglt	r3, r3
 8004d70:	f042 0202 	orrlt.w	r2, r2, #2
 8004d74:	9307      	strge	r3, [sp, #28]
 8004d76:	9307      	strlt	r3, [sp, #28]
 8004d78:	bfb8      	it	lt
 8004d7a:	9204      	strlt	r2, [sp, #16]
 8004d7c:	7823      	ldrb	r3, [r4, #0]
 8004d7e:	2b2e      	cmp	r3, #46	; 0x2e
 8004d80:	d10c      	bne.n	8004d9c <_svfiprintf_r+0x130>
 8004d82:	7863      	ldrb	r3, [r4, #1]
 8004d84:	2b2a      	cmp	r3, #42	; 0x2a
 8004d86:	d135      	bne.n	8004df4 <_svfiprintf_r+0x188>
 8004d88:	9b03      	ldr	r3, [sp, #12]
 8004d8a:	1d1a      	adds	r2, r3, #4
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	9203      	str	r2, [sp, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	bfb8      	it	lt
 8004d94:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d98:	3402      	adds	r4, #2
 8004d9a:	9305      	str	r3, [sp, #20]
 8004d9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004e68 <_svfiprintf_r+0x1fc>
 8004da0:	7821      	ldrb	r1, [r4, #0]
 8004da2:	2203      	movs	r2, #3
 8004da4:	4650      	mov	r0, sl
 8004da6:	f7fb fa23 	bl	80001f0 <memchr>
 8004daa:	b140      	cbz	r0, 8004dbe <_svfiprintf_r+0x152>
 8004dac:	2340      	movs	r3, #64	; 0x40
 8004dae:	eba0 000a 	sub.w	r0, r0, sl
 8004db2:	fa03 f000 	lsl.w	r0, r3, r0
 8004db6:	9b04      	ldr	r3, [sp, #16]
 8004db8:	4303      	orrs	r3, r0
 8004dba:	3401      	adds	r4, #1
 8004dbc:	9304      	str	r3, [sp, #16]
 8004dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dc2:	4826      	ldr	r0, [pc, #152]	; (8004e5c <_svfiprintf_r+0x1f0>)
 8004dc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dc8:	2206      	movs	r2, #6
 8004dca:	f7fb fa11 	bl	80001f0 <memchr>
 8004dce:	2800      	cmp	r0, #0
 8004dd0:	d038      	beq.n	8004e44 <_svfiprintf_r+0x1d8>
 8004dd2:	4b23      	ldr	r3, [pc, #140]	; (8004e60 <_svfiprintf_r+0x1f4>)
 8004dd4:	bb1b      	cbnz	r3, 8004e1e <_svfiprintf_r+0x1b2>
 8004dd6:	9b03      	ldr	r3, [sp, #12]
 8004dd8:	3307      	adds	r3, #7
 8004dda:	f023 0307 	bic.w	r3, r3, #7
 8004dde:	3308      	adds	r3, #8
 8004de0:	9303      	str	r3, [sp, #12]
 8004de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004de4:	4433      	add	r3, r6
 8004de6:	9309      	str	r3, [sp, #36]	; 0x24
 8004de8:	e767      	b.n	8004cba <_svfiprintf_r+0x4e>
 8004dea:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dee:	460c      	mov	r4, r1
 8004df0:	2001      	movs	r0, #1
 8004df2:	e7a5      	b.n	8004d40 <_svfiprintf_r+0xd4>
 8004df4:	2300      	movs	r3, #0
 8004df6:	3401      	adds	r4, #1
 8004df8:	9305      	str	r3, [sp, #20]
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	f04f 0c0a 	mov.w	ip, #10
 8004e00:	4620      	mov	r0, r4
 8004e02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e06:	3a30      	subs	r2, #48	; 0x30
 8004e08:	2a09      	cmp	r2, #9
 8004e0a:	d903      	bls.n	8004e14 <_svfiprintf_r+0x1a8>
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0c5      	beq.n	8004d9c <_svfiprintf_r+0x130>
 8004e10:	9105      	str	r1, [sp, #20]
 8004e12:	e7c3      	b.n	8004d9c <_svfiprintf_r+0x130>
 8004e14:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e18:	4604      	mov	r4, r0
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e7f0      	b.n	8004e00 <_svfiprintf_r+0x194>
 8004e1e:	ab03      	add	r3, sp, #12
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	462a      	mov	r2, r5
 8004e24:	4b0f      	ldr	r3, [pc, #60]	; (8004e64 <_svfiprintf_r+0x1f8>)
 8004e26:	a904      	add	r1, sp, #16
 8004e28:	4638      	mov	r0, r7
 8004e2a:	f3af 8000 	nop.w
 8004e2e:	1c42      	adds	r2, r0, #1
 8004e30:	4606      	mov	r6, r0
 8004e32:	d1d6      	bne.n	8004de2 <_svfiprintf_r+0x176>
 8004e34:	89ab      	ldrh	r3, [r5, #12]
 8004e36:	065b      	lsls	r3, r3, #25
 8004e38:	f53f af2c 	bmi.w	8004c94 <_svfiprintf_r+0x28>
 8004e3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e3e:	b01d      	add	sp, #116	; 0x74
 8004e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e44:	ab03      	add	r3, sp, #12
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	462a      	mov	r2, r5
 8004e4a:	4b06      	ldr	r3, [pc, #24]	; (8004e64 <_svfiprintf_r+0x1f8>)
 8004e4c:	a904      	add	r1, sp, #16
 8004e4e:	4638      	mov	r0, r7
 8004e50:	f000 f87a 	bl	8004f48 <_printf_i>
 8004e54:	e7eb      	b.n	8004e2e <_svfiprintf_r+0x1c2>
 8004e56:	bf00      	nop
 8004e58:	080054b0 	.word	0x080054b0
 8004e5c:	080054ba 	.word	0x080054ba
 8004e60:	00000000 	.word	0x00000000
 8004e64:	08004bb5 	.word	0x08004bb5
 8004e68:	080054b6 	.word	0x080054b6

08004e6c <_printf_common>:
 8004e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e70:	4616      	mov	r6, r2
 8004e72:	4699      	mov	r9, r3
 8004e74:	688a      	ldr	r2, [r1, #8]
 8004e76:	690b      	ldr	r3, [r1, #16]
 8004e78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	bfb8      	it	lt
 8004e80:	4613      	movlt	r3, r2
 8004e82:	6033      	str	r3, [r6, #0]
 8004e84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e88:	4607      	mov	r7, r0
 8004e8a:	460c      	mov	r4, r1
 8004e8c:	b10a      	cbz	r2, 8004e92 <_printf_common+0x26>
 8004e8e:	3301      	adds	r3, #1
 8004e90:	6033      	str	r3, [r6, #0]
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	0699      	lsls	r1, r3, #26
 8004e96:	bf42      	ittt	mi
 8004e98:	6833      	ldrmi	r3, [r6, #0]
 8004e9a:	3302      	addmi	r3, #2
 8004e9c:	6033      	strmi	r3, [r6, #0]
 8004e9e:	6825      	ldr	r5, [r4, #0]
 8004ea0:	f015 0506 	ands.w	r5, r5, #6
 8004ea4:	d106      	bne.n	8004eb4 <_printf_common+0x48>
 8004ea6:	f104 0a19 	add.w	sl, r4, #25
 8004eaa:	68e3      	ldr	r3, [r4, #12]
 8004eac:	6832      	ldr	r2, [r6, #0]
 8004eae:	1a9b      	subs	r3, r3, r2
 8004eb0:	42ab      	cmp	r3, r5
 8004eb2:	dc26      	bgt.n	8004f02 <_printf_common+0x96>
 8004eb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004eb8:	1e13      	subs	r3, r2, #0
 8004eba:	6822      	ldr	r2, [r4, #0]
 8004ebc:	bf18      	it	ne
 8004ebe:	2301      	movne	r3, #1
 8004ec0:	0692      	lsls	r2, r2, #26
 8004ec2:	d42b      	bmi.n	8004f1c <_printf_common+0xb0>
 8004ec4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ec8:	4649      	mov	r1, r9
 8004eca:	4638      	mov	r0, r7
 8004ecc:	47c0      	blx	r8
 8004ece:	3001      	adds	r0, #1
 8004ed0:	d01e      	beq.n	8004f10 <_printf_common+0xa4>
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	68e5      	ldr	r5, [r4, #12]
 8004ed6:	6832      	ldr	r2, [r6, #0]
 8004ed8:	f003 0306 	and.w	r3, r3, #6
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	bf08      	it	eq
 8004ee0:	1aad      	subeq	r5, r5, r2
 8004ee2:	68a3      	ldr	r3, [r4, #8]
 8004ee4:	6922      	ldr	r2, [r4, #16]
 8004ee6:	bf0c      	ite	eq
 8004ee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004eec:	2500      	movne	r5, #0
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	bfc4      	itt	gt
 8004ef2:	1a9b      	subgt	r3, r3, r2
 8004ef4:	18ed      	addgt	r5, r5, r3
 8004ef6:	2600      	movs	r6, #0
 8004ef8:	341a      	adds	r4, #26
 8004efa:	42b5      	cmp	r5, r6
 8004efc:	d11a      	bne.n	8004f34 <_printf_common+0xc8>
 8004efe:	2000      	movs	r0, #0
 8004f00:	e008      	b.n	8004f14 <_printf_common+0xa8>
 8004f02:	2301      	movs	r3, #1
 8004f04:	4652      	mov	r2, sl
 8004f06:	4649      	mov	r1, r9
 8004f08:	4638      	mov	r0, r7
 8004f0a:	47c0      	blx	r8
 8004f0c:	3001      	adds	r0, #1
 8004f0e:	d103      	bne.n	8004f18 <_printf_common+0xac>
 8004f10:	f04f 30ff 	mov.w	r0, #4294967295
 8004f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f18:	3501      	adds	r5, #1
 8004f1a:	e7c6      	b.n	8004eaa <_printf_common+0x3e>
 8004f1c:	18e1      	adds	r1, r4, r3
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	2030      	movs	r0, #48	; 0x30
 8004f22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f26:	4422      	add	r2, r4
 8004f28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f30:	3302      	adds	r3, #2
 8004f32:	e7c7      	b.n	8004ec4 <_printf_common+0x58>
 8004f34:	2301      	movs	r3, #1
 8004f36:	4622      	mov	r2, r4
 8004f38:	4649      	mov	r1, r9
 8004f3a:	4638      	mov	r0, r7
 8004f3c:	47c0      	blx	r8
 8004f3e:	3001      	adds	r0, #1
 8004f40:	d0e6      	beq.n	8004f10 <_printf_common+0xa4>
 8004f42:	3601      	adds	r6, #1
 8004f44:	e7d9      	b.n	8004efa <_printf_common+0x8e>
	...

08004f48 <_printf_i>:
 8004f48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f4c:	7e0f      	ldrb	r7, [r1, #24]
 8004f4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f50:	2f78      	cmp	r7, #120	; 0x78
 8004f52:	4691      	mov	r9, r2
 8004f54:	4680      	mov	r8, r0
 8004f56:	460c      	mov	r4, r1
 8004f58:	469a      	mov	sl, r3
 8004f5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f5e:	d807      	bhi.n	8004f70 <_printf_i+0x28>
 8004f60:	2f62      	cmp	r7, #98	; 0x62
 8004f62:	d80a      	bhi.n	8004f7a <_printf_i+0x32>
 8004f64:	2f00      	cmp	r7, #0
 8004f66:	f000 80d8 	beq.w	800511a <_printf_i+0x1d2>
 8004f6a:	2f58      	cmp	r7, #88	; 0x58
 8004f6c:	f000 80a3 	beq.w	80050b6 <_printf_i+0x16e>
 8004f70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f78:	e03a      	b.n	8004ff0 <_printf_i+0xa8>
 8004f7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f7e:	2b15      	cmp	r3, #21
 8004f80:	d8f6      	bhi.n	8004f70 <_printf_i+0x28>
 8004f82:	a101      	add	r1, pc, #4	; (adr r1, 8004f88 <_printf_i+0x40>)
 8004f84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f88:	08004fe1 	.word	0x08004fe1
 8004f8c:	08004ff5 	.word	0x08004ff5
 8004f90:	08004f71 	.word	0x08004f71
 8004f94:	08004f71 	.word	0x08004f71
 8004f98:	08004f71 	.word	0x08004f71
 8004f9c:	08004f71 	.word	0x08004f71
 8004fa0:	08004ff5 	.word	0x08004ff5
 8004fa4:	08004f71 	.word	0x08004f71
 8004fa8:	08004f71 	.word	0x08004f71
 8004fac:	08004f71 	.word	0x08004f71
 8004fb0:	08004f71 	.word	0x08004f71
 8004fb4:	08005101 	.word	0x08005101
 8004fb8:	08005025 	.word	0x08005025
 8004fbc:	080050e3 	.word	0x080050e3
 8004fc0:	08004f71 	.word	0x08004f71
 8004fc4:	08004f71 	.word	0x08004f71
 8004fc8:	08005123 	.word	0x08005123
 8004fcc:	08004f71 	.word	0x08004f71
 8004fd0:	08005025 	.word	0x08005025
 8004fd4:	08004f71 	.word	0x08004f71
 8004fd8:	08004f71 	.word	0x08004f71
 8004fdc:	080050eb 	.word	0x080050eb
 8004fe0:	682b      	ldr	r3, [r5, #0]
 8004fe2:	1d1a      	adds	r2, r3, #4
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	602a      	str	r2, [r5, #0]
 8004fe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e0a3      	b.n	800513c <_printf_i+0x1f4>
 8004ff4:	6820      	ldr	r0, [r4, #0]
 8004ff6:	6829      	ldr	r1, [r5, #0]
 8004ff8:	0606      	lsls	r6, r0, #24
 8004ffa:	f101 0304 	add.w	r3, r1, #4
 8004ffe:	d50a      	bpl.n	8005016 <_printf_i+0xce>
 8005000:	680e      	ldr	r6, [r1, #0]
 8005002:	602b      	str	r3, [r5, #0]
 8005004:	2e00      	cmp	r6, #0
 8005006:	da03      	bge.n	8005010 <_printf_i+0xc8>
 8005008:	232d      	movs	r3, #45	; 0x2d
 800500a:	4276      	negs	r6, r6
 800500c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005010:	485e      	ldr	r0, [pc, #376]	; (800518c <_printf_i+0x244>)
 8005012:	230a      	movs	r3, #10
 8005014:	e019      	b.n	800504a <_printf_i+0x102>
 8005016:	680e      	ldr	r6, [r1, #0]
 8005018:	602b      	str	r3, [r5, #0]
 800501a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800501e:	bf18      	it	ne
 8005020:	b236      	sxthne	r6, r6
 8005022:	e7ef      	b.n	8005004 <_printf_i+0xbc>
 8005024:	682b      	ldr	r3, [r5, #0]
 8005026:	6820      	ldr	r0, [r4, #0]
 8005028:	1d19      	adds	r1, r3, #4
 800502a:	6029      	str	r1, [r5, #0]
 800502c:	0601      	lsls	r1, r0, #24
 800502e:	d501      	bpl.n	8005034 <_printf_i+0xec>
 8005030:	681e      	ldr	r6, [r3, #0]
 8005032:	e002      	b.n	800503a <_printf_i+0xf2>
 8005034:	0646      	lsls	r6, r0, #25
 8005036:	d5fb      	bpl.n	8005030 <_printf_i+0xe8>
 8005038:	881e      	ldrh	r6, [r3, #0]
 800503a:	4854      	ldr	r0, [pc, #336]	; (800518c <_printf_i+0x244>)
 800503c:	2f6f      	cmp	r7, #111	; 0x6f
 800503e:	bf0c      	ite	eq
 8005040:	2308      	moveq	r3, #8
 8005042:	230a      	movne	r3, #10
 8005044:	2100      	movs	r1, #0
 8005046:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800504a:	6865      	ldr	r5, [r4, #4]
 800504c:	60a5      	str	r5, [r4, #8]
 800504e:	2d00      	cmp	r5, #0
 8005050:	bfa2      	ittt	ge
 8005052:	6821      	ldrge	r1, [r4, #0]
 8005054:	f021 0104 	bicge.w	r1, r1, #4
 8005058:	6021      	strge	r1, [r4, #0]
 800505a:	b90e      	cbnz	r6, 8005060 <_printf_i+0x118>
 800505c:	2d00      	cmp	r5, #0
 800505e:	d04d      	beq.n	80050fc <_printf_i+0x1b4>
 8005060:	4615      	mov	r5, r2
 8005062:	fbb6 f1f3 	udiv	r1, r6, r3
 8005066:	fb03 6711 	mls	r7, r3, r1, r6
 800506a:	5dc7      	ldrb	r7, [r0, r7]
 800506c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005070:	4637      	mov	r7, r6
 8005072:	42bb      	cmp	r3, r7
 8005074:	460e      	mov	r6, r1
 8005076:	d9f4      	bls.n	8005062 <_printf_i+0x11a>
 8005078:	2b08      	cmp	r3, #8
 800507a:	d10b      	bne.n	8005094 <_printf_i+0x14c>
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	07de      	lsls	r6, r3, #31
 8005080:	d508      	bpl.n	8005094 <_printf_i+0x14c>
 8005082:	6923      	ldr	r3, [r4, #16]
 8005084:	6861      	ldr	r1, [r4, #4]
 8005086:	4299      	cmp	r1, r3
 8005088:	bfde      	ittt	le
 800508a:	2330      	movle	r3, #48	; 0x30
 800508c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005090:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005094:	1b52      	subs	r2, r2, r5
 8005096:	6122      	str	r2, [r4, #16]
 8005098:	f8cd a000 	str.w	sl, [sp]
 800509c:	464b      	mov	r3, r9
 800509e:	aa03      	add	r2, sp, #12
 80050a0:	4621      	mov	r1, r4
 80050a2:	4640      	mov	r0, r8
 80050a4:	f7ff fee2 	bl	8004e6c <_printf_common>
 80050a8:	3001      	adds	r0, #1
 80050aa:	d14c      	bne.n	8005146 <_printf_i+0x1fe>
 80050ac:	f04f 30ff 	mov.w	r0, #4294967295
 80050b0:	b004      	add	sp, #16
 80050b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b6:	4835      	ldr	r0, [pc, #212]	; (800518c <_printf_i+0x244>)
 80050b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80050bc:	6829      	ldr	r1, [r5, #0]
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80050c4:	6029      	str	r1, [r5, #0]
 80050c6:	061d      	lsls	r5, r3, #24
 80050c8:	d514      	bpl.n	80050f4 <_printf_i+0x1ac>
 80050ca:	07df      	lsls	r7, r3, #31
 80050cc:	bf44      	itt	mi
 80050ce:	f043 0320 	orrmi.w	r3, r3, #32
 80050d2:	6023      	strmi	r3, [r4, #0]
 80050d4:	b91e      	cbnz	r6, 80050de <_printf_i+0x196>
 80050d6:	6823      	ldr	r3, [r4, #0]
 80050d8:	f023 0320 	bic.w	r3, r3, #32
 80050dc:	6023      	str	r3, [r4, #0]
 80050de:	2310      	movs	r3, #16
 80050e0:	e7b0      	b.n	8005044 <_printf_i+0xfc>
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	f043 0320 	orr.w	r3, r3, #32
 80050e8:	6023      	str	r3, [r4, #0]
 80050ea:	2378      	movs	r3, #120	; 0x78
 80050ec:	4828      	ldr	r0, [pc, #160]	; (8005190 <_printf_i+0x248>)
 80050ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050f2:	e7e3      	b.n	80050bc <_printf_i+0x174>
 80050f4:	0659      	lsls	r1, r3, #25
 80050f6:	bf48      	it	mi
 80050f8:	b2b6      	uxthmi	r6, r6
 80050fa:	e7e6      	b.n	80050ca <_printf_i+0x182>
 80050fc:	4615      	mov	r5, r2
 80050fe:	e7bb      	b.n	8005078 <_printf_i+0x130>
 8005100:	682b      	ldr	r3, [r5, #0]
 8005102:	6826      	ldr	r6, [r4, #0]
 8005104:	6961      	ldr	r1, [r4, #20]
 8005106:	1d18      	adds	r0, r3, #4
 8005108:	6028      	str	r0, [r5, #0]
 800510a:	0635      	lsls	r5, r6, #24
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	d501      	bpl.n	8005114 <_printf_i+0x1cc>
 8005110:	6019      	str	r1, [r3, #0]
 8005112:	e002      	b.n	800511a <_printf_i+0x1d2>
 8005114:	0670      	lsls	r0, r6, #25
 8005116:	d5fb      	bpl.n	8005110 <_printf_i+0x1c8>
 8005118:	8019      	strh	r1, [r3, #0]
 800511a:	2300      	movs	r3, #0
 800511c:	6123      	str	r3, [r4, #16]
 800511e:	4615      	mov	r5, r2
 8005120:	e7ba      	b.n	8005098 <_printf_i+0x150>
 8005122:	682b      	ldr	r3, [r5, #0]
 8005124:	1d1a      	adds	r2, r3, #4
 8005126:	602a      	str	r2, [r5, #0]
 8005128:	681d      	ldr	r5, [r3, #0]
 800512a:	6862      	ldr	r2, [r4, #4]
 800512c:	2100      	movs	r1, #0
 800512e:	4628      	mov	r0, r5
 8005130:	f7fb f85e 	bl	80001f0 <memchr>
 8005134:	b108      	cbz	r0, 800513a <_printf_i+0x1f2>
 8005136:	1b40      	subs	r0, r0, r5
 8005138:	6060      	str	r0, [r4, #4]
 800513a:	6863      	ldr	r3, [r4, #4]
 800513c:	6123      	str	r3, [r4, #16]
 800513e:	2300      	movs	r3, #0
 8005140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005144:	e7a8      	b.n	8005098 <_printf_i+0x150>
 8005146:	6923      	ldr	r3, [r4, #16]
 8005148:	462a      	mov	r2, r5
 800514a:	4649      	mov	r1, r9
 800514c:	4640      	mov	r0, r8
 800514e:	47d0      	blx	sl
 8005150:	3001      	adds	r0, #1
 8005152:	d0ab      	beq.n	80050ac <_printf_i+0x164>
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	079b      	lsls	r3, r3, #30
 8005158:	d413      	bmi.n	8005182 <_printf_i+0x23a>
 800515a:	68e0      	ldr	r0, [r4, #12]
 800515c:	9b03      	ldr	r3, [sp, #12]
 800515e:	4298      	cmp	r0, r3
 8005160:	bfb8      	it	lt
 8005162:	4618      	movlt	r0, r3
 8005164:	e7a4      	b.n	80050b0 <_printf_i+0x168>
 8005166:	2301      	movs	r3, #1
 8005168:	4632      	mov	r2, r6
 800516a:	4649      	mov	r1, r9
 800516c:	4640      	mov	r0, r8
 800516e:	47d0      	blx	sl
 8005170:	3001      	adds	r0, #1
 8005172:	d09b      	beq.n	80050ac <_printf_i+0x164>
 8005174:	3501      	adds	r5, #1
 8005176:	68e3      	ldr	r3, [r4, #12]
 8005178:	9903      	ldr	r1, [sp, #12]
 800517a:	1a5b      	subs	r3, r3, r1
 800517c:	42ab      	cmp	r3, r5
 800517e:	dcf2      	bgt.n	8005166 <_printf_i+0x21e>
 8005180:	e7eb      	b.n	800515a <_printf_i+0x212>
 8005182:	2500      	movs	r5, #0
 8005184:	f104 0619 	add.w	r6, r4, #25
 8005188:	e7f5      	b.n	8005176 <_printf_i+0x22e>
 800518a:	bf00      	nop
 800518c:	080054c1 	.word	0x080054c1
 8005190:	080054d2 	.word	0x080054d2

08005194 <memcpy>:
 8005194:	440a      	add	r2, r1
 8005196:	4291      	cmp	r1, r2
 8005198:	f100 33ff 	add.w	r3, r0, #4294967295
 800519c:	d100      	bne.n	80051a0 <memcpy+0xc>
 800519e:	4770      	bx	lr
 80051a0:	b510      	push	{r4, lr}
 80051a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051aa:	4291      	cmp	r1, r2
 80051ac:	d1f9      	bne.n	80051a2 <memcpy+0xe>
 80051ae:	bd10      	pop	{r4, pc}

080051b0 <memmove>:
 80051b0:	4288      	cmp	r0, r1
 80051b2:	b510      	push	{r4, lr}
 80051b4:	eb01 0402 	add.w	r4, r1, r2
 80051b8:	d902      	bls.n	80051c0 <memmove+0x10>
 80051ba:	4284      	cmp	r4, r0
 80051bc:	4623      	mov	r3, r4
 80051be:	d807      	bhi.n	80051d0 <memmove+0x20>
 80051c0:	1e43      	subs	r3, r0, #1
 80051c2:	42a1      	cmp	r1, r4
 80051c4:	d008      	beq.n	80051d8 <memmove+0x28>
 80051c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051ce:	e7f8      	b.n	80051c2 <memmove+0x12>
 80051d0:	4402      	add	r2, r0
 80051d2:	4601      	mov	r1, r0
 80051d4:	428a      	cmp	r2, r1
 80051d6:	d100      	bne.n	80051da <memmove+0x2a>
 80051d8:	bd10      	pop	{r4, pc}
 80051da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051e2:	e7f7      	b.n	80051d4 <memmove+0x24>

080051e4 <_free_r>:
 80051e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051e6:	2900      	cmp	r1, #0
 80051e8:	d044      	beq.n	8005274 <_free_r+0x90>
 80051ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051ee:	9001      	str	r0, [sp, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f1a1 0404 	sub.w	r4, r1, #4
 80051f6:	bfb8      	it	lt
 80051f8:	18e4      	addlt	r4, r4, r3
 80051fa:	f000 f913 	bl	8005424 <__malloc_lock>
 80051fe:	4a1e      	ldr	r2, [pc, #120]	; (8005278 <_free_r+0x94>)
 8005200:	9801      	ldr	r0, [sp, #4]
 8005202:	6813      	ldr	r3, [r2, #0]
 8005204:	b933      	cbnz	r3, 8005214 <_free_r+0x30>
 8005206:	6063      	str	r3, [r4, #4]
 8005208:	6014      	str	r4, [r2, #0]
 800520a:	b003      	add	sp, #12
 800520c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005210:	f000 b90e 	b.w	8005430 <__malloc_unlock>
 8005214:	42a3      	cmp	r3, r4
 8005216:	d908      	bls.n	800522a <_free_r+0x46>
 8005218:	6825      	ldr	r5, [r4, #0]
 800521a:	1961      	adds	r1, r4, r5
 800521c:	428b      	cmp	r3, r1
 800521e:	bf01      	itttt	eq
 8005220:	6819      	ldreq	r1, [r3, #0]
 8005222:	685b      	ldreq	r3, [r3, #4]
 8005224:	1949      	addeq	r1, r1, r5
 8005226:	6021      	streq	r1, [r4, #0]
 8005228:	e7ed      	b.n	8005206 <_free_r+0x22>
 800522a:	461a      	mov	r2, r3
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	b10b      	cbz	r3, 8005234 <_free_r+0x50>
 8005230:	42a3      	cmp	r3, r4
 8005232:	d9fa      	bls.n	800522a <_free_r+0x46>
 8005234:	6811      	ldr	r1, [r2, #0]
 8005236:	1855      	adds	r5, r2, r1
 8005238:	42a5      	cmp	r5, r4
 800523a:	d10b      	bne.n	8005254 <_free_r+0x70>
 800523c:	6824      	ldr	r4, [r4, #0]
 800523e:	4421      	add	r1, r4
 8005240:	1854      	adds	r4, r2, r1
 8005242:	42a3      	cmp	r3, r4
 8005244:	6011      	str	r1, [r2, #0]
 8005246:	d1e0      	bne.n	800520a <_free_r+0x26>
 8005248:	681c      	ldr	r4, [r3, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	6053      	str	r3, [r2, #4]
 800524e:	4421      	add	r1, r4
 8005250:	6011      	str	r1, [r2, #0]
 8005252:	e7da      	b.n	800520a <_free_r+0x26>
 8005254:	d902      	bls.n	800525c <_free_r+0x78>
 8005256:	230c      	movs	r3, #12
 8005258:	6003      	str	r3, [r0, #0]
 800525a:	e7d6      	b.n	800520a <_free_r+0x26>
 800525c:	6825      	ldr	r5, [r4, #0]
 800525e:	1961      	adds	r1, r4, r5
 8005260:	428b      	cmp	r3, r1
 8005262:	bf04      	itt	eq
 8005264:	6819      	ldreq	r1, [r3, #0]
 8005266:	685b      	ldreq	r3, [r3, #4]
 8005268:	6063      	str	r3, [r4, #4]
 800526a:	bf04      	itt	eq
 800526c:	1949      	addeq	r1, r1, r5
 800526e:	6021      	streq	r1, [r4, #0]
 8005270:	6054      	str	r4, [r2, #4]
 8005272:	e7ca      	b.n	800520a <_free_r+0x26>
 8005274:	b003      	add	sp, #12
 8005276:	bd30      	pop	{r4, r5, pc}
 8005278:	20001520 	.word	0x20001520

0800527c <sbrk_aligned>:
 800527c:	b570      	push	{r4, r5, r6, lr}
 800527e:	4e0e      	ldr	r6, [pc, #56]	; (80052b8 <sbrk_aligned+0x3c>)
 8005280:	460c      	mov	r4, r1
 8005282:	6831      	ldr	r1, [r6, #0]
 8005284:	4605      	mov	r5, r0
 8005286:	b911      	cbnz	r1, 800528e <sbrk_aligned+0x12>
 8005288:	f000 f8bc 	bl	8005404 <_sbrk_r>
 800528c:	6030      	str	r0, [r6, #0]
 800528e:	4621      	mov	r1, r4
 8005290:	4628      	mov	r0, r5
 8005292:	f000 f8b7 	bl	8005404 <_sbrk_r>
 8005296:	1c43      	adds	r3, r0, #1
 8005298:	d00a      	beq.n	80052b0 <sbrk_aligned+0x34>
 800529a:	1cc4      	adds	r4, r0, #3
 800529c:	f024 0403 	bic.w	r4, r4, #3
 80052a0:	42a0      	cmp	r0, r4
 80052a2:	d007      	beq.n	80052b4 <sbrk_aligned+0x38>
 80052a4:	1a21      	subs	r1, r4, r0
 80052a6:	4628      	mov	r0, r5
 80052a8:	f000 f8ac 	bl	8005404 <_sbrk_r>
 80052ac:	3001      	adds	r0, #1
 80052ae:	d101      	bne.n	80052b4 <sbrk_aligned+0x38>
 80052b0:	f04f 34ff 	mov.w	r4, #4294967295
 80052b4:	4620      	mov	r0, r4
 80052b6:	bd70      	pop	{r4, r5, r6, pc}
 80052b8:	20001524 	.word	0x20001524

080052bc <_malloc_r>:
 80052bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052c0:	1ccd      	adds	r5, r1, #3
 80052c2:	f025 0503 	bic.w	r5, r5, #3
 80052c6:	3508      	adds	r5, #8
 80052c8:	2d0c      	cmp	r5, #12
 80052ca:	bf38      	it	cc
 80052cc:	250c      	movcc	r5, #12
 80052ce:	2d00      	cmp	r5, #0
 80052d0:	4607      	mov	r7, r0
 80052d2:	db01      	blt.n	80052d8 <_malloc_r+0x1c>
 80052d4:	42a9      	cmp	r1, r5
 80052d6:	d905      	bls.n	80052e4 <_malloc_r+0x28>
 80052d8:	230c      	movs	r3, #12
 80052da:	603b      	str	r3, [r7, #0]
 80052dc:	2600      	movs	r6, #0
 80052de:	4630      	mov	r0, r6
 80052e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052e4:	4e2e      	ldr	r6, [pc, #184]	; (80053a0 <_malloc_r+0xe4>)
 80052e6:	f000 f89d 	bl	8005424 <__malloc_lock>
 80052ea:	6833      	ldr	r3, [r6, #0]
 80052ec:	461c      	mov	r4, r3
 80052ee:	bb34      	cbnz	r4, 800533e <_malloc_r+0x82>
 80052f0:	4629      	mov	r1, r5
 80052f2:	4638      	mov	r0, r7
 80052f4:	f7ff ffc2 	bl	800527c <sbrk_aligned>
 80052f8:	1c43      	adds	r3, r0, #1
 80052fa:	4604      	mov	r4, r0
 80052fc:	d14d      	bne.n	800539a <_malloc_r+0xde>
 80052fe:	6834      	ldr	r4, [r6, #0]
 8005300:	4626      	mov	r6, r4
 8005302:	2e00      	cmp	r6, #0
 8005304:	d140      	bne.n	8005388 <_malloc_r+0xcc>
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	4631      	mov	r1, r6
 800530a:	4638      	mov	r0, r7
 800530c:	eb04 0803 	add.w	r8, r4, r3
 8005310:	f000 f878 	bl	8005404 <_sbrk_r>
 8005314:	4580      	cmp	r8, r0
 8005316:	d13a      	bne.n	800538e <_malloc_r+0xd2>
 8005318:	6821      	ldr	r1, [r4, #0]
 800531a:	3503      	adds	r5, #3
 800531c:	1a6d      	subs	r5, r5, r1
 800531e:	f025 0503 	bic.w	r5, r5, #3
 8005322:	3508      	adds	r5, #8
 8005324:	2d0c      	cmp	r5, #12
 8005326:	bf38      	it	cc
 8005328:	250c      	movcc	r5, #12
 800532a:	4629      	mov	r1, r5
 800532c:	4638      	mov	r0, r7
 800532e:	f7ff ffa5 	bl	800527c <sbrk_aligned>
 8005332:	3001      	adds	r0, #1
 8005334:	d02b      	beq.n	800538e <_malloc_r+0xd2>
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	442b      	add	r3, r5
 800533a:	6023      	str	r3, [r4, #0]
 800533c:	e00e      	b.n	800535c <_malloc_r+0xa0>
 800533e:	6822      	ldr	r2, [r4, #0]
 8005340:	1b52      	subs	r2, r2, r5
 8005342:	d41e      	bmi.n	8005382 <_malloc_r+0xc6>
 8005344:	2a0b      	cmp	r2, #11
 8005346:	d916      	bls.n	8005376 <_malloc_r+0xba>
 8005348:	1961      	adds	r1, r4, r5
 800534a:	42a3      	cmp	r3, r4
 800534c:	6025      	str	r5, [r4, #0]
 800534e:	bf18      	it	ne
 8005350:	6059      	strne	r1, [r3, #4]
 8005352:	6863      	ldr	r3, [r4, #4]
 8005354:	bf08      	it	eq
 8005356:	6031      	streq	r1, [r6, #0]
 8005358:	5162      	str	r2, [r4, r5]
 800535a:	604b      	str	r3, [r1, #4]
 800535c:	4638      	mov	r0, r7
 800535e:	f104 060b 	add.w	r6, r4, #11
 8005362:	f000 f865 	bl	8005430 <__malloc_unlock>
 8005366:	f026 0607 	bic.w	r6, r6, #7
 800536a:	1d23      	adds	r3, r4, #4
 800536c:	1af2      	subs	r2, r6, r3
 800536e:	d0b6      	beq.n	80052de <_malloc_r+0x22>
 8005370:	1b9b      	subs	r3, r3, r6
 8005372:	50a3      	str	r3, [r4, r2]
 8005374:	e7b3      	b.n	80052de <_malloc_r+0x22>
 8005376:	6862      	ldr	r2, [r4, #4]
 8005378:	42a3      	cmp	r3, r4
 800537a:	bf0c      	ite	eq
 800537c:	6032      	streq	r2, [r6, #0]
 800537e:	605a      	strne	r2, [r3, #4]
 8005380:	e7ec      	b.n	800535c <_malloc_r+0xa0>
 8005382:	4623      	mov	r3, r4
 8005384:	6864      	ldr	r4, [r4, #4]
 8005386:	e7b2      	b.n	80052ee <_malloc_r+0x32>
 8005388:	4634      	mov	r4, r6
 800538a:	6876      	ldr	r6, [r6, #4]
 800538c:	e7b9      	b.n	8005302 <_malloc_r+0x46>
 800538e:	230c      	movs	r3, #12
 8005390:	603b      	str	r3, [r7, #0]
 8005392:	4638      	mov	r0, r7
 8005394:	f000 f84c 	bl	8005430 <__malloc_unlock>
 8005398:	e7a1      	b.n	80052de <_malloc_r+0x22>
 800539a:	6025      	str	r5, [r4, #0]
 800539c:	e7de      	b.n	800535c <_malloc_r+0xa0>
 800539e:	bf00      	nop
 80053a0:	20001520 	.word	0x20001520

080053a4 <_realloc_r>:
 80053a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053a8:	4680      	mov	r8, r0
 80053aa:	4614      	mov	r4, r2
 80053ac:	460e      	mov	r6, r1
 80053ae:	b921      	cbnz	r1, 80053ba <_realloc_r+0x16>
 80053b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053b4:	4611      	mov	r1, r2
 80053b6:	f7ff bf81 	b.w	80052bc <_malloc_r>
 80053ba:	b92a      	cbnz	r2, 80053c8 <_realloc_r+0x24>
 80053bc:	f7ff ff12 	bl	80051e4 <_free_r>
 80053c0:	4625      	mov	r5, r4
 80053c2:	4628      	mov	r0, r5
 80053c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053c8:	f000 f838 	bl	800543c <_malloc_usable_size_r>
 80053cc:	4284      	cmp	r4, r0
 80053ce:	4607      	mov	r7, r0
 80053d0:	d802      	bhi.n	80053d8 <_realloc_r+0x34>
 80053d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80053d6:	d812      	bhi.n	80053fe <_realloc_r+0x5a>
 80053d8:	4621      	mov	r1, r4
 80053da:	4640      	mov	r0, r8
 80053dc:	f7ff ff6e 	bl	80052bc <_malloc_r>
 80053e0:	4605      	mov	r5, r0
 80053e2:	2800      	cmp	r0, #0
 80053e4:	d0ed      	beq.n	80053c2 <_realloc_r+0x1e>
 80053e6:	42bc      	cmp	r4, r7
 80053e8:	4622      	mov	r2, r4
 80053ea:	4631      	mov	r1, r6
 80053ec:	bf28      	it	cs
 80053ee:	463a      	movcs	r2, r7
 80053f0:	f7ff fed0 	bl	8005194 <memcpy>
 80053f4:	4631      	mov	r1, r6
 80053f6:	4640      	mov	r0, r8
 80053f8:	f7ff fef4 	bl	80051e4 <_free_r>
 80053fc:	e7e1      	b.n	80053c2 <_realloc_r+0x1e>
 80053fe:	4635      	mov	r5, r6
 8005400:	e7df      	b.n	80053c2 <_realloc_r+0x1e>
	...

08005404 <_sbrk_r>:
 8005404:	b538      	push	{r3, r4, r5, lr}
 8005406:	4d06      	ldr	r5, [pc, #24]	; (8005420 <_sbrk_r+0x1c>)
 8005408:	2300      	movs	r3, #0
 800540a:	4604      	mov	r4, r0
 800540c:	4608      	mov	r0, r1
 800540e:	602b      	str	r3, [r5, #0]
 8005410:	f7fc f986 	bl	8001720 <_sbrk>
 8005414:	1c43      	adds	r3, r0, #1
 8005416:	d102      	bne.n	800541e <_sbrk_r+0x1a>
 8005418:	682b      	ldr	r3, [r5, #0]
 800541a:	b103      	cbz	r3, 800541e <_sbrk_r+0x1a>
 800541c:	6023      	str	r3, [r4, #0]
 800541e:	bd38      	pop	{r3, r4, r5, pc}
 8005420:	20001528 	.word	0x20001528

08005424 <__malloc_lock>:
 8005424:	4801      	ldr	r0, [pc, #4]	; (800542c <__malloc_lock+0x8>)
 8005426:	f000 b811 	b.w	800544c <__retarget_lock_acquire_recursive>
 800542a:	bf00      	nop
 800542c:	2000152c 	.word	0x2000152c

08005430 <__malloc_unlock>:
 8005430:	4801      	ldr	r0, [pc, #4]	; (8005438 <__malloc_unlock+0x8>)
 8005432:	f000 b80c 	b.w	800544e <__retarget_lock_release_recursive>
 8005436:	bf00      	nop
 8005438:	2000152c 	.word	0x2000152c

0800543c <_malloc_usable_size_r>:
 800543c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005440:	1f18      	subs	r0, r3, #4
 8005442:	2b00      	cmp	r3, #0
 8005444:	bfbc      	itt	lt
 8005446:	580b      	ldrlt	r3, [r1, r0]
 8005448:	18c0      	addlt	r0, r0, r3
 800544a:	4770      	bx	lr

0800544c <__retarget_lock_acquire_recursive>:
 800544c:	4770      	bx	lr

0800544e <__retarget_lock_release_recursive>:
 800544e:	4770      	bx	lr

08005450 <_init>:
 8005450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005452:	bf00      	nop
 8005454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005456:	bc08      	pop	{r3}
 8005458:	469e      	mov	lr, r3
 800545a:	4770      	bx	lr

0800545c <_fini>:
 800545c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800545e:	bf00      	nop
 8005460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005462:	bc08      	pop	{r3}
 8005464:	469e      	mov	lr, r3
 8005466:	4770      	bx	lr
