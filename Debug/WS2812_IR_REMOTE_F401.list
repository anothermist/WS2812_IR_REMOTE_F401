
WS2812_IR_REMOTE_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008268  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bbc  08008408  08008408  00018408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fc4  08009fc4  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08009fc4  08009fc4  00019fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fcc  08009fcc  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fcc  08009fcc  00019fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fd0  08009fd0  00019fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08009fd4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007970  20000088  0800a058  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200079f8  0800a058  000279f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fd5  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029c9  00000000  00000000  00035089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00037a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  00038a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018af2  00000000  00000000  00039980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f2e  00000000  00000000  00052472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009347f  00000000  00000000  000663a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f981f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000496c  00000000  00000000  000f9870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080083f0 	.word	0x080083f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	080083f0 	.word	0x080083f0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b974 	b.w	8000e7c <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	468e      	mov	lr, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d14d      	bne.n	8000c56 <__udivmoddi4+0xaa>
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	4694      	mov	ip, r2
 8000bbe:	d969      	bls.n	8000c94 <__udivmoddi4+0xe8>
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	b152      	cbz	r2, 8000bdc <__udivmoddi4+0x30>
 8000bc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bca:	f1c2 0120 	rsb	r1, r2, #32
 8000bce:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bda:	4094      	lsls	r4, r2
 8000bdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be0:	0c21      	lsrs	r1, r4, #16
 8000be2:	fbbe f6f8 	udiv	r6, lr, r8
 8000be6:	fa1f f78c 	uxth.w	r7, ip
 8000bea:	fb08 e316 	mls	r3, r8, r6, lr
 8000bee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf2:	fb06 f107 	mul.w	r1, r6, r7
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x64>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c02:	f080 811f 	bcs.w	8000e44 <__udivmoddi4+0x298>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 811c 	bls.w	8000e44 <__udivmoddi4+0x298>
 8000c0c:	3e02      	subs	r6, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c18:	fb08 3310 	mls	r3, r8, r0, r3
 8000c1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c20:	fb00 f707 	mul.w	r7, r0, r7
 8000c24:	42a7      	cmp	r7, r4
 8000c26:	d90a      	bls.n	8000c3e <__udivmoddi4+0x92>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c30:	f080 810a 	bcs.w	8000e48 <__udivmoddi4+0x29c>
 8000c34:	42a7      	cmp	r7, r4
 8000c36:	f240 8107 	bls.w	8000e48 <__udivmoddi4+0x29c>
 8000c3a:	4464      	add	r4, ip
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c42:	1be4      	subs	r4, r4, r7
 8000c44:	2600      	movs	r6, #0
 8000c46:	b11d      	cbz	r5, 8000c50 <__udivmoddi4+0xa4>
 8000c48:	40d4      	lsrs	r4, r2
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d909      	bls.n	8000c6e <__udivmoddi4+0xc2>
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	f000 80ef 	beq.w	8000e3e <__udivmoddi4+0x292>
 8000c60:	2600      	movs	r6, #0
 8000c62:	e9c5 0100 	strd	r0, r1, [r5]
 8000c66:	4630      	mov	r0, r6
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	fab3 f683 	clz	r6, r3
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d14a      	bne.n	8000d0c <__udivmoddi4+0x160>
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d302      	bcc.n	8000c80 <__udivmoddi4+0xd4>
 8000c7a:	4282      	cmp	r2, r0
 8000c7c:	f200 80f9 	bhi.w	8000e72 <__udivmoddi4+0x2c6>
 8000c80:	1a84      	subs	r4, r0, r2
 8000c82:	eb61 0303 	sbc.w	r3, r1, r3
 8000c86:	2001      	movs	r0, #1
 8000c88:	469e      	mov	lr, r3
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	d0e0      	beq.n	8000c50 <__udivmoddi4+0xa4>
 8000c8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c92:	e7dd      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000c94:	b902      	cbnz	r2, 8000c98 <__udivmoddi4+0xec>
 8000c96:	deff      	udf	#255	; 0xff
 8000c98:	fab2 f282 	clz	r2, r2
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	f040 8092 	bne.w	8000dc6 <__udivmoddi4+0x21a>
 8000ca2:	eba1 010c 	sub.w	r1, r1, ip
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f fe8c 	uxth.w	lr, ip
 8000cae:	2601      	movs	r6, #1
 8000cb0:	0c20      	lsrs	r0, r4, #16
 8000cb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cbe:	fb0e f003 	mul.w	r0, lr, r3
 8000cc2:	4288      	cmp	r0, r1
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x12c>
 8000cc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x12a>
 8000cd0:	4288      	cmp	r0, r1
 8000cd2:	f200 80cb 	bhi.w	8000e6c <__udivmoddi4+0x2c0>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	1a09      	subs	r1, r1, r0
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x156>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf8:	d202      	bcs.n	8000d00 <__udivmoddi4+0x154>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f200 80bb 	bhi.w	8000e76 <__udivmoddi4+0x2ca>
 8000d00:	4608      	mov	r0, r1
 8000d02:	eba4 040e 	sub.w	r4, r4, lr
 8000d06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0a:	e79c      	b.n	8000c46 <__udivmoddi4+0x9a>
 8000d0c:	f1c6 0720 	rsb	r7, r6, #32
 8000d10:	40b3      	lsls	r3, r6
 8000d12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d22:	431c      	orrs	r4, r3
 8000d24:	40f9      	lsrs	r1, r7
 8000d26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d32:	0c20      	lsrs	r0, r4, #16
 8000d34:	fa1f fe8c 	uxth.w	lr, ip
 8000d38:	fb09 1118 	mls	r1, r9, r8, r1
 8000d3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d40:	fb08 f00e 	mul.w	r0, r8, lr
 8000d44:	4288      	cmp	r0, r1
 8000d46:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4a:	d90b      	bls.n	8000d64 <__udivmoddi4+0x1b8>
 8000d4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d54:	f080 8088 	bcs.w	8000e68 <__udivmoddi4+0x2bc>
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	f240 8085 	bls.w	8000e68 <__udivmoddi4+0x2bc>
 8000d5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d62:	4461      	add	r1, ip
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d78:	458e      	cmp	lr, r1
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x1e2>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d84:	d26c      	bcs.n	8000e60 <__udivmoddi4+0x2b4>
 8000d86:	458e      	cmp	lr, r1
 8000d88:	d96a      	bls.n	8000e60 <__udivmoddi4+0x2b4>
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	4461      	add	r1, ip
 8000d8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d92:	fba0 9402 	umull	r9, r4, r0, r2
 8000d96:	eba1 010e 	sub.w	r1, r1, lr
 8000d9a:	42a1      	cmp	r1, r4
 8000d9c:	46c8      	mov	r8, r9
 8000d9e:	46a6      	mov	lr, r4
 8000da0:	d356      	bcc.n	8000e50 <__udivmoddi4+0x2a4>
 8000da2:	d053      	beq.n	8000e4c <__udivmoddi4+0x2a0>
 8000da4:	b15d      	cbz	r5, 8000dbe <__udivmoddi4+0x212>
 8000da6:	ebb3 0208 	subs.w	r2, r3, r8
 8000daa:	eb61 010e 	sbc.w	r1, r1, lr
 8000dae:	fa01 f707 	lsl.w	r7, r1, r7
 8000db2:	fa22 f306 	lsr.w	r3, r2, r6
 8000db6:	40f1      	lsrs	r1, r6
 8000db8:	431f      	orrs	r7, r3
 8000dba:	e9c5 7100 	strd	r7, r1, [r5]
 8000dbe:	2600      	movs	r6, #0
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	f1c2 0320 	rsb	r3, r2, #32
 8000dca:	40d8      	lsrs	r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd4:	4091      	lsls	r1, r2
 8000dd6:	4301      	orrs	r1, r0
 8000dd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ddc:	fa1f fe8c 	uxth.w	lr, ip
 8000de0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de4:	fb07 3610 	mls	r6, r7, r0, r3
 8000de8:	0c0b      	lsrs	r3, r1, #16
 8000dea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dee:	fb00 f60e 	mul.w	r6, r0, lr
 8000df2:	429e      	cmp	r6, r3
 8000df4:	fa04 f402 	lsl.w	r4, r4, r2
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x260>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e02:	d22f      	bcs.n	8000e64 <__udivmoddi4+0x2b8>
 8000e04:	429e      	cmp	r6, r3
 8000e06:	d92d      	bls.n	8000e64 <__udivmoddi4+0x2b8>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1b9b      	subs	r3, r3, r6
 8000e0e:	b289      	uxth	r1, r1
 8000e10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e14:	fb07 3316 	mls	r3, r7, r6, r3
 8000e18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e20:	428b      	cmp	r3, r1
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x28a>
 8000e24:	eb1c 0101 	adds.w	r1, ip, r1
 8000e28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e2c:	d216      	bcs.n	8000e5c <__udivmoddi4+0x2b0>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d914      	bls.n	8000e5c <__udivmoddi4+0x2b0>
 8000e32:	3e02      	subs	r6, #2
 8000e34:	4461      	add	r1, ip
 8000e36:	1ac9      	subs	r1, r1, r3
 8000e38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e3c:	e738      	b.n	8000cb0 <__udivmoddi4+0x104>
 8000e3e:	462e      	mov	r6, r5
 8000e40:	4628      	mov	r0, r5
 8000e42:	e705      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000e44:	4606      	mov	r6, r0
 8000e46:	e6e3      	b.n	8000c10 <__udivmoddi4+0x64>
 8000e48:	4618      	mov	r0, r3
 8000e4a:	e6f8      	b.n	8000c3e <__udivmoddi4+0x92>
 8000e4c:	454b      	cmp	r3, r9
 8000e4e:	d2a9      	bcs.n	8000da4 <__udivmoddi4+0x1f8>
 8000e50:	ebb9 0802 	subs.w	r8, r9, r2
 8000e54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e58:	3801      	subs	r0, #1
 8000e5a:	e7a3      	b.n	8000da4 <__udivmoddi4+0x1f8>
 8000e5c:	4646      	mov	r6, r8
 8000e5e:	e7ea      	b.n	8000e36 <__udivmoddi4+0x28a>
 8000e60:	4620      	mov	r0, r4
 8000e62:	e794      	b.n	8000d8e <__udivmoddi4+0x1e2>
 8000e64:	4640      	mov	r0, r8
 8000e66:	e7d1      	b.n	8000e0c <__udivmoddi4+0x260>
 8000e68:	46d0      	mov	r8, sl
 8000e6a:	e77b      	b.n	8000d64 <__udivmoddi4+0x1b8>
 8000e6c:	3b02      	subs	r3, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	e732      	b.n	8000cd8 <__udivmoddi4+0x12c>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e709      	b.n	8000c8a <__udivmoddi4+0xde>
 8000e76:	4464      	add	r4, ip
 8000e78:	3802      	subs	r0, #2
 8000e7a:	e742      	b.n	8000d02 <__udivmoddi4+0x156>

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <LCD_Command>:

uint32_t RGB(uint8_t r, uint8_t g, uint8_t b) {
	return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
}

inline static void LCD_Command(uint8_t cmd) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
	if (SOFT_CS) LCD_U_CS
	LCD_U_DC
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2102      	movs	r1, #2
 8000e8e:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <LCD_Command+0x28>)
 8000e90:	f003 ff68 	bl	8004d64 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&LCD_SPI, &cmd, 1, 0);
 8000e94:	1df9      	adds	r1, r7, #7
 8000e96:	2300      	movs	r3, #0
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4804      	ldr	r0, [pc, #16]	; (8000eac <LCD_Command+0x2c>)
 8000e9c:	f004 fc5d 	bl	800575a <HAL_SPI_Transmit>
	if (SOFT_CS) LCD_S_CS
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40020400 	.word	0x40020400
 8000eac:	20000748 	.word	0x20000748

08000eb0 <LCD_Data_8>:

inline static void LCD_Data_8(uint8_t data) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
	if (SOFT_CS)
		LCD_U_CS
	LCD_S_DC
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <LCD_Data_8+0x28>)
 8000ec0:	f003 ff50 	bl	8004d64 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&LCD_SPI, &data, 1, 0);
 8000ec4:	1df9      	adds	r1, r7, #7
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	2201      	movs	r2, #1
 8000eca:	4804      	ldr	r0, [pc, #16]	; (8000edc <LCD_Data_8+0x2c>)
 8000ecc:	f004 fc45 	bl	800575a <HAL_SPI_Transmit>
	if (SOFT_CS)
		LCD_S_CS
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40020400 	.word	0x40020400
 8000edc:	20000748 	.word	0x20000748

08000ee0 <LCD_Data_16>:

inline static void LCD_Data_16(uint16_t word) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	80fb      	strh	r3, [r7, #6]
	if (SOFT_CS) LCD_U_CS
	LCD_S_DC
 8000eea:	2201      	movs	r2, #1
 8000eec:	2102      	movs	r1, #2
 8000eee:	4809      	ldr	r0, [pc, #36]	; (8000f14 <LCD_Data_16+0x34>)
 8000ef0:	f003 ff38 	bl	8004d64 <HAL_GPIO_WritePin>
	LCD_Data_8((word >> 8) & 0x00FF);
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	0a1b      	lsrs	r3, r3, #8
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ffd7 	bl	8000eb0 <LCD_Data_8>
	LCD_Data_8(word & 0x00FF);
 8000f02:	88fb      	ldrh	r3, [r7, #6]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff ffd2 	bl	8000eb0 <LCD_Data_8>
	if (SOFT_CS) LCD_S_CS
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40020400 	.word	0x40020400

08000f18 <LCD_Data_24>:

inline static void LCD_Data_24(uint32_t word) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	if (SOFT_CS) LCD_U_CS
	LCD_S_DC
 8000f20:	2201      	movs	r2, #1
 8000f22:	2102      	movs	r1, #2
 8000f24:	480b      	ldr	r0, [pc, #44]	; (8000f54 <LCD_Data_24+0x3c>)
 8000f26:	f003 ff1d 	bl	8004d64 <HAL_GPIO_WritePin>
	LCD_Data_8((word >> 16) & 0x00FFFF);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	0c1b      	lsrs	r3, r3, #16
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ffbd 	bl	8000eb0 <LCD_Data_8>
	LCD_Data_8((word >> 8) & 0x00FFFF);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ffb7 	bl	8000eb0 <LCD_Data_8>
	LCD_Data_8(word & 0x00FFFF);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ffb2 	bl	8000eb0 <LCD_Data_8>
	if (SOFT_CS) LCD_S_CS
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40020400 	.word	0x40020400

08000f58 <LCD_Window>:

inline static void LCD_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4604      	mov	r4, r0
 8000f60:	4608      	mov	r0, r1
 8000f62:	4611      	mov	r1, r2
 8000f64:	461a      	mov	r2, r3
 8000f66:	4623      	mov	r3, r4
 8000f68:	80fb      	strh	r3, [r7, #6]
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	80bb      	strh	r3, [r7, #4]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	807b      	strh	r3, [r7, #2]
 8000f72:	4613      	mov	r3, r2
 8000f74:	803b      	strh	r3, [r7, #0]
	LCD_Command(COLUMN_ADDRESS_SET);
 8000f76:	202a      	movs	r0, #42	; 0x2a
 8000f78:	f7ff ff82 	bl	8000e80 <LCD_Command>
	LCD_Data_16(y1);
 8000f7c:	88bb      	ldrh	r3, [r7, #4]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ffae 	bl	8000ee0 <LCD_Data_16>
	LCD_Data_16(y2);
 8000f84:	883b      	ldrh	r3, [r7, #0]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ffaa 	bl	8000ee0 <LCD_Data_16>
	LCD_Command(PAGE_ADDRESS_SET);
 8000f8c:	202b      	movs	r0, #43	; 0x2b
 8000f8e:	f7ff ff77 	bl	8000e80 <LCD_Command>
	LCD_Data_16(x1);
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ffa3 	bl	8000ee0 <LCD_Data_16>
	LCD_Data_16(x2);
 8000f9a:	887b      	ldrh	r3, [r7, #2]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff9f 	bl	8000ee0 <LCD_Data_16>
	LCD_Command(MEMORY_WRITE);
 8000fa2:	202c      	movs	r0, #44	; 0x2c
 8000fa4:	f7ff ff6c 	bl	8000e80 <LCD_Command>
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd90      	pop	{r4, r7, pc}

08000fb0 <LCD_Rect_Fill>:
void LCD_Pixel(uint16_t x, uint16_t y, uint32_t color24) {
	LCD_Window(x, y, x, y);
	LCD_Data_24(color24);
}

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24) {
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	4608      	mov	r0, r1
 8000fba:	4611      	mov	r1, r2
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4623      	mov	r3, r4
 8000fc0:	80fb      	strh	r3, [r7, #6]
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	80bb      	strh	r3, [r7, #4]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	807b      	strh	r3, [r7, #2]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	803b      	strh	r3, [r7, #0]
	uint32_t i = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8000fd2:	887b      	ldrh	r3, [r7, #2]
 8000fd4:	883a      	ldrh	r2, [r7, #0]
 8000fd6:	fb02 f303 	mul.w	r3, r2, r3
 8000fda:	60bb      	str	r3, [r7, #8]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000fdc:	88ba      	ldrh	r2, [r7, #4]
 8000fde:	883b      	ldrh	r3, [r7, #0]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	b29c      	uxth	r4, r3
 8000fe8:	88fa      	ldrh	r2, [r7, #6]
 8000fea:	887b      	ldrh	r3, [r7, #2]
 8000fec:	4413      	add	r3, r2
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	88f9      	ldrh	r1, [r7, #6]
 8000ff6:	88b8      	ldrh	r0, [r7, #4]
 8000ff8:	4622      	mov	r2, r4
 8000ffa:	f7ff ffad 	bl	8000f58 <LCD_Window>
	for (i = 0; i < j; i++) LCD_Data_24(color24);
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	e005      	b.n	8001010 <LCD_Rect_Fill+0x60>
 8001004:	6a38      	ldr	r0, [r7, #32]
 8001006:	f7ff ff87 	bl	8000f18 <LCD_Data_24>
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	3301      	adds	r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	429a      	cmp	r2, r3
 8001016:	d3f5      	bcc.n	8001004 <LCD_Rect_Fill+0x54>
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	bd90      	pop	{r4, r7, pc}

08001022 <LCD_Line>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24) {
 8001022:	b590      	push	{r4, r7, lr}
 8001024:	b08b      	sub	sp, #44	; 0x2c
 8001026:	af02      	add	r7, sp, #8
 8001028:	4604      	mov	r4, r0
 800102a:	4608      	mov	r0, r1
 800102c:	4611      	mov	r1, r2
 800102e:	461a      	mov	r2, r3
 8001030:	4623      	mov	r3, r4
 8001032:	80fb      	strh	r3, [r7, #6]
 8001034:	4603      	mov	r3, r0
 8001036:	80bb      	strh	r3, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	807b      	strh	r3, [r7, #2]
 800103c:	4613      	mov	r3, r2
 800103e:	803b      	strh	r3, [r7, #0]
	int deltaX = abs(x2 - x1);
 8001040:	887a      	ldrh	r2, [r7, #2]
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	bfb8      	it	lt
 800104a:	425b      	neglt	r3, r3
 800104c:	61bb      	str	r3, [r7, #24]
	int deltaY = abs(y2 - y1);
 800104e:	883a      	ldrh	r2, [r7, #0]
 8001050:	88bb      	ldrh	r3, [r7, #4]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	bfb8      	it	lt
 8001058:	425b      	neglt	r3, r3
 800105a:	617b      	str	r3, [r7, #20]
	int signX = x1 < x2 ? 1 : -1;
 800105c:	88fa      	ldrh	r2, [r7, #6]
 800105e:	887b      	ldrh	r3, [r7, #2]
 8001060:	429a      	cmp	r2, r3
 8001062:	d201      	bcs.n	8001068 <LCD_Line+0x46>
 8001064:	2301      	movs	r3, #1
 8001066:	e001      	b.n	800106c <LCD_Line+0x4a>
 8001068:	f04f 33ff 	mov.w	r3, #4294967295
 800106c:	613b      	str	r3, [r7, #16]
	int signY = y1 < y2 ? 1 : -1;
 800106e:	88ba      	ldrh	r2, [r7, #4]
 8001070:	883b      	ldrh	r3, [r7, #0]
 8001072:	429a      	cmp	r2, r3
 8001074:	d201      	bcs.n	800107a <LCD_Line+0x58>
 8001076:	2301      	movs	r3, #1
 8001078:	e001      	b.n	800107e <LCD_Line+0x5c>
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	60fb      	str	r3, [r7, #12]
	int error = deltaX - deltaY;
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	61fb      	str	r3, [r7, #28]
	int error2 = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
	for (;;) {
		LCD_Rect_Fill(x1, y1, size, size, color24);
 800108c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001090:	b29a      	uxth	r2, r3
 8001092:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001096:	b29c      	uxth	r4, r3
 8001098:	88b9      	ldrh	r1, [r7, #4]
 800109a:	88f8      	ldrh	r0, [r7, #6]
 800109c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	4623      	mov	r3, r4
 80010a2:	f7ff ff85 	bl	8000fb0 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 80010a6:	88fa      	ldrh	r2, [r7, #6]
 80010a8:	887b      	ldrh	r3, [r7, #2]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d103      	bne.n	80010b6 <LCD_Line+0x94>
 80010ae:	88ba      	ldrh	r2, [r7, #4]
 80010b0:	883b      	ldrh	r3, [r7, #0]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d01e      	beq.n	80010f4 <LCD_Line+0xd2>
			break;
		error2 = error * 2;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
		if (error2 > -deltaY) {
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	425b      	negs	r3, r3
 80010c0:	68ba      	ldr	r2, [r7, #8]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	dd08      	ble.n	80010d8 <LCD_Line+0xb6>
			error -= deltaY;
 80010c6:	69fa      	ldr	r2, [r7, #28]
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	61fb      	str	r3, [r7, #28]
			x1 += signX;
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	4413      	add	r3, r2
 80010d6:	80fb      	strh	r3, [r7, #6]
		}
		if (error2 < deltaX) {
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	429a      	cmp	r2, r3
 80010de:	dad5      	bge.n	800108c <LCD_Line+0x6a>
			error += deltaX;
 80010e0:	69fa      	ldr	r2, [r7, #28]
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	4413      	add	r3, r2
 80010e6:	61fb      	str	r3, [r7, #28]
			y1 += signY;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	88bb      	ldrh	r3, [r7, #4]
 80010ee:	4413      	add	r3, r2
 80010f0:	80bb      	strh	r3, [r7, #4]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 80010f2:	e7cb      	b.n	800108c <LCD_Line+0x6a>
			break;
 80010f4:	bf00      	nop
		}
	}
}
 80010f6:	bf00      	nop
 80010f8:	3724      	adds	r7, #36	; 0x24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd90      	pop	{r4, r7, pc}

080010fe <LCD_Rect>:

void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24) {
 80010fe:	b590      	push	{r4, r7, lr}
 8001100:	b085      	sub	sp, #20
 8001102:	af02      	add	r7, sp, #8
 8001104:	4604      	mov	r4, r0
 8001106:	4608      	mov	r0, r1
 8001108:	4611      	mov	r1, r2
 800110a:	461a      	mov	r2, r3
 800110c:	4623      	mov	r3, r4
 800110e:	80fb      	strh	r3, [r7, #6]
 8001110:	4603      	mov	r3, r0
 8001112:	80bb      	strh	r3, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]
 8001118:	4613      	mov	r3, r2
 800111a:	803b      	strh	r3, [r7, #0]
	LCD_Line(x, y, x + w, y, size, color24);
 800111c:	88fa      	ldrh	r2, [r7, #6]
 800111e:	887b      	ldrh	r3, [r7, #2]
 8001120:	4413      	add	r3, r2
 8001122:	b29a      	uxth	r2, r3
 8001124:	88bc      	ldrh	r4, [r7, #4]
 8001126:	88b9      	ldrh	r1, [r7, #4]
 8001128:	88f8      	ldrh	r0, [r7, #6]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	7e3b      	ldrb	r3, [r7, #24]
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	4623      	mov	r3, r4
 8001134:	f7ff ff75 	bl	8001022 <LCD_Line>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8001138:	88ba      	ldrh	r2, [r7, #4]
 800113a:	883b      	ldrh	r3, [r7, #0]
 800113c:	4413      	add	r3, r2
 800113e:	b299      	uxth	r1, r3
 8001140:	88fa      	ldrh	r2, [r7, #6]
 8001142:	887b      	ldrh	r3, [r7, #2]
 8001144:	4413      	add	r3, r2
 8001146:	b29c      	uxth	r4, r3
 8001148:	88ba      	ldrh	r2, [r7, #4]
 800114a:	883b      	ldrh	r3, [r7, #0]
 800114c:	4413      	add	r3, r2
 800114e:	b29a      	uxth	r2, r3
 8001150:	88f8      	ldrh	r0, [r7, #6]
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	7e3b      	ldrb	r3, [r7, #24]
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	4613      	mov	r3, r2
 800115c:	4622      	mov	r2, r4
 800115e:	f7ff ff60 	bl	8001022 <LCD_Line>
	LCD_Line(x, y, x, y + h, size, color24);
 8001162:	88ba      	ldrh	r2, [r7, #4]
 8001164:	883b      	ldrh	r3, [r7, #0]
 8001166:	4413      	add	r3, r2
 8001168:	b29c      	uxth	r4, r3
 800116a:	88fa      	ldrh	r2, [r7, #6]
 800116c:	88b9      	ldrh	r1, [r7, #4]
 800116e:	88f8      	ldrh	r0, [r7, #6]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	7e3b      	ldrb	r3, [r7, #24]
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	4623      	mov	r3, r4
 800117a:	f7ff ff52 	bl	8001022 <LCD_Line>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 800117e:	88fa      	ldrh	r2, [r7, #6]
 8001180:	887b      	ldrh	r3, [r7, #2]
 8001182:	4413      	add	r3, r2
 8001184:	b298      	uxth	r0, r3
 8001186:	88fa      	ldrh	r2, [r7, #6]
 8001188:	887b      	ldrh	r3, [r7, #2]
 800118a:	4413      	add	r3, r2
 800118c:	b29c      	uxth	r4, r3
 800118e:	88ba      	ldrh	r2, [r7, #4]
 8001190:	883b      	ldrh	r3, [r7, #0]
 8001192:	4413      	add	r3, r2
 8001194:	b29a      	uxth	r2, r3
 8001196:	88b9      	ldrh	r1, [r7, #4]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	7e3b      	ldrb	r3, [r7, #24]
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	4613      	mov	r3, r2
 80011a2:	4622      	mov	r2, r4
 80011a4:	f7ff ff3d 	bl	8001022 <LCD_Line>
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd90      	pop	{r4, r7, pc}

080011b0 <LCD_Triangle>:

void LCD_Triangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint8_t size, uint32_t color24) {
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	4604      	mov	r4, r0
 80011b8:	4608      	mov	r0, r1
 80011ba:	4611      	mov	r1, r2
 80011bc:	461a      	mov	r2, r3
 80011be:	4623      	mov	r3, r4
 80011c0:	80fb      	strh	r3, [r7, #6]
 80011c2:	4603      	mov	r3, r0
 80011c4:	80bb      	strh	r3, [r7, #4]
 80011c6:	460b      	mov	r3, r1
 80011c8:	807b      	strh	r3, [r7, #2]
 80011ca:	4613      	mov	r3, r2
 80011cc:	803b      	strh	r3, [r7, #0]
	LCD_Line(x1, y1, x2, y2, size, color24);
 80011ce:	883c      	ldrh	r4, [r7, #0]
 80011d0:	887a      	ldrh	r2, [r7, #2]
 80011d2:	88b9      	ldrh	r1, [r7, #4]
 80011d4:	88f8      	ldrh	r0, [r7, #6]
 80011d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	4623      	mov	r3, r4
 80011e2:	f7ff ff1e 	bl	8001022 <LCD_Line>
	LCD_Line(x2, y2, x3, y3, size, color24);
 80011e6:	8bbc      	ldrh	r4, [r7, #28]
 80011e8:	8b3a      	ldrh	r2, [r7, #24]
 80011ea:	8839      	ldrh	r1, [r7, #0]
 80011ec:	8878      	ldrh	r0, [r7, #2]
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	9301      	str	r3, [sp, #4]
 80011f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	4623      	mov	r3, r4
 80011fa:	f7ff ff12 	bl	8001022 <LCD_Line>
	LCD_Line(x3, y3, x1, y1, size, color24);
 80011fe:	88bc      	ldrh	r4, [r7, #4]
 8001200:	88fa      	ldrh	r2, [r7, #6]
 8001202:	8bb9      	ldrh	r1, [r7, #28]
 8001204:	8b38      	ldrh	r0, [r7, #24]
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	4623      	mov	r3, r4
 8001212:	f7ff ff06 	bl	8001022 <LCD_Line>
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	bd90      	pop	{r4, r7, pc}

0800121e <LCD_Triangle_Fill>:

#define ABS(x) ((x) > 0 ? (x) : -(x))

void LCD_Triangle_Fill(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint32_t color24) {
 800121e:	b590      	push	{r4, r7, lr}
 8001220:	b08d      	sub	sp, #52	; 0x34
 8001222:	af02      	add	r7, sp, #8
 8001224:	4604      	mov	r4, r0
 8001226:	4608      	mov	r0, r1
 8001228:	4611      	mov	r1, r2
 800122a:	461a      	mov	r2, r3
 800122c:	4623      	mov	r3, r4
 800122e:	80fb      	strh	r3, [r7, #6]
 8001230:	4603      	mov	r3, r0
 8001232:	80bb      	strh	r3, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	807b      	strh	r3, [r7, #2]
 8001238:	4613      	mov	r3, r2
 800123a:	803b      	strh	r3, [r7, #0]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, curpixel = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	823b      	strh	r3, [r7, #16]
 8001240:	2300      	movs	r3, #0
 8001242:	81fb      	strh	r3, [r7, #14]
 8001244:	2300      	movs	r3, #0
 8001246:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001248:	2300      	movs	r3, #0
 800124a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800124c:	2300      	movs	r3, #0
 800124e:	847b      	strh	r3, [r7, #34]	; 0x22
 8001250:	2300      	movs	r3, #0
 8001252:	843b      	strh	r3, [r7, #32]
 8001254:	2300      	movs	r3, #0
 8001256:	83fb      	strh	r3, [r7, #30]
 8001258:	2300      	movs	r3, #0
 800125a:	83bb      	strh	r3, [r7, #28]
 800125c:	2300      	movs	r3, #0
 800125e:	837b      	strh	r3, [r7, #26]
 8001260:	2300      	movs	r3, #0
 8001262:	833b      	strh	r3, [r7, #24]
 8001264:	2300      	movs	r3, #0
 8001266:	82fb      	strh	r3, [r7, #22]
 8001268:	2300      	movs	r3, #0
 800126a:	82bb      	strh	r3, [r7, #20]
 800126c:	2300      	movs	r3, #0
 800126e:	827b      	strh	r3, [r7, #18]

	deltax = ABS(x2 - x1);
 8001270:	887a      	ldrh	r2, [r7, #2]
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	bfb8      	it	lt
 800127a:	425b      	neglt	r3, r3
 800127c:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 800127e:	883a      	ldrh	r2, [r7, #0]
 8001280:	88bb      	ldrh	r3, [r7, #4]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	bfb8      	it	lt
 8001288:	425b      	neglt	r3, r3
 800128a:	81fb      	strh	r3, [r7, #14]
	x = x1;
 800128c:	88fb      	ldrh	r3, [r7, #6]
 800128e:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 8001290:	88bb      	ldrh	r3, [r7, #4]
 8001292:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1) {
 8001294:	887a      	ldrh	r2, [r7, #2]
 8001296:	88fb      	ldrh	r3, [r7, #6]
 8001298:	429a      	cmp	r2, r3
 800129a:	d304      	bcc.n	80012a6 <LCD_Triangle_Fill+0x88>
		xinc1 = 1;
 800129c:	2301      	movs	r3, #1
 800129e:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 80012a0:	2301      	movs	r3, #1
 80012a2:	843b      	strh	r3, [r7, #32]
 80012a4:	e005      	b.n	80012b2 <LCD_Triangle_Fill+0x94>
	} else {
		xinc1 = -1;
 80012a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012aa:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 80012ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012b0:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1) {
 80012b2:	883a      	ldrh	r2, [r7, #0]
 80012b4:	88bb      	ldrh	r3, [r7, #4]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d304      	bcc.n	80012c4 <LCD_Triangle_Fill+0xa6>
		yinc1 = 1;
 80012ba:	2301      	movs	r3, #1
 80012bc:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 80012be:	2301      	movs	r3, #1
 80012c0:	83bb      	strh	r3, [r7, #28]
 80012c2:	e005      	b.n	80012d0 <LCD_Triangle_Fill+0xb2>
	} else {
		yinc1 = -1;
 80012c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012c8:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 80012ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ce:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay) {
 80012d0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80012d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012d8:	429a      	cmp	r2, r3
 80012da:	db10      	blt.n	80012fe <LCD_Triangle_Fill+0xe0>
		xinc1 = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 80012e4:	8a3b      	ldrh	r3, [r7, #16]
 80012e6:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 80012e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012ec:	0fda      	lsrs	r2, r3, #31
 80012ee:	4413      	add	r3, r2
 80012f0:	105b      	asrs	r3, r3, #1
 80012f2:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 80012f4:	89fb      	ldrh	r3, [r7, #14]
 80012f6:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 80012f8:	8a3b      	ldrh	r3, [r7, #16]
 80012fa:	82bb      	strh	r3, [r7, #20]
 80012fc:	e00f      	b.n	800131e <LCD_Triangle_Fill+0x100>
	} else {
		xinc2 = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8001306:	89fb      	ldrh	r3, [r7, #14]
 8001308:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 800130a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800130e:	0fda      	lsrs	r2, r3, #31
 8001310:	4413      	add	r3, r2
 8001312:	105b      	asrs	r3, r3, #1
 8001314:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8001316:	8a3b      	ldrh	r3, [r7, #16]
 8001318:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 800131a:	89fb      	ldrh	r3, [r7, #14]
 800131c:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 800131e:	2300      	movs	r3, #0
 8001320:	827b      	strh	r3, [r7, #18]
 8001322:	e034      	b.n	800138e <LCD_Triangle_Fill+0x170>
		LCD_Line(x, y, x3, y3, 1, color24);
 8001324:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001326:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001328:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 800132a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800132c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	2301      	movs	r3, #1
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	4623      	mov	r3, r4
 8001336:	f7ff fe74 	bl	8001022 <LCD_Line>

		num += numadd;
 800133a:	8b3a      	ldrh	r2, [r7, #24]
 800133c:	8afb      	ldrh	r3, [r7, #22]
 800133e:	4413      	add	r3, r2
 8001340:	b29b      	uxth	r3, r3
 8001342:	833b      	strh	r3, [r7, #24]
		if (num >= den) {
 8001344:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001348:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800134c:	429a      	cmp	r2, r3
 800134e:	db0e      	blt.n	800136e <LCD_Triangle_Fill+0x150>
			num -= den;
 8001350:	8b3a      	ldrh	r2, [r7, #24]
 8001352:	8b7b      	ldrh	r3, [r7, #26]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	b29b      	uxth	r3, r3
 8001358:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 800135a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800135c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800135e:	4413      	add	r3, r2
 8001360:	b29b      	uxth	r3, r3
 8001362:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 8001364:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001366:	8bfb      	ldrh	r3, [r7, #30]
 8001368:	4413      	add	r3, r2
 800136a:	b29b      	uxth	r3, r3
 800136c:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 800136e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001370:	8c3b      	ldrh	r3, [r7, #32]
 8001372:	4413      	add	r3, r2
 8001374:	b29b      	uxth	r3, r3
 8001376:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 8001378:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800137a:	8bbb      	ldrh	r3, [r7, #28]
 800137c:	4413      	add	r3, r2
 800137e:	b29b      	uxth	r3, r3
 8001380:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8001382:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001386:	b29b      	uxth	r3, r3
 8001388:	3301      	adds	r3, #1
 800138a:	b29b      	uxth	r3, r3
 800138c:	827b      	strh	r3, [r7, #18]
 800138e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001392:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001396:	429a      	cmp	r2, r3
 8001398:	ddc4      	ble.n	8001324 <LCD_Triangle_Fill+0x106>
	}
}
 800139a:	bf00      	nop
 800139c:	bf00      	nop
 800139e:	372c      	adds	r7, #44	; 0x2c
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd90      	pop	{r4, r7, pc}

080013a4 <LCD_Ellipse>:

void LCD_Ellipse(int16_t x0, int16_t y0, int16_t rx, int16_t ry, uint8_t fill, uint8_t size, uint32_t color24) {
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b08b      	sub	sp, #44	; 0x2c
 80013a8:	af02      	add	r7, sp, #8
 80013aa:	4604      	mov	r4, r0
 80013ac:	4608      	mov	r0, r1
 80013ae:	4611      	mov	r1, r2
 80013b0:	461a      	mov	r2, r3
 80013b2:	4623      	mov	r3, r4
 80013b4:	80fb      	strh	r3, [r7, #6]
 80013b6:	4603      	mov	r3, r0
 80013b8:	80bb      	strh	r3, [r7, #4]
 80013ba:	460b      	mov	r3, r1
 80013bc:	807b      	strh	r3, [r7, #2]
 80013be:	4613      	mov	r3, r2
 80013c0:	803b      	strh	r3, [r7, #0]
	int16_t x, y;
	int32_t rx2 = rx * rx;
 80013c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013c6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80013ca:	fb02 f303 	mul.w	r3, r2, r3
 80013ce:	617b      	str	r3, [r7, #20]
	int32_t ry2 = ry * ry;
 80013d0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80013d4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80013d8:	fb02 f303 	mul.w	r3, r2, r3
 80013dc:	613b      	str	r3, [r7, #16]
	int32_t fx2 = 4 * rx2;
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	60fb      	str	r3, [r7, #12]
	int32_t fy2 = 4 * ry2;
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	60bb      	str	r3, [r7, #8]
	int32_t s;
	if (fill) {
 80013ea:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 8101 	beq.w	80015f6 <LCD_Ellipse+0x252>
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry);
 80013f4:	2300      	movs	r3, #0
 80013f6:	83fb      	strh	r3, [r7, #30]
 80013f8:	883b      	ldrh	r3, [r7, #0]
 80013fa:	83bb      	strh	r3, [r7, #28]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	005a      	lsls	r2, r3, #1
 8001400:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	f1c3 0301 	rsb	r3, r3, #1
 800140a:	6979      	ldr	r1, [r7, #20]
 800140c:	fb01 f303 	mul.w	r3, r1, r3
 8001410:	4413      	add	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
 8001414:	e062      	b.n	80014dc <LCD_Ellipse+0x138>
				ry2 * x <= rx2 * y; x++) {
			LCD_Line(x0 - x, y0 - y, x0 + x + 1 - size, y0 - y, size, color24);
 8001416:	88fa      	ldrh	r2, [r7, #6]
 8001418:	8bfb      	ldrh	r3, [r7, #30]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	b298      	uxth	r0, r3
 800141e:	88ba      	ldrh	r2, [r7, #4]
 8001420:	8bbb      	ldrh	r3, [r7, #28]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	b299      	uxth	r1, r3
 8001426:	88fa      	ldrh	r2, [r7, #6]
 8001428:	8bfb      	ldrh	r3, [r7, #30]
 800142a:	4413      	add	r3, r2
 800142c:	b29a      	uxth	r2, r3
 800142e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001432:	b29b      	uxth	r3, r3
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	b29b      	uxth	r3, r3
 8001438:	3301      	adds	r3, #1
 800143a:	b29c      	uxth	r4, r3
 800143c:	88ba      	ldrh	r2, [r7, #4]
 800143e:	8bbb      	ldrh	r3, [r7, #28]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	b29a      	uxth	r2, r3
 8001444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	4613      	mov	r3, r2
 8001450:	4622      	mov	r2, r4
 8001452:	f7ff fde6 	bl	8001022 <LCD_Line>
			LCD_Line(x0 - x, y0 + y, x0 + x + 1 - size, y0 + y, size, color24);
 8001456:	88fa      	ldrh	r2, [r7, #6]
 8001458:	8bfb      	ldrh	r3, [r7, #30]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	b298      	uxth	r0, r3
 800145e:	88ba      	ldrh	r2, [r7, #4]
 8001460:	8bbb      	ldrh	r3, [r7, #28]
 8001462:	4413      	add	r3, r2
 8001464:	b299      	uxth	r1, r3
 8001466:	88fa      	ldrh	r2, [r7, #6]
 8001468:	8bfb      	ldrh	r3, [r7, #30]
 800146a:	4413      	add	r3, r2
 800146c:	b29a      	uxth	r2, r3
 800146e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001472:	b29b      	uxth	r3, r3
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	b29b      	uxth	r3, r3
 8001478:	3301      	adds	r3, #1
 800147a:	b29c      	uxth	r4, r3
 800147c:	88ba      	ldrh	r2, [r7, #4]
 800147e:	8bbb      	ldrh	r3, [r7, #28]
 8001480:	4413      	add	r3, r2
 8001482:	b29a      	uxth	r2, r3
 8001484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	4613      	mov	r3, r2
 8001490:	4622      	mov	r2, r4
 8001492:	f7ff fdc6 	bl	8001022 <LCD_Line>
			if (s >= 0) {
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	2b00      	cmp	r3, #0
 800149a:	db0f      	blt.n	80014bc <LCD_Ellipse+0x118>
				s += fx2 * (1 - y);
 800149c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80014a0:	f1c3 0301 	rsb	r3, r3, #1
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	fb02 f303 	mul.w	r3, r2, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4413      	add	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
				y--;
 80014b0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	3b01      	subs	r3, #1
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	83bb      	strh	r3, [r7, #28]
			}
			s += ry2 * ((4 * x) + 6);
 80014bc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	3306      	adds	r3, #6
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	fb02 f303 	mul.w	r3, r2, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4413      	add	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
				ry2 * x <= rx2 * y; x++) {
 80014d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	3301      	adds	r3, #1
 80014d8:	b29b      	uxth	r3, r3
 80014da:	83fb      	strh	r3, [r7, #30]
 80014dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	fb03 f202 	mul.w	r2, r3, r2
 80014e6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80014ea:	6979      	ldr	r1, [r7, #20]
 80014ec:	fb01 f303 	mul.w	r3, r1, r3
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry);
 80014f0:	429a      	cmp	r2, r3
 80014f2:	dd90      	ble.n	8001416 <LCD_Ellipse+0x72>
		}
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1 - 2 * rx);
 80014f4:	887b      	ldrh	r3, [r7, #2]
 80014f6:	83fb      	strh	r3, [r7, #30]
 80014f8:	2300      	movs	r3, #0
 80014fa:	83bb      	strh	r3, [r7, #28]
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	005a      	lsls	r2, r3, #1
 8001500:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	f1c3 0301 	rsb	r3, r3, #1
 800150a:	6939      	ldr	r1, [r7, #16]
 800150c:	fb01 f303 	mul.w	r3, r1, r3
 8001510:	4413      	add	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
 8001514:	e062      	b.n	80015dc <LCD_Ellipse+0x238>
				rx2 * y <= ry2 * x; y++) {
			LCD_Line(x0 - x, y0 - y, x0 + x + 1 - size, y0 - y, size, color24);
 8001516:	88fa      	ldrh	r2, [r7, #6]
 8001518:	8bfb      	ldrh	r3, [r7, #30]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	b298      	uxth	r0, r3
 800151e:	88ba      	ldrh	r2, [r7, #4]
 8001520:	8bbb      	ldrh	r3, [r7, #28]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	b299      	uxth	r1, r3
 8001526:	88fa      	ldrh	r2, [r7, #6]
 8001528:	8bfb      	ldrh	r3, [r7, #30]
 800152a:	4413      	add	r3, r2
 800152c:	b29a      	uxth	r2, r3
 800152e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001532:	b29b      	uxth	r3, r3
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	b29b      	uxth	r3, r3
 8001538:	3301      	adds	r3, #1
 800153a:	b29c      	uxth	r4, r3
 800153c:	88ba      	ldrh	r2, [r7, #4]
 800153e:	8bbb      	ldrh	r3, [r7, #28]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	b29a      	uxth	r2, r3
 8001544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	4613      	mov	r3, r2
 8001550:	4622      	mov	r2, r4
 8001552:	f7ff fd66 	bl	8001022 <LCD_Line>
			LCD_Line(x0 - x, y0 + y, x0 + x + 1 - size, y0 + y, size, color24);
 8001556:	88fa      	ldrh	r2, [r7, #6]
 8001558:	8bfb      	ldrh	r3, [r7, #30]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	b298      	uxth	r0, r3
 800155e:	88ba      	ldrh	r2, [r7, #4]
 8001560:	8bbb      	ldrh	r3, [r7, #28]
 8001562:	4413      	add	r3, r2
 8001564:	b299      	uxth	r1, r3
 8001566:	88fa      	ldrh	r2, [r7, #6]
 8001568:	8bfb      	ldrh	r3, [r7, #30]
 800156a:	4413      	add	r3, r2
 800156c:	b29a      	uxth	r2, r3
 800156e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001572:	b29b      	uxth	r3, r3
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	b29b      	uxth	r3, r3
 8001578:	3301      	adds	r3, #1
 800157a:	b29c      	uxth	r4, r3
 800157c:	88ba      	ldrh	r2, [r7, #4]
 800157e:	8bbb      	ldrh	r3, [r7, #28]
 8001580:	4413      	add	r3, r2
 8001582:	b29a      	uxth	r2, r3
 8001584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	4613      	mov	r3, r2
 8001590:	4622      	mov	r2, r4
 8001592:	f7ff fd46 	bl	8001022 <LCD_Line>
			if (s >= 0) {
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	2b00      	cmp	r3, #0
 800159a:	db0f      	blt.n	80015bc <LCD_Ellipse+0x218>
				s += fy2 * (1 - x);
 800159c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80015a0:	f1c3 0301 	rsb	r3, r3, #1
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	fb02 f303 	mul.w	r3, r2, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4413      	add	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
				x--;
 80015b0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	3b01      	subs	r3, #1
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	83fb      	strh	r3, [r7, #30]
			}
			s += rx2 * ((4 * y) + 6);
 80015bc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	3306      	adds	r3, #6
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	fb02 f303 	mul.w	r3, r2, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4413      	add	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
				rx2 * y <= ry2 * x; y++) {
 80015d0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	3301      	adds	r3, #1
 80015d8:	b29b      	uxth	r3, r3
 80015da:	83bb      	strh	r3, [r7, #28]
 80015dc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	fb03 f202 	mul.w	r2, r3, r2
 80015e6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80015ea:	6939      	ldr	r1, [r7, #16]
 80015ec:	fb01 f303 	mul.w	r3, r1, r3
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1 - 2 * rx);
 80015f0:	429a      	cmp	r2, r3
 80015f2:	dd90      	ble.n	8001516 <LCD_Ellipse+0x172>
				x--;
			}
			s += rx2 * ((4 * y) + 6);
		}
	}
}
 80015f4:	e117      	b.n	8001826 <LCD_Ellipse+0x482>
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry);
 80015f6:	2300      	movs	r3, #0
 80015f8:	83fb      	strh	r3, [r7, #30]
 80015fa:	883b      	ldrh	r3, [r7, #0]
 80015fc:	83bb      	strh	r3, [r7, #28]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	005a      	lsls	r2, r3, #1
 8001602:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	f1c3 0301 	rsb	r3, r3, #1
 800160c:	6979      	ldr	r1, [r7, #20]
 800160e:	fb01 f303 	mul.w	r3, r1, r3
 8001612:	4413      	add	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
 8001616:	e06e      	b.n	80016f6 <LCD_Ellipse+0x352>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 8001618:	88fa      	ldrh	r2, [r7, #6]
 800161a:	8bfb      	ldrh	r3, [r7, #30]
 800161c:	4413      	add	r3, r2
 800161e:	b298      	uxth	r0, r3
 8001620:	88ba      	ldrh	r2, [r7, #4]
 8001622:	8bbb      	ldrh	r3, [r7, #28]
 8001624:	4413      	add	r3, r2
 8001626:	b299      	uxth	r1, r3
 8001628:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800162c:	b29a      	uxth	r2, r3
 800162e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001632:	b29c      	uxth	r4, r3
 8001634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	4623      	mov	r3, r4
 800163a:	f7ff fcb9 	bl	8000fb0 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 800163e:	88fa      	ldrh	r2, [r7, #6]
 8001640:	8bfb      	ldrh	r3, [r7, #30]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	b298      	uxth	r0, r3
 8001646:	88ba      	ldrh	r2, [r7, #4]
 8001648:	8bbb      	ldrh	r3, [r7, #28]
 800164a:	4413      	add	r3, r2
 800164c:	b299      	uxth	r1, r3
 800164e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001652:	b29a      	uxth	r2, r3
 8001654:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001658:	b29c      	uxth	r4, r3
 800165a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	4623      	mov	r3, r4
 8001660:	f7ff fca6 	bl	8000fb0 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 8001664:	88fa      	ldrh	r2, [r7, #6]
 8001666:	8bfb      	ldrh	r3, [r7, #30]
 8001668:	4413      	add	r3, r2
 800166a:	b298      	uxth	r0, r3
 800166c:	88ba      	ldrh	r2, [r7, #4]
 800166e:	8bbb      	ldrh	r3, [r7, #28]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	b299      	uxth	r1, r3
 8001674:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001678:	b29a      	uxth	r2, r3
 800167a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800167e:	b29c      	uxth	r4, r3
 8001680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	4623      	mov	r3, r4
 8001686:	f7ff fc93 	bl	8000fb0 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 800168a:	88fa      	ldrh	r2, [r7, #6]
 800168c:	8bfb      	ldrh	r3, [r7, #30]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	b298      	uxth	r0, r3
 8001692:	88ba      	ldrh	r2, [r7, #4]
 8001694:	8bbb      	ldrh	r3, [r7, #28]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	b299      	uxth	r1, r3
 800169a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800169e:	b29a      	uxth	r2, r3
 80016a0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80016a4:	b29c      	uxth	r4, r3
 80016a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	4623      	mov	r3, r4
 80016ac:	f7ff fc80 	bl	8000fb0 <LCD_Rect_Fill>
			if (s >= 0) {
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	db0f      	blt.n	80016d6 <LCD_Ellipse+0x332>
				s += fx2 * (1 - y);
 80016b6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80016ba:	f1c3 0301 	rsb	r3, r3, #1
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	fb02 f303 	mul.w	r3, r2, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4413      	add	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
				y--;
 80016ca:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3b01      	subs	r3, #1
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	83bb      	strh	r3, [r7, #28]
			s += ry2 * ((4 * x) + 6);
 80016d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	3306      	adds	r3, #6
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	fb02 f303 	mul.w	r3, r2, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4413      	add	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
				ry2 * x <= rx2 * y; x++) {
 80016ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	3301      	adds	r3, #1
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	83fb      	strh	r3, [r7, #30]
 80016f6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	fb03 f202 	mul.w	r2, r3, r2
 8001700:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001704:	6979      	ldr	r1, [r7, #20]
 8001706:	fb01 f303 	mul.w	r3, r1, r3
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry);
 800170a:	429a      	cmp	r2, r3
 800170c:	dd84      	ble.n	8001618 <LCD_Ellipse+0x274>
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1 - 2 * rx);
 800170e:	887b      	ldrh	r3, [r7, #2]
 8001710:	83fb      	strh	r3, [r7, #30]
 8001712:	2300      	movs	r3, #0
 8001714:	83bb      	strh	r3, [r7, #28]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	005a      	lsls	r2, r3, #1
 800171a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	f1c3 0301 	rsb	r3, r3, #1
 8001724:	6939      	ldr	r1, [r7, #16]
 8001726:	fb01 f303 	mul.w	r3, r1, r3
 800172a:	4413      	add	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
 800172e:	e06e      	b.n	800180e <LCD_Ellipse+0x46a>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 8001730:	88fa      	ldrh	r2, [r7, #6]
 8001732:	8bfb      	ldrh	r3, [r7, #30]
 8001734:	4413      	add	r3, r2
 8001736:	b298      	uxth	r0, r3
 8001738:	88ba      	ldrh	r2, [r7, #4]
 800173a:	8bbb      	ldrh	r3, [r7, #28]
 800173c:	4413      	add	r3, r2
 800173e:	b299      	uxth	r1, r3
 8001740:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001744:	b29a      	uxth	r2, r3
 8001746:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800174a:	b29c      	uxth	r4, r3
 800174c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	4623      	mov	r3, r4
 8001752:	f7ff fc2d 	bl	8000fb0 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8001756:	88fa      	ldrh	r2, [r7, #6]
 8001758:	8bfb      	ldrh	r3, [r7, #30]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	b298      	uxth	r0, r3
 800175e:	88ba      	ldrh	r2, [r7, #4]
 8001760:	8bbb      	ldrh	r3, [r7, #28]
 8001762:	4413      	add	r3, r2
 8001764:	b299      	uxth	r1, r3
 8001766:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800176a:	b29a      	uxth	r2, r3
 800176c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001770:	b29c      	uxth	r4, r3
 8001772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	4623      	mov	r3, r4
 8001778:	f7ff fc1a 	bl	8000fb0 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 800177c:	88fa      	ldrh	r2, [r7, #6]
 800177e:	8bfb      	ldrh	r3, [r7, #30]
 8001780:	4413      	add	r3, r2
 8001782:	b298      	uxth	r0, r3
 8001784:	88ba      	ldrh	r2, [r7, #4]
 8001786:	8bbb      	ldrh	r3, [r7, #28]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	b299      	uxth	r1, r3
 800178c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001790:	b29a      	uxth	r2, r3
 8001792:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001796:	b29c      	uxth	r4, r3
 8001798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	4623      	mov	r3, r4
 800179e:	f7ff fc07 	bl	8000fb0 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 80017a2:	88fa      	ldrh	r2, [r7, #6]
 80017a4:	8bfb      	ldrh	r3, [r7, #30]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	b298      	uxth	r0, r3
 80017aa:	88ba      	ldrh	r2, [r7, #4]
 80017ac:	8bbb      	ldrh	r3, [r7, #28]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	b299      	uxth	r1, r3
 80017b2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80017bc:	b29c      	uxth	r4, r3
 80017be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	4623      	mov	r3, r4
 80017c4:	f7ff fbf4 	bl	8000fb0 <LCD_Rect_Fill>
			if (s >= 0) {
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	db0f      	blt.n	80017ee <LCD_Ellipse+0x44a>
				s += fy2 * (1 - x);
 80017ce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80017d2:	f1c3 0301 	rsb	r3, r3, #1
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	fb02 f303 	mul.w	r3, r2, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4413      	add	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
				x--;
 80017e2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	3b01      	subs	r3, #1
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	83fb      	strh	r3, [r7, #30]
			s += rx2 * ((4 * y) + 6);
 80017ee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	3306      	adds	r3, #6
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	fb02 f303 	mul.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4413      	add	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
				rx2 * y <= ry2 * x; y++) {
 8001802:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001806:	b29b      	uxth	r3, r3
 8001808:	3301      	adds	r3, #1
 800180a:	b29b      	uxth	r3, r3
 800180c:	83bb      	strh	r3, [r7, #28]
 800180e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	fb03 f202 	mul.w	r2, r3, r2
 8001818:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800181c:	6939      	ldr	r1, [r7, #16]
 800181e:	fb01 f303 	mul.w	r3, r1, r3
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1 - 2 * rx);
 8001822:	429a      	cmp	r2, r3
 8001824:	dd84      	ble.n	8001730 <LCD_Ellipse+0x38c>
}
 8001826:	bf00      	nop
 8001828:	3724      	adds	r7, #36	; 0x24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd90      	pop	{r4, r7, pc}

0800182e <LCD_Circle>:

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24) {
 800182e:	b590      	push	{r4, r7, lr}
 8001830:	b089      	sub	sp, #36	; 0x24
 8001832:	af02      	add	r7, sp, #8
 8001834:	4604      	mov	r4, r0
 8001836:	4608      	mov	r0, r1
 8001838:	4611      	mov	r1, r2
 800183a:	461a      	mov	r2, r3
 800183c:	4623      	mov	r3, r4
 800183e:	80fb      	strh	r3, [r7, #6]
 8001840:	4603      	mov	r3, r0
 8001842:	80bb      	strh	r3, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	70fb      	strb	r3, [r7, #3]
 8001848:	4613      	mov	r3, r2
 800184a:	70bb      	strb	r3, [r7, #2]
	int a_, b_, P;
	a_ = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
	b_ = radius;
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	613b      	str	r3, [r7, #16]
	P = 1 - radius;
 8001854:	78fb      	ldrb	r3, [r7, #3]
 8001856:	f1c3 0301 	rsb	r3, r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
	while (a_ <= b_) {
 800185c:	e0fc      	b.n	8001a58 <LCD_Circle+0x22a>
		if (fill == 1) {
 800185e:	78bb      	ldrb	r3, [r7, #2]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d136      	bne.n	80018d2 <LCD_Circle+0xa4>
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	b29b      	uxth	r3, r3
 8001868:	88fa      	ldrh	r2, [r7, #6]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	b298      	uxth	r0, r3
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	b29b      	uxth	r3, r3
 8001872:	88ba      	ldrh	r2, [r7, #4]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	b299      	uxth	r1, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	b29b      	uxth	r3, r3
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	b29b      	uxth	r3, r3
 8001880:	3301      	adds	r3, #1
 8001882:	b29a      	uxth	r2, r3
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	b29b      	uxth	r3, r3
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	b29b      	uxth	r3, r3
 800188c:	3301      	adds	r3, #1
 800188e:	b29c      	uxth	r4, r3
 8001890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	4623      	mov	r3, r4
 8001896:	f7ff fb8b 	bl	8000fb0 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	b29b      	uxth	r3, r3
 800189e:	88fa      	ldrh	r2, [r7, #6]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	b298      	uxth	r0, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	88ba      	ldrh	r2, [r7, #4]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	b299      	uxth	r1, r3
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	3301      	adds	r3, #1
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	3301      	adds	r3, #1
 80018c4:	b29c      	uxth	r4, r3
 80018c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	4623      	mov	r3, r4
 80018cc:	f7ff fb70 	bl	8000fb0 <LCD_Rect_Fill>
 80018d0:	e0a7      	b.n	8001a22 <LCD_Circle+0x1f4>
		} else {
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	4413      	add	r3, r2
 80018da:	b298      	uxth	r0, r3
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	b29a      	uxth	r2, r3
 80018e0:	88bb      	ldrh	r3, [r7, #4]
 80018e2:	4413      	add	r3, r2
 80018e4:	b299      	uxth	r1, r3
 80018e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018f0:	b29c      	uxth	r4, r3
 80018f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	4623      	mov	r3, r4
 80018f8:	f7ff fb5a 	bl	8000fb0 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	88fb      	ldrh	r3, [r7, #6]
 8001902:	4413      	add	r3, r2
 8001904:	b298      	uxth	r0, r3
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	b29a      	uxth	r2, r3
 800190a:	88bb      	ldrh	r3, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	b299      	uxth	r1, r3
 8001910:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001914:	b29a      	uxth	r2, r3
 8001916:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800191a:	b29c      	uxth	r4, r3
 800191c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	4623      	mov	r3, r4
 8001922:	f7ff fb45 	bl	8000fb0 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	b29b      	uxth	r3, r3
 800192a:	88fa      	ldrh	r2, [r7, #6]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	b298      	uxth	r0, r3
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	b29a      	uxth	r2, r3
 8001934:	88bb      	ldrh	r3, [r7, #4]
 8001936:	4413      	add	r3, r2
 8001938:	b299      	uxth	r1, r3
 800193a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800193e:	b29a      	uxth	r2, r3
 8001940:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001944:	b29c      	uxth	r4, r3
 8001946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	4623      	mov	r3, r4
 800194c:	f7ff fb30 	bl	8000fb0 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	b29b      	uxth	r3, r3
 8001954:	88fa      	ldrh	r2, [r7, #6]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	b298      	uxth	r0, r3
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	b29a      	uxth	r2, r3
 800195e:	88bb      	ldrh	r3, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	b299      	uxth	r1, r3
 8001964:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001968:	b29a      	uxth	r2, r3
 800196a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800196e:	b29c      	uxth	r4, r3
 8001970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	4623      	mov	r3, r4
 8001976:	f7ff fb1b 	bl	8000fb0 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	b29a      	uxth	r2, r3
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	4413      	add	r3, r2
 8001982:	b298      	uxth	r0, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	b29b      	uxth	r3, r3
 8001988:	88ba      	ldrh	r2, [r7, #4]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	b299      	uxth	r1, r3
 800198e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001992:	b29a      	uxth	r2, r3
 8001994:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001998:	b29c      	uxth	r4, r3
 800199a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	4623      	mov	r3, r4
 80019a0:	f7ff fb06 	bl	8000fb0 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	88fb      	ldrh	r3, [r7, #6]
 80019aa:	4413      	add	r3, r2
 80019ac:	b298      	uxth	r0, r3
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	88ba      	ldrh	r2, [r7, #4]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	b299      	uxth	r1, r3
 80019b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019bc:	b29a      	uxth	r2, r3
 80019be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019c2:	b29c      	uxth	r4, r3
 80019c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	4623      	mov	r3, r4
 80019ca:	f7ff faf1 	bl	8000fb0 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	88fa      	ldrh	r2, [r7, #6]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	b298      	uxth	r0, r3
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	88ba      	ldrh	r2, [r7, #4]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	b299      	uxth	r1, r3
 80019e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019ec:	b29c      	uxth	r4, r3
 80019ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	4623      	mov	r3, r4
 80019f4:	f7ff fadc 	bl	8000fb0 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	88fa      	ldrh	r2, [r7, #6]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	b298      	uxth	r0, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	88ba      	ldrh	r2, [r7, #4]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	b299      	uxth	r1, r3
 8001a0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a16:	b29c      	uxth	r4, r3
 8001a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	4623      	mov	r3, r4
 8001a1e:	f7ff fac7 	bl	8000fb0 <LCD_Rect_Fill>
		}
		if (P < 0) {
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	da09      	bge.n	8001a3c <LCD_Circle+0x20e>
			P = (P + 3) + (2 * a_);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	1cda      	adds	r2, r3, #3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4413      	add	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]
			a_++;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	3301      	adds	r3, #1
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	e00d      	b.n	8001a58 <LCD_Circle+0x22a>
		} else {
			P = (P + 5) + (2 * (a_ - b_));
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1d5a      	adds	r2, r3, #5
 8001a40:	6979      	ldr	r1, [r7, #20]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1acb      	subs	r3, r1, r3
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4413      	add	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]
			a_++;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
			b_--;
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	613b      	str	r3, [r7, #16]
	while (a_ <= b_) {
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	f77f aefe 	ble.w	800185e <LCD_Circle+0x30>
		}
	}
}
 8001a62:	bf00      	nop
 8001a64:	bf00      	nop
 8001a66:	371c      	adds	r7, #28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd90      	pop	{r4, r7, pc}

08001a6c <LCD_Circle_Helper>:

void LCD_Circle_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint8_t size, uint32_t color24) {
 8001a6c:	b590      	push	{r4, r7, lr}
 8001a6e:	b089      	sub	sp, #36	; 0x24
 8001a70:	af02      	add	r7, sp, #8
 8001a72:	4604      	mov	r4, r0
 8001a74:	4608      	mov	r0, r1
 8001a76:	4611      	mov	r1, r2
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4623      	mov	r3, r4
 8001a7c:	80fb      	strh	r3, [r7, #6]
 8001a7e:	4603      	mov	r3, r0
 8001a80:	80bb      	strh	r3, [r7, #4]
 8001a82:	460b      	mov	r3, r1
 8001a84:	807b      	strh	r3, [r7, #2]
 8001a86:	4613      	mov	r3, r2
 8001a88:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8001a8a:	887b      	ldrh	r3, [r7, #2]
 8001a8c:	f1c3 0301 	rsb	r3, r3, #1
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001a94:	2301      	movs	r3, #1
 8001a96:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001a98:	887b      	ldrh	r3, [r7, #2]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	03d2      	lsls	r2, r2, #15
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001aaa:	887b      	ldrh	r3, [r7, #2]
 8001aac:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8001aae:	e0cd      	b.n	8001c4c <LCD_Circle_Helper+0x1e0>
		if (f >= 0) {
 8001ab0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	db0e      	blt.n	8001ad6 <LCD_Circle_Helper+0x6a>
			y--;
 8001ab8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8001ac4:	8a7b      	ldrh	r3, [r7, #18]
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8001acc:	8afa      	ldrh	r2, [r7, #22]
 8001ace:	8a7b      	ldrh	r3, [r7, #18]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8001ad6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	3301      	adds	r3, #1
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8001ae2:	8abb      	ldrh	r3, [r7, #20]
 8001ae4:	3302      	adds	r3, #2
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8001aea:	8afa      	ldrh	r2, [r7, #22]
 8001aec:	8abb      	ldrh	r3, [r7, #20]
 8001aee:	4413      	add	r3, r2
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4) {
 8001af4:	787b      	ldrb	r3, [r7, #1]
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d025      	beq.n	8001b4a <LCD_Circle_Helper+0xde>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 8001afe:	88fa      	ldrh	r2, [r7, #6]
 8001b00:	8a3b      	ldrh	r3, [r7, #16]
 8001b02:	4413      	add	r3, r2
 8001b04:	b298      	uxth	r0, r3
 8001b06:	88ba      	ldrh	r2, [r7, #4]
 8001b08:	89fb      	ldrh	r3, [r7, #14]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	b299      	uxth	r1, r3
 8001b0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b18:	b29c      	uxth	r4, r3
 8001b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	4623      	mov	r3, r4
 8001b20:	f7ff fa46 	bl	8000fb0 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 + x, size, size, color24);
 8001b24:	88fa      	ldrh	r2, [r7, #6]
 8001b26:	89fb      	ldrh	r3, [r7, #14]
 8001b28:	4413      	add	r3, r2
 8001b2a:	b298      	uxth	r0, r3
 8001b2c:	88ba      	ldrh	r2, [r7, #4]
 8001b2e:	8a3b      	ldrh	r3, [r7, #16]
 8001b30:	4413      	add	r3, r2
 8001b32:	b299      	uxth	r1, r3
 8001b34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b3e:	b29c      	uxth	r4, r3
 8001b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	4623      	mov	r3, r4
 8001b46:	f7ff fa33 	bl	8000fb0 <LCD_Rect_Fill>
		}
		if (cornername & 0x2) {
 8001b4a:	787b      	ldrb	r3, [r7, #1]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d025      	beq.n	8001ba0 <LCD_Circle_Helper+0x134>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 8001b54:	88fa      	ldrh	r2, [r7, #6]
 8001b56:	8a3b      	ldrh	r3, [r7, #16]
 8001b58:	4413      	add	r3, r2
 8001b5a:	b298      	uxth	r0, r3
 8001b5c:	88ba      	ldrh	r2, [r7, #4]
 8001b5e:	89fb      	ldrh	r3, [r7, #14]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	b299      	uxth	r1, r3
 8001b64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b6e:	b29c      	uxth	r4, r3
 8001b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	4623      	mov	r3, r4
 8001b76:	f7ff fa1b 	bl	8000fb0 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 - x, size, size, color24);
 8001b7a:	88fa      	ldrh	r2, [r7, #6]
 8001b7c:	89fb      	ldrh	r3, [r7, #14]
 8001b7e:	4413      	add	r3, r2
 8001b80:	b298      	uxth	r0, r3
 8001b82:	88ba      	ldrh	r2, [r7, #4]
 8001b84:	8a3b      	ldrh	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	b299      	uxth	r1, r3
 8001b8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b94:	b29c      	uxth	r4, r3
 8001b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	4623      	mov	r3, r4
 8001b9c:	f7ff fa08 	bl	8000fb0 <LCD_Rect_Fill>
		}
		if (cornername & 0x8) {
 8001ba0:	787b      	ldrb	r3, [r7, #1]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d025      	beq.n	8001bf6 <LCD_Circle_Helper+0x18a>
			LCD_Rect_Fill(x0 - y, y0 + x, size, size, color24);
 8001baa:	88fa      	ldrh	r2, [r7, #6]
 8001bac:	89fb      	ldrh	r3, [r7, #14]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	b298      	uxth	r0, r3
 8001bb2:	88ba      	ldrh	r2, [r7, #4]
 8001bb4:	8a3b      	ldrh	r3, [r7, #16]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	b299      	uxth	r1, r3
 8001bba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001bc4:	b29c      	uxth	r4, r3
 8001bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	4623      	mov	r3, r4
 8001bcc:	f7ff f9f0 	bl	8000fb0 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8001bd0:	88fa      	ldrh	r2, [r7, #6]
 8001bd2:	8a3b      	ldrh	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	b298      	uxth	r0, r3
 8001bd8:	88ba      	ldrh	r2, [r7, #4]
 8001bda:	89fb      	ldrh	r3, [r7, #14]
 8001bdc:	4413      	add	r3, r2
 8001bde:	b299      	uxth	r1, r3
 8001be0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001bea:	b29c      	uxth	r4, r3
 8001bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	4623      	mov	r3, r4
 8001bf2:	f7ff f9dd 	bl	8000fb0 <LCD_Rect_Fill>
		}
		if (cornername & 0x1) {
 8001bf6:	787b      	ldrb	r3, [r7, #1]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d025      	beq.n	8001c4c <LCD_Circle_Helper+0x1e0>
			LCD_Rect_Fill(x0 - y, y0 - x, size, size, color24);
 8001c00:	88fa      	ldrh	r2, [r7, #6]
 8001c02:	89fb      	ldrh	r3, [r7, #14]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	b298      	uxth	r0, r3
 8001c08:	88ba      	ldrh	r2, [r7, #4]
 8001c0a:	8a3b      	ldrh	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	b299      	uxth	r1, r3
 8001c10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c1a:	b29c      	uxth	r4, r3
 8001c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	4623      	mov	r3, r4
 8001c22:	f7ff f9c5 	bl	8000fb0 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 8001c26:	88fa      	ldrh	r2, [r7, #6]
 8001c28:	8a3b      	ldrh	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	b298      	uxth	r0, r3
 8001c2e:	88ba      	ldrh	r2, [r7, #4]
 8001c30:	89fb      	ldrh	r3, [r7, #14]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	b299      	uxth	r1, r3
 8001c36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c40:	b29c      	uxth	r4, r3
 8001c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	4623      	mov	r3, r4
 8001c48:	f7ff f9b2 	bl	8000fb0 <LCD_Rect_Fill>
	while (x < y) {
 8001c4c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001c50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	f6ff af2b 	blt.w	8001ab0 <LCD_Circle_Helper+0x44>
		}
	}
}
 8001c5a:	bf00      	nop
 8001c5c:	bf00      	nop
 8001c5e:	371c      	adds	r7, #28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd90      	pop	{r4, r7, pc}

08001c64 <LCD_Rect_Round>:

void LCD_Rect_Round(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint8_t size, uint32_t color24) {
 8001c64:	b590      	push	{r4, r7, lr}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af02      	add	r7, sp, #8
 8001c6a:	4604      	mov	r4, r0
 8001c6c:	4608      	mov	r0, r1
 8001c6e:	4611      	mov	r1, r2
 8001c70:	461a      	mov	r2, r3
 8001c72:	4623      	mov	r3, r4
 8001c74:	80fb      	strh	r3, [r7, #6]
 8001c76:	4603      	mov	r3, r0
 8001c78:	80bb      	strh	r3, [r7, #4]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	807b      	strh	r3, [r7, #2]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	803b      	strh	r3, [r7, #0]
	LCD_Line(x + (r + 2), y, x + length + size - (r + 2), y, size, color24);
 8001c82:	8b3a      	ldrh	r2, [r7, #24]
 8001c84:	88fb      	ldrh	r3, [r7, #6]
 8001c86:	4413      	add	r3, r2
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	b298      	uxth	r0, r3
 8001c8e:	88fa      	ldrh	r2, [r7, #6]
 8001c90:	887b      	ldrh	r3, [r7, #2]
 8001c92:	4413      	add	r3, r2
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	7f3b      	ldrb	r3, [r7, #28]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	8b3b      	ldrh	r3, [r7, #24]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	3b02      	subs	r3, #2
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	88bc      	ldrh	r4, [r7, #4]
 8001caa:	88b9      	ldrh	r1, [r7, #4]
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	9301      	str	r3, [sp, #4]
 8001cb0:	7f3b      	ldrb	r3, [r7, #28]
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	4623      	mov	r3, r4
 8001cb6:	f7ff f9b4 	bl	8001022 <LCD_Line>
	LCD_Line(x + (r + 2), y + width - 1, x + length + size - (r + 2),y + width - 1, size, color24);
 8001cba:	8b3a      	ldrh	r2, [r7, #24]
 8001cbc:	88fb      	ldrh	r3, [r7, #6]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	b298      	uxth	r0, r3
 8001cc6:	88ba      	ldrh	r2, [r7, #4]
 8001cc8:	883b      	ldrh	r3, [r7, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	b299      	uxth	r1, r3
 8001cd2:	88fa      	ldrh	r2, [r7, #6]
 8001cd4:	887b      	ldrh	r3, [r7, #2]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	7f3b      	ldrb	r3, [r7, #28]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	4413      	add	r3, r2
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	8b3b      	ldrh	r3, [r7, #24]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	3b02      	subs	r3, #2
 8001cea:	b29c      	uxth	r4, r3
 8001cec:	88ba      	ldrh	r2, [r7, #4]
 8001cee:	883b      	ldrh	r3, [r7, #0]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
 8001cfa:	9301      	str	r3, [sp, #4]
 8001cfc:	7f3b      	ldrb	r3, [r7, #28]
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	4613      	mov	r3, r2
 8001d02:	4622      	mov	r2, r4
 8001d04:	f7ff f98d 	bl	8001022 <LCD_Line>
	LCD_Line(x, y + (r + 2), x, y + width - size - (r + 2), size, color24);
 8001d08:	8b3a      	ldrh	r2, [r7, #24]
 8001d0a:	88bb      	ldrh	r3, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	3302      	adds	r3, #2
 8001d12:	b299      	uxth	r1, r3
 8001d14:	88ba      	ldrh	r2, [r7, #4]
 8001d16:	883b      	ldrh	r3, [r7, #0]
 8001d18:	4413      	add	r3, r2
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	7f3b      	ldrb	r3, [r7, #28]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	8b3b      	ldrh	r3, [r7, #24]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	3b02      	subs	r3, #2
 8001d2c:	b29c      	uxth	r4, r3
 8001d2e:	88fa      	ldrh	r2, [r7, #6]
 8001d30:	88f8      	ldrh	r0, [r7, #6]
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	9301      	str	r3, [sp, #4]
 8001d36:	7f3b      	ldrb	r3, [r7, #28]
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	4623      	mov	r3, r4
 8001d3c:	f7ff f971 	bl	8001022 <LCD_Line>
	LCD_Line(x + length - 1, y + (r + 2), x + length - 1, y + width - size - (r + 2), size, color24);
 8001d40:	88fa      	ldrh	r2, [r7, #6]
 8001d42:	887b      	ldrh	r3, [r7, #2]
 8001d44:	4413      	add	r3, r2
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	b298      	uxth	r0, r3
 8001d4c:	8b3a      	ldrh	r2, [r7, #24]
 8001d4e:	88bb      	ldrh	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	3302      	adds	r3, #2
 8001d56:	b299      	uxth	r1, r3
 8001d58:	88fa      	ldrh	r2, [r7, #6]
 8001d5a:	887b      	ldrh	r3, [r7, #2]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	3b01      	subs	r3, #1
 8001d62:	b29c      	uxth	r4, r3
 8001d64:	88ba      	ldrh	r2, [r7, #4]
 8001d66:	883b      	ldrh	r3, [r7, #0]
 8001d68:	4413      	add	r3, r2
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	7f3b      	ldrb	r3, [r7, #28]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	8b3b      	ldrh	r3, [r7, #24]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	3b02      	subs	r3, #2
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	7f3b      	ldrb	r3, [r7, #28]
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	4613      	mov	r3, r2
 8001d88:	4622      	mov	r2, r4
 8001d8a:	f7ff f94a 	bl	8001022 <LCD_Line>

	LCD_Circle_Helper(x + (r + 2), y + (r + 2), (r + 2), 1, size, color24);
 8001d8e:	8b3a      	ldrh	r2, [r7, #24]
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	4413      	add	r3, r2
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	3302      	adds	r3, #2
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	b218      	sxth	r0, r3
 8001d9c:	8b3a      	ldrh	r2, [r7, #24]
 8001d9e:	88bb      	ldrh	r3, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	3302      	adds	r3, #2
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	b219      	sxth	r1, r3
 8001daa:	8b3b      	ldrh	r3, [r7, #24]
 8001dac:	3302      	adds	r3, #2
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	b21a      	sxth	r2, r3
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	7f3b      	ldrb	r3, [r7, #28]
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	2301      	movs	r3, #1
 8001dbc:	f7ff fe56 	bl	8001a6c <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + (r + 2), (r + 2), 2, size, color24);
 8001dc0:	88fa      	ldrh	r2, [r7, #6]
 8001dc2:	887b      	ldrh	r3, [r7, #2]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	8b3b      	ldrh	r3, [r7, #24]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b03      	subs	r3, #3
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	b218      	sxth	r0, r3
 8001dd4:	8b3a      	ldrh	r2, [r7, #24]
 8001dd6:	88bb      	ldrh	r3, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	3302      	adds	r3, #2
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	b219      	sxth	r1, r3
 8001de2:	8b3b      	ldrh	r3, [r7, #24]
 8001de4:	3302      	adds	r3, #2
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	b21a      	sxth	r2, r3
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	9301      	str	r3, [sp, #4]
 8001dee:	7f3b      	ldrb	r3, [r7, #28]
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	2302      	movs	r3, #2
 8001df4:	f7ff fe3a 	bl	8001a6c <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + width - (r + 2) - 1, (r + 2), 4, size, color24);
 8001df8:	88fa      	ldrh	r2, [r7, #6]
 8001dfa:	887b      	ldrh	r3, [r7, #2]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	8b3b      	ldrh	r3, [r7, #24]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	3b03      	subs	r3, #3
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	b218      	sxth	r0, r3
 8001e0c:	88ba      	ldrh	r2, [r7, #4]
 8001e0e:	883b      	ldrh	r3, [r7, #0]
 8001e10:	4413      	add	r3, r2
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	8b3b      	ldrh	r3, [r7, #24]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3b03      	subs	r3, #3
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	b219      	sxth	r1, r3
 8001e20:	8b3b      	ldrh	r3, [r7, #24]
 8001e22:	3302      	adds	r3, #2
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	b21a      	sxth	r2, r3
 8001e28:	6a3b      	ldr	r3, [r7, #32]
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	7f3b      	ldrb	r3, [r7, #28]
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	2304      	movs	r3, #4
 8001e32:	f7ff fe1b 	bl	8001a6c <LCD_Circle_Helper>
	LCD_Circle_Helper(x + (r + 2), y + width - (r + 2) - 1, (r + 2), 8, size, color24);
 8001e36:	8b3a      	ldrh	r2, [r7, #24]
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	3302      	adds	r3, #2
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	b218      	sxth	r0, r3
 8001e44:	88ba      	ldrh	r2, [r7, #4]
 8001e46:	883b      	ldrh	r3, [r7, #0]
 8001e48:	4413      	add	r3, r2
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	8b3b      	ldrh	r3, [r7, #24]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	3b03      	subs	r3, #3
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	b219      	sxth	r1, r3
 8001e58:	8b3b      	ldrh	r3, [r7, #24]
 8001e5a:	3302      	adds	r3, #2
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	b21a      	sxth	r2, r3
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	7f3b      	ldrb	r3, [r7, #28]
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	2308      	movs	r3, #8
 8001e6a:	f7ff fdff 	bl	8001a6c <LCD_Circle_Helper>
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd90      	pop	{r4, r7, pc}

08001e76 <LCD_Circle_Fill_Helper>:

void LCD_Circle_Fill_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint32_t color24) {
 8001e76:	b590      	push	{r4, r7, lr}
 8001e78:	b089      	sub	sp, #36	; 0x24
 8001e7a:	af02      	add	r7, sp, #8
 8001e7c:	4604      	mov	r4, r0
 8001e7e:	4608      	mov	r0, r1
 8001e80:	4611      	mov	r1, r2
 8001e82:	461a      	mov	r2, r3
 8001e84:	4623      	mov	r3, r4
 8001e86:	80fb      	strh	r3, [r7, #6]
 8001e88:	4603      	mov	r3, r0
 8001e8a:	80bb      	strh	r3, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	807b      	strh	r3, [r7, #2]
 8001e90:	4613      	mov	r3, r2
 8001e92:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8001e94:	887b      	ldrh	r3, [r7, #2]
 8001e96:	f1c3 0301 	rsb	r3, r3, #1
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001ea2:	887b      	ldrh	r3, [r7, #2]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	03d2      	lsls	r2, r2, #15
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001eb4:	887b      	ldrh	r3, [r7, #2]
 8001eb6:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8001eb8:	e0ab      	b.n	8002012 <LCD_Circle_Fill_Helper+0x19c>
		if (f >= 0) {
 8001eba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	db0e      	blt.n	8001ee0 <LCD_Circle_Fill_Helper+0x6a>
			y--;
 8001ec2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8001ece:	8a7b      	ldrh	r3, [r7, #18]
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8001ed6:	8afa      	ldrh	r2, [r7, #22]
 8001ed8:	8a7b      	ldrh	r3, [r7, #18]
 8001eda:	4413      	add	r3, r2
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8001ee0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8001eec:	8abb      	ldrh	r3, [r7, #20]
 8001eee:	3302      	adds	r3, #2
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8001ef4:	8afa      	ldrh	r2, [r7, #22]
 8001ef6:	8abb      	ldrh	r3, [r7, #20]
 8001ef8:	4413      	add	r3, r2
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1) {
 8001efe:	787b      	ldrb	r3, [r7, #1]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d03f      	beq.n	8001f88 <LCD_Circle_Fill_Helper+0x112>
			LCD_Line(x0 + x, y0 - y, x0 + x, y0 - y + 2 * y + delta, 1, color24);
 8001f08:	88fa      	ldrh	r2, [r7, #6]
 8001f0a:	8a3b      	ldrh	r3, [r7, #16]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	b298      	uxth	r0, r3
 8001f10:	88ba      	ldrh	r2, [r7, #4]
 8001f12:	89fb      	ldrh	r3, [r7, #14]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	b299      	uxth	r1, r3
 8001f18:	88fa      	ldrh	r2, [r7, #6]
 8001f1a:	8a3b      	ldrh	r3, [r7, #16]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	b29c      	uxth	r4, r3
 8001f20:	88ba      	ldrh	r2, [r7, #4]
 8001f22:	89fb      	ldrh	r3, [r7, #14]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	89fb      	ldrh	r3, [r7, #14]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	4413      	add	r3, r2
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f34:	4413      	add	r3, r2
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3a:	9301      	str	r3, [sp, #4]
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	4613      	mov	r3, r2
 8001f42:	4622      	mov	r2, r4
 8001f44:	f7ff f86d 	bl	8001022 <LCD_Line>
			LCD_Line(x0 + y, y0 - x, x0 + y, y0 - x + 2 * x + delta, 1, color24);
 8001f48:	88fa      	ldrh	r2, [r7, #6]
 8001f4a:	89fb      	ldrh	r3, [r7, #14]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	b298      	uxth	r0, r3
 8001f50:	88ba      	ldrh	r2, [r7, #4]
 8001f52:	8a3b      	ldrh	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	b299      	uxth	r1, r3
 8001f58:	88fa      	ldrh	r2, [r7, #6]
 8001f5a:	89fb      	ldrh	r3, [r7, #14]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	b29c      	uxth	r4, r3
 8001f60:	88ba      	ldrh	r2, [r7, #4]
 8001f62:	8a3b      	ldrh	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	8a3b      	ldrh	r3, [r7, #16]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	4413      	add	r3, r2
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f74:	4413      	add	r3, r2
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	4613      	mov	r3, r2
 8001f82:	4622      	mov	r2, r4
 8001f84:	f7ff f84d 	bl	8001022 <LCD_Line>
		}
		if (cornername & 0x2) {
 8001f88:	787b      	ldrb	r3, [r7, #1]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d03f      	beq.n	8002012 <LCD_Circle_Fill_Helper+0x19c>
			LCD_Line(x0 - x, y0 - y, x0 - x, y0 - y + 2 * y + delta, 1, color24);
 8001f92:	88fa      	ldrh	r2, [r7, #6]
 8001f94:	8a3b      	ldrh	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	b298      	uxth	r0, r3
 8001f9a:	88ba      	ldrh	r2, [r7, #4]
 8001f9c:	89fb      	ldrh	r3, [r7, #14]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	b299      	uxth	r1, r3
 8001fa2:	88fa      	ldrh	r2, [r7, #6]
 8001fa4:	8a3b      	ldrh	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	b29c      	uxth	r4, r3
 8001faa:	88ba      	ldrh	r2, [r7, #4]
 8001fac:	89fb      	ldrh	r3, [r7, #14]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	89fb      	ldrh	r3, [r7, #14]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	4413      	add	r3, r2
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fbe:	4413      	add	r3, r2
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc4:	9301      	str	r3, [sp, #4]
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	4622      	mov	r2, r4
 8001fce:	f7ff f828 	bl	8001022 <LCD_Line>
			LCD_Line(x0 - y, y0 - x, x0 - y, y0 - x + 2 * x + delta, 1, color24);
 8001fd2:	88fa      	ldrh	r2, [r7, #6]
 8001fd4:	89fb      	ldrh	r3, [r7, #14]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	b298      	uxth	r0, r3
 8001fda:	88ba      	ldrh	r2, [r7, #4]
 8001fdc:	8a3b      	ldrh	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	b299      	uxth	r1, r3
 8001fe2:	88fa      	ldrh	r2, [r7, #6]
 8001fe4:	89fb      	ldrh	r3, [r7, #14]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	b29c      	uxth	r4, r3
 8001fea:	88ba      	ldrh	r2, [r7, #4]
 8001fec:	8a3b      	ldrh	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	8a3b      	ldrh	r3, [r7, #16]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ffe:	4413      	add	r3, r2
 8002000:	b29a      	uxth	r2, r3
 8002002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002004:	9301      	str	r3, [sp, #4]
 8002006:	2301      	movs	r3, #1
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	4613      	mov	r3, r2
 800200c:	4622      	mov	r2, r4
 800200e:	f7ff f808 	bl	8001022 <LCD_Line>
	while (x < y) {
 8002012:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002016:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800201a:	429a      	cmp	r2, r3
 800201c:	f6ff af4d 	blt.w	8001eba <LCD_Circle_Fill_Helper+0x44>
		}
	}
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	371c      	adds	r7, #28
 8002026:	46bd      	mov	sp, r7
 8002028:	bd90      	pop	{r4, r7, pc}

0800202a <LCD_Rect_Round_Fill>:

void LCD_Rect_Round_Fill(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint32_t color24) {
 800202a:	b590      	push	{r4, r7, lr}
 800202c:	b085      	sub	sp, #20
 800202e:	af02      	add	r7, sp, #8
 8002030:	4604      	mov	r4, r0
 8002032:	4608      	mov	r0, r1
 8002034:	4611      	mov	r1, r2
 8002036:	461a      	mov	r2, r3
 8002038:	4623      	mov	r3, r4
 800203a:	80fb      	strh	r3, [r7, #6]
 800203c:	4603      	mov	r3, r0
 800203e:	80bb      	strh	r3, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
 8002044:	4613      	mov	r3, r2
 8002046:	803b      	strh	r3, [r7, #0]
	LCD_Rect_Fill(x + r, y, length - 2 * r, width, color24);
 8002048:	88fa      	ldrh	r2, [r7, #6]
 800204a:	8b3b      	ldrh	r3, [r7, #24]
 800204c:	4413      	add	r3, r2
 800204e:	b298      	uxth	r0, r3
 8002050:	8b3b      	ldrh	r3, [r7, #24]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	b29b      	uxth	r3, r3
 8002056:	887a      	ldrh	r2, [r7, #2]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	b29a      	uxth	r2, r3
 800205c:	883c      	ldrh	r4, [r7, #0]
 800205e:	88b9      	ldrh	r1, [r7, #4]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	4623      	mov	r3, r4
 8002066:	f7fe ffa3 	bl	8000fb0 <LCD_Rect_Fill>
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
 800206a:	88fa      	ldrh	r2, [r7, #6]
 800206c:	887b      	ldrh	r3, [r7, #2]
 800206e:	4413      	add	r3, r2
 8002070:	b29a      	uxth	r2, r3
 8002072:	8b3b      	ldrh	r3, [r7, #24]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	b29b      	uxth	r3, r3
 8002078:	3b01      	subs	r3, #1
 800207a:	b29b      	uxth	r3, r3
 800207c:	b218      	sxth	r0, r3
 800207e:	88ba      	ldrh	r2, [r7, #4]
 8002080:	8b3b      	ldrh	r3, [r7, #24]
 8002082:	4413      	add	r3, r2
 8002084:	b29b      	uxth	r3, r3
 8002086:	b219      	sxth	r1, r3
 8002088:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 800208c:	8b3b      	ldrh	r3, [r7, #24]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	b29b      	uxth	r3, r3
 8002092:	883a      	ldrh	r2, [r7, #0]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	b29b      	uxth	r3, r3
 8002098:	3b01      	subs	r3, #1
 800209a:	b29b      	uxth	r3, r3
 800209c:	b21b      	sxth	r3, r3
 800209e:	69fa      	ldr	r2, [r7, #28]
 80020a0:	9201      	str	r2, [sp, #4]
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	2301      	movs	r3, #1
 80020a6:	4622      	mov	r2, r4
 80020a8:	f7ff fee5 	bl	8001e76 <LCD_Circle_Fill_Helper>
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
 80020ac:	88fa      	ldrh	r2, [r7, #6]
 80020ae:	8b3b      	ldrh	r3, [r7, #24]
 80020b0:	4413      	add	r3, r2
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	b218      	sxth	r0, r3
 80020b6:	88ba      	ldrh	r2, [r7, #4]
 80020b8:	8b3b      	ldrh	r3, [r7, #24]
 80020ba:	4413      	add	r3, r2
 80020bc:	b29b      	uxth	r3, r3
 80020be:	b219      	sxth	r1, r3
 80020c0:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 80020c4:	8b3b      	ldrh	r3, [r7, #24]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	883a      	ldrh	r2, [r7, #0]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	b21b      	sxth	r3, r3
 80020d6:	69fa      	ldr	r2, [r7, #28]
 80020d8:	9201      	str	r2, [sp, #4]
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	2302      	movs	r3, #2
 80020de:	4622      	mov	r2, r4
 80020e0:	f7ff fec9 	bl	8001e76 <LCD_Circle_Fill_Helper>
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd90      	pop	{r4, r7, pc}

080020ec <LCD_Char>:

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24) {
 80020ec:	b590      	push	{r4, r7, lr}
 80020ee:	b08b      	sub	sp, #44	; 0x2c
 80020f0:	af02      	add	r7, sp, #8
 80020f2:	60ba      	str	r2, [r7, #8]
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	4603      	mov	r3, r0
 80020f8:	81fb      	strh	r3, [r7, #14]
 80020fa:	460b      	mov	r3, r1
 80020fc:	81bb      	strh	r3, [r7, #12]
	uint8_t *bitmap = font->bitmap;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph->bitmapOffset;
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	777b      	strb	r3, [r7, #29]
 800210e:	2300      	movs	r3, #0
 8002110:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	837b      	strh	r3, [r7, #26]
	uint8_t cur_x, cur_y;
	for (cur_y = 0; cur_y < glyph->height; cur_y++) {
 8002116:	2300      	movs	r3, #0
 8002118:	763b      	strb	r3, [r7, #24]
 800211a:	e093      	b.n	8002244 <LCD_Char+0x158>
		for (cur_x = 0; cur_x < glyph->width; cur_x++) {
 800211c:	2300      	movs	r3, #0
 800211e:	767b      	strb	r3, [r7, #25]
 8002120:	e052      	b.n	80021c8 <LCD_Char+0xdc>
			if (bit == 0) {
 8002122:	7f3b      	ldrb	r3, [r7, #28]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d109      	bne.n	800213c <LCD_Char+0x50>
				bits = (*(const unsigned char*) (&bitmap[bo++]));
 8002128:	8bfb      	ldrh	r3, [r7, #30]
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	83fa      	strh	r2, [r7, #30]
 800212e:	461a      	mov	r2, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	4413      	add	r3, r2
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	777b      	strb	r3, [r7, #29]
				bit = 0x80;
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	773b      	strb	r3, [r7, #28]
			}
			if (bits & bit)
 800213c:	7f7a      	ldrb	r2, [r7, #29]
 800213e:	7f3b      	ldrb	r3, [r7, #28]
 8002140:	4013      	ands	r3, r2
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <LCD_Char+0x64>
				set_pixels++;
 8002148:	8b7b      	ldrh	r3, [r7, #26]
 800214a:	3301      	adds	r3, #1
 800214c:	837b      	strh	r3, [r7, #26]
 800214e:	e035      	b.n	80021bc <LCD_Char+0xd0>
			else if (set_pixels > 0) {
 8002150:	8b7b      	ldrh	r3, [r7, #26]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d032      	beq.n	80021bc <LCD_Char+0xd0>
				LCD_Rect_Fill(x + (glyph->xOffset + cur_x - set_pixels) * size,
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800215c:	461a      	mov	r2, r3
 800215e:	7e7b      	ldrb	r3, [r7, #25]
 8002160:	441a      	add	r2, r3
 8002162:	8b7b      	ldrh	r3, [r7, #26]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	b29a      	uxth	r2, r3
 8002168:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800216c:	b29b      	uxth	r3, r3
 800216e:	fb12 f303 	smulbb	r3, r2, r3
 8002172:	b29a      	uxth	r2, r3
 8002174:	89fb      	ldrh	r3, [r7, #14]
 8002176:	4413      	add	r3, r2
 8002178:	b298      	uxth	r0, r3
						y + (glyph->yOffset + cur_y) * size, size * set_pixels,
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8002180:	461a      	mov	r2, r3
 8002182:	7e3b      	ldrb	r3, [r7, #24]
 8002184:	4413      	add	r3, r2
				LCD_Rect_Fill(x + (glyph->xOffset + cur_x - set_pixels) * size,
 8002186:	b29a      	uxth	r2, r3
 8002188:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800218c:	b29b      	uxth	r3, r3
 800218e:	fb12 f303 	smulbb	r3, r2, r3
 8002192:	b29a      	uxth	r2, r3
 8002194:	89bb      	ldrh	r3, [r7, #12]
 8002196:	4413      	add	r3, r2
 8002198:	b299      	uxth	r1, r3
 800219a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800219e:	b29b      	uxth	r3, r3
 80021a0:	8b7a      	ldrh	r2, [r7, #26]
 80021a2:	fb12 f303 	smulbb	r3, r2, r3
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80021ac:	b29c      	uxth	r4, r3
 80021ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	4623      	mov	r3, r4
 80021b4:	f7fe fefc 	bl	8000fb0 <LCD_Rect_Fill>
						size, color24);
				set_pixels = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 80021bc:	7f3b      	ldrb	r3, [r7, #28]
 80021be:	085b      	lsrs	r3, r3, #1
 80021c0:	773b      	strb	r3, [r7, #28]
		for (cur_x = 0; cur_x < glyph->width; cur_x++) {
 80021c2:	7e7b      	ldrb	r3, [r7, #25]
 80021c4:	3301      	adds	r3, #1
 80021c6:	767b      	strb	r3, [r7, #25]
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	789b      	ldrb	r3, [r3, #2]
 80021cc:	7e7a      	ldrb	r2, [r7, #25]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d3a7      	bcc.n	8002122 <LCD_Char+0x36>
		}
		if (set_pixels > 0) {
 80021d2:	8b7b      	ldrh	r3, [r7, #26]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d032      	beq.n	800223e <LCD_Char+0x152>
			LCD_Rect_Fill(x + (glyph->xOffset + cur_x - set_pixels) * size,
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80021de:	461a      	mov	r2, r3
 80021e0:	7e7b      	ldrb	r3, [r7, #25]
 80021e2:	441a      	add	r2, r3
 80021e4:	8b7b      	ldrh	r3, [r7, #26]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	fb12 f303 	smulbb	r3, r2, r3
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	89fb      	ldrh	r3, [r7, #14]
 80021f8:	4413      	add	r3, r2
 80021fa:	b298      	uxth	r0, r3
					y + (glyph->yOffset + cur_y) * size, size * set_pixels,
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8002202:	461a      	mov	r2, r3
 8002204:	7e3b      	ldrb	r3, [r7, #24]
 8002206:	4413      	add	r3, r2
			LCD_Rect_Fill(x + (glyph->xOffset + cur_x - set_pixels) * size,
 8002208:	b29a      	uxth	r2, r3
 800220a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800220e:	b29b      	uxth	r3, r3
 8002210:	fb12 f303 	smulbb	r3, r2, r3
 8002214:	b29a      	uxth	r2, r3
 8002216:	89bb      	ldrh	r3, [r7, #12]
 8002218:	4413      	add	r3, r2
 800221a:	b299      	uxth	r1, r3
 800221c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002220:	b29b      	uxth	r3, r3
 8002222:	8b7a      	ldrh	r2, [r7, #26]
 8002224:	fb12 f303 	smulbb	r3, r2, r3
 8002228:	b29a      	uxth	r2, r3
 800222a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800222e:	b29c      	uxth	r4, r3
 8002230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	4623      	mov	r3, r4
 8002236:	f7fe febb 	bl	8000fb0 <LCD_Rect_Fill>
					size, color24);
			set_pixels = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	837b      	strh	r3, [r7, #26]
	for (cur_y = 0; cur_y < glyph->height; cur_y++) {
 800223e:	7e3b      	ldrb	r3, [r7, #24]
 8002240:	3301      	adds	r3, #1
 8002242:	763b      	strb	r3, [r7, #24]
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	78db      	ldrb	r3, [r3, #3]
 8002248:	7e3a      	ldrb	r2, [r7, #24]
 800224a:	429a      	cmp	r2, r3
 800224c:	f4ff af66 	bcc.w	800211c <LCD_Char+0x30>
		}
	}
}
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	3724      	adds	r7, #36	; 0x24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd90      	pop	{r4, r7, pc}

0800225a <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24) {
 800225a:	b590      	push	{r4, r7, lr}
 800225c:	b08f      	sub	sp, #60	; 0x3c
 800225e:	af02      	add	r7, sp, #8
 8002260:	60ba      	str	r2, [r7, #8]
 8002262:	607b      	str	r3, [r7, #4]
 8002264:	4603      	mov	r3, r0
 8002266:	81fb      	strh	r3, [r7, #14]
 8002268:	460b      	mov	r3, r1
 800226a:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 800226c:	89fb      	ldrh	r3, [r7, #14]
 800226e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 8002270:	89bb      	ldrh	r3, [r7, #12]
 8002272:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy(&font, p_font, sizeof(GFXfont));
 8002274:	f107 031c 	add.w	r3, r7, #28
 8002278:	220c      	movs	r2, #12
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4618      	mov	r0, r3
 800227e:	f005 fbfb 	bl	8007a78 <memcpy>
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++) {
 8002282:	2300      	movs	r3, #0
 8002284:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002286:	e056      	b.n	8002336 <LCD_Font+0xdc>
		char c = text[text_pos];
 8002288:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	4413      	add	r3, r2
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if (c == '\n') {
 8002294:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002298:	2b0a      	cmp	r3, #10
 800229a:	d10f      	bne.n	80022bc <LCD_Font+0x62>
			cursor_x = x;
 800229c:	89fb      	ldrh	r3, [r7, #14]
 800229e:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 80022a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	fb12 f303 	smulbb	r3, r2, r3
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80022b4:	4413      	add	r3, r2
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80022ba:	e039      	b.n	8002330 <LCD_Font+0xd6>
		} else if (c >= font.first && c <= font.last && c != '\r') {
 80022bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80022c0:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d333      	bcc.n	8002330 <LCD_Font+0xd6>
 80022c8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80022cc:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d82d      	bhi.n	8002330 <LCD_Font+0xd6>
 80022d4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80022d8:	2b0d      	cmp	r3, #13
 80022da:	d029      	beq.n	8002330 <LCD_Font+0xd6>
			GFXglyph glyph;
			memcpy(&glyph, &font.glyph[c - font.first], sizeof(GFXglyph));
 80022dc:	6a3a      	ldr	r2, [r7, #32]
 80022de:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80022e2:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80022e6:	1a5b      	subs	r3, r3, r1
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	18d1      	adds	r1, r2, r3
 80022ec:	f107 0314 	add.w	r3, r7, #20
 80022f0:	2208      	movs	r2, #8
 80022f2:	4618      	mov	r0, r3
 80022f4:	f005 fbc0 	bl	8007a78 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80022f8:	f107 041c 	add.w	r4, r7, #28
 80022fc:	f107 0214 	add.w	r2, r7, #20
 8002300:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8002304:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8002308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800230a:	9301      	str	r3, [sp, #4]
 800230c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	4623      	mov	r3, r4
 8002314:	f7ff feea 	bl	80020ec <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 8002318:	7e3b      	ldrb	r3, [r7, #24]
 800231a:	b29a      	uxth	r2, r3
 800231c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002320:	b29b      	uxth	r3, r3
 8002322:	fb12 f303 	smulbb	r3, r2, r3
 8002326:	b29a      	uxth	r2, r3
 8002328:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800232a:	4413      	add	r3, r2
 800232c:	b29b      	uxth	r3, r3
 800232e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++) {
 8002330:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002332:	3301      	adds	r3, #1
 8002334:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002336:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8002338:	68b8      	ldr	r0, [r7, #8]
 800233a:	f7fd ff51 	bl	80001e0 <strlen>
 800233e:	4603      	mov	r3, r0
 8002340:	429c      	cmp	r4, r3
 8002342:	d3a1      	bcc.n	8002288 <LCD_Font+0x2e>
		}
	}
}
 8002344:	bf00      	nop
 8002346:	bf00      	nop
 8002348:	3734      	adds	r7, #52	; 0x34
 800234a:	46bd      	mov	sp, r7
 800234c:	bd90      	pop	{r4, r7, pc}
	...

08002350 <LCD_Reset>:
		yStart = TOP_FIXED_AREA + (yStart - LCD_WIDTH + BOT_FIXED_AREA); // The value must wrap around as the screen memory is a circular buffer
	LCD_scrollAddress(yStart); // Now we can scroll the display
	return yTemp;
}

void LCD_Reset(void) {
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
	LCD_U_CS
 8002354:	2200      	movs	r2, #0
 8002356:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <LCD_Reset+0x40>)
 800235c:	f002 fd02 	bl	8004d64 <HAL_GPIO_WritePin>
	LCD_S_RST
 8002360:	2201      	movs	r2, #1
 8002362:	2101      	movs	r1, #1
 8002364:	480a      	ldr	r0, [pc, #40]	; (8002390 <LCD_Reset+0x40>)
 8002366:	f002 fcfd 	bl	8004d64 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 800236a:	2096      	movs	r0, #150	; 0x96
 800236c:	f001 feb8 	bl	80040e0 <HAL_Delay>
	LCD_U_RST
 8002370:	2200      	movs	r2, #0
 8002372:	2101      	movs	r1, #1
 8002374:	4806      	ldr	r0, [pc, #24]	; (8002390 <LCD_Reset+0x40>)
 8002376:	f002 fcf5 	bl	8004d64 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 800237a:	2096      	movs	r0, #150	; 0x96
 800237c:	f001 feb0 	bl	80040e0 <HAL_Delay>
	LCD_S_RST
 8002380:	2201      	movs	r2, #1
 8002382:	2101      	movs	r1, #1
 8002384:	4802      	ldr	r0, [pc, #8]	; (8002390 <LCD_Reset+0x40>)
 8002386:	f002 fced 	bl	8004d64 <HAL_GPIO_WritePin>
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40020400 	.word	0x40020400

08002394 <LCD_Orientation>:

void LCD_Orientation(uint8_t orientation) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
	LCD_Command(MEMORY_ACCESS_CONTROL);
 800239e:	2036      	movs	r0, #54	; 0x36
 80023a0:	f7fe fd6e 	bl	8000e80 <LCD_Command>
	switch (orientation) {
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d83a      	bhi.n	8002420 <LCD_Orientation+0x8c>
 80023aa:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <LCD_Orientation+0x1c>)
 80023ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b0:	080023c1 	.word	0x080023c1
 80023b4:	080023d9 	.word	0x080023d9
 80023b8:	080023f1 	.word	0x080023f1
 80023bc:	08002409 	.word	0x08002409
	case 0:
		LCD_Data_8(0x40 | 0x08);
 80023c0:	2048      	movs	r0, #72	; 0x48
 80023c2:	f7fe fd75 	bl	8000eb0 <LCD_Data_8>
		LCD_Width = LCD_HEIGHT;
 80023c6:	4b18      	ldr	r3, [pc, #96]	; (8002428 <LCD_Orientation+0x94>)
 80023c8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80023cc:	801a      	strh	r2, [r3, #0]
		LCD_Height = LCD_WIDTH;
 80023ce:	4b17      	ldr	r3, [pc, #92]	; (800242c <LCD_Orientation+0x98>)
 80023d0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80023d4:	801a      	strh	r2, [r3, #0]
		break;
 80023d6:	e023      	b.n	8002420 <LCD_Orientation+0x8c>
	case 1:
		LCD_Data_8(0x20 | 0x08);
 80023d8:	2028      	movs	r0, #40	; 0x28
 80023da:	f7fe fd69 	bl	8000eb0 <LCD_Data_8>
		LCD_Width = LCD_WIDTH;
 80023de:	4b12      	ldr	r3, [pc, #72]	; (8002428 <LCD_Orientation+0x94>)
 80023e0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80023e4:	801a      	strh	r2, [r3, #0]
		LCD_Height = LCD_HEIGHT;
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <LCD_Orientation+0x98>)
 80023e8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80023ec:	801a      	strh	r2, [r3, #0]
		break;
 80023ee:	e017      	b.n	8002420 <LCD_Orientation+0x8c>
	case 2:
		LCD_Data_8(0x80 | 0x08);
 80023f0:	2088      	movs	r0, #136	; 0x88
 80023f2:	f7fe fd5d 	bl	8000eb0 <LCD_Data_8>
		LCD_Width = LCD_HEIGHT;
 80023f6:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <LCD_Orientation+0x94>)
 80023f8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80023fc:	801a      	strh	r2, [r3, #0]
		LCD_Height = LCD_WIDTH;
 80023fe:	4b0b      	ldr	r3, [pc, #44]	; (800242c <LCD_Orientation+0x98>)
 8002400:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002404:	801a      	strh	r2, [r3, #0]
		break;
 8002406:	e00b      	b.n	8002420 <LCD_Orientation+0x8c>
	case 3:
		LCD_Data_8(0x40 | 0x80 | 0x20 | 0x08);
 8002408:	20e8      	movs	r0, #232	; 0xe8
 800240a:	f7fe fd51 	bl	8000eb0 <LCD_Data_8>
		LCD_Width = LCD_WIDTH;
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <LCD_Orientation+0x94>)
 8002410:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002414:	801a      	strh	r2, [r3, #0]
		LCD_Height = LCD_HEIGHT;
 8002416:	4b05      	ldr	r3, [pc, #20]	; (800242c <LCD_Orientation+0x98>)
 8002418:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800241c:	801a      	strh	r2, [r3, #0]
		break;
 800241e:	bf00      	nop
	}
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	200000a4 	.word	0x200000a4
 800242c:	200000a6 	.word	0x200000a6

08002430 <LCD_Init>:

void LCD_Init(void) {
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af02      	add	r7, sp, #8
	LCD_Reset();
 8002436:	f7ff ff8b 	bl	8002350 <LCD_Reset>
	LCD_Command(SOFTWARE_RESET);
 800243a:	2001      	movs	r0, #1
 800243c:	f7fe fd20 	bl	8000e80 <LCD_Command>

	LCD_Command(POWER_CONTROL_1);
 8002440:	20c0      	movs	r0, #192	; 0xc0
 8002442:	f7fe fd1d 	bl	8000e80 <LCD_Command>
	LCD_Data_8(0x17);    //Vreg1out
 8002446:	2017      	movs	r0, #23
 8002448:	f7fe fd32 	bl	8000eb0 <LCD_Data_8>
	LCD_Data_8(0x15);    //Verg2out
 800244c:	2015      	movs	r0, #21
 800244e:	f7fe fd2f 	bl	8000eb0 <LCD_Data_8>

	LCD_Command(POWER_CONTROL_2);
 8002452:	20c1      	movs	r0, #193	; 0xc1
 8002454:	f7fe fd14 	bl	8000e80 <LCD_Command>
	LCD_Data_8(0x41);    //VGH,VGL
 8002458:	2041      	movs	r0, #65	; 0x41
 800245a:	f7fe fd29 	bl	8000eb0 <LCD_Data_8>

	LCD_Command(VCOM_CONTROL_1);
 800245e:	20c5      	movs	r0, #197	; 0xc5
 8002460:	f7fe fd0e 	bl	8000e80 <LCD_Command>
	LCD_Data_8(0x00);
 8002464:	2000      	movs	r0, #0
 8002466:	f7fe fd23 	bl	8000eb0 <LCD_Data_8>
	LCD_Data_8(0x12);    //Vcom
 800246a:	2012      	movs	r0, #18
 800246c:	f7fe fd20 	bl	8000eb0 <LCD_Data_8>
	LCD_Data_8(0x80);
 8002470:	2080      	movs	r0, #128	; 0x80
 8002472:	f7fe fd1d 	bl	8000eb0 <LCD_Data_8>

	LCD_Command(MEMORY_ACCESS_CONTROL);
 8002476:	2036      	movs	r0, #54	; 0x36
 8002478:	f7fe fd02 	bl	8000e80 <LCD_Command>
	LCD_Data_8(0x48);
 800247c:	2048      	movs	r0, #72	; 0x48
 800247e:	f7fe fd17 	bl	8000eb0 <LCD_Data_8>

	LCD_Command(COLMOD_PIXEL_FORMAT_SET);
 8002482:	203a      	movs	r0, #58	; 0x3a
 8002484:	f7fe fcfc 	bl	8000e80 <LCD_Command>
	LCD_Data_8(0x66); 	  //18 bit
 8002488:	2066      	movs	r0, #102	; 0x66
 800248a:	f7fe fd11 	bl	8000eb0 <LCD_Data_8>

	LCD_Command(RGB_SIGNAL_CONTROL);
 800248e:	20b0      	movs	r0, #176	; 0xb0
 8002490:	f7fe fcf6 	bl	8000e80 <LCD_Command>
	LCD_Data_8(0x80);    //SDO NOT USE
 8002494:	2080      	movs	r0, #128	; 0x80
 8002496:	f7fe fd0b 	bl	8000eb0 <LCD_Data_8>

	LCD_Command(FRAME_RATE_CONTROL_NORMAL);
 800249a:	20b1      	movs	r0, #177	; 0xb1
 800249c:	f7fe fcf0 	bl	8000e80 <LCD_Command>
	LCD_Data_8(0xA0);    //60Hz
 80024a0:	20a0      	movs	r0, #160	; 0xa0
 80024a2:	f7fe fd05 	bl	8000eb0 <LCD_Data_8>

	LCD_Command(DISPLAY_INVERSION_CONTROL);
 80024a6:	20b4      	movs	r0, #180	; 0xb4
 80024a8:	f7fe fcea 	bl	8000e80 <LCD_Command>
	LCD_Data_8(0x02);    //2-dot
 80024ac:	2002      	movs	r0, #2
 80024ae:	f7fe fcff 	bl	8000eb0 <LCD_Data_8>

	LCD_Command(DISPLAY_FUNCTION_CONTROL);
 80024b2:	20b6      	movs	r0, #182	; 0xb6
 80024b4:	f7fe fce4 	bl	8000e80 <LCD_Command>
	LCD_Data_8(0x02);    //MCU
 80024b8:	2002      	movs	r0, #2
 80024ba:	f7fe fcf9 	bl	8000eb0 <LCD_Data_8>
	LCD_Data_8(0x02);    //Source,Gate scan dieection
 80024be:	2002      	movs	r0, #2
 80024c0:	f7fe fcf6 	bl	8000eb0 <LCD_Data_8>

	LCD_Command(0XE9);   // Set Image Functio
 80024c4:	20e9      	movs	r0, #233	; 0xe9
 80024c6:	f7fe fcdb 	bl	8000e80 <LCD_Command>
	LCD_Data_8(0x00);    // Disable 24 bit data
 80024ca:	2000      	movs	r0, #0
 80024cc:	f7fe fcf0 	bl	8000eb0 <LCD_Data_8>

	LCD_Command(PUMP_RATIO_CONTROL);
 80024d0:	20f7      	movs	r0, #247	; 0xf7
 80024d2:	f7fe fcd5 	bl	8000e80 <LCD_Command>
	LCD_Data_8(0xA9);
 80024d6:	20a9      	movs	r0, #169	; 0xa9
 80024d8:	f7fe fcea 	bl	8000eb0 <LCD_Data_8>
	LCD_Data_8(0x51);
 80024dc:	2051      	movs	r0, #81	; 0x51
 80024de:	f7fe fce7 	bl	8000eb0 <LCD_Data_8>
	LCD_Data_8(0x2C);
 80024e2:	202c      	movs	r0, #44	; 0x2c
 80024e4:	f7fe fce4 	bl	8000eb0 <LCD_Data_8>
	LCD_Data_8(0x82);    // D7 stream, loose
 80024e8:	2082      	movs	r0, #130	; 0x82
 80024ea:	f7fe fce1 	bl	8000eb0 <LCD_Data_8>
//	LCD_Data_8(0x0A);
//	LCD_Data_8(0x82);
//	LCD_Data_8(0x27);
//	LCD_Command(COLMOD_PIXEL_FORMAT_SET);
//	LCD_Data_8(0x55);
	LCD_Command(SLEEP_OUT);
 80024ee:	2011      	movs	r0, #17
 80024f0:	f7fe fcc6 	bl	8000e80 <LCD_Command>
	LCD_Command(DISPLAY_ON);
 80024f4:	2029      	movs	r0, #41	; 0x29
 80024f6:	f7fe fcc3 	bl	8000e80 <LCD_Command>
	LCD_Orientation(DEFAULT_ORIENTATION);
 80024fa:	2001      	movs	r0, #1
 80024fc:	f7ff ff4a 	bl	8002394 <LCD_Orientation>
	LCD_Rect_Fill(0, 0, LCD_WIDTH, LCD_HEIGHT, BLACK);
 8002500:	2300      	movs	r3, #0
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002508:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800250c:	2100      	movs	r1, #0
 800250e:	2000      	movs	r0, #0
 8002510:	f7fe fd4e 	bl	8000fb0 <LCD_Rect_Fill>
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <HAL_TIM_PeriodElapsedCallback>:
#include "ir_remote.h"

volatile irparams_t irparams;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
	if(htim == &TIMER_IR)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a56      	ldr	r2, [pc, #344]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002528:	4293      	cmp	r3, r2
 800252a:	f040 809b 	bne.w	8002664 <HAL_TIM_PeriodElapsedCallback+0x148>
	{
		uint8_t irdata = RECIV_PIN;
 800252e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002532:	4854      	ldr	r0, [pc, #336]	; (8002684 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002534:	f002 fbfe 	bl	8004d34 <HAL_GPIO_ReadPin>
 8002538:	4603      	mov	r3, r0
 800253a:	73fb      	strb	r3, [r7, #15]

		irparams.timer++;  // One more 50uS tick
 800253c:	4b52      	ldr	r3, [pc, #328]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800253e:	885b      	ldrh	r3, [r3, #2]
 8002540:	b29b      	uxth	r3, r3
 8002542:	3301      	adds	r3, #1
 8002544:	b29a      	uxth	r2, r3
 8002546:	4b50      	ldr	r3, [pc, #320]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002548:	805a      	strh	r2, [r3, #2]
		if(irparams.rawlen >= RAWBUF) irparams.rcvstate = STATE_OVERFLOW;  // Buffer overflow
 800254a:	4b4f      	ldr	r3, [pc, #316]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800254c:	785b      	ldrb	r3, [r3, #1]

		switch(irparams.rcvstate)
 800254e:	4b4e      	ldr	r3, [pc, #312]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	b2db      	uxtb	r3, r3
 8002554:	3b02      	subs	r3, #2
 8002556:	2b04      	cmp	r3, #4
 8002558:	f200 808d 	bhi.w	8002676 <HAL_TIM_PeriodElapsedCallback+0x15a>
 800255c:	a201      	add	r2, pc, #4	; (adr r2, 8002564 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800255e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002562:	bf00      	nop
 8002564:	08002579 	.word	0x08002579
 8002568:	080025cd 	.word	0x080025cd
 800256c:	08002601 	.word	0x08002601
 8002570:	08002647 	.word	0x08002647
 8002574:	08002655 	.word	0x08002655
		{
			case STATE_IDLE: // In the middle of a gap
				if(irdata == MARK)
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d174      	bne.n	8002668 <HAL_TIM_PeriodElapsedCallback+0x14c>
				{
					if(irparams.timer < GAP_TICKS)  // Not big enough to be a gap.
 800257e:	4b42      	ldr	r3, [pc, #264]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002580:	885b      	ldrh	r3, [r3, #2]
 8002582:	b29b      	uxth	r3, r3
 8002584:	2b63      	cmp	r3, #99	; 0x63
 8002586:	d803      	bhi.n	8002590 <HAL_TIM_PeriodElapsedCallback+0x74>
					{
						irparams.timer = 0;
 8002588:	4b3f      	ldr	r3, [pc, #252]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800258a:	2200      	movs	r2, #0
 800258c:	805a      	strh	r2, [r3, #2]
						irparams.timer = 0;
						irparams.rcvstate = STATE_MARK;
					}
				}

			break;
 800258e:	e06b      	b.n	8002668 <HAL_TIM_PeriodElapsedCallback+0x14c>
						irparams.overflow = 0;
 8002590:	4b3d      	ldr	r3, [pc, #244]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						irparams.rawlen  = 0;
 8002598:	4b3b      	ldr	r3, [pc, #236]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800259a:	2200      	movs	r2, #0
 800259c:	705a      	strb	r2, [r3, #1]
						irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 800259e:	4b3a      	ldr	r3, [pc, #232]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80025a0:	785b      	ldrb	r3, [r3, #1]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	b2d1      	uxtb	r1, r2
 80025a8:	4a37      	ldr	r2, [pc, #220]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80025aa:	7051      	strb	r1, [r2, #1]
 80025ac:	4618      	mov	r0, r3
 80025ae:	4b36      	ldr	r3, [pc, #216]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80025b0:	885b      	ldrh	r3, [r3, #2]
 80025b2:	b299      	uxth	r1, r3
 80025b4:	4a34      	ldr	r2, [pc, #208]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80025b6:	0043      	lsls	r3, r0, #1
 80025b8:	4413      	add	r3, r2
 80025ba:	460a      	mov	r2, r1
 80025bc:	809a      	strh	r2, [r3, #4]
						irparams.timer = 0;
 80025be:	4b32      	ldr	r3, [pc, #200]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	805a      	strh	r2, [r3, #2]
						irparams.rcvstate = STATE_MARK;
 80025c4:	4b30      	ldr	r3, [pc, #192]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80025c6:	2203      	movs	r2, #3
 80025c8:	701a      	strb	r2, [r3, #0]
			break;
 80025ca:	e04d      	b.n	8002668 <HAL_TIM_PeriodElapsedCallback+0x14c>

			case STATE_MARK:  // Timing Mark
				if(irdata == SPACE) // Mark ended; Record time
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d14c      	bne.n	800266c <HAL_TIM_PeriodElapsedCallback+0x150>
				{
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 80025d2:	4b2d      	ldr	r3, [pc, #180]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80025d4:	785b      	ldrb	r3, [r3, #1]
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	b2d1      	uxtb	r1, r2
 80025dc:	4a2a      	ldr	r2, [pc, #168]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80025de:	7051      	strb	r1, [r2, #1]
 80025e0:	4618      	mov	r0, r3
 80025e2:	4b29      	ldr	r3, [pc, #164]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80025e4:	885b      	ldrh	r3, [r3, #2]
 80025e6:	b299      	uxth	r1, r3
 80025e8:	4a27      	ldr	r2, [pc, #156]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80025ea:	0043      	lsls	r3, r0, #1
 80025ec:	4413      	add	r3, r2
 80025ee:	460a      	mov	r2, r1
 80025f0:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 80025f2:	4b25      	ldr	r3, [pc, #148]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_SPACE;
 80025f8:	4b23      	ldr	r3, [pc, #140]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80025fa:	2204      	movs	r2, #4
 80025fc:	701a      	strb	r2, [r3, #0]
				}

			break;
 80025fe:	e035      	b.n	800266c <HAL_TIM_PeriodElapsedCallback+0x150>

			case STATE_SPACE:  // Timing Space
				if(irdata == MARK) // Space just ended; Record time
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d116      	bne.n	8002634 <HAL_TIM_PeriodElapsedCallback+0x118>
				{
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8002606:	4b20      	ldr	r3, [pc, #128]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002608:	785b      	ldrb	r3, [r3, #1]
 800260a:	b2db      	uxtb	r3, r3
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	b2d1      	uxtb	r1, r2
 8002610:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002612:	7051      	strb	r1, [r2, #1]
 8002614:	4618      	mov	r0, r3
 8002616:	4b1c      	ldr	r3, [pc, #112]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002618:	885b      	ldrh	r3, [r3, #2]
 800261a:	b299      	uxth	r1, r3
 800261c:	4a1a      	ldr	r2, [pc, #104]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800261e:	0043      	lsls	r3, r0, #1
 8002620:	4413      	add	r3, r2
 8002622:	460a      	mov	r2, r1
 8002624:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 8002626:	4b18      	ldr	r3, [pc, #96]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002628:	2200      	movs	r2, #0
 800262a:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_MARK;
 800262c:	4b16      	ldr	r3, [pc, #88]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800262e:	2203      	movs	r2, #3
 8002630:	701a      	strb	r2, [r3, #0]
				else if(irparams.timer > GAP_TICKS) // Space
				{
					irparams.rcvstate = STATE_STOP;
				}

			break;
 8002632:	e01d      	b.n	8002670 <HAL_TIM_PeriodElapsedCallback+0x154>
				else if(irparams.timer > GAP_TICKS) // Space
 8002634:	4b14      	ldr	r3, [pc, #80]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002636:	885b      	ldrh	r3, [r3, #2]
 8002638:	b29b      	uxth	r3, r3
 800263a:	2b64      	cmp	r3, #100	; 0x64
 800263c:	d918      	bls.n	8002670 <HAL_TIM_PeriodElapsedCallback+0x154>
					irparams.rcvstate = STATE_STOP;
 800263e:	4b12      	ldr	r3, [pc, #72]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002640:	2205      	movs	r2, #5
 8002642:	701a      	strb	r2, [r3, #0]
			break;
 8002644:	e014      	b.n	8002670 <HAL_TIM_PeriodElapsedCallback+0x154>

			case STATE_STOP:  // Waiting; Measuring Gap
			 	if(irdata == MARK) irparams.timer = 0;  // Reset gap timer
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d113      	bne.n	8002674 <HAL_TIM_PeriodElapsedCallback+0x158>
 800264c:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800264e:	2200      	movs	r2, #0
 8002650:	805a      	strh	r2, [r3, #2]
			break;
 8002652:	e00f      	b.n	8002674 <HAL_TIM_PeriodElapsedCallback+0x158>

			case STATE_OVERFLOW:  // Flag up a read overflow; Stop the State Machine
				irparams.overflow = 1;
 8002654:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				irparams.rcvstate = STATE_STOP;
 800265c:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800265e:	2205      	movs	r2, #5
 8002660:	701a      	strb	r2, [r3, #0]
			break;
 8002662:	e008      	b.n	8002676 <HAL_TIM_PeriodElapsedCallback+0x15a>
		}
	}
 8002664:	bf00      	nop
 8002666:	e006      	b.n	8002676 <HAL_TIM_PeriodElapsedCallback+0x15a>
			break;
 8002668:	bf00      	nop
 800266a:	e004      	b.n	8002676 <HAL_TIM_PeriodElapsedCallback+0x15a>
			break;
 800266c:	bf00      	nop
 800266e:	e002      	b.n	8002676 <HAL_TIM_PeriodElapsedCallback+0x15a>
			break;
 8002670:	bf00      	nop
 8002672:	e000      	b.n	8002676 <HAL_TIM_PeriodElapsedCallback+0x15a>
			break;
 8002674:	bf00      	nop
}
 8002676:	bf00      	nop
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	200007e8 	.word	0x200007e8
 8002684:	40020800 	.word	0x40020800
 8002688:	200000a8 	.word	0x200000a8

0800268c <ir_decode>:

int16_t ir_decode(decode_results *results)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
	if(irparams.rcvstate != STATE_STOP) return 0;
 8002694:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <ir_decode+0x54>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b05      	cmp	r3, #5
 800269c:	d001      	beq.n	80026a2 <ir_decode+0x16>
 800269e:	2300      	movs	r3, #0
 80026a0:	e01a      	b.n	80026d8 <ir_decode+0x4c>

	results->rawbuf = irparams.rawbuf;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a0f      	ldr	r2, [pc, #60]	; (80026e4 <ir_decode+0x58>)
 80026a6:	609a      	str	r2, [r3, #8]
	results->rawlen = irparams.rawlen;
 80026a8:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <ir_decode+0x54>)
 80026aa:	785b      	ldrb	r3, [r3, #1]
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	b21a      	sxth	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	819a      	strh	r2, [r3, #12]
	results->overflow = irparams.overflow;
 80026b4:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <ir_decode+0x54>)
 80026b6:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	b21a      	sxth	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	81da      	strh	r2, [r3, #14]

	if(decodeHash(results)) return 1;
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f880 	bl	80027c8 <decodeHash>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <ir_decode+0x46>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e002      	b.n	80026d8 <ir_decode+0x4c>
	ir_enableIRIn();
 80026d2:	f000 f809 	bl	80026e8 <ir_enableIRIn>
	return 0;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	200000a8 	.word	0x200000a8
 80026e4:	200000ac 	.word	0x200000ac

080026e8 <ir_enableIRIn>:

void ir_enableIRIn()
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 80026ec:	4b07      	ldr	r3, [pc, #28]	; (800270c <ir_enableIRIn+0x24>)
 80026ee:	2202      	movs	r2, #2
 80026f0:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <ir_enableIRIn+0x24>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	705a      	strb	r2, [r3, #1]

	__HAL_TIM_SET_COUNTER(&TIMER_IR, 0x0000);
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <ir_enableIRIn+0x28>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2200      	movs	r2, #0
 80026fe:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&TIMER_IR);
 8002700:	4803      	ldr	r0, [pc, #12]	; (8002710 <ir_enableIRIn+0x28>)
 8002702:	f003 fc23 	bl	8005f4c <HAL_TIM_Base_Start_IT>
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	200000a8 	.word	0x200000a8
 8002710:	200007e8 	.word	0x200007e8

08002714 <ir_resume>:

void ir_resume() // Restart the ISR state machine
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <ir_resume+0x1c>)
 800271a:	2202      	movs	r2, #2
 800271c:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 800271e:	4b04      	ldr	r3, [pc, #16]	; (8002730 <ir_resume+0x1c>)
 8002720:	2200      	movs	r2, #0
 8002722:	705a      	strb	r2, [r3, #1]
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	200000a8 	.word	0x200000a8
 8002734:	00000000 	.word	0x00000000

08002738 <compare>:

int16_t compare(uint16_t oldval, uint16_t newval)
{
 8002738:	b5b0      	push	{r4, r5, r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	460a      	mov	r2, r1
 8002742:	80fb      	strh	r3, [r7, #6]
 8002744:	4613      	mov	r3, r2
 8002746:	80bb      	strh	r3, [r7, #4]
	if(newval < oldval * .8) return 0;
 8002748:	88bb      	ldrh	r3, [r7, #4]
 800274a:	4618      	mov	r0, r3
 800274c:	f7fd fef2 	bl	8000534 <__aeabi_i2d>
 8002750:	4604      	mov	r4, r0
 8002752:	460d      	mov	r5, r1
 8002754:	88fb      	ldrh	r3, [r7, #6]
 8002756:	4618      	mov	r0, r3
 8002758:	f7fd feec 	bl	8000534 <__aeabi_i2d>
 800275c:	a318      	add	r3, pc, #96	; (adr r3, 80027c0 <compare+0x88>)
 800275e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002762:	f7fd ff51 	bl	8000608 <__aeabi_dmul>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4620      	mov	r0, r4
 800276c:	4629      	mov	r1, r5
 800276e:	f7fe f9bd 	bl	8000aec <__aeabi_dcmplt>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <compare+0x44>
 8002778:	2300      	movs	r3, #0
 800277a:	e01a      	b.n	80027b2 <compare+0x7a>
	else if(oldval < newval * .8) return 2;
 800277c:	88fb      	ldrh	r3, [r7, #6]
 800277e:	4618      	mov	r0, r3
 8002780:	f7fd fed8 	bl	8000534 <__aeabi_i2d>
 8002784:	4604      	mov	r4, r0
 8002786:	460d      	mov	r5, r1
 8002788:	88bb      	ldrh	r3, [r7, #4]
 800278a:	4618      	mov	r0, r3
 800278c:	f7fd fed2 	bl	8000534 <__aeabi_i2d>
 8002790:	a30b      	add	r3, pc, #44	; (adr r3, 80027c0 <compare+0x88>)
 8002792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002796:	f7fd ff37 	bl	8000608 <__aeabi_dmul>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4620      	mov	r0, r4
 80027a0:	4629      	mov	r1, r5
 80027a2:	f7fe f9a3 	bl	8000aec <__aeabi_dcmplt>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <compare+0x78>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e000      	b.n	80027b2 <compare+0x7a>
	else return 1;
 80027b0:	2301      	movs	r3, #1
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bdb0      	pop	{r4, r5, r7, pc}
 80027ba:	bf00      	nop
 80027bc:	f3af 8000 	nop.w
 80027c0:	9999999a 	.word	0x9999999a
 80027c4:	3fe99999 	.word	0x3fe99999

080027c8 <decodeHash>:

#define FNV_PRIME_32 16777619
#define FNV_BASIS_32 2166136261

int32_t decodeHash(decode_results *results)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
	int32_t hash = FNV_BASIS_32;
 80027d0:	4b21      	ldr	r3, [pc, #132]	; (8002858 <decodeHash+0x90>)
 80027d2:	60fb      	str	r3, [r7, #12]

	if(results->rawlen < 6) return 0;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80027da:	2b05      	cmp	r3, #5
 80027dc:	dc01      	bgt.n	80027e2 <decodeHash+0x1a>
 80027de:	2300      	movs	r3, #0
 80027e0:	e035      	b.n	800284e <decodeHash+0x86>

	for(int16_t i = 1; (i + 2) < results->rawlen; i++)
 80027e2:	2301      	movs	r3, #1
 80027e4:	817b      	strh	r3, [r7, #10]
 80027e6:	e023      	b.n	8002830 <decodeHash+0x68>
	{
		int16_t value = compare(results->rawbuf[i], results->rawbuf[i+2]);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	b298      	uxth	r0, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002800:	3302      	adds	r3, #2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	b29b      	uxth	r3, r3
 800280a:	4619      	mov	r1, r3
 800280c:	f7ff ff94 	bl	8002738 <compare>
 8002810:	4603      	mov	r3, r0
 8002812:	813b      	strh	r3, [r7, #8]
		hash = (hash * FNV_PRIME_32) ^ value;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4a11      	ldr	r2, [pc, #68]	; (800285c <decodeHash+0x94>)
 8002818:	fb03 f202 	mul.w	r2, r3, r2
 800281c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002820:	4053      	eors	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
	for(int16_t i = 1; (i + 2) < results->rawlen; i++)
 8002824:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002828:	b29b      	uxth	r3, r3
 800282a:	3301      	adds	r3, #1
 800282c:	b29b      	uxth	r3, r3
 800282e:	817b      	strh	r3, [r7, #10]
 8002830:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002834:	3302      	adds	r3, #2
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800283c:	4293      	cmp	r3, r2
 800283e:	dbd3      	blt.n	80027e8 <decodeHash+0x20>
	}

	results->value = hash;
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	601a      	str	r2, [r3, #0]
	results->bits = 32;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2220      	movs	r2, #32
 800284a:	809a      	strh	r2, [r3, #4]
	return 1;
 800284c:	2301      	movs	r3, #1
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	811c9dc5 	.word	0x811c9dc5
 800285c:	01000193 	.word	0x01000193

08002860 <hsv_rgb>:
	uint8_t b;
} RGB;

RGB rgb;

RGB hsv_rgb(double H, double S, double V) {
 8002860:	b580      	push	{r7, lr}
 8002862:	b098      	sub	sp, #96	; 0x60
 8002864:	af00      	add	r7, sp, #0
 8002866:	ed87 0b04 	vstr	d0, [r7, #16]
 800286a:	ed87 1b02 	vstr	d1, [r7, #8]
 800286e:	ed87 2b00 	vstr	d2, [r7]
	double r = 0, g = 0, b = 0;
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	f04f 0300 	mov.w	r3, #0
 8002886:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	f04f 0300 	mov.w	r3, #0
 8002892:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if (S == 0) {
 8002896:	f04f 0200 	mov.w	r2, #0
 800289a:	f04f 0300 	mov.w	r3, #0
 800289e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028a2:	f7fe f919 	bl	8000ad8 <__aeabi_dcmpeq>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00c      	beq.n	80028c6 <hsv_rgb+0x66>
		r = V;
 80028ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028b0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		g = V;
 80028b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028b8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		b = V;
 80028bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028c0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80028c4:	e0de      	b.n	8002a84 <hsv_rgb+0x224>
	} else {
		uint16_t i;
		double f, p, q, t;

		if (H == 360)
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	4b95      	ldr	r3, [pc, #596]	; (8002b20 <hsv_rgb+0x2c0>)
 80028cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028d0:	f7fe f902 	bl	8000ad8 <__aeabi_dcmpeq>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d006      	beq.n	80028e8 <hsv_rgb+0x88>
			H = 0;
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80028e6:	e00a      	b.n	80028fe <hsv_rgb+0x9e>
		else
			H = H / 60;
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	4b8d      	ldr	r3, [pc, #564]	; (8002b24 <hsv_rgb+0x2c4>)
 80028ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028f2:	f7fd ffb3 	bl	800085c <__aeabi_ddiv>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	e9c7 2304 	strd	r2, r3, [r7, #16]

		i = (uint16_t) trunc(H);
 80028fe:	ed97 0b04 	vldr	d0, [r7, #16]
 8002902:	f005 fd43 	bl	800838c <trunc>
 8002906:	ec53 2b10 	vmov	r2, r3, d0
 800290a:	4610      	mov	r0, r2
 800290c:	4619      	mov	r1, r3
 800290e:	f7fe f915 	bl	8000b3c <__aeabi_d2uiz>
 8002912:	4603      	mov	r3, r0
 8002914:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		f = H - i;
 8002918:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800291c:	4618      	mov	r0, r3
 800291e:	f7fd fe09 	bl	8000534 <__aeabi_i2d>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800292a:	f7fd fcb5 	bl	8000298 <__aeabi_dsub>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

		p = V * (1.0 - S);
 8002936:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800293a:	f04f 0000 	mov.w	r0, #0
 800293e:	497a      	ldr	r1, [pc, #488]	; (8002b28 <hsv_rgb+0x2c8>)
 8002940:	f7fd fcaa 	bl	8000298 <__aeabi_dsub>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	e9d7 0100 	ldrd	r0, r1, [r7]
 800294c:	f7fd fe5c 	bl	8000608 <__aeabi_dmul>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		q = V * (1.0 - (S * f));
 8002958:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800295c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002960:	f7fd fe52 	bl	8000608 <__aeabi_dmul>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	f04f 0000 	mov.w	r0, #0
 800296c:	496e      	ldr	r1, [pc, #440]	; (8002b28 <hsv_rgb+0x2c8>)
 800296e:	f7fd fc93 	bl	8000298 <__aeabi_dsub>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	e9d7 0100 	ldrd	r0, r1, [r7]
 800297a:	f7fd fe45 	bl	8000608 <__aeabi_dmul>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		t = V * (1.0 - (S * (1.0 - f)));
 8002986:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800298a:	f04f 0000 	mov.w	r0, #0
 800298e:	4966      	ldr	r1, [pc, #408]	; (8002b28 <hsv_rgb+0x2c8>)
 8002990:	f7fd fc82 	bl	8000298 <__aeabi_dsub>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4610      	mov	r0, r2
 800299a:	4619      	mov	r1, r3
 800299c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029a0:	f7fd fe32 	bl	8000608 <__aeabi_dmul>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	f04f 0000 	mov.w	r0, #0
 80029ac:	495e      	ldr	r1, [pc, #376]	; (8002b28 <hsv_rgb+0x2c8>)
 80029ae:	f7fd fc73 	bl	8000298 <__aeabi_dsub>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029ba:	f7fd fe25 	bl	8000608 <__aeabi_dmul>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	e9c7 2308 	strd	r2, r3, [r7, #32]

		switch (i) {
 80029c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d84d      	bhi.n	8002a6a <hsv_rgb+0x20a>
 80029ce:	a201      	add	r2, pc, #4	; (adr r2, 80029d4 <hsv_rgb+0x174>)
 80029d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d4:	080029e9 	.word	0x080029e9
 80029d8:	08002a03 	.word	0x08002a03
 80029dc:	08002a1d 	.word	0x08002a1d
 80029e0:	08002a37 	.word	0x08002a37
 80029e4:	08002a51 	.word	0x08002a51
		case 0:
			r = V;
 80029e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029ec:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			g = t;
 80029f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029f4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			b = p;
 80029f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80029fc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			break;
 8002a00:	e040      	b.n	8002a84 <hsv_rgb+0x224>
		case 1:
			r = q;
 8002a02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a06:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			g = V;
 8002a0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a0e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			b = p;
 8002a12:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a16:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			break;
 8002a1a:	e033      	b.n	8002a84 <hsv_rgb+0x224>
		case 2:
			r = p;
 8002a1c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a20:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			g = V;
 8002a24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a28:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			b = t;
 8002a2c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a30:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			break;
 8002a34:	e026      	b.n	8002a84 <hsv_rgb+0x224>
		case 3:
			r = p;
 8002a36:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a3a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			g = q;
 8002a3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a42:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			b = V;
 8002a46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a4a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			break;
 8002a4e:	e019      	b.n	8002a84 <hsv_rgb+0x224>
		case 4:
			r = t;
 8002a50:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a54:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			g = p;
 8002a58:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a5c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			b = V;
 8002a60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a64:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			break;
 8002a68:	e00c      	b.n	8002a84 <hsv_rgb+0x224>
		default:
			r = V;
 8002a6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a6e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			g = p;
 8002a72:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a76:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			b = q;
 8002a7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a7e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			break;
 8002a82:	bf00      	nop
		}

	}
	rgb.r = r * 255;
 8002a84:	a324      	add	r3, pc, #144	; (adr r3, 8002b18 <hsv_rgb+0x2b8>)
 8002a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002a8e:	f7fd fdbb 	bl	8000608 <__aeabi_dmul>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4610      	mov	r0, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f7fe f84f 	bl	8000b3c <__aeabi_d2uiz>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	4b22      	ldr	r3, [pc, #136]	; (8002b2c <hsv_rgb+0x2cc>)
 8002aa4:	701a      	strb	r2, [r3, #0]
	rgb.g = g * 255;
 8002aa6:	a31c      	add	r3, pc, #112	; (adr r3, 8002b18 <hsv_rgb+0x2b8>)
 8002aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aac:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002ab0:	f7fd fdaa 	bl	8000608 <__aeabi_dmul>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4610      	mov	r0, r2
 8002aba:	4619      	mov	r1, r3
 8002abc:	f7fe f83e 	bl	8000b3c <__aeabi_d2uiz>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	4b19      	ldr	r3, [pc, #100]	; (8002b2c <hsv_rgb+0x2cc>)
 8002ac6:	705a      	strb	r2, [r3, #1]
	rgb.b = b * 255;
 8002ac8:	a313      	add	r3, pc, #76	; (adr r3, 8002b18 <hsv_rgb+0x2b8>)
 8002aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ace:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002ad2:	f7fd fd99 	bl	8000608 <__aeabi_dmul>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4610      	mov	r0, r2
 8002adc:	4619      	mov	r1, r3
 8002ade:	f7fe f82d 	bl	8000b3c <__aeabi_d2uiz>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <hsv_rgb+0x2cc>)
 8002ae8:	709a      	strb	r2, [r3, #2]
	return rgb;
 8002aea:	4a10      	ldr	r2, [pc, #64]	; (8002b2c <hsv_rgb+0x2cc>)
 8002aec:	f107 031c 	add.w	r3, r7, #28
 8002af0:	6812      	ldr	r2, [r2, #0]
 8002af2:	4611      	mov	r1, r2
 8002af4:	8019      	strh	r1, [r3, #0]
 8002af6:	3302      	adds	r3, #2
 8002af8:	0c12      	lsrs	r2, r2, #16
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	2300      	movs	r3, #0
 8002afe:	7f3a      	ldrb	r2, [r7, #28]
 8002b00:	f362 0307 	bfi	r3, r2, #0, #8
 8002b04:	7f7a      	ldrb	r2, [r7, #29]
 8002b06:	f362 230f 	bfi	r3, r2, #8, #8
 8002b0a:	7fba      	ldrb	r2, [r7, #30]
 8002b0c:	f362 4317 	bfi	r3, r2, #16, #8
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3760      	adds	r7, #96	; 0x60
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	00000000 	.word	0x00000000
 8002b1c:	406fe000 	.word	0x406fe000
 8002b20:	40768000 	.word	0x40768000
 8002b24:	404e0000 	.word	0x404e0000
 8002b28:	3ff00000 	.word	0x3ff00000
 8002b2c:	200002b0 	.word	0x200002b0

08002b30 <remake_palette>:

uint8_t palette[3][360];

void remake_palette(double brightness, double saturation) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	ed87 0b02 	vstr	d0, [r7, #8]
 8002b3a:	ed87 1b00 	vstr	d1, [r7]
	for (uint16_t i = 0; i < 360; i++) {
 8002b3e:	2300      	movs	r3, #0
 8002b40:	82fb      	strh	r3, [r7, #22]
 8002b42:	e02f      	b.n	8002ba4 <remake_palette+0x74>
		rgb = hsv_rgb(i, saturation, brightness);
 8002b44:	8afb      	ldrh	r3, [r7, #22]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fd fce4 	bl	8000514 <__aeabi_ui2d>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	ed97 2b02 	vldr	d2, [r7, #8]
 8002b54:	ed97 1b00 	vldr	d1, [r7]
 8002b58:	ec43 2b10 	vmov	d0, r2, r3
 8002b5c:	f7ff fe80 	bl	8002860 <hsv_rgb>
 8002b60:	4602      	mov	r2, r0
 8002b62:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <remake_palette+0x88>)
 8002b64:	4611      	mov	r1, r2
 8002b66:	7019      	strb	r1, [r3, #0]
 8002b68:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8002b6c:	7059      	strb	r1, [r3, #1]
 8002b6e:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8002b72:	709a      	strb	r2, [r3, #2]
		palette[0][i] = rgb.r;
 8002b74:	8afb      	ldrh	r3, [r7, #22]
 8002b76:	4a10      	ldr	r2, [pc, #64]	; (8002bb8 <remake_palette+0x88>)
 8002b78:	7811      	ldrb	r1, [r2, #0]
 8002b7a:	4a10      	ldr	r2, [pc, #64]	; (8002bbc <remake_palette+0x8c>)
 8002b7c:	54d1      	strb	r1, [r2, r3]
		palette[1][i] = rgb.g;
 8002b7e:	8afb      	ldrh	r3, [r7, #22]
 8002b80:	4a0d      	ldr	r2, [pc, #52]	; (8002bb8 <remake_palette+0x88>)
 8002b82:	7851      	ldrb	r1, [r2, #1]
 8002b84:	4a0d      	ldr	r2, [pc, #52]	; (8002bbc <remake_palette+0x8c>)
 8002b86:	4413      	add	r3, r2
 8002b88:	460a      	mov	r2, r1
 8002b8a:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
		palette[2][i] = rgb.b;
 8002b8e:	8afb      	ldrh	r3, [r7, #22]
 8002b90:	4a09      	ldr	r2, [pc, #36]	; (8002bb8 <remake_palette+0x88>)
 8002b92:	7891      	ldrb	r1, [r2, #2]
 8002b94:	4a09      	ldr	r2, [pc, #36]	; (8002bbc <remake_palette+0x8c>)
 8002b96:	4413      	add	r3, r2
 8002b98:	460a      	mov	r2, r1
 8002b9a:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
	for (uint16_t i = 0; i < 360; i++) {
 8002b9e:	8afb      	ldrh	r3, [r7, #22]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	82fb      	strh	r3, [r7, #22]
 8002ba4:	8afb      	ldrh	r3, [r7, #22]
 8002ba6:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002baa:	d3cb      	bcc.n	8002b44 <remake_palette+0x14>
	}

}
 8002bac:	bf00      	nop
 8002bae:	bf00      	nop
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	200002b0 	.word	0x200002b0
 8002bbc:	200002b4 	.word	0x200002b4

08002bc0 <rainbow>:

uint16_t offset = 0;

void rainbow(uint8_t reverse, uint16_t chain, uint16_t segment) {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71fb      	strb	r3, [r7, #7]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	80bb      	strh	r3, [r7, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	807b      	strh	r3, [r7, #2]

	if (reverse) {
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d03e      	beq.n	8002c56 <rainbow+0x96>
		for (uint16_t i = 0; i < chain; i++) {
 8002bd8:	2300      	movs	r3, #0
 8002bda:	81fb      	strh	r3, [r7, #14]
 8002bdc:	e027      	b.n	8002c2e <rainbow+0x6e>
			uint16_t paletteIndex = ((360 / segment)
 8002bde:	887b      	ldrh	r3, [r7, #2]
 8002be0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8002be4:	fb92 f3f3 	sdiv	r3, r2, r3
 8002be8:	b299      	uxth	r1, r3
					* ((i + offset - 1) % segment));
 8002bea:	89fb      	ldrh	r3, [r7, #14]
 8002bec:	4a3d      	ldr	r2, [pc, #244]	; (8002ce4 <rainbow+0x124>)
 8002bee:	8812      	ldrh	r2, [r2, #0]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	887a      	ldrh	r2, [r7, #2]
 8002bf6:	fb93 f0f2 	sdiv	r0, r3, r2
 8002bfa:	fb00 f202 	mul.w	r2, r0, r2
 8002bfe:	1a9b      	subs	r3, r3, r2
			uint16_t paletteIndex = ((360 / segment)
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	fb11 f303 	smulbb	r3, r1, r3
 8002c06:	813b      	strh	r3, [r7, #8]
			led_rgb_to_buf_dma(palette[0][paletteIndex],
 8002c08:	893b      	ldrh	r3, [r7, #8]
 8002c0a:	4a37      	ldr	r2, [pc, #220]	; (8002ce8 <rainbow+0x128>)
 8002c0c:	5cd0      	ldrb	r0, [r2, r3]
 8002c0e:	893b      	ldrh	r3, [r7, #8]
 8002c10:	4a35      	ldr	r2, [pc, #212]	; (8002ce8 <rainbow+0x128>)
 8002c12:	4413      	add	r3, r2
 8002c14:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8002c18:	893b      	ldrh	r3, [r7, #8]
 8002c1a:	4a33      	ldr	r2, [pc, #204]	; (8002ce8 <rainbow+0x128>)
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f893 22d0 	ldrb.w	r2, [r3, #720]	; 0x2d0
 8002c22:	89fb      	ldrh	r3, [r7, #14]
 8002c24:	f000 fff4 	bl	8003c10 <led_rgb_to_buf_dma>
		for (uint16_t i = 0; i < chain; i++) {
 8002c28:	89fb      	ldrh	r3, [r7, #14]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	81fb      	strh	r3, [r7, #14]
 8002c2e:	89fa      	ldrh	r2, [r7, #14]
 8002c30:	88bb      	ldrh	r3, [r7, #4]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d3d3      	bcc.n	8002bde <rainbow+0x1e>
					palette[1][paletteIndex], palette[2][paletteIndex], i);
		}
		led_light();
 8002c36:	f001 f885 	bl	8003d44 <led_light>
		offset--;
 8002c3a:	4b2a      	ldr	r3, [pc, #168]	; (8002ce4 <rainbow+0x124>)
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	4b28      	ldr	r3, [pc, #160]	; (8002ce4 <rainbow+0x124>)
 8002c44:	801a      	strh	r2, [r3, #0]
		if (offset == 0)
 8002c46:	4b27      	ldr	r3, [pc, #156]	; (8002ce4 <rainbow+0x124>)
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d145      	bne.n	8002cda <rainbow+0x11a>
			offset = segment;
 8002c4e:	4a25      	ldr	r2, [pc, #148]	; (8002ce4 <rainbow+0x124>)
 8002c50:	887b      	ldrh	r3, [r7, #2]
 8002c52:	8013      	strh	r3, [r2, #0]
		led_light();
		offset++;
		if (offset == segment)
			offset = 0;
	}
}
 8002c54:	e041      	b.n	8002cda <rainbow+0x11a>
		for (uint16_t i = 0; i < chain; i++) {
 8002c56:	2300      	movs	r3, #0
 8002c58:	81bb      	strh	r3, [r7, #12]
 8002c5a:	e02a      	b.n	8002cb2 <rainbow+0xf2>
					- ((360 / segment) * ((i + offset) % segment));
 8002c5c:	887b      	ldrh	r3, [r7, #2]
 8002c5e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8002c62:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c66:	b299      	uxth	r1, r3
 8002c68:	89bb      	ldrh	r3, [r7, #12]
 8002c6a:	4a1e      	ldr	r2, [pc, #120]	; (8002ce4 <rainbow+0x124>)
 8002c6c:	8812      	ldrh	r2, [r2, #0]
 8002c6e:	4413      	add	r3, r2
 8002c70:	887a      	ldrh	r2, [r7, #2]
 8002c72:	fb93 f0f2 	sdiv	r0, r3, r2
 8002c76:	fb00 f202 	mul.w	r2, r0, r2
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	fb11 f303 	smulbb	r3, r1, r3
 8002c82:	b29b      	uxth	r3, r3
			uint16_t paletteIndex = 359
 8002c84:	f5c3 73b3 	rsb	r3, r3, #358	; 0x166
 8002c88:	3301      	adds	r3, #1
 8002c8a:	817b      	strh	r3, [r7, #10]
			led_rgb_to_buf_dma(palette[0][paletteIndex],
 8002c8c:	897b      	ldrh	r3, [r7, #10]
 8002c8e:	4a16      	ldr	r2, [pc, #88]	; (8002ce8 <rainbow+0x128>)
 8002c90:	5cd0      	ldrb	r0, [r2, r3]
 8002c92:	897b      	ldrh	r3, [r7, #10]
 8002c94:	4a14      	ldr	r2, [pc, #80]	; (8002ce8 <rainbow+0x128>)
 8002c96:	4413      	add	r3, r2
 8002c98:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8002c9c:	897b      	ldrh	r3, [r7, #10]
 8002c9e:	4a12      	ldr	r2, [pc, #72]	; (8002ce8 <rainbow+0x128>)
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f893 22d0 	ldrb.w	r2, [r3, #720]	; 0x2d0
 8002ca6:	89bb      	ldrh	r3, [r7, #12]
 8002ca8:	f000 ffb2 	bl	8003c10 <led_rgb_to_buf_dma>
		for (uint16_t i = 0; i < chain; i++) {
 8002cac:	89bb      	ldrh	r3, [r7, #12]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	81bb      	strh	r3, [r7, #12]
 8002cb2:	89ba      	ldrh	r2, [r7, #12]
 8002cb4:	88bb      	ldrh	r3, [r7, #4]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d3d0      	bcc.n	8002c5c <rainbow+0x9c>
		led_light();
 8002cba:	f001 f843 	bl	8003d44 <led_light>
		offset++;
 8002cbe:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <rainbow+0x124>)
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <rainbow+0x124>)
 8002cc8:	801a      	strh	r2, [r3, #0]
		if (offset == segment)
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <rainbow+0x124>)
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	887a      	ldrh	r2, [r7, #2]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d102      	bne.n	8002cda <rainbow+0x11a>
			offset = 0;
 8002cd4:	4b03      	ldr	r3, [pc, #12]	; (8002ce4 <rainbow+0x124>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	801a      	strh	r2, [r3, #0]
}
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	200006ec 	.word	0x200006ec
 8002ce8:	200002b4 	.word	0x200002b4
 8002cec:	00000000 	.word	0x00000000

08002cf0 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8002cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cf4:	b097      	sub	sp, #92	; 0x5c
 8002cf6:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cf8:	f001 f980 	bl	8003ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cfc:	f000 fada 	bl	80032b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d00:	f000 fce4 	bl	80036cc <MX_GPIO_Init>
  MX_DMA_Init();
 8002d04:	f000 fcc2 	bl	800368c <MX_DMA_Init>
  MX_TIM1_Init();
 8002d08:	f000 fbaa 	bl	8003460 <MX_TIM1_Init>
  MX_TIM4_Init();
 8002d0c:	f000 fc48 	bl	80035a0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002d10:	f000 fc92 	bl	8003638 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8002d14:	f000 fb38 	bl	8003388 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002d18:	f000 fb6c 	bl	80033f4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

	ir_enableIRIn();
 8002d1c:	f7ff fce4 	bl	80026e8 <ir_enableIRIn>
	char trans_str[64] = { 0, };
 8002d20:	2300      	movs	r3, #0
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	1d3b      	adds	r3, r7, #4
 8002d26:	223c      	movs	r2, #60	; 0x3c
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f004 feb2 	bl	8007a94 <memset>
	snprintf(trans_str, 64, "IR-receiver\r\n");
 8002d30:	463b      	mov	r3, r7
 8002d32:	4a4d      	ldr	r2, [pc, #308]	; (8002e68 <main+0x178>)
 8002d34:	2140      	movs	r1, #64	; 0x40
 8002d36:	4618      	mov	r0, r3
 8002d38:	f004 feb4 	bl	8007aa4 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) trans_str, strlen(trans_str), 100);
 8002d3c:	463b      	mov	r3, r7
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fd fa4e 	bl	80001e0 <strlen>
 8002d44:	4603      	mov	r3, r0
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	4639      	mov	r1, r7
 8002d4a:	2364      	movs	r3, #100	; 0x64
 8002d4c:	4847      	ldr	r0, [pc, #284]	; (8002e6c <main+0x17c>)
 8002d4e:	f004 faf4 	bl	800733a <HAL_UART_Transmit>

	for (uint16_t i = 0; i < 40; i++) {
 8002d52:	2300      	movs	r3, #0
 8002d54:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002d58:	e00b      	b.n	8002d72 <main+0x82>
		led_rgb_to_buf_dma(1, 1, 1, i);
 8002d5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002d5e:	2201      	movs	r2, #1
 8002d60:	2101      	movs	r1, #1
 8002d62:	2001      	movs	r0, #1
 8002d64:	f000 ff54 	bl	8003c10 <led_rgb_to_buf_dma>
	for (uint16_t i = 0; i < 40; i++) {
 8002d68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002d72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002d76:	2b27      	cmp	r3, #39	; 0x27
 8002d78:	d9ef      	bls.n	8002d5a <main+0x6a>
	}
	led_light();
 8002d7a:	f000 ffe3 	bl	8003d44 <led_light>

	remake_palette(brigh, satur);
 8002d7e:	4b3c      	ldr	r3, [pc, #240]	; (8002e70 <main+0x180>)
 8002d80:	ed93 7b00 	vldr	d7, [r3]
 8002d84:	4b3b      	ldr	r3, [pc, #236]	; (8002e74 <main+0x184>)
 8002d86:	ed93 6b00 	vldr	d6, [r3]
 8002d8a:	eeb0 1a46 	vmov.f32	s2, s12
 8002d8e:	eef0 1a66 	vmov.f32	s3, s13
 8002d92:	eeb0 0a47 	vmov.f32	s0, s14
 8002d96:	eef0 0a67 	vmov.f32	s1, s15
 8002d9a:	f7ff fec9 	bl	8002b30 <remake_palette>

	LCD_Init();
 8002d9e:	f7ff fb47 	bl	8002430 <LCD_Init>
	XPT2046_Init();
 8002da2:	f001 f80d 	bl	8003dc0 <XPT2046_Init>

	LCD_Rect_Fill(0, 0, LCD_WIDTH, LCD_HEIGHT, BLUE);
 8002da6:	23ff      	movs	r3, #255	; 0xff
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002dae:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002db2:	2100      	movs	r1, #0
 8002db4:	2000      	movs	r0, #0
 8002db6:	f7fe f8fb 	bl	8000fb0 <LCD_Rect_Fill>
	LCD_Rect_Fill(1, 1, LCD_WIDTH - 2, LCD_HEIGHT - 2, BLACK);
 8002dba:	2300      	movs	r3, #0
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8002dc2:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	2001      	movs	r0, #1
 8002dca:	f7fe f8f1 	bl	8000fb0 <LCD_Rect_Fill>

	//	LCD_Rect_Fill(0, 0, 320, 240, BLUE);
	//	LCD_Rect_Fill(1, 1, 318, 238, BLACK);

	HAL_Delay(250);
 8002dce:	20fa      	movs	r0, #250	; 0xfa
 8002dd0:	f001 f986 	bl	80040e0 <HAL_Delay>
	LCD_Rect_Fill(0, 0, 160, 128, BLACK);
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	22a0      	movs	r2, #160	; 0xa0
 8002ddc:	2100      	movs	r1, #0
 8002dde:	2000      	movs	r0, #0
 8002de0:	f7fe f8e6 	bl	8000fb0 <LCD_Rect_Fill>
	for (uint8_t x = 8; x <= 160; x += 8) {
 8002de4:	2308      	movs	r3, #8
 8002de6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8002dea:	e011      	b.n	8002e10 <main+0x120>
		LCD_Line(0, 0, x, 128, 1, GREEN);
 8002dec:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002df6:	9301      	str	r3, [sp, #4]
 8002df8:	2301      	movs	r3, #1
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	2380      	movs	r3, #128	; 0x80
 8002dfe:	2100      	movs	r1, #0
 8002e00:	2000      	movs	r0, #0
 8002e02:	f7fe f90e 	bl	8001022 <LCD_Line>
	for (uint8_t x = 8; x <= 160; x += 8) {
 8002e06:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002e0a:	3308      	adds	r3, #8
 8002e0c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8002e10:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002e14:	2ba0      	cmp	r3, #160	; 0xa0
 8002e16:	d9e9      	bls.n	8002dec <main+0xfc>
	}
	for (uint8_t y = 8; y <= 128; y += 8) {
 8002e18:	2308      	movs	r3, #8
 8002e1a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8002e1e:	e011      	b.n	8002e44 <main+0x154>
		LCD_Line(0, 0, 160, y, 1, GREEN);
 8002e20:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8002e2a:	9201      	str	r2, [sp, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	9200      	str	r2, [sp, #0]
 8002e30:	22a0      	movs	r2, #160	; 0xa0
 8002e32:	2100      	movs	r1, #0
 8002e34:	2000      	movs	r0, #0
 8002e36:	f7fe f8f4 	bl	8001022 <LCD_Line>
	for (uint8_t y = 8; y <= 128; y += 8) {
 8002e3a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002e3e:	3308      	adds	r3, #8
 8002e40:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8002e44:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002e48:	2b80      	cmp	r3, #128	; 0x80
 8002e4a:	d9e9      	bls.n	8002e20 <main+0x130>
	}
	HAL_Delay(250);
 8002e4c:	20fa      	movs	r0, #250	; 0xfa
 8002e4e:	f001 f947 	bl	80040e0 <HAL_Delay>

	uint8_t h = 16;
 8002e52:	2310      	movs	r3, #16
 8002e54:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t w = 20;
 8002e58:	2314      	movs	r3, #20
 8002e5a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	for (uint8_t i = 0; i < 8; i++) {
 8002e5e:	2300      	movs	r3, #0
 8002e60:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8002e64:	e033      	b.n	8002ece <main+0x1de>
 8002e66:	bf00      	nop
 8002e68:	08008408 	.word	0x08008408
 8002e6c:	20000890 	.word	0x20000890
 8002e70:	20000008 	.word	0x20000008
 8002e74:	20000000 	.word	0x20000000
		LCD_Rect(80 - w / 2, 64 - h / 2, w, h, 2, YELLOW);
 8002e78:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002e7c:	085b      	lsrs	r3, r3, #1
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8002e86:	b298      	uxth	r0, r3
 8002e88:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002e8c:	085b      	lsrs	r3, r3, #1
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002e96:	b299      	uxth	r1, r3
 8002e98:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	4ec1      	ldr	r6, [pc, #772]	; (80031ac <main+0x4bc>)
 8002ea6:	9601      	str	r6, [sp, #4]
 8002ea8:	2602      	movs	r6, #2
 8002eaa:	9600      	str	r6, [sp, #0]
 8002eac:	f7fe f927 	bl	80010fe <LCD_Rect>
		h += 16;
 8002eb0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002eb4:	3310      	adds	r3, #16
 8002eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		w += 20;
 8002eba:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002ebe:	3314      	adds	r3, #20
 8002ec0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	for (uint8_t i = 0; i < 8; i++) {
 8002ec4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002ec8:	3301      	adds	r3, #1
 8002eca:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8002ece:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002ed2:	2b07      	cmp	r3, #7
 8002ed4:	d9d0      	bls.n	8002e78 <main+0x188>
	}
	HAL_Delay(250);
 8002ed6:	20fa      	movs	r0, #250	; 0xfa
 8002ed8:	f001 f902 	bl	80040e0 <HAL_Delay>
	LCD_Rect_Fill(0, 0, 160, 128, BLUE);
 8002edc:	23ff      	movs	r3, #255	; 0xff
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	22a0      	movs	r2, #160	; 0xa0
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f7fe f862 	bl	8000fb0 <LCD_Rect_Fill>
	LCD_Rect_Fill(1, 1, 158, 126, BLACK);
 8002eec:	2300      	movs	r3, #0
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	237e      	movs	r3, #126	; 0x7e
 8002ef2:	229e      	movs	r2, #158	; 0x9e
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	2001      	movs	r0, #1
 8002ef8:	f7fe f85a 	bl	8000fb0 <LCD_Rect_Fill>
	LCD_Font(5, 40, "This is\n just a Test\n TomThumb Ext\n",
 8002efc:	4bab      	ldr	r3, [pc, #684]	; (80031ac <main+0x4bc>)
 8002efe:	9301      	str	r3, [sp, #4]
 8002f00:	2301      	movs	r3, #1
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	4baa      	ldr	r3, [pc, #680]	; (80031b0 <main+0x4c0>)
 8002f06:	4aab      	ldr	r2, [pc, #684]	; (80031b4 <main+0x4c4>)
 8002f08:	2128      	movs	r1, #40	; 0x28
 8002f0a:	2005      	movs	r0, #5
 8002f0c:	f7ff f9a5 	bl	800225a <LCD_Font>
	_3_TomThumb_Extended, 1, YELLOW);
	LCD_Line(23, 20, 137, 20, 1, MAGENTA);
 8002f10:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 8002f14:	9301      	str	r3, [sp, #4]
 8002f16:	2301      	movs	r3, #1
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	2314      	movs	r3, #20
 8002f1c:	2289      	movs	r2, #137	; 0x89
 8002f1e:	2114      	movs	r1, #20
 8002f20:	2017      	movs	r0, #23
 8002f22:	f7fe f87e 	bl	8001022 <LCD_Line>
	LCD_Line(23, 21, 137, 21, 1, BLUE);
 8002f26:	23ff      	movs	r3, #255	; 0xff
 8002f28:	9301      	str	r3, [sp, #4]
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	2315      	movs	r3, #21
 8002f30:	2289      	movs	r2, #137	; 0x89
 8002f32:	2115      	movs	r1, #21
 8002f34:	2017      	movs	r0, #23
 8002f36:	f7fe f874 	bl	8001022 <LCD_Line>
	LCD_Line(23, 21, 137, 21, 1, BLUE);
 8002f3a:	23ff      	movs	r3, #255	; 0xff
 8002f3c:	9301      	str	r3, [sp, #4]
 8002f3e:	2301      	movs	r3, #1
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	2315      	movs	r3, #21
 8002f44:	2289      	movs	r2, #137	; 0x89
 8002f46:	2115      	movs	r1, #21
 8002f48:	2017      	movs	r0, #23
 8002f4a:	f7fe f86a 	bl	8001022 <LCD_Line>
	LCD_Font(41, 10, "DISPLAY DRIVER", _5_Org, 1, MAGENTA);
 8002f4e:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 8002f52:	9301      	str	r3, [sp, #4]
 8002f54:	2301      	movs	r3, #1
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	4b97      	ldr	r3, [pc, #604]	; (80031b8 <main+0x4c8>)
 8002f5a:	4a98      	ldr	r2, [pc, #608]	; (80031bc <main+0x4cc>)
 8002f5c:	210a      	movs	r1, #10
 8002f5e:	2029      	movs	r0, #41	; 0x29
 8002f60:	f7ff f97b 	bl	800225a <LCD_Font>
	LCD_Font(45, 35, "SERIF BOLD", _9_Serif_Bold, 1, RED);
 8002f64:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8002f68:	9301      	str	r3, [sp, #4]
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	4b94      	ldr	r3, [pc, #592]	; (80031c0 <main+0x4d0>)
 8002f70:	4a94      	ldr	r2, [pc, #592]	; (80031c4 <main+0x4d4>)
 8002f72:	2123      	movs	r1, #35	; 0x23
 8002f74:	202d      	movs	r0, #45	; 0x2d
 8002f76:	f7ff f970 	bl	800225a <LCD_Font>
	LCD_Circle(40, 90, 30, 0, 1, RED);
 8002f7a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8002f7e:	9301      	str	r3, [sp, #4]
 8002f80:	2301      	movs	r3, #1
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	2300      	movs	r3, #0
 8002f86:	221e      	movs	r2, #30
 8002f88:	215a      	movs	r1, #90	; 0x5a
 8002f8a:	2028      	movs	r0, #40	; 0x28
 8002f8c:	f7fe fc4f 	bl	800182e <LCD_Circle>
	LCD_Circle(45, 90, 20, 1, 1, BLUE);
 8002f90:	23ff      	movs	r3, #255	; 0xff
 8002f92:	9301      	str	r3, [sp, #4]
 8002f94:	2301      	movs	r3, #1
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	2301      	movs	r3, #1
 8002f9a:	2214      	movs	r2, #20
 8002f9c:	215a      	movs	r1, #90	; 0x5a
 8002f9e:	202d      	movs	r0, #45	; 0x2d
 8002fa0:	f7fe fc45 	bl	800182e <LCD_Circle>
	LCD_Triangle_Fill(5, 5, 5, 20, 25, 25, BLUE);
 8002fa4:	23ff      	movs	r3, #255	; 0xff
 8002fa6:	9302      	str	r3, [sp, #8]
 8002fa8:	2319      	movs	r3, #25
 8002faa:	9301      	str	r3, [sp, #4]
 8002fac:	2319      	movs	r3, #25
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	2314      	movs	r3, #20
 8002fb2:	2205      	movs	r2, #5
 8002fb4:	2105      	movs	r1, #5
 8002fb6:	2005      	movs	r0, #5
 8002fb8:	f7fe f931 	bl	800121e <LCD_Triangle_Fill>
	LCD_Triangle(5, 5, 5, 20, 25, 25, 1, RED);
 8002fbc:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8002fc0:	9303      	str	r3, [sp, #12]
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	9302      	str	r3, [sp, #8]
 8002fc6:	2319      	movs	r3, #25
 8002fc8:	9301      	str	r3, [sp, #4]
 8002fca:	2319      	movs	r3, #25
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	2314      	movs	r3, #20
 8002fd0:	2205      	movs	r2, #5
 8002fd2:	2105      	movs	r1, #5
 8002fd4:	2005      	movs	r0, #5
 8002fd6:	f7fe f8eb 	bl	80011b0 <LCD_Triangle>
	LCD_Rect(60, 45, 30, 20, 2, GREEN);
 8002fda:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002fde:	9301      	str	r3, [sp, #4]
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	2314      	movs	r3, #20
 8002fe6:	221e      	movs	r2, #30
 8002fe8:	212d      	movs	r1, #45	; 0x2d
 8002fea:	203c      	movs	r0, #60	; 0x3c
 8002fec:	f7fe f887 	bl	80010fe <LCD_Rect>
	LCD_Rect_Round(80, 70, 60, 25, 10, 3, WHITE);
 8002ff0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002ff4:	9302      	str	r3, [sp, #8]
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	9301      	str	r3, [sp, #4]
 8002ffa:	230a      	movs	r3, #10
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	2319      	movs	r3, #25
 8003000:	223c      	movs	r2, #60	; 0x3c
 8003002:	2146      	movs	r1, #70	; 0x46
 8003004:	2050      	movs	r0, #80	; 0x50
 8003006:	f7fe fe2d 	bl	8001c64 <LCD_Rect_Round>
	LCD_Rect_Round_Fill(80, 100, 60, 25, 10, WHITE);
 800300a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800300e:	9301      	str	r3, [sp, #4]
 8003010:	230a      	movs	r3, #10
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	2319      	movs	r3, #25
 8003016:	223c      	movs	r2, #60	; 0x3c
 8003018:	2164      	movs	r1, #100	; 0x64
 800301a:	2050      	movs	r0, #80	; 0x50
 800301c:	f7ff f805 	bl	800202a <LCD_Rect_Round_Fill>
	LCD_Ellipse(60, 100, 30, 20, 0, 2, YELLOW);
 8003020:	4b62      	ldr	r3, [pc, #392]	; (80031ac <main+0x4bc>)
 8003022:	9302      	str	r3, [sp, #8]
 8003024:	2302      	movs	r3, #2
 8003026:	9301      	str	r3, [sp, #4]
 8003028:	2300      	movs	r3, #0
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	2314      	movs	r3, #20
 800302e:	221e      	movs	r2, #30
 8003030:	2164      	movs	r1, #100	; 0x64
 8003032:	203c      	movs	r0, #60	; 0x3c
 8003034:	f7fe f9b6 	bl	80013a4 <LCD_Ellipse>
	LCD_Ellipse(125, 60, 25, 15, 1, 1, YELLOW);
 8003038:	4b5c      	ldr	r3, [pc, #368]	; (80031ac <main+0x4bc>)
 800303a:	9302      	str	r3, [sp, #8]
 800303c:	2301      	movs	r3, #1
 800303e:	9301      	str	r3, [sp, #4]
 8003040:	2301      	movs	r3, #1
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	230f      	movs	r3, #15
 8003046:	2219      	movs	r2, #25
 8003048:	213c      	movs	r1, #60	; 0x3c
 800304a:	207d      	movs	r0, #125	; 0x7d
 800304c:	f7fe f9aa 	bl	80013a4 <LCD_Ellipse>
	LCD_Font(0, 200, "1234567890", _32_Segment_7_Num_Plus, 1, RED);
 8003050:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8003054:	9301      	str	r3, [sp, #4]
 8003056:	2301      	movs	r3, #1
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	4b5b      	ldr	r3, [pc, #364]	; (80031c8 <main+0x4d8>)
 800305c:	4a5b      	ldr	r2, [pc, #364]	; (80031cc <main+0x4dc>)
 800305e:	21c8      	movs	r1, #200	; 0xc8
 8003060:	2000      	movs	r0, #0
 8003062:	f7ff f8fa 	bl	800225a <LCD_Font>
	LCD_Font(10, 220, "1234567890 Default Font", _8_Default, 1, RED);
 8003066:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 800306a:	9301      	str	r3, [sp, #4]
 800306c:	2301      	movs	r3, #1
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	4b57      	ldr	r3, [pc, #348]	; (80031d0 <main+0x4e0>)
 8003072:	4a58      	ldr	r2, [pc, #352]	; (80031d4 <main+0x4e4>)
 8003074:	21dc      	movs	r1, #220	; 0xdc
 8003076:	200a      	movs	r0, #10
 8003078:	f7ff f8ef 	bl	800225a <LCD_Font>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800307c:	2201      	movs	r2, #1
 800307e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003082:	4855      	ldr	r0, [pc, #340]	; (80031d8 <main+0x4e8>)
 8003084:	f001 fe6e 	bl	8004d64 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET))
 8003088:	2108      	movs	r1, #8
 800308a:	4854      	ldr	r0, [pc, #336]	; (80031dc <main+0x4ec>)
 800308c:	f001 fe52 	bl	8004d34 <HAL_GPIO_ReadPin>
 8003090:	4603      	mov	r3, r0
 8003092:	2b01      	cmp	r3, #1
 8003094:	d102      	bne.n	800309c <main+0x3ac>
			touchIRQ = 1;
 8003096:	4b52      	ldr	r3, [pc, #328]	; (80031e0 <main+0x4f0>)
 8003098:	2201      	movs	r2, #1
 800309a:	701a      	strb	r2, [r3, #0]

		touchIRQ = 1;
 800309c:	4b50      	ldr	r3, [pc, #320]	; (80031e0 <main+0x4f0>)
 800309e:	2201      	movs	r2, #1
 80030a0:	701a      	strb	r2, [r3, #0]

		if (touchIRQ) {
 80030a2:	4b4f      	ldr	r3, [pc, #316]	; (80031e0 <main+0x4f0>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d037      	beq.n	800311a <main+0x42a>
			touchX = getX();
 80030aa:	f000 ff49 	bl	8003f40 <getX>
 80030ae:	4603      	mov	r3, r0
 80030b0:	461a      	mov	r2, r3
 80030b2:	4b4c      	ldr	r3, [pc, #304]	; (80031e4 <main+0x4f4>)
 80030b4:	801a      	strh	r2, [r3, #0]
			touchY = getY();
 80030b6:	f000 ff5d 	bl	8003f74 <getY>
 80030ba:	4603      	mov	r3, r0
 80030bc:	461a      	mov	r2, r3
 80030be:	4b4a      	ldr	r3, [pc, #296]	; (80031e8 <main+0x4f8>)
 80030c0:	801a      	strh	r2, [r3, #0]
			if (touchX && touchY && touchY != 0x0DB) {
 80030c2:	4b48      	ldr	r3, [pc, #288]	; (80031e4 <main+0x4f4>)
 80030c4:	881b      	ldrh	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d018      	beq.n	80030fc <main+0x40c>
 80030ca:	4b47      	ldr	r3, [pc, #284]	; (80031e8 <main+0x4f8>)
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d014      	beq.n	80030fc <main+0x40c>
 80030d2:	4b45      	ldr	r3, [pc, #276]	; (80031e8 <main+0x4f8>)
 80030d4:	881b      	ldrh	r3, [r3, #0]
 80030d6:	2bdb      	cmp	r3, #219	; 0xdb
 80030d8:	d010      	beq.n	80030fc <main+0x40c>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80030da:	2200      	movs	r2, #0
 80030dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030e0:	483d      	ldr	r0, [pc, #244]	; (80031d8 <main+0x4e8>)
 80030e2:	f001 fe3f 	bl	8004d64 <HAL_GPIO_WritePin>
				LCD_Rect_Fill(touchX, touchY, 1, 1, WHITE);
 80030e6:	4b3f      	ldr	r3, [pc, #252]	; (80031e4 <main+0x4f4>)
 80030e8:	8818      	ldrh	r0, [r3, #0]
 80030ea:	4b3f      	ldr	r3, [pc, #252]	; (80031e8 <main+0x4f8>)
 80030ec:	8819      	ldrh	r1, [r3, #0]
 80030ee:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	2301      	movs	r3, #1
 80030f6:	2201      	movs	r2, #1
 80030f8:	f7fd ff5a 	bl	8000fb0 <LCD_Rect_Fill>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80030fc:	2201      	movs	r2, #1
 80030fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003102:	4835      	ldr	r0, [pc, #212]	; (80031d8 <main+0x4e8>)
 8003104:	f001 fe2e 	bl	8004d64 <HAL_GPIO_WritePin>
			touchX = 0;
 8003108:	4b36      	ldr	r3, [pc, #216]	; (80031e4 <main+0x4f4>)
 800310a:	2200      	movs	r2, #0
 800310c:	801a      	strh	r2, [r3, #0]
			touchY = 0;
 800310e:	4b36      	ldr	r3, [pc, #216]	; (80031e8 <main+0x4f8>)
 8003110:	2200      	movs	r2, #0
 8003112:	801a      	strh	r2, [r3, #0]
			touchIRQ = 0;
 8003114:	4b32      	ldr	r3, [pc, #200]	; (80031e0 <main+0x4f0>)
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]
		}

		millis = HAL_GetTick();
 800311a:	f000 ffd5 	bl	80040c8 <HAL_GetTick>
 800311e:	4603      	mov	r3, r0
 8003120:	2200      	movs	r2, #0
 8003122:	469a      	mov	sl, r3
 8003124:	4693      	mov	fp, r2
 8003126:	4b31      	ldr	r3, [pc, #196]	; (80031ec <main+0x4fc>)
 8003128:	e9c3 ab00 	strd	sl, fp, [r3]
		if (millis_last + delay < millis) {
 800312c:	4b30      	ldr	r3, [pc, #192]	; (80031f0 <main+0x500>)
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	b29b      	uxth	r3, r3
 8003132:	2200      	movs	r2, #0
 8003134:	4698      	mov	r8, r3
 8003136:	4691      	mov	r9, r2
 8003138:	4b2e      	ldr	r3, [pc, #184]	; (80031f4 <main+0x504>)
 800313a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313e:	eb18 0402 	adds.w	r4, r8, r2
 8003142:	eb49 0503 	adc.w	r5, r9, r3
 8003146:	4b29      	ldr	r3, [pc, #164]	; (80031ec <main+0x4fc>)
 8003148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314c:	4294      	cmp	r4, r2
 800314e:	eb75 0303 	sbcs.w	r3, r5, r3
 8003152:	da0b      	bge.n	800316c <main+0x47c>
			millis_last = millis;
 8003154:	4b25      	ldr	r3, [pc, #148]	; (80031ec <main+0x4fc>)
 8003156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315a:	4926      	ldr	r1, [pc, #152]	; (80031f4 <main+0x504>)
 800315c:	e9c1 2300 	strd	r2, r3, [r1]
			rainbow(1, 600, 8);
 8003160:	2208      	movs	r2, #8
 8003162:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003166:	2001      	movs	r0, #1
 8003168:	f7ff fd2a 	bl	8002bc0 <rainbow>
		}

		if (ir_decode(&results)) {
 800316c:	4822      	ldr	r0, [pc, #136]	; (80031f8 <main+0x508>)
 800316e:	f7ff fa8d 	bl	800268c <ir_decode>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d087      	beq.n	8003088 <main+0x398>
			snprintf(trans_str, 64, "Code: HEX %p DEC %lu\r\n",
					(void*) results.value, results.value);
 8003178:	4b1f      	ldr	r3, [pc, #124]	; (80031f8 <main+0x508>)
 800317a:	681b      	ldr	r3, [r3, #0]
			snprintf(trans_str, 64, "Code: HEX %p DEC %lu\r\n",
 800317c:	461a      	mov	r2, r3
 800317e:	4b1e      	ldr	r3, [pc, #120]	; (80031f8 <main+0x508>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4638      	mov	r0, r7
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	4613      	mov	r3, r2
 8003188:	4a1c      	ldr	r2, [pc, #112]	; (80031fc <main+0x50c>)
 800318a:	2140      	movs	r1, #64	; 0x40
 800318c:	f004 fc8a 	bl	8007aa4 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) trans_str, strlen(trans_str),
 8003190:	463b      	mov	r3, r7
 8003192:	4618      	mov	r0, r3
 8003194:	f7fd f824 	bl	80001e0 <strlen>
 8003198:	4603      	mov	r3, r0
 800319a:	b29a      	uxth	r2, r3
 800319c:	4639      	mov	r1, r7
 800319e:	2364      	movs	r3, #100	; 0x64
 80031a0:	4817      	ldr	r0, [pc, #92]	; (8003200 <main+0x510>)
 80031a2:	f004 f8ca 	bl	800733a <HAL_UART_Transmit>
					100);
			HAL_Delay(50);
 80031a6:	2032      	movs	r0, #50	; 0x32
 80031a8:	e02c      	b.n	8003204 <main+0x514>
 80031aa:	bf00      	nop
 80031ac:	00ffff00 	.word	0x00ffff00
 80031b0:	08008934 	.word	0x08008934
 80031b4:	08008418 	.word	0x08008418
 80031b8:	08008d48 	.word	0x08008d48
 80031bc:	0800843c 	.word	0x0800843c
 80031c0:	0800997c 	.word	0x0800997c
 80031c4:	0800844c 	.word	0x0800844c
 80031c8:	08009f64 	.word	0x08009f64
 80031cc:	08008458 	.word	0x08008458
 80031d0:	080091ec 	.word	0x080091ec
 80031d4:	08008464 	.word	0x08008464
 80031d8:	40020800 	.word	0x40020800
 80031dc:	40020000 	.word	0x40020000
 80031e0:	200008d4 	.word	0x200008d4
 80031e4:	200008d6 	.word	0x200008d6
 80031e8:	200008d8 	.word	0x200008d8
 80031ec:	200008f0 	.word	0x200008f0
 80031f0:	20000010 	.word	0x20000010
 80031f4:	200008f8 	.word	0x200008f8
 80031f8:	200008dc 	.word	0x200008dc
 80031fc:	0800847c 	.word	0x0800847c
 8003200:	20000890 	.word	0x20000890
 8003204:	f000 ff6c 	bl	80040e0 <HAL_Delay>
			ir_resume();
 8003208:	f7ff fa84 	bl	8002714 <ir_resume>

			if (results.value == 0xb3d4b87f) { // Button: "[BR+]"
 800320c:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <main+0x5b0>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a24      	ldr	r2, [pc, #144]	; (80032a4 <main+0x5b4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d11c      	bne.n	8003250 <main+0x560>
				brigh += 0.00392156862745098;
 8003216:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <main+0x5b8>)
 8003218:	e9d3 0100 	ldrd	r0, r1, [r3]
 800321c:	a31e      	add	r3, pc, #120	; (adr r3, 8003298 <main+0x5a8>)
 800321e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003222:	f7fd f83b 	bl	800029c <__adddf3>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	491f      	ldr	r1, [pc, #124]	; (80032a8 <main+0x5b8>)
 800322c:	e9c1 2300 	strd	r2, r3, [r1]
				remake_palette(brigh, satur);
 8003230:	4b1d      	ldr	r3, [pc, #116]	; (80032a8 <main+0x5b8>)
 8003232:	ed93 7b00 	vldr	d7, [r3]
 8003236:	4b1d      	ldr	r3, [pc, #116]	; (80032ac <main+0x5bc>)
 8003238:	ed93 6b00 	vldr	d6, [r3]
 800323c:	eeb0 1a46 	vmov.f32	s2, s12
 8003240:	eef0 1a66 	vmov.f32	s3, s13
 8003244:	eeb0 0a47 	vmov.f32	s0, s14
 8003248:	eef0 0a67 	vmov.f32	s1, s15
 800324c:	f7ff fc70 	bl	8002b30 <remake_palette>
			}

			if (results.value == 0x44490a7b) { // Button: "[BR-]"
 8003250:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <main+0x5b0>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a16      	ldr	r2, [pc, #88]	; (80032b0 <main+0x5c0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	f47f af16 	bne.w	8003088 <main+0x398>
				brigh -= 0.00392156862745098;
 800325c:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <main+0x5b8>)
 800325e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003262:	a30d      	add	r3, pc, #52	; (adr r3, 8003298 <main+0x5a8>)
 8003264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003268:	f7fd f816 	bl	8000298 <__aeabi_dsub>
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	490d      	ldr	r1, [pc, #52]	; (80032a8 <main+0x5b8>)
 8003272:	e9c1 2300 	strd	r2, r3, [r1]
				remake_palette(brigh, satur);
 8003276:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <main+0x5b8>)
 8003278:	ed93 7b00 	vldr	d7, [r3]
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <main+0x5bc>)
 800327e:	ed93 6b00 	vldr	d6, [r3]
 8003282:	eeb0 1a46 	vmov.f32	s2, s12
 8003286:	eef0 1a66 	vmov.f32	s3, s13
 800328a:	eeb0 0a47 	vmov.f32	s0, s14
 800328e:	eef0 0a67 	vmov.f32	s1, s15
 8003292:	f7ff fc4d 	bl	8002b30 <remake_palette>
		if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET))
 8003296:	e6f7      	b.n	8003088 <main+0x398>
 8003298:	10101010 	.word	0x10101010
 800329c:	3f701010 	.word	0x3f701010
 80032a0:	200008dc 	.word	0x200008dc
 80032a4:	b3d4b87f 	.word	0xb3d4b87f
 80032a8:	20000008 	.word	0x20000008
 80032ac:	20000000 	.word	0x20000000
 80032b0:	44490a7b 	.word	0x44490a7b

080032b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b094      	sub	sp, #80	; 0x50
 80032b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032ba:	f107 0320 	add.w	r3, r7, #32
 80032be:	2230      	movs	r2, #48	; 0x30
 80032c0:	2100      	movs	r1, #0
 80032c2:	4618      	mov	r0, r3
 80032c4:	f004 fbe6 	bl	8007a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032c8:	f107 030c 	add.w	r3, r7, #12
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032d8:	2300      	movs	r3, #0
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	4b28      	ldr	r3, [pc, #160]	; (8003380 <SystemClock_Config+0xcc>)
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	4a27      	ldr	r2, [pc, #156]	; (8003380 <SystemClock_Config+0xcc>)
 80032e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e6:	6413      	str	r3, [r2, #64]	; 0x40
 80032e8:	4b25      	ldr	r3, [pc, #148]	; (8003380 <SystemClock_Config+0xcc>)
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80032f4:	2300      	movs	r3, #0
 80032f6:	607b      	str	r3, [r7, #4]
 80032f8:	4b22      	ldr	r3, [pc, #136]	; (8003384 <SystemClock_Config+0xd0>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003300:	4a20      	ldr	r2, [pc, #128]	; (8003384 <SystemClock_Config+0xd0>)
 8003302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003306:	6013      	str	r3, [r2, #0]
 8003308:	4b1e      	ldr	r3, [pc, #120]	; (8003384 <SystemClock_Config+0xd0>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003310:	607b      	str	r3, [r7, #4]
 8003312:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003314:	2302      	movs	r3, #2
 8003316:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003318:	2301      	movs	r3, #1
 800331a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800331c:	2310      	movs	r3, #16
 800331e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003320:	2302      	movs	r3, #2
 8003322:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003324:	2300      	movs	r3, #0
 8003326:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003328:	2308      	movs	r3, #8
 800332a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800332c:	2354      	movs	r3, #84	; 0x54
 800332e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003330:	2302      	movs	r3, #2
 8003332:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003334:	2304      	movs	r3, #4
 8003336:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003338:	f107 0320 	add.w	r3, r7, #32
 800333c:	4618      	mov	r0, r3
 800333e:	f001 fd2b 	bl	8004d98 <HAL_RCC_OscConfig>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003348:	f000 fa3c 	bl	80037c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800334c:	230f      	movs	r3, #15
 800334e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003350:	2302      	movs	r3, #2
 8003352:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800335c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800335e:	2300      	movs	r3, #0
 8003360:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003362:	f107 030c 	add.w	r3, r7, #12
 8003366:	2102      	movs	r1, #2
 8003368:	4618      	mov	r0, r3
 800336a:	f001 ff8d 	bl	8005288 <HAL_RCC_ClockConfig>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003374:	f000 fa26 	bl	80037c4 <Error_Handler>
  }
}
 8003378:	bf00      	nop
 800337a:	3750      	adds	r7, #80	; 0x50
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40023800 	.word	0x40023800
 8003384:	40007000 	.word	0x40007000

08003388 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800338c:	4b17      	ldr	r3, [pc, #92]	; (80033ec <MX_SPI1_Init+0x64>)
 800338e:	4a18      	ldr	r2, [pc, #96]	; (80033f0 <MX_SPI1_Init+0x68>)
 8003390:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003392:	4b16      	ldr	r3, [pc, #88]	; (80033ec <MX_SPI1_Init+0x64>)
 8003394:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003398:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800339a:	4b14      	ldr	r3, [pc, #80]	; (80033ec <MX_SPI1_Init+0x64>)
 800339c:	2200      	movs	r2, #0
 800339e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80033a0:	4b12      	ldr	r3, [pc, #72]	; (80033ec <MX_SPI1_Init+0x64>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033a6:	4b11      	ldr	r3, [pc, #68]	; (80033ec <MX_SPI1_Init+0x64>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033ac:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <MX_SPI1_Init+0x64>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80033b2:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <MX_SPI1_Init+0x64>)
 80033b4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80033b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80033ba:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <MX_SPI1_Init+0x64>)
 80033bc:	2238      	movs	r2, #56	; 0x38
 80033be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033c0:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <MX_SPI1_Init+0x64>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80033c6:	4b09      	ldr	r3, [pc, #36]	; (80033ec <MX_SPI1_Init+0x64>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033cc:	4b07      	ldr	r3, [pc, #28]	; (80033ec <MX_SPI1_Init+0x64>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80033d2:	4b06      	ldr	r3, [pc, #24]	; (80033ec <MX_SPI1_Init+0x64>)
 80033d4:	220a      	movs	r2, #10
 80033d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80033d8:	4804      	ldr	r0, [pc, #16]	; (80033ec <MX_SPI1_Init+0x64>)
 80033da:	f002 f935 	bl	8005648 <HAL_SPI_Init>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80033e4:	f000 f9ee 	bl	80037c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80033e8:	bf00      	nop
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	200006f0 	.word	0x200006f0
 80033f0:	40013000 	.word	0x40013000

080033f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80033f8:	4b17      	ldr	r3, [pc, #92]	; (8003458 <MX_SPI2_Init+0x64>)
 80033fa:	4a18      	ldr	r2, [pc, #96]	; (800345c <MX_SPI2_Init+0x68>)
 80033fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80033fe:	4b16      	ldr	r3, [pc, #88]	; (8003458 <MX_SPI2_Init+0x64>)
 8003400:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003404:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003406:	4b14      	ldr	r3, [pc, #80]	; (8003458 <MX_SPI2_Init+0x64>)
 8003408:	2200      	movs	r2, #0
 800340a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800340c:	4b12      	ldr	r3, [pc, #72]	; (8003458 <MX_SPI2_Init+0x64>)
 800340e:	2200      	movs	r2, #0
 8003410:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003412:	4b11      	ldr	r3, [pc, #68]	; (8003458 <MX_SPI2_Init+0x64>)
 8003414:	2200      	movs	r2, #0
 8003416:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003418:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <MX_SPI2_Init+0x64>)
 800341a:	2200      	movs	r2, #0
 800341c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800341e:	4b0e      	ldr	r3, [pc, #56]	; (8003458 <MX_SPI2_Init+0x64>)
 8003420:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003424:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003426:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <MX_SPI2_Init+0x64>)
 8003428:	2200      	movs	r2, #0
 800342a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800342c:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <MX_SPI2_Init+0x64>)
 800342e:	2200      	movs	r2, #0
 8003430:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003432:	4b09      	ldr	r3, [pc, #36]	; (8003458 <MX_SPI2_Init+0x64>)
 8003434:	2200      	movs	r2, #0
 8003436:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003438:	4b07      	ldr	r3, [pc, #28]	; (8003458 <MX_SPI2_Init+0x64>)
 800343a:	2200      	movs	r2, #0
 800343c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800343e:	4b06      	ldr	r3, [pc, #24]	; (8003458 <MX_SPI2_Init+0x64>)
 8003440:	220a      	movs	r2, #10
 8003442:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003444:	4804      	ldr	r0, [pc, #16]	; (8003458 <MX_SPI2_Init+0x64>)
 8003446:	f002 f8ff 	bl	8005648 <HAL_SPI_Init>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003450:	f000 f9b8 	bl	80037c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003454:	bf00      	nop
 8003456:	bd80      	pop	{r7, pc}
 8003458:	20000748 	.word	0x20000748
 800345c:	40003800 	.word	0x40003800

08003460 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b096      	sub	sp, #88	; 0x58
 8003464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003466:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	605a      	str	r2, [r3, #4]
 8003470:	609a      	str	r2, [r3, #8]
 8003472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003474:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800347e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	605a      	str	r2, [r3, #4]
 8003488:	609a      	str	r2, [r3, #8]
 800348a:	60da      	str	r2, [r3, #12]
 800348c:	611a      	str	r2, [r3, #16]
 800348e:	615a      	str	r2, [r3, #20]
 8003490:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003492:	1d3b      	adds	r3, r7, #4
 8003494:	2220      	movs	r2, #32
 8003496:	2100      	movs	r1, #0
 8003498:	4618      	mov	r0, r3
 800349a:	f004 fafb 	bl	8007a94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800349e:	4b3e      	ldr	r3, [pc, #248]	; (8003598 <MX_TIM1_Init+0x138>)
 80034a0:	4a3e      	ldr	r2, [pc, #248]	; (800359c <MX_TIM1_Init+0x13c>)
 80034a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80034a4:	4b3c      	ldr	r3, [pc, #240]	; (8003598 <MX_TIM1_Init+0x138>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034aa:	4b3b      	ldr	r3, [pc, #236]	; (8003598 <MX_TIM1_Init+0x138>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 104;
 80034b0:	4b39      	ldr	r3, [pc, #228]	; (8003598 <MX_TIM1_Init+0x138>)
 80034b2:	2268      	movs	r2, #104	; 0x68
 80034b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034b6:	4b38      	ldr	r3, [pc, #224]	; (8003598 <MX_TIM1_Init+0x138>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80034bc:	4b36      	ldr	r3, [pc, #216]	; (8003598 <MX_TIM1_Init+0x138>)
 80034be:	2200      	movs	r2, #0
 80034c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034c2:	4b35      	ldr	r3, [pc, #212]	; (8003598 <MX_TIM1_Init+0x138>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80034c8:	4833      	ldr	r0, [pc, #204]	; (8003598 <MX_TIM1_Init+0x138>)
 80034ca:	f002 fcef 	bl	8005eac <HAL_TIM_Base_Init>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80034d4:	f000 f976 	bl	80037c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034dc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80034de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034e2:	4619      	mov	r1, r3
 80034e4:	482c      	ldr	r0, [pc, #176]	; (8003598 <MX_TIM1_Init+0x138>)
 80034e6:	f003 f967 	bl	80067b8 <HAL_TIM_ConfigClockSource>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80034f0:	f000 f968 	bl	80037c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80034f4:	4828      	ldr	r0, [pc, #160]	; (8003598 <MX_TIM1_Init+0x138>)
 80034f6:	f002 fd8b 	bl	8006010 <HAL_TIM_PWM_Init>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003500:	f000 f960 	bl	80037c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003504:	2300      	movs	r3, #0
 8003506:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003508:	2300      	movs	r3, #0
 800350a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800350c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003510:	4619      	mov	r1, r3
 8003512:	4821      	ldr	r0, [pc, #132]	; (8003598 <MX_TIM1_Init+0x138>)
 8003514:	f003 fdf0 	bl	80070f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800351e:	f000 f951 	bl	80037c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003522:	2360      	movs	r3, #96	; 0x60
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003526:	2300      	movs	r3, #0
 8003528:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800352a:	2300      	movs	r3, #0
 800352c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800352e:	2300      	movs	r3, #0
 8003530:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003532:	2300      	movs	r3, #0
 8003534:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003536:	2300      	movs	r3, #0
 8003538:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800353a:	2300      	movs	r3, #0
 800353c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800353e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003542:	2200      	movs	r2, #0
 8003544:	4619      	mov	r1, r3
 8003546:	4814      	ldr	r0, [pc, #80]	; (8003598 <MX_TIM1_Init+0x138>)
 8003548:	f003 f874 	bl	8006634 <HAL_TIM_PWM_ConfigChannel>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8003552:	f000 f937 	bl	80037c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003556:	2300      	movs	r3, #0
 8003558:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800355a:	2300      	movs	r3, #0
 800355c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003562:	2300      	movs	r3, #0
 8003564:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003566:	2300      	movs	r3, #0
 8003568:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800356a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800356e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003570:	2300      	movs	r3, #0
 8003572:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003574:	1d3b      	adds	r3, r7, #4
 8003576:	4619      	mov	r1, r3
 8003578:	4807      	ldr	r0, [pc, #28]	; (8003598 <MX_TIM1_Init+0x138>)
 800357a:	f003 fe2b 	bl	80071d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003584:	f000 f91e 	bl	80037c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003588:	4803      	ldr	r0, [pc, #12]	; (8003598 <MX_TIM1_Init+0x138>)
 800358a:	f000 fa39 	bl	8003a00 <HAL_TIM_MspPostInit>

}
 800358e:	bf00      	nop
 8003590:	3758      	adds	r7, #88	; 0x58
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	200007a0 	.word	0x200007a0
 800359c:	40010000 	.word	0x40010000

080035a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035a6:	f107 0308 	add.w	r3, r7, #8
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	605a      	str	r2, [r3, #4]
 80035b0:	609a      	str	r2, [r3, #8]
 80035b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035b4:	463b      	mov	r3, r7
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80035bc:	4b1c      	ldr	r3, [pc, #112]	; (8003630 <MX_TIM4_Init+0x90>)
 80035be:	4a1d      	ldr	r2, [pc, #116]	; (8003634 <MX_TIM4_Init+0x94>)
 80035c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80035c2:	4b1b      	ldr	r3, [pc, #108]	; (8003630 <MX_TIM4_Init+0x90>)
 80035c4:	2253      	movs	r2, #83	; 0x53
 80035c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035c8:	4b19      	ldr	r3, [pc, #100]	; (8003630 <MX_TIM4_Init+0x90>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49;
 80035ce:	4b18      	ldr	r3, [pc, #96]	; (8003630 <MX_TIM4_Init+0x90>)
 80035d0:	2231      	movs	r2, #49	; 0x31
 80035d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035d4:	4b16      	ldr	r3, [pc, #88]	; (8003630 <MX_TIM4_Init+0x90>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035da:	4b15      	ldr	r3, [pc, #84]	; (8003630 <MX_TIM4_Init+0x90>)
 80035dc:	2200      	movs	r2, #0
 80035de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80035e0:	4813      	ldr	r0, [pc, #76]	; (8003630 <MX_TIM4_Init+0x90>)
 80035e2:	f002 fc63 	bl	8005eac <HAL_TIM_Base_Init>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 80035ec:	f000 f8ea 	bl	80037c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80035f6:	f107 0308 	add.w	r3, r7, #8
 80035fa:	4619      	mov	r1, r3
 80035fc:	480c      	ldr	r0, [pc, #48]	; (8003630 <MX_TIM4_Init+0x90>)
 80035fe:	f003 f8db 	bl	80067b8 <HAL_TIM_ConfigClockSource>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8003608:	f000 f8dc 	bl	80037c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800360c:	2300      	movs	r3, #0
 800360e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003610:	2300      	movs	r3, #0
 8003612:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003614:	463b      	mov	r3, r7
 8003616:	4619      	mov	r1, r3
 8003618:	4805      	ldr	r0, [pc, #20]	; (8003630 <MX_TIM4_Init+0x90>)
 800361a:	f003 fd6d 	bl	80070f8 <HAL_TIMEx_MasterConfigSynchronization>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8003624:	f000 f8ce 	bl	80037c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003628:	bf00      	nop
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	200007e8 	.word	0x200007e8
 8003634:	40000800 	.word	0x40000800

08003638 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800363c:	4b11      	ldr	r3, [pc, #68]	; (8003684 <MX_USART1_UART_Init+0x4c>)
 800363e:	4a12      	ldr	r2, [pc, #72]	; (8003688 <MX_USART1_UART_Init+0x50>)
 8003640:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003642:	4b10      	ldr	r3, [pc, #64]	; (8003684 <MX_USART1_UART_Init+0x4c>)
 8003644:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003648:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800364a:	4b0e      	ldr	r3, [pc, #56]	; (8003684 <MX_USART1_UART_Init+0x4c>)
 800364c:	2200      	movs	r2, #0
 800364e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003650:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <MX_USART1_UART_Init+0x4c>)
 8003652:	2200      	movs	r2, #0
 8003654:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003656:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <MX_USART1_UART_Init+0x4c>)
 8003658:	2200      	movs	r2, #0
 800365a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800365c:	4b09      	ldr	r3, [pc, #36]	; (8003684 <MX_USART1_UART_Init+0x4c>)
 800365e:	220c      	movs	r2, #12
 8003660:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003662:	4b08      	ldr	r3, [pc, #32]	; (8003684 <MX_USART1_UART_Init+0x4c>)
 8003664:	2200      	movs	r2, #0
 8003666:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003668:	4b06      	ldr	r3, [pc, #24]	; (8003684 <MX_USART1_UART_Init+0x4c>)
 800366a:	2200      	movs	r2, #0
 800366c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800366e:	4805      	ldr	r0, [pc, #20]	; (8003684 <MX_USART1_UART_Init+0x4c>)
 8003670:	f003 fe16 	bl	80072a0 <HAL_UART_Init>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800367a:	f000 f8a3 	bl	80037c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800367e:	bf00      	nop
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	20000890 	.word	0x20000890
 8003688:	40011000 	.word	0x40011000

0800368c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	607b      	str	r3, [r7, #4]
 8003696:	4b0c      	ldr	r3, [pc, #48]	; (80036c8 <MX_DMA_Init+0x3c>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	4a0b      	ldr	r2, [pc, #44]	; (80036c8 <MX_DMA_Init+0x3c>)
 800369c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036a0:	6313      	str	r3, [r2, #48]	; 0x30
 80036a2:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <MX_DMA_Init+0x3c>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036aa:	607b      	str	r3, [r7, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80036ae:	2200      	movs	r2, #0
 80036b0:	2100      	movs	r1, #0
 80036b2:	2039      	movs	r0, #57	; 0x39
 80036b4:	f000 fe13 	bl	80042de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80036b8:	2039      	movs	r0, #57	; 0x39
 80036ba:	f000 fe2c 	bl	8004316 <HAL_NVIC_EnableIRQ>

}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40023800 	.word	0x40023800

080036cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08a      	sub	sp, #40	; 0x28
 80036d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d2:	f107 0314 	add.w	r3, r7, #20
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	605a      	str	r2, [r3, #4]
 80036dc:	609a      	str	r2, [r3, #8]
 80036de:	60da      	str	r2, [r3, #12]
 80036e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036e2:	2300      	movs	r3, #0
 80036e4:	613b      	str	r3, [r7, #16]
 80036e6:	4b33      	ldr	r3, [pc, #204]	; (80037b4 <MX_GPIO_Init+0xe8>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	4a32      	ldr	r2, [pc, #200]	; (80037b4 <MX_GPIO_Init+0xe8>)
 80036ec:	f043 0304 	orr.w	r3, r3, #4
 80036f0:	6313      	str	r3, [r2, #48]	; 0x30
 80036f2:	4b30      	ldr	r3, [pc, #192]	; (80037b4 <MX_GPIO_Init+0xe8>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	4b2c      	ldr	r3, [pc, #176]	; (80037b4 <MX_GPIO_Init+0xe8>)
 8003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003706:	4a2b      	ldr	r2, [pc, #172]	; (80037b4 <MX_GPIO_Init+0xe8>)
 8003708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800370c:	6313      	str	r3, [r2, #48]	; 0x30
 800370e:	4b29      	ldr	r3, [pc, #164]	; (80037b4 <MX_GPIO_Init+0xe8>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	4b25      	ldr	r3, [pc, #148]	; (80037b4 <MX_GPIO_Init+0xe8>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	4a24      	ldr	r2, [pc, #144]	; (80037b4 <MX_GPIO_Init+0xe8>)
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	6313      	str	r3, [r2, #48]	; 0x30
 800372a:	4b22      	ldr	r3, [pc, #136]	; (80037b4 <MX_GPIO_Init+0xe8>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	60bb      	str	r3, [r7, #8]
 8003734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	607b      	str	r3, [r7, #4]
 800373a:	4b1e      	ldr	r3, [pc, #120]	; (80037b4 <MX_GPIO_Init+0xe8>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	4a1d      	ldr	r2, [pc, #116]	; (80037b4 <MX_GPIO_Init+0xe8>)
 8003740:	f043 0302 	orr.w	r3, r3, #2
 8003744:	6313      	str	r3, [r2, #48]	; 0x30
 8003746:	4b1b      	ldr	r3, [pc, #108]	; (80037b4 <MX_GPIO_Init+0xe8>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	607b      	str	r3, [r7, #4]
 8003750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8003752:	2200      	movs	r2, #0
 8003754:	2102      	movs	r1, #2
 8003756:	4818      	ldr	r0, [pc, #96]	; (80037b8 <MX_GPIO_Init+0xec>)
 8003758:	f001 fb04 	bl	8004d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IR_REC_Pin */
  GPIO_InitStruct.Pin = IR_REC_Pin;
 800375c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003762:	2300      	movs	r3, #0
 8003764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003766:	2300      	movs	r3, #0
 8003768:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR_REC_GPIO_Port, &GPIO_InitStruct);
 800376a:	f107 0314 	add.w	r3, r7, #20
 800376e:	4619      	mov	r1, r3
 8003770:	4812      	ldr	r0, [pc, #72]	; (80037bc <MX_GPIO_Init+0xf0>)
 8003772:	f001 f95b 	bl	8004a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8003776:	2308      	movs	r3, #8
 8003778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800377a:	2300      	movs	r3, #0
 800377c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800377e:	2302      	movs	r3, #2
 8003780:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003782:	f107 0314 	add.w	r3, r7, #20
 8003786:	4619      	mov	r1, r3
 8003788:	480d      	ldr	r0, [pc, #52]	; (80037c0 <MX_GPIO_Init+0xf4>)
 800378a:	f001 f94f 	bl	8004a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 800378e:	2302      	movs	r3, #2
 8003790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003792:	2301      	movs	r3, #1
 8003794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003796:	2300      	movs	r3, #0
 8003798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800379a:	2300      	movs	r3, #0
 800379c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 800379e:	f107 0314 	add.w	r3, r7, #20
 80037a2:	4619      	mov	r1, r3
 80037a4:	4804      	ldr	r0, [pc, #16]	; (80037b8 <MX_GPIO_Init+0xec>)
 80037a6:	f001 f941 	bl	8004a2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80037aa:	bf00      	nop
 80037ac:	3728      	adds	r7, #40	; 0x28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40023800 	.word	0x40023800
 80037b8:	40020400 	.word	0x40020400
 80037bc:	40020800 	.word	0x40020800
 80037c0:	40020000 	.word	0x40020000

080037c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037c8:	b672      	cpsid	i
}
 80037ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80037cc:	e7fe      	b.n	80037cc <Error_Handler+0x8>
	...

080037d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037d6:	2300      	movs	r3, #0
 80037d8:	607b      	str	r3, [r7, #4]
 80037da:	4b10      	ldr	r3, [pc, #64]	; (800381c <HAL_MspInit+0x4c>)
 80037dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037de:	4a0f      	ldr	r2, [pc, #60]	; (800381c <HAL_MspInit+0x4c>)
 80037e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037e4:	6453      	str	r3, [r2, #68]	; 0x44
 80037e6:	4b0d      	ldr	r3, [pc, #52]	; (800381c <HAL_MspInit+0x4c>)
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ee:	607b      	str	r3, [r7, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037f2:	2300      	movs	r3, #0
 80037f4:	603b      	str	r3, [r7, #0]
 80037f6:	4b09      	ldr	r3, [pc, #36]	; (800381c <HAL_MspInit+0x4c>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	4a08      	ldr	r2, [pc, #32]	; (800381c <HAL_MspInit+0x4c>)
 80037fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003800:	6413      	str	r3, [r2, #64]	; 0x40
 8003802:	4b06      	ldr	r3, [pc, #24]	; (800381c <HAL_MspInit+0x4c>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40023800 	.word	0x40023800

08003820 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08c      	sub	sp, #48	; 0x30
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003828:	f107 031c 	add.w	r3, r7, #28
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	605a      	str	r2, [r3, #4]
 8003832:	609a      	str	r2, [r3, #8]
 8003834:	60da      	str	r2, [r3, #12]
 8003836:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a32      	ldr	r2, [pc, #200]	; (8003908 <HAL_SPI_MspInit+0xe8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d12c      	bne.n	800389c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	61bb      	str	r3, [r7, #24]
 8003846:	4b31      	ldr	r3, [pc, #196]	; (800390c <HAL_SPI_MspInit+0xec>)
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	4a30      	ldr	r2, [pc, #192]	; (800390c <HAL_SPI_MspInit+0xec>)
 800384c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003850:	6453      	str	r3, [r2, #68]	; 0x44
 8003852:	4b2e      	ldr	r3, [pc, #184]	; (800390c <HAL_SPI_MspInit+0xec>)
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800385a:	61bb      	str	r3, [r7, #24]
 800385c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	4b2a      	ldr	r3, [pc, #168]	; (800390c <HAL_SPI_MspInit+0xec>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	4a29      	ldr	r2, [pc, #164]	; (800390c <HAL_SPI_MspInit+0xec>)
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	6313      	str	r3, [r2, #48]	; 0x30
 800386e:	4b27      	ldr	r3, [pc, #156]	; (800390c <HAL_SPI_MspInit+0xec>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800387a:	23f0      	movs	r3, #240	; 0xf0
 800387c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387e:	2302      	movs	r3, #2
 8003880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003882:	2300      	movs	r3, #0
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003886:	2303      	movs	r3, #3
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800388a:	2305      	movs	r3, #5
 800388c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800388e:	f107 031c 	add.w	r3, r7, #28
 8003892:	4619      	mov	r1, r3
 8003894:	481e      	ldr	r0, [pc, #120]	; (8003910 <HAL_SPI_MspInit+0xf0>)
 8003896:	f001 f8c9 	bl	8004a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800389a:	e031      	b.n	8003900 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a1c      	ldr	r2, [pc, #112]	; (8003914 <HAL_SPI_MspInit+0xf4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d12c      	bne.n	8003900 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80038a6:	2300      	movs	r3, #0
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	4b18      	ldr	r3, [pc, #96]	; (800390c <HAL_SPI_MspInit+0xec>)
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	4a17      	ldr	r2, [pc, #92]	; (800390c <HAL_SPI_MspInit+0xec>)
 80038b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038b4:	6413      	str	r3, [r2, #64]	; 0x40
 80038b6:	4b15      	ldr	r3, [pc, #84]	; (800390c <HAL_SPI_MspInit+0xec>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038be:	613b      	str	r3, [r7, #16]
 80038c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	4b11      	ldr	r3, [pc, #68]	; (800390c <HAL_SPI_MspInit+0xec>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	4a10      	ldr	r2, [pc, #64]	; (800390c <HAL_SPI_MspInit+0xec>)
 80038cc:	f043 0302 	orr.w	r3, r3, #2
 80038d0:	6313      	str	r3, [r2, #48]	; 0x30
 80038d2:	4b0e      	ldr	r3, [pc, #56]	; (800390c <HAL_SPI_MspInit+0xec>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80038de:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80038e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e4:	2302      	movs	r3, #2
 80038e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e8:	2300      	movs	r3, #0
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ec:	2303      	movs	r3, #3
 80038ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80038f0:	2305      	movs	r3, #5
 80038f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038f4:	f107 031c 	add.w	r3, r7, #28
 80038f8:	4619      	mov	r1, r3
 80038fa:	4807      	ldr	r0, [pc, #28]	; (8003918 <HAL_SPI_MspInit+0xf8>)
 80038fc:	f001 f896 	bl	8004a2c <HAL_GPIO_Init>
}
 8003900:	bf00      	nop
 8003902:	3730      	adds	r7, #48	; 0x30
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40013000 	.word	0x40013000
 800390c:	40023800 	.word	0x40023800
 8003910:	40020000 	.word	0x40020000
 8003914:	40003800 	.word	0x40003800
 8003918:	40020400 	.word	0x40020400

0800391c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a30      	ldr	r2, [pc, #192]	; (80039ec <HAL_TIM_Base_MspInit+0xd0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d13f      	bne.n	80039ae <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800392e:	2300      	movs	r3, #0
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	4b2f      	ldr	r3, [pc, #188]	; (80039f0 <HAL_TIM_Base_MspInit+0xd4>)
 8003934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003936:	4a2e      	ldr	r2, [pc, #184]	; (80039f0 <HAL_TIM_Base_MspInit+0xd4>)
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	6453      	str	r3, [r2, #68]	; 0x44
 800393e:	4b2c      	ldr	r3, [pc, #176]	; (80039f0 <HAL_TIM_Base_MspInit+0xd4>)
 8003940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800394a:	4b2a      	ldr	r3, [pc, #168]	; (80039f4 <HAL_TIM_Base_MspInit+0xd8>)
 800394c:	4a2a      	ldr	r2, [pc, #168]	; (80039f8 <HAL_TIM_Base_MspInit+0xdc>)
 800394e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8003950:	4b28      	ldr	r3, [pc, #160]	; (80039f4 <HAL_TIM_Base_MspInit+0xd8>)
 8003952:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8003956:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003958:	4b26      	ldr	r3, [pc, #152]	; (80039f4 <HAL_TIM_Base_MspInit+0xd8>)
 800395a:	2240      	movs	r2, #64	; 0x40
 800395c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800395e:	4b25      	ldr	r3, [pc, #148]	; (80039f4 <HAL_TIM_Base_MspInit+0xd8>)
 8003960:	2200      	movs	r2, #0
 8003962:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003964:	4b23      	ldr	r3, [pc, #140]	; (80039f4 <HAL_TIM_Base_MspInit+0xd8>)
 8003966:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800396a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800396c:	4b21      	ldr	r3, [pc, #132]	; (80039f4 <HAL_TIM_Base_MspInit+0xd8>)
 800396e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003972:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003974:	4b1f      	ldr	r3, [pc, #124]	; (80039f4 <HAL_TIM_Base_MspInit+0xd8>)
 8003976:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800397a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800397c:	4b1d      	ldr	r3, [pc, #116]	; (80039f4 <HAL_TIM_Base_MspInit+0xd8>)
 800397e:	2200      	movs	r2, #0
 8003980:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003982:	4b1c      	ldr	r3, [pc, #112]	; (80039f4 <HAL_TIM_Base_MspInit+0xd8>)
 8003984:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003988:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800398a:	4b1a      	ldr	r3, [pc, #104]	; (80039f4 <HAL_TIM_Base_MspInit+0xd8>)
 800398c:	2200      	movs	r2, #0
 800398e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8003990:	4818      	ldr	r0, [pc, #96]	; (80039f4 <HAL_TIM_Base_MspInit+0xd8>)
 8003992:	f000 fcdb 	bl	800434c <HAL_DMA_Init>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 800399c:	f7ff ff12 	bl	80037c4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a14      	ldr	r2, [pc, #80]	; (80039f4 <HAL_TIM_Base_MspInit+0xd8>)
 80039a4:	625a      	str	r2, [r3, #36]	; 0x24
 80039a6:	4a13      	ldr	r2, [pc, #76]	; (80039f4 <HAL_TIM_Base_MspInit+0xd8>)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80039ac:	e01a      	b.n	80039e4 <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM4)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a12      	ldr	r2, [pc, #72]	; (80039fc <HAL_TIM_Base_MspInit+0xe0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d115      	bne.n	80039e4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80039b8:	2300      	movs	r3, #0
 80039ba:	60bb      	str	r3, [r7, #8]
 80039bc:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <HAL_TIM_Base_MspInit+0xd4>)
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	4a0b      	ldr	r2, [pc, #44]	; (80039f0 <HAL_TIM_Base_MspInit+0xd4>)
 80039c2:	f043 0304 	orr.w	r3, r3, #4
 80039c6:	6413      	str	r3, [r2, #64]	; 0x40
 80039c8:	4b09      	ldr	r3, [pc, #36]	; (80039f0 <HAL_TIM_Base_MspInit+0xd4>)
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80039d4:	2200      	movs	r2, #0
 80039d6:	2100      	movs	r1, #0
 80039d8:	201e      	movs	r0, #30
 80039da:	f000 fc80 	bl	80042de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80039de:	201e      	movs	r0, #30
 80039e0:	f000 fc99 	bl	8004316 <HAL_NVIC_EnableIRQ>
}
 80039e4:	bf00      	nop
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40010000 	.word	0x40010000
 80039f0:	40023800 	.word	0x40023800
 80039f4:	20000830 	.word	0x20000830
 80039f8:	40026428 	.word	0x40026428
 80039fc:	40000800 	.word	0x40000800

08003a00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a08:	f107 030c 	add.w	r3, r7, #12
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	605a      	str	r2, [r3, #4]
 8003a12:	609a      	str	r2, [r3, #8]
 8003a14:	60da      	str	r2, [r3, #12]
 8003a16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a12      	ldr	r2, [pc, #72]	; (8003a68 <HAL_TIM_MspPostInit+0x68>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d11e      	bne.n	8003a60 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a22:	2300      	movs	r3, #0
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <HAL_TIM_MspPostInit+0x6c>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	4a10      	ldr	r2, [pc, #64]	; (8003a6c <HAL_TIM_MspPostInit+0x6c>)
 8003a2c:	f043 0301 	orr.w	r3, r3, #1
 8003a30:	6313      	str	r3, [r2, #48]	; 0x30
 8003a32:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <HAL_TIM_MspPostInit+0x6c>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	60bb      	str	r3, [r7, #8]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003a3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a44:	2302      	movs	r3, #2
 8003a46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003a50:	2301      	movs	r3, #1
 8003a52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a54:	f107 030c 	add.w	r3, r7, #12
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4805      	ldr	r0, [pc, #20]	; (8003a70 <HAL_TIM_MspPostInit+0x70>)
 8003a5c:	f000 ffe6 	bl	8004a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003a60:	bf00      	nop
 8003a62:	3720      	adds	r7, #32
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40010000 	.word	0x40010000
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	40020000 	.word	0x40020000

08003a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08a      	sub	sp, #40	; 0x28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a7c:	f107 0314 	add.w	r3, r7, #20
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	605a      	str	r2, [r3, #4]
 8003a86:	609a      	str	r2, [r3, #8]
 8003a88:	60da      	str	r2, [r3, #12]
 8003a8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a19      	ldr	r2, [pc, #100]	; (8003af8 <HAL_UART_MspInit+0x84>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d12c      	bne.n	8003af0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a96:	2300      	movs	r3, #0
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	4b18      	ldr	r3, [pc, #96]	; (8003afc <HAL_UART_MspInit+0x88>)
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	4a17      	ldr	r2, [pc, #92]	; (8003afc <HAL_UART_MspInit+0x88>)
 8003aa0:	f043 0310 	orr.w	r3, r3, #16
 8003aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8003aa6:	4b15      	ldr	r3, [pc, #84]	; (8003afc <HAL_UART_MspInit+0x88>)
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	f003 0310 	and.w	r3, r3, #16
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	4b11      	ldr	r3, [pc, #68]	; (8003afc <HAL_UART_MspInit+0x88>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	4a10      	ldr	r2, [pc, #64]	; (8003afc <HAL_UART_MspInit+0x88>)
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ac2:	4b0e      	ldr	r3, [pc, #56]	; (8003afc <HAL_UART_MspInit+0x88>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003ace:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003adc:	2303      	movs	r3, #3
 8003ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ae0:	2307      	movs	r3, #7
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae4:	f107 0314 	add.w	r3, r7, #20
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4805      	ldr	r0, [pc, #20]	; (8003b00 <HAL_UART_MspInit+0x8c>)
 8003aec:	f000 ff9e 	bl	8004a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003af0:	bf00      	nop
 8003af2:	3728      	adds	r7, #40	; 0x28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40011000 	.word	0x40011000
 8003afc:	40023800 	.word	0x40023800
 8003b00:	40020000 	.word	0x40020000

08003b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b08:	e7fe      	b.n	8003b08 <NMI_Handler+0x4>

08003b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b0e:	e7fe      	b.n	8003b0e <HardFault_Handler+0x4>

08003b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b14:	e7fe      	b.n	8003b14 <MemManage_Handler+0x4>

08003b16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b16:	b480      	push	{r7}
 8003b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b1a:	e7fe      	b.n	8003b1a <BusFault_Handler+0x4>

08003b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b20:	e7fe      	b.n	8003b20 <UsageFault_Handler+0x4>

08003b22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b22:	b480      	push	{r7}
 8003b24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b26:	bf00      	nop
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b34:	bf00      	nop
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b42:	bf00      	nop
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b50:	f000 faa6 	bl	80040a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b54:	bf00      	nop
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003b5c:	4802      	ldr	r0, [pc, #8]	; (8003b68 <TIM4_IRQHandler+0x10>)
 8003b5e:	f002 fc61 	bl	8006424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003b62:	bf00      	nop
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	200007e8 	.word	0x200007e8

08003b6c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8003b70:	4802      	ldr	r0, [pc, #8]	; (8003b7c <DMA2_Stream1_IRQHandler+0x10>)
 8003b72:	f000 fcf1 	bl	8004558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003b76:	bf00      	nop
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20000830 	.word	0x20000830

08003b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b88:	4a14      	ldr	r2, [pc, #80]	; (8003bdc <_sbrk+0x5c>)
 8003b8a:	4b15      	ldr	r3, [pc, #84]	; (8003be0 <_sbrk+0x60>)
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b94:	4b13      	ldr	r3, [pc, #76]	; (8003be4 <_sbrk+0x64>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d102      	bne.n	8003ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b9c:	4b11      	ldr	r3, [pc, #68]	; (8003be4 <_sbrk+0x64>)
 8003b9e:	4a12      	ldr	r2, [pc, #72]	; (8003be8 <_sbrk+0x68>)
 8003ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ba2:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <_sbrk+0x64>)
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4413      	add	r3, r2
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d207      	bcs.n	8003bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bb0:	f003 ff38 	bl	8007a24 <__errno>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	220c      	movs	r2, #12
 8003bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bba:	f04f 33ff 	mov.w	r3, #4294967295
 8003bbe:	e009      	b.n	8003bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bc0:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <_sbrk+0x64>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bc6:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <_sbrk+0x64>)
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4413      	add	r3, r2
 8003bce:	4a05      	ldr	r2, [pc, #20]	; (8003be4 <_sbrk+0x64>)
 8003bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20010000 	.word	0x20010000
 8003be0:	00000400 	.word	0x00000400
 8003be4:	20000900 	.word	0x20000900
 8003be8:	200079f8 	.word	0x200079f8

08003bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bf0:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <SystemInit+0x20>)
 8003bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf6:	4a05      	ldr	r2, [pc, #20]	; (8003c0c <SystemInit+0x20>)
 8003bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c00:	bf00      	nop
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	e000ed00 	.word	0xe000ed00

08003c10 <led_rgb_to_buf_dma>:
//void led_init(void) {
//	uint16_t i;
//	for (i = DELAY_LEN; i < ARRAY_LEN; i++) BUF_DMA[i] = LO;
//}

void led_rgb_to_buf_dma(uint8_t pixR, uint8_t pixG, uint8_t pixB, uint16_t posX) {
 8003c10:	b490      	push	{r4, r7}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4604      	mov	r4, r0
 8003c18:	4608      	mov	r0, r1
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	4623      	mov	r3, r4
 8003c20:	71fb      	strb	r3, [r7, #7]
 8003c22:	4603      	mov	r3, r0
 8003c24:	71bb      	strb	r3, [r7, #6]
 8003c26:	460b      	mov	r3, r1
 8003c28:	717b      	strb	r3, [r7, #5]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	807b      	strh	r3, [r7, #2]
	volatile uint16_t i;
	for (i = 0; i < 8; i++) {
 8003c2e:	2300      	movs	r3, #0
 8003c30:	81fb      	strh	r3, [r7, #14]
 8003c32:	e07a      	b.n	8003d2a <led_rgb_to_buf_dma+0x11a>
		if (BitIsSet(pixR,(7-i)) == 1) BUF_DMA[DELAY_LEN + posX * 24 + i + 8] = HI;
 8003c34:	79fa      	ldrb	r2, [r7, #7]
 8003c36:	89fb      	ldrh	r3, [r7, #14]
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	f1c3 0307 	rsb	r3, r3, #7
 8003c3e:	fa42 f303 	asr.w	r3, r2, r3
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00e      	beq.n	8003c68 <led_rgb_to_buf_dma+0x58>
 8003c4a:	887a      	ldrh	r2, [r7, #2]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	4413      	add	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	3330      	adds	r3, #48	; 0x30
 8003c56:	89fa      	ldrh	r2, [r7, #14]
 8003c58:	b292      	uxth	r2, r2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3308      	adds	r3, #8
 8003c5e:	4a38      	ldr	r2, [pc, #224]	; (8003d40 <led_rgb_to_buf_dma+0x130>)
 8003c60:	2141      	movs	r1, #65	; 0x41
 8003c62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003c66:	e00d      	b.n	8003c84 <led_rgb_to_buf_dma+0x74>
		else BUF_DMA[DELAY_LEN + posX * 24 + i + 8] = LO;
 8003c68:	887a      	ldrh	r2, [r7, #2]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	4413      	add	r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	3330      	adds	r3, #48	; 0x30
 8003c74:	89fa      	ldrh	r2, [r7, #14]
 8003c76:	b292      	uxth	r2, r2
 8003c78:	4413      	add	r3, r2
 8003c7a:	3308      	adds	r3, #8
 8003c7c:	4a30      	ldr	r2, [pc, #192]	; (8003d40 <led_rgb_to_buf_dma+0x130>)
 8003c7e:	211a      	movs	r1, #26
 8003c80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		if (BitIsSet(pixG,(7-i)) == 1) BUF_DMA[DELAY_LEN + posX * 24 + i + 0] = HI;
 8003c84:	79ba      	ldrb	r2, [r7, #6]
 8003c86:	89fb      	ldrh	r3, [r7, #14]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	f1c3 0307 	rsb	r3, r3, #7
 8003c8e:	fa42 f303 	asr.w	r3, r2, r3
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00d      	beq.n	8003cb6 <led_rgb_to_buf_dma+0xa6>
 8003c9a:	887a      	ldrh	r2, [r7, #2]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	4413      	add	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	3330      	adds	r3, #48	; 0x30
 8003ca6:	89fa      	ldrh	r2, [r7, #14]
 8003ca8:	b292      	uxth	r2, r2
 8003caa:	4413      	add	r3, r2
 8003cac:	4a24      	ldr	r2, [pc, #144]	; (8003d40 <led_rgb_to_buf_dma+0x130>)
 8003cae:	2141      	movs	r1, #65	; 0x41
 8003cb0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003cb4:	e00c      	b.n	8003cd0 <led_rgb_to_buf_dma+0xc0>
		else BUF_DMA[DELAY_LEN + posX * 24 + i + 0] = LO;
 8003cb6:	887a      	ldrh	r2, [r7, #2]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	4413      	add	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	3330      	adds	r3, #48	; 0x30
 8003cc2:	89fa      	ldrh	r2, [r7, #14]
 8003cc4:	b292      	uxth	r2, r2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	4a1d      	ldr	r2, [pc, #116]	; (8003d40 <led_rgb_to_buf_dma+0x130>)
 8003cca:	211a      	movs	r1, #26
 8003ccc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		if (BitIsSet(pixB,(7-i)) == 1) BUF_DMA[DELAY_LEN + posX * 24 + i + 16] = HI;
 8003cd0:	797a      	ldrb	r2, [r7, #5]
 8003cd2:	89fb      	ldrh	r3, [r7, #14]
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	f1c3 0307 	rsb	r3, r3, #7
 8003cda:	fa42 f303 	asr.w	r3, r2, r3
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00e      	beq.n	8003d04 <led_rgb_to_buf_dma+0xf4>
 8003ce6:	887a      	ldrh	r2, [r7, #2]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	4413      	add	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	3330      	adds	r3, #48	; 0x30
 8003cf2:	89fa      	ldrh	r2, [r7, #14]
 8003cf4:	b292      	uxth	r2, r2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	3310      	adds	r3, #16
 8003cfa:	4a11      	ldr	r2, [pc, #68]	; (8003d40 <led_rgb_to_buf_dma+0x130>)
 8003cfc:	2141      	movs	r1, #65	; 0x41
 8003cfe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003d02:	e00d      	b.n	8003d20 <led_rgb_to_buf_dma+0x110>
		else BUF_DMA[DELAY_LEN + posX * 24 + i + 16] = LO;
 8003d04:	887a      	ldrh	r2, [r7, #2]
 8003d06:	4613      	mov	r3, r2
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	4413      	add	r3, r2
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	3330      	adds	r3, #48	; 0x30
 8003d10:	89fa      	ldrh	r2, [r7, #14]
 8003d12:	b292      	uxth	r2, r2
 8003d14:	4413      	add	r3, r2
 8003d16:	3310      	adds	r3, #16
 8003d18:	4a09      	ldr	r2, [pc, #36]	; (8003d40 <led_rgb_to_buf_dma+0x130>)
 8003d1a:	211a      	movs	r1, #26
 8003d1c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < 8; i++) {
 8003d20:	89fb      	ldrh	r3, [r7, #14]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3301      	adds	r3, #1
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	81fb      	strh	r3, [r7, #14]
 8003d2a:	89fb      	ldrh	r3, [r7, #14]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b07      	cmp	r3, #7
 8003d30:	d980      	bls.n	8003c34 <led_rgb_to_buf_dma+0x24>
	}
}
 8003d32:	bf00      	nop
 8003d34:	bf00      	nop
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bc90      	pop	{r4, r7}
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	20000904 	.word	0x20000904

08003d44 <led_light>:
		led_rgb_to_buf_dma(rgb_t[13][0], rgb_t[13][1], rgb_t[13][2], n * 15 + 13);
		led_rgb_to_buf_dma(rgb_t[14][0], rgb_t[14][1], rgb_t[14][2], n * 15 + 14);
	}
}

void led_light(void) {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&TIM_LED, TIM_LED_CH, (uint32_t*) &BUF_DMA, ARRAY_LEN);
 8003d48:	f643 0370 	movw	r3, #14448	; 0x3870
 8003d4c:	4a03      	ldr	r2, [pc, #12]	; (8003d5c <led_light+0x18>)
 8003d4e:	2100      	movs	r1, #0
 8003d50:	4803      	ldr	r0, [pc, #12]	; (8003d60 <led_light+0x1c>)
 8003d52:	f002 f9b7 	bl	80060c4 <HAL_TIM_PWM_Start_DMA>
}
 8003d56:	bf00      	nop
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20000904 	.word	0x20000904
 8003d60:	200007a0 	.word	0x200007a0

08003d64 <remap>:
#include "xpt2046.h"

extern SPI_HandleTypeDef XPT2046_SPI;

inline static float remap(float x, float in_min, float in_max, float out_min, float out_max)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	ed87 0a05 	vstr	s0, [r7, #20]
 8003d6e:	edc7 0a04 	vstr	s1, [r7, #16]
 8003d72:	ed87 1a03 	vstr	s2, [r7, #12]
 8003d76:	edc7 1a02 	vstr	s3, [r7, #8]
 8003d7a:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003d7e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d82:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d8a:	edd7 6a01 	vldr	s13, [r7, #4]
 8003d8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d92:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d96:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003d9a:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003da2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003daa:	edd7 7a02 	vldr	s15, [r7, #8]
 8003dae:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003db2:	eeb0 0a67 	vmov.f32	s0, s15
 8003db6:	371c      	adds	r7, #28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <XPT2046_Init>:

void XPT2046_Init(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&XPT2046_SPI, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 8003dc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dc8:	2201      	movs	r2, #1
 8003dca:	2180      	movs	r1, #128	; 0x80
 8003dcc:	4809      	ldr	r0, [pc, #36]	; (8003df4 <XPT2046_Init+0x34>)
 8003dce:	f001 fcc4 	bl	800575a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 8003dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4806      	ldr	r0, [pc, #24]	; (8003df4 <XPT2046_Init+0x34>)
 8003ddc:	f001 fcbd 	bl	800575a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 8003de0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003de4:	2201      	movs	r2, #1
 8003de6:	2100      	movs	r1, #0
 8003de8:	4802      	ldr	r0, [pc, #8]	; (8003df4 <XPT2046_Init+0x34>)
 8003dea:	f001 fcb6 	bl	800575a <HAL_SPI_Transmit>
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
}
 8003dee:	bf00      	nop
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	200006f0 	.word	0x200006f0

08003df8 <getRaw>:

uint16_t getRaw(uint8_t address)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af02      	add	r7, sp, #8
 8003dfe:	4603      	mov	r3, r0
 8003e00:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_Delay(1);
 8003e02:	2001      	movs	r0, #1
 8003e04:	f000 f96c 	bl	80040e0 <HAL_Delay>
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 8003e08:	1df9      	adds	r1, r7, #7
 8003e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e0e:	2201      	movs	r2, #1
 8003e10:	4814      	ldr	r0, [pc, #80]	; (8003e64 <getRaw+0x6c>)
 8003e12:	f001 fca2 	bl	800575a <HAL_SPI_Transmit>
	address = 0x00;
 8003e16:	2300      	movs	r3, #0
 8003e18:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 8003e1a:	f107 020b 	add.w	r2, r7, #11
 8003e1e:	1df9      	adds	r1, r7, #7
 8003e20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	2301      	movs	r3, #1
 8003e28:	480e      	ldr	r0, [pc, #56]	; (8003e64 <getRaw+0x6c>)
 8003e2a:	f001 fdd2 	bl	80059d2 <HAL_SPI_TransmitReceive>
	MSB = data;   
 8003e2e:	7afb      	ldrb	r3, [r7, #11]
 8003e30:	81fb      	strh	r3, [r7, #14]
	address = 0x00;
 8003e32:	2300      	movs	r3, #0
 8003e34:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 8003e36:	f107 020b 	add.w	r2, r7, #11
 8003e3a:	1df9      	adds	r1, r7, #7
 8003e3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	2301      	movs	r3, #1
 8003e44:	4807      	ldr	r0, [pc, #28]	; (8003e64 <getRaw+0x6c>)
 8003e46:	f001 fdc4 	bl	80059d2 <HAL_SPI_TransmitReceive>
	LSB = data;
 8003e4a:	7afb      	ldrb	r3, [r7, #11]
 8003e4c:	81bb      	strh	r3, [r7, #12]
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
	return ((MSB << 8) | (LSB)) >> 3;
 8003e4e:	89fb      	ldrh	r3, [r7, #14]
 8003e50:	021a      	lsls	r2, r3, #8
 8003e52:	89bb      	ldrh	r3, [r7, #12]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	10db      	asrs	r3, r3, #3
 8003e58:	b29b      	uxth	r3, r3
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	200006f0 	.word	0x200006f0

08003e68 <X>:

inline static uint16_t X(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
	uint16_t x;
	x = (uint16_t) remap(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 8003e6e:	20d0      	movs	r0, #208	; 0xd0
 8003e70:	f7ff ffc2 	bl	8003df8 <getRaw>
 8003e74:	4603      	mov	r3, r0
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7e:	ed9f 2a12 	vldr	s4, [pc, #72]	; 8003ec8 <X+0x60>
 8003e82:	eddf 1a12 	vldr	s3, [pc, #72]	; 8003ecc <X+0x64>
 8003e86:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8003ed0 <X+0x68>
 8003e8a:	eddf 0a12 	vldr	s1, [pc, #72]	; 8003ed4 <X+0x6c>
 8003e8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003e92:	f7ff ff67 	bl	8003d64 <remap>
 8003e96:	eef0 7a40 	vmov.f32	s15, s0
 8003e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e9e:	ee17 3a90 	vmov	r3, s15
 8003ea2:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_X) x = OUT_MAX_X - x;
 8003ea4:	88fb      	ldrh	r3, [r7, #6]
 8003ea6:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8003eaa:	80fb      	strh	r3, [r7, #6]
	if (x > OUT_MIN_X && x < OUT_MAX_X) return x;
 8003eac:	88fb      	ldrh	r3, [r7, #6]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d005      	beq.n	8003ebe <X+0x56>
 8003eb2:	88fb      	ldrh	r3, [r7, #6]
 8003eb4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003eb8:	d201      	bcs.n	8003ebe <X+0x56>
 8003eba:	88fb      	ldrh	r3, [r7, #6]
 8003ebc:	e000      	b.n	8003ec0 <X+0x58>
	else return 0;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	43a00000 	.word	0x43a00000
 8003ecc:	00000000 	.word	0x00000000
 8003ed0:	45610000 	.word	0x45610000
 8003ed4:	43c80000 	.word	0x43c80000

08003ed8 <Y>:

inline static uint16_t Y(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
	uint16_t y;
	y = (uint16_t) remap(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
 8003ede:	2090      	movs	r0, #144	; 0x90
 8003ee0:	f7ff ff8a 	bl	8003df8 <getRaw>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	ee07 3a90 	vmov	s15, r3
 8003eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eee:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8003f30 <Y+0x58>
 8003ef2:	eddf 1a10 	vldr	s3, [pc, #64]	; 8003f34 <Y+0x5c>
 8003ef6:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8003f38 <Y+0x60>
 8003efa:	eddf 0a10 	vldr	s1, [pc, #64]	; 8003f3c <Y+0x64>
 8003efe:	eeb0 0a67 	vmov.f32	s0, s15
 8003f02:	f7ff ff2f 	bl	8003d64 <remap>
 8003f06:	eef0 7a40 	vmov.f32	s15, s0
 8003f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f0e:	ee17 3a90 	vmov	r3, s15
 8003f12:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_Y) y = OUT_MAX_Y - y;
	if (y > OUT_MIN_Y && y < OUT_MAX_Y) return y;
 8003f14:	88fb      	ldrh	r3, [r7, #6]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d005      	beq.n	8003f26 <Y+0x4e>
 8003f1a:	88fb      	ldrh	r3, [r7, #6]
 8003f1c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003f20:	d201      	bcs.n	8003f26 <Y+0x4e>
 8003f22:	88fb      	ldrh	r3, [r7, #6]
 8003f24:	e000      	b.n	8003f28 <Y+0x50>
	else return 0;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	43f00000 	.word	0x43f00000
 8003f34:	00000000 	.word	0x00000000
 8003f38:	456a6000 	.word	0x456a6000
 8003f3c:	43480000 	.word	0x43480000

08003f40 <getX>:

uint16_t getX(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t x[2] = { 1, 2 };
 8003f46:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <getX+0x30>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	607b      	str	r3, [r7, #4]
		while (x[0] != x[1])
 8003f4c:	e007      	b.n	8003f5e <getX+0x1e>
		{
			if (XPT2046_REVERSED) { x[0] = Y(); x[1] = Y(); }
 8003f4e:	f7ff ffc3 	bl	8003ed8 <Y>
 8003f52:	4603      	mov	r3, r0
 8003f54:	80bb      	strh	r3, [r7, #4]
 8003f56:	f7ff ffbf 	bl	8003ed8 <Y>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	80fb      	strh	r3, [r7, #6]
		while (x[0] != x[1])
 8003f5e:	88ba      	ldrh	r2, [r7, #4]
 8003f60:	88fb      	ldrh	r3, [r7, #6]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d1f3      	bne.n	8003f4e <getX+0xe>
			else { x[0] = X(); x[1] = X(); }
		}
		return x[0];
 8003f66:	88bb      	ldrh	r3, [r7, #4]
	} 
	else if (XPT2046_REVERSED) return Y(); else return X();
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	08008494 	.word	0x08008494

08003f74 <getY>:

uint16_t getY(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t y[2] = { 1, 2 };
 8003f7a:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <getY+0x30>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	607b      	str	r3, [r7, #4]
		while (y[0] != y[1])
 8003f80:	e007      	b.n	8003f92 <getY+0x1e>
		{
			if (XPT2046_REVERSED) { y[0] = X(); y[1] = X(); }
 8003f82:	f7ff ff71 	bl	8003e68 <X>
 8003f86:	4603      	mov	r3, r0
 8003f88:	80bb      	strh	r3, [r7, #4]
 8003f8a:	f7ff ff6d 	bl	8003e68 <X>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	80fb      	strh	r3, [r7, #6]
		while (y[0] != y[1])
 8003f92:	88ba      	ldrh	r2, [r7, #4]
 8003f94:	88fb      	ldrh	r3, [r7, #6]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d1f3      	bne.n	8003f82 <getY+0xe>
			else { y[0] = Y(); y[1] = Y(); }
		}
		return y[0];
 8003f9a:	88bb      	ldrh	r3, [r7, #4]
	}
	else if (XPT2046_REVERSED) return X(); else return Y();
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	08008494 	.word	0x08008494

08003fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003fa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fe0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003fac:	480d      	ldr	r0, [pc, #52]	; (8003fe4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003fae:	490e      	ldr	r1, [pc, #56]	; (8003fe8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003fb0:	4a0e      	ldr	r2, [pc, #56]	; (8003fec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fb4:	e002      	b.n	8003fbc <LoopCopyDataInit>

08003fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fba:	3304      	adds	r3, #4

08003fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fc0:	d3f9      	bcc.n	8003fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fc2:	4a0b      	ldr	r2, [pc, #44]	; (8003ff0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003fc4:	4c0b      	ldr	r4, [pc, #44]	; (8003ff4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fc8:	e001      	b.n	8003fce <LoopFillZerobss>

08003fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fcc:	3204      	adds	r2, #4

08003fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fd0:	d3fb      	bcc.n	8003fca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003fd2:	f7ff fe0b 	bl	8003bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fd6:	f003 fd2b 	bl	8007a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fda:	f7fe fe89 	bl	8002cf0 <main>
  bx  lr    
 8003fde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003fe0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fe8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8003fec:	08009fd4 	.word	0x08009fd4
  ldr r2, =_sbss
 8003ff0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003ff4:	200079f8 	.word	0x200079f8

08003ff8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ff8:	e7fe      	b.n	8003ff8 <ADC_IRQHandler>
	...

08003ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004000:	4b0e      	ldr	r3, [pc, #56]	; (800403c <HAL_Init+0x40>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a0d      	ldr	r2, [pc, #52]	; (800403c <HAL_Init+0x40>)
 8004006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800400a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800400c:	4b0b      	ldr	r3, [pc, #44]	; (800403c <HAL_Init+0x40>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a0a      	ldr	r2, [pc, #40]	; (800403c <HAL_Init+0x40>)
 8004012:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004016:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004018:	4b08      	ldr	r3, [pc, #32]	; (800403c <HAL_Init+0x40>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a07      	ldr	r2, [pc, #28]	; (800403c <HAL_Init+0x40>)
 800401e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004022:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004024:	2003      	movs	r0, #3
 8004026:	f000 f94f 	bl	80042c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800402a:	200f      	movs	r0, #15
 800402c:	f000 f808 	bl	8004040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004030:	f7ff fbce 	bl	80037d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40023c00 	.word	0x40023c00

08004040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004048:	4b12      	ldr	r3, [pc, #72]	; (8004094 <HAL_InitTick+0x54>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	4b12      	ldr	r3, [pc, #72]	; (8004098 <HAL_InitTick+0x58>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	4619      	mov	r1, r3
 8004052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004056:	fbb3 f3f1 	udiv	r3, r3, r1
 800405a:	fbb2 f3f3 	udiv	r3, r2, r3
 800405e:	4618      	mov	r0, r3
 8004060:	f000 f967 	bl	8004332 <HAL_SYSTICK_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e00e      	b.n	800408c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b0f      	cmp	r3, #15
 8004072:	d80a      	bhi.n	800408a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004074:	2200      	movs	r2, #0
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	f04f 30ff 	mov.w	r0, #4294967295
 800407c:	f000 f92f 	bl	80042de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004080:	4a06      	ldr	r2, [pc, #24]	; (800409c <HAL_InitTick+0x5c>)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	e000      	b.n	800408c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
}
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	20000014 	.word	0x20000014
 8004098:	2000001c 	.word	0x2000001c
 800409c:	20000018 	.word	0x20000018

080040a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040a4:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <HAL_IncTick+0x20>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	461a      	mov	r2, r3
 80040aa:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <HAL_IncTick+0x24>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4413      	add	r3, r2
 80040b0:	4a04      	ldr	r2, [pc, #16]	; (80040c4 <HAL_IncTick+0x24>)
 80040b2:	6013      	str	r3, [r2, #0]
}
 80040b4:	bf00      	nop
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	2000001c 	.word	0x2000001c
 80040c4:	200079e4 	.word	0x200079e4

080040c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  return uwTick;
 80040cc:	4b03      	ldr	r3, [pc, #12]	; (80040dc <HAL_GetTick+0x14>)
 80040ce:	681b      	ldr	r3, [r3, #0]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	200079e4 	.word	0x200079e4

080040e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040e8:	f7ff ffee 	bl	80040c8 <HAL_GetTick>
 80040ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f8:	d005      	beq.n	8004106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040fa:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <HAL_Delay+0x44>)
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	461a      	mov	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4413      	add	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004106:	bf00      	nop
 8004108:	f7ff ffde 	bl	80040c8 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	429a      	cmp	r2, r3
 8004116:	d8f7      	bhi.n	8004108 <HAL_Delay+0x28>
  {
  }
}
 8004118:	bf00      	nop
 800411a:	bf00      	nop
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	2000001c 	.word	0x2000001c

08004128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f003 0307 	and.w	r3, r3, #7
 8004136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004138:	4b0c      	ldr	r3, [pc, #48]	; (800416c <__NVIC_SetPriorityGrouping+0x44>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004144:	4013      	ands	r3, r2
 8004146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004150:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800415a:	4a04      	ldr	r2, [pc, #16]	; (800416c <__NVIC_SetPriorityGrouping+0x44>)
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	60d3      	str	r3, [r2, #12]
}
 8004160:	bf00      	nop
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	e000ed00 	.word	0xe000ed00

08004170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004174:	4b04      	ldr	r3, [pc, #16]	; (8004188 <__NVIC_GetPriorityGrouping+0x18>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	0a1b      	lsrs	r3, r3, #8
 800417a:	f003 0307 	and.w	r3, r3, #7
}
 800417e:	4618      	mov	r0, r3
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	e000ed00 	.word	0xe000ed00

0800418c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419a:	2b00      	cmp	r3, #0
 800419c:	db0b      	blt.n	80041b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800419e:	79fb      	ldrb	r3, [r7, #7]
 80041a0:	f003 021f 	and.w	r2, r3, #31
 80041a4:	4907      	ldr	r1, [pc, #28]	; (80041c4 <__NVIC_EnableIRQ+0x38>)
 80041a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	2001      	movs	r0, #1
 80041ae:	fa00 f202 	lsl.w	r2, r0, r2
 80041b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	e000e100 	.word	0xe000e100

080041c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	6039      	str	r1, [r7, #0]
 80041d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	db0a      	blt.n	80041f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	490c      	ldr	r1, [pc, #48]	; (8004214 <__NVIC_SetPriority+0x4c>)
 80041e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e6:	0112      	lsls	r2, r2, #4
 80041e8:	b2d2      	uxtb	r2, r2
 80041ea:	440b      	add	r3, r1
 80041ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041f0:	e00a      	b.n	8004208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	4908      	ldr	r1, [pc, #32]	; (8004218 <__NVIC_SetPriority+0x50>)
 80041f8:	79fb      	ldrb	r3, [r7, #7]
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	3b04      	subs	r3, #4
 8004200:	0112      	lsls	r2, r2, #4
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	440b      	add	r3, r1
 8004206:	761a      	strb	r2, [r3, #24]
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	e000e100 	.word	0xe000e100
 8004218:	e000ed00 	.word	0xe000ed00

0800421c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800421c:	b480      	push	{r7}
 800421e:	b089      	sub	sp, #36	; 0x24
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f1c3 0307 	rsb	r3, r3, #7
 8004236:	2b04      	cmp	r3, #4
 8004238:	bf28      	it	cs
 800423a:	2304      	movcs	r3, #4
 800423c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	3304      	adds	r3, #4
 8004242:	2b06      	cmp	r3, #6
 8004244:	d902      	bls.n	800424c <NVIC_EncodePriority+0x30>
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	3b03      	subs	r3, #3
 800424a:	e000      	b.n	800424e <NVIC_EncodePriority+0x32>
 800424c:	2300      	movs	r3, #0
 800424e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004250:	f04f 32ff 	mov.w	r2, #4294967295
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43da      	mvns	r2, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	401a      	ands	r2, r3
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004264:	f04f 31ff 	mov.w	r1, #4294967295
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	fa01 f303 	lsl.w	r3, r1, r3
 800426e:	43d9      	mvns	r1, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004274:	4313      	orrs	r3, r2
         );
}
 8004276:	4618      	mov	r0, r3
 8004278:	3724      	adds	r7, #36	; 0x24
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3b01      	subs	r3, #1
 8004290:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004294:	d301      	bcc.n	800429a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004296:	2301      	movs	r3, #1
 8004298:	e00f      	b.n	80042ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800429a:	4a0a      	ldr	r2, [pc, #40]	; (80042c4 <SysTick_Config+0x40>)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3b01      	subs	r3, #1
 80042a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042a2:	210f      	movs	r1, #15
 80042a4:	f04f 30ff 	mov.w	r0, #4294967295
 80042a8:	f7ff ff8e 	bl	80041c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042ac:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <SysTick_Config+0x40>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042b2:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <SysTick_Config+0x40>)
 80042b4:	2207      	movs	r2, #7
 80042b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	e000e010 	.word	0xe000e010

080042c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7ff ff29 	bl	8004128 <__NVIC_SetPriorityGrouping>
}
 80042d6:	bf00      	nop
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042de:	b580      	push	{r7, lr}
 80042e0:	b086      	sub	sp, #24
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	4603      	mov	r3, r0
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	607a      	str	r2, [r7, #4]
 80042ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042f0:	f7ff ff3e 	bl	8004170 <__NVIC_GetPriorityGrouping>
 80042f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	68b9      	ldr	r1, [r7, #8]
 80042fa:	6978      	ldr	r0, [r7, #20]
 80042fc:	f7ff ff8e 	bl	800421c <NVIC_EncodePriority>
 8004300:	4602      	mov	r2, r0
 8004302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004306:	4611      	mov	r1, r2
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff ff5d 	bl	80041c8 <__NVIC_SetPriority>
}
 800430e:	bf00      	nop
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
 800431c:	4603      	mov	r3, r0
 800431e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff ff31 	bl	800418c <__NVIC_EnableIRQ>
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7ff ffa2 	bl	8004284 <SysTick_Config>
 8004340:	4603      	mov	r3, r0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
	...

0800434c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004358:	f7ff feb6 	bl	80040c8 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e099      	b.n	800449c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0201 	bic.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004388:	e00f      	b.n	80043aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800438a:	f7ff fe9d 	bl	80040c8 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b05      	cmp	r3, #5
 8004396:	d908      	bls.n	80043aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2220      	movs	r2, #32
 800439c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2203      	movs	r2, #3
 80043a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e078      	b.n	800449c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1e8      	bne.n	800438a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	4b38      	ldr	r3, [pc, #224]	; (80044a4 <HAL_DMA_Init+0x158>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	2b04      	cmp	r3, #4
 8004402:	d107      	bne.n	8004414 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	4313      	orrs	r3, r2
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f023 0307 	bic.w	r3, r3, #7
 800442a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	4313      	orrs	r3, r2
 8004434:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	2b04      	cmp	r3, #4
 800443c:	d117      	bne.n	800446e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	4313      	orrs	r3, r2
 8004446:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00e      	beq.n	800446e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 fa6f 	bl	8004934 <DMA_CheckFifoParam>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d008      	beq.n	800446e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2240      	movs	r2, #64	; 0x40
 8004460:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800446a:	2301      	movs	r3, #1
 800446c:	e016      	b.n	800449c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fa26 	bl	80048c8 <DMA_CalcBaseAndBitshift>
 800447c:	4603      	mov	r3, r0
 800447e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004484:	223f      	movs	r2, #63	; 0x3f
 8004486:	409a      	lsls	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	f010803f 	.word	0xf010803f

080044a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d101      	bne.n	80044ce <HAL_DMA_Start_IT+0x26>
 80044ca:	2302      	movs	r3, #2
 80044cc:	e040      	b.n	8004550 <HAL_DMA_Start_IT+0xa8>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d12f      	bne.n	8004542 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2202      	movs	r2, #2
 80044e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	68b9      	ldr	r1, [r7, #8]
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 f9b8 	bl	800486c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004500:	223f      	movs	r2, #63	; 0x3f
 8004502:	409a      	lsls	r2, r3
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0216 	orr.w	r2, r2, #22
 8004516:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	2b00      	cmp	r3, #0
 800451e:	d007      	beq.n	8004530 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0208 	orr.w	r2, r2, #8
 800452e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0201 	orr.w	r2, r2, #1
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	e005      	b.n	800454e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800454a:	2302      	movs	r3, #2
 800454c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800454e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004564:	4b8e      	ldr	r3, [pc, #568]	; (80047a0 <HAL_DMA_IRQHandler+0x248>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a8e      	ldr	r2, [pc, #568]	; (80047a4 <HAL_DMA_IRQHandler+0x24c>)
 800456a:	fba2 2303 	umull	r2, r3, r2, r3
 800456e:	0a9b      	lsrs	r3, r3, #10
 8004570:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004576:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004582:	2208      	movs	r2, #8
 8004584:	409a      	lsls	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4013      	ands	r3, r2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d01a      	beq.n	80045c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	d013      	beq.n	80045c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0204 	bic.w	r2, r2, #4
 80045aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b0:	2208      	movs	r2, #8
 80045b2:	409a      	lsls	r2, r3
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045bc:	f043 0201 	orr.w	r2, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c8:	2201      	movs	r2, #1
 80045ca:	409a      	lsls	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4013      	ands	r3, r2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d012      	beq.n	80045fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00b      	beq.n	80045fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e6:	2201      	movs	r2, #1
 80045e8:	409a      	lsls	r2, r3
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f2:	f043 0202 	orr.w	r2, r3, #2
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fe:	2204      	movs	r2, #4
 8004600:	409a      	lsls	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4013      	ands	r3, r2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d012      	beq.n	8004630 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00b      	beq.n	8004630 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461c:	2204      	movs	r2, #4
 800461e:	409a      	lsls	r2, r3
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004628:	f043 0204 	orr.w	r2, r3, #4
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004634:	2210      	movs	r2, #16
 8004636:	409a      	lsls	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4013      	ands	r3, r2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d043      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d03c      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004652:	2210      	movs	r2, #16
 8004654:	409a      	lsls	r2, r3
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d018      	beq.n	800469a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d108      	bne.n	8004688 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	2b00      	cmp	r3, #0
 800467c:	d024      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	4798      	blx	r3
 8004686:	e01f      	b.n	80046c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800468c:	2b00      	cmp	r3, #0
 800468e:	d01b      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	4798      	blx	r3
 8004698:	e016      	b.n	80046c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d107      	bne.n	80046b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0208 	bic.w	r2, r2, #8
 80046b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046cc:	2220      	movs	r2, #32
 80046ce:	409a      	lsls	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4013      	ands	r3, r2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 808f 	beq.w	80047f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0310 	and.w	r3, r3, #16
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 8087 	beq.w	80047f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ee:	2220      	movs	r2, #32
 80046f0:	409a      	lsls	r2, r3
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b05      	cmp	r3, #5
 8004700:	d136      	bne.n	8004770 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0216 	bic.w	r2, r2, #22
 8004710:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695a      	ldr	r2, [r3, #20]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004720:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	2b00      	cmp	r3, #0
 8004728:	d103      	bne.n	8004732 <HAL_DMA_IRQHandler+0x1da>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800472e:	2b00      	cmp	r3, #0
 8004730:	d007      	beq.n	8004742 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0208 	bic.w	r2, r2, #8
 8004740:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004746:	223f      	movs	r2, #63	; 0x3f
 8004748:	409a      	lsls	r2, r3
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004762:	2b00      	cmp	r3, #0
 8004764:	d07e      	beq.n	8004864 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	4798      	blx	r3
        }
        return;
 800476e:	e079      	b.n	8004864 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d01d      	beq.n	80047ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10d      	bne.n	80047a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004790:	2b00      	cmp	r3, #0
 8004792:	d031      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	4798      	blx	r3
 800479c:	e02c      	b.n	80047f8 <HAL_DMA_IRQHandler+0x2a0>
 800479e:	bf00      	nop
 80047a0:	20000014 	.word	0x20000014
 80047a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d023      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	4798      	blx	r3
 80047b8:	e01e      	b.n	80047f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10f      	bne.n	80047e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0210 	bic.w	r2, r2, #16
 80047d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d032      	beq.n	8004866 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	d022      	beq.n	8004852 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2205      	movs	r2, #5
 8004810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0201 	bic.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	3301      	adds	r3, #1
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	429a      	cmp	r2, r3
 800482e:	d307      	bcc.n	8004840 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f2      	bne.n	8004824 <HAL_DMA_IRQHandler+0x2cc>
 800483e:	e000      	b.n	8004842 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004840:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004856:	2b00      	cmp	r3, #0
 8004858:	d005      	beq.n	8004866 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	4798      	blx	r3
 8004862:	e000      	b.n	8004866 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004864:	bf00      	nop
    }
  }
}
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
 8004878:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004888:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	2b40      	cmp	r3, #64	; 0x40
 8004898:	d108      	bne.n	80048ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80048aa:	e007      	b.n	80048bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	60da      	str	r2, [r3, #12]
}
 80048bc:	bf00      	nop
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	3b10      	subs	r3, #16
 80048d8:	4a14      	ldr	r2, [pc, #80]	; (800492c <DMA_CalcBaseAndBitshift+0x64>)
 80048da:	fba2 2303 	umull	r2, r3, r2, r3
 80048de:	091b      	lsrs	r3, r3, #4
 80048e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80048e2:	4a13      	ldr	r2, [pc, #76]	; (8004930 <DMA_CalcBaseAndBitshift+0x68>)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4413      	add	r3, r2
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	461a      	mov	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d909      	bls.n	800490a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80048fe:	f023 0303 	bic.w	r3, r3, #3
 8004902:	1d1a      	adds	r2, r3, #4
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	659a      	str	r2, [r3, #88]	; 0x58
 8004908:	e007      	b.n	800491a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004912:	f023 0303 	bic.w	r3, r3, #3
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	aaaaaaab 	.word	0xaaaaaaab
 8004930:	08009f88 	.word	0x08009f88

08004934 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800493c:	2300      	movs	r3, #0
 800493e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004944:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d11f      	bne.n	800498e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b03      	cmp	r3, #3
 8004952:	d856      	bhi.n	8004a02 <DMA_CheckFifoParam+0xce>
 8004954:	a201      	add	r2, pc, #4	; (adr r2, 800495c <DMA_CheckFifoParam+0x28>)
 8004956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495a:	bf00      	nop
 800495c:	0800496d 	.word	0x0800496d
 8004960:	0800497f 	.word	0x0800497f
 8004964:	0800496d 	.word	0x0800496d
 8004968:	08004a03 	.word	0x08004a03
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004970:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d046      	beq.n	8004a06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800497c:	e043      	b.n	8004a06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004982:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004986:	d140      	bne.n	8004a0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800498c:	e03d      	b.n	8004a0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004996:	d121      	bne.n	80049dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b03      	cmp	r3, #3
 800499c:	d837      	bhi.n	8004a0e <DMA_CheckFifoParam+0xda>
 800499e:	a201      	add	r2, pc, #4	; (adr r2, 80049a4 <DMA_CheckFifoParam+0x70>)
 80049a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a4:	080049b5 	.word	0x080049b5
 80049a8:	080049bb 	.word	0x080049bb
 80049ac:	080049b5 	.word	0x080049b5
 80049b0:	080049cd 	.word	0x080049cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	73fb      	strb	r3, [r7, #15]
      break;
 80049b8:	e030      	b.n	8004a1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d025      	beq.n	8004a12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049ca:	e022      	b.n	8004a12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049d4:	d11f      	bne.n	8004a16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80049da:	e01c      	b.n	8004a16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d903      	bls.n	80049ea <DMA_CheckFifoParam+0xb6>
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b03      	cmp	r3, #3
 80049e6:	d003      	beq.n	80049f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80049e8:	e018      	b.n	8004a1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	73fb      	strb	r3, [r7, #15]
      break;
 80049ee:	e015      	b.n	8004a1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00e      	beq.n	8004a1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004a00:	e00b      	b.n	8004a1a <DMA_CheckFifoParam+0xe6>
      break;
 8004a02:	bf00      	nop
 8004a04:	e00a      	b.n	8004a1c <DMA_CheckFifoParam+0xe8>
      break;
 8004a06:	bf00      	nop
 8004a08:	e008      	b.n	8004a1c <DMA_CheckFifoParam+0xe8>
      break;
 8004a0a:	bf00      	nop
 8004a0c:	e006      	b.n	8004a1c <DMA_CheckFifoParam+0xe8>
      break;
 8004a0e:	bf00      	nop
 8004a10:	e004      	b.n	8004a1c <DMA_CheckFifoParam+0xe8>
      break;
 8004a12:	bf00      	nop
 8004a14:	e002      	b.n	8004a1c <DMA_CheckFifoParam+0xe8>
      break;   
 8004a16:	bf00      	nop
 8004a18:	e000      	b.n	8004a1c <DMA_CheckFifoParam+0xe8>
      break;
 8004a1a:	bf00      	nop
    }
  } 
  
  return status; 
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop

08004a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b089      	sub	sp, #36	; 0x24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a42:	2300      	movs	r3, #0
 8004a44:	61fb      	str	r3, [r7, #28]
 8004a46:	e159      	b.n	8004cfc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a48:	2201      	movs	r2, #1
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	f040 8148 	bne.w	8004cf6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d005      	beq.n	8004a7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d130      	bne.n	8004ae0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	2203      	movs	r2, #3
 8004a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	4013      	ands	r3, r2
 8004a94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8004abc:	43db      	mvns	r3, r3
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	091b      	lsrs	r3, r3, #4
 8004aca:	f003 0201 	and.w	r2, r3, #1
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f003 0303 	and.w	r3, r3, #3
 8004ae8:	2b03      	cmp	r3, #3
 8004aea:	d017      	beq.n	8004b1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	2203      	movs	r2, #3
 8004af8:	fa02 f303 	lsl.w	r3, r2, r3
 8004afc:	43db      	mvns	r3, r3
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	4013      	ands	r3, r2
 8004b02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f003 0303 	and.w	r3, r3, #3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d123      	bne.n	8004b70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	08da      	lsrs	r2, r3, #3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3208      	adds	r2, #8
 8004b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	220f      	movs	r2, #15
 8004b40:	fa02 f303 	lsl.w	r3, r2, r3
 8004b44:	43db      	mvns	r3, r3
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	08da      	lsrs	r2, r3, #3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	3208      	adds	r2, #8
 8004b6a:	69b9      	ldr	r1, [r7, #24]
 8004b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	2203      	movs	r2, #3
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	43db      	mvns	r3, r3
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	4013      	ands	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f003 0203 	and.w	r2, r3, #3
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 80a2 	beq.w	8004cf6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	4b57      	ldr	r3, [pc, #348]	; (8004d14 <HAL_GPIO_Init+0x2e8>)
 8004bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bba:	4a56      	ldr	r2, [pc, #344]	; (8004d14 <HAL_GPIO_Init+0x2e8>)
 8004bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8004bc2:	4b54      	ldr	r3, [pc, #336]	; (8004d14 <HAL_GPIO_Init+0x2e8>)
 8004bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bca:	60fb      	str	r3, [r7, #12]
 8004bcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004bce:	4a52      	ldr	r2, [pc, #328]	; (8004d18 <HAL_GPIO_Init+0x2ec>)
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	089b      	lsrs	r3, r3, #2
 8004bd4:	3302      	adds	r3, #2
 8004bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	220f      	movs	r2, #15
 8004be6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bea:	43db      	mvns	r3, r3
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a49      	ldr	r2, [pc, #292]	; (8004d1c <HAL_GPIO_Init+0x2f0>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d019      	beq.n	8004c2e <HAL_GPIO_Init+0x202>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a48      	ldr	r2, [pc, #288]	; (8004d20 <HAL_GPIO_Init+0x2f4>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d013      	beq.n	8004c2a <HAL_GPIO_Init+0x1fe>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a47      	ldr	r2, [pc, #284]	; (8004d24 <HAL_GPIO_Init+0x2f8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00d      	beq.n	8004c26 <HAL_GPIO_Init+0x1fa>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a46      	ldr	r2, [pc, #280]	; (8004d28 <HAL_GPIO_Init+0x2fc>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d007      	beq.n	8004c22 <HAL_GPIO_Init+0x1f6>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a45      	ldr	r2, [pc, #276]	; (8004d2c <HAL_GPIO_Init+0x300>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d101      	bne.n	8004c1e <HAL_GPIO_Init+0x1f2>
 8004c1a:	2304      	movs	r3, #4
 8004c1c:	e008      	b.n	8004c30 <HAL_GPIO_Init+0x204>
 8004c1e:	2307      	movs	r3, #7
 8004c20:	e006      	b.n	8004c30 <HAL_GPIO_Init+0x204>
 8004c22:	2303      	movs	r3, #3
 8004c24:	e004      	b.n	8004c30 <HAL_GPIO_Init+0x204>
 8004c26:	2302      	movs	r3, #2
 8004c28:	e002      	b.n	8004c30 <HAL_GPIO_Init+0x204>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e000      	b.n	8004c30 <HAL_GPIO_Init+0x204>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	69fa      	ldr	r2, [r7, #28]
 8004c32:	f002 0203 	and.w	r2, r2, #3
 8004c36:	0092      	lsls	r2, r2, #2
 8004c38:	4093      	lsls	r3, r2
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c40:	4935      	ldr	r1, [pc, #212]	; (8004d18 <HAL_GPIO_Init+0x2ec>)
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	089b      	lsrs	r3, r3, #2
 8004c46:	3302      	adds	r3, #2
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c4e:	4b38      	ldr	r3, [pc, #224]	; (8004d30 <HAL_GPIO_Init+0x304>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	43db      	mvns	r3, r3
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c72:	4a2f      	ldr	r2, [pc, #188]	; (8004d30 <HAL_GPIO_Init+0x304>)
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c78:	4b2d      	ldr	r3, [pc, #180]	; (8004d30 <HAL_GPIO_Init+0x304>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	43db      	mvns	r3, r3
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	4013      	ands	r3, r2
 8004c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c9c:	4a24      	ldr	r2, [pc, #144]	; (8004d30 <HAL_GPIO_Init+0x304>)
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ca2:	4b23      	ldr	r3, [pc, #140]	; (8004d30 <HAL_GPIO_Init+0x304>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	43db      	mvns	r3, r3
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004cc6:	4a1a      	ldr	r2, [pc, #104]	; (8004d30 <HAL_GPIO_Init+0x304>)
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ccc:	4b18      	ldr	r3, [pc, #96]	; (8004d30 <HAL_GPIO_Init+0x304>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	43db      	mvns	r3, r3
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cf0:	4a0f      	ldr	r2, [pc, #60]	; (8004d30 <HAL_GPIO_Init+0x304>)
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	61fb      	str	r3, [r7, #28]
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	2b0f      	cmp	r3, #15
 8004d00:	f67f aea2 	bls.w	8004a48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop
 8004d08:	3724      	adds	r7, #36	; 0x24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40023800 	.word	0x40023800
 8004d18:	40013800 	.word	0x40013800
 8004d1c:	40020000 	.word	0x40020000
 8004d20:	40020400 	.word	0x40020400
 8004d24:	40020800 	.word	0x40020800
 8004d28:	40020c00 	.word	0x40020c00
 8004d2c:	40021000 	.word	0x40021000
 8004d30:	40013c00 	.word	0x40013c00

08004d34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	887b      	ldrh	r3, [r7, #2]
 8004d46:	4013      	ands	r3, r2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	73fb      	strb	r3, [r7, #15]
 8004d50:	e001      	b.n	8004d56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d52:	2300      	movs	r3, #0
 8004d54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	807b      	strh	r3, [r7, #2]
 8004d70:	4613      	mov	r3, r2
 8004d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d74:	787b      	ldrb	r3, [r7, #1]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d7a:	887a      	ldrh	r2, [r7, #2]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d80:	e003      	b.n	8004d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d82:	887b      	ldrh	r3, [r7, #2]
 8004d84:	041a      	lsls	r2, r3, #16
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	619a      	str	r2, [r3, #24]
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
	...

08004d98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e267      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d075      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004db6:	4b88      	ldr	r3, [pc, #544]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 030c 	and.w	r3, r3, #12
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d00c      	beq.n	8004ddc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dc2:	4b85      	ldr	r3, [pc, #532]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dca:	2b08      	cmp	r3, #8
 8004dcc:	d112      	bne.n	8004df4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dce:	4b82      	ldr	r3, [pc, #520]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dda:	d10b      	bne.n	8004df4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ddc:	4b7e      	ldr	r3, [pc, #504]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d05b      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x108>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d157      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e242      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dfc:	d106      	bne.n	8004e0c <HAL_RCC_OscConfig+0x74>
 8004dfe:	4b76      	ldr	r3, [pc, #472]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a75      	ldr	r2, [pc, #468]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e08:	6013      	str	r3, [r2, #0]
 8004e0a:	e01d      	b.n	8004e48 <HAL_RCC_OscConfig+0xb0>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e14:	d10c      	bne.n	8004e30 <HAL_RCC_OscConfig+0x98>
 8004e16:	4b70      	ldr	r3, [pc, #448]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a6f      	ldr	r2, [pc, #444]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	4b6d      	ldr	r3, [pc, #436]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a6c      	ldr	r2, [pc, #432]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e2c:	6013      	str	r3, [r2, #0]
 8004e2e:	e00b      	b.n	8004e48 <HAL_RCC_OscConfig+0xb0>
 8004e30:	4b69      	ldr	r3, [pc, #420]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a68      	ldr	r2, [pc, #416]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e3a:	6013      	str	r3, [r2, #0]
 8004e3c:	4b66      	ldr	r3, [pc, #408]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a65      	ldr	r2, [pc, #404]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d013      	beq.n	8004e78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e50:	f7ff f93a 	bl	80040c8 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e58:	f7ff f936 	bl	80040c8 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b64      	cmp	r3, #100	; 0x64
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e207      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e6a:	4b5b      	ldr	r3, [pc, #364]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0f0      	beq.n	8004e58 <HAL_RCC_OscConfig+0xc0>
 8004e76:	e014      	b.n	8004ea2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e78:	f7ff f926 	bl	80040c8 <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e80:	f7ff f922 	bl	80040c8 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b64      	cmp	r3, #100	; 0x64
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e1f3      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e92:	4b51      	ldr	r3, [pc, #324]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1f0      	bne.n	8004e80 <HAL_RCC_OscConfig+0xe8>
 8004e9e:	e000      	b.n	8004ea2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d063      	beq.n	8004f76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004eae:	4b4a      	ldr	r3, [pc, #296]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 030c 	and.w	r3, r3, #12
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00b      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eba:	4b47      	ldr	r3, [pc, #284]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d11c      	bne.n	8004f00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ec6:	4b44      	ldr	r3, [pc, #272]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d116      	bne.n	8004f00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ed2:	4b41      	ldr	r3, [pc, #260]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d005      	beq.n	8004eea <HAL_RCC_OscConfig+0x152>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d001      	beq.n	8004eea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e1c7      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eea:	4b3b      	ldr	r3, [pc, #236]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	4937      	ldr	r1, [pc, #220]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004efe:	e03a      	b.n	8004f76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d020      	beq.n	8004f4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f08:	4b34      	ldr	r3, [pc, #208]	; (8004fdc <HAL_RCC_OscConfig+0x244>)
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0e:	f7ff f8db 	bl	80040c8 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f16:	f7ff f8d7 	bl	80040c8 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e1a8      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f28:	4b2b      	ldr	r3, [pc, #172]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0f0      	beq.n	8004f16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f34:	4b28      	ldr	r3, [pc, #160]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	4925      	ldr	r1, [pc, #148]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	600b      	str	r3, [r1, #0]
 8004f48:	e015      	b.n	8004f76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f4a:	4b24      	ldr	r3, [pc, #144]	; (8004fdc <HAL_RCC_OscConfig+0x244>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f50:	f7ff f8ba 	bl	80040c8 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f58:	f7ff f8b6 	bl	80040c8 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e187      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f6a:	4b1b      	ldr	r3, [pc, #108]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f0      	bne.n	8004f58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d036      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d016      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f8a:	4b15      	ldr	r3, [pc, #84]	; (8004fe0 <HAL_RCC_OscConfig+0x248>)
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f90:	f7ff f89a 	bl	80040c8 <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f98:	f7ff f896 	bl	80040c8 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e167      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004faa:	4b0b      	ldr	r3, [pc, #44]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0f0      	beq.n	8004f98 <HAL_RCC_OscConfig+0x200>
 8004fb6:	e01b      	b.n	8004ff0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fb8:	4b09      	ldr	r3, [pc, #36]	; (8004fe0 <HAL_RCC_OscConfig+0x248>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fbe:	f7ff f883 	bl	80040c8 <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fc4:	e00e      	b.n	8004fe4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fc6:	f7ff f87f 	bl	80040c8 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d907      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e150      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	42470000 	.word	0x42470000
 8004fe0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fe4:	4b88      	ldr	r3, [pc, #544]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8004fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1ea      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 8097 	beq.w	800512c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ffe:	2300      	movs	r3, #0
 8005000:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005002:	4b81      	ldr	r3, [pc, #516]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10f      	bne.n	800502e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800500e:	2300      	movs	r3, #0
 8005010:	60bb      	str	r3, [r7, #8]
 8005012:	4b7d      	ldr	r3, [pc, #500]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	4a7c      	ldr	r2, [pc, #496]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800501c:	6413      	str	r3, [r2, #64]	; 0x40
 800501e:	4b7a      	ldr	r3, [pc, #488]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005026:	60bb      	str	r3, [r7, #8]
 8005028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800502a:	2301      	movs	r3, #1
 800502c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800502e:	4b77      	ldr	r3, [pc, #476]	; (800520c <HAL_RCC_OscConfig+0x474>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005036:	2b00      	cmp	r3, #0
 8005038:	d118      	bne.n	800506c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800503a:	4b74      	ldr	r3, [pc, #464]	; (800520c <HAL_RCC_OscConfig+0x474>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a73      	ldr	r2, [pc, #460]	; (800520c <HAL_RCC_OscConfig+0x474>)
 8005040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005046:	f7ff f83f 	bl	80040c8 <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800504c:	e008      	b.n	8005060 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800504e:	f7ff f83b 	bl	80040c8 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e10c      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005060:	4b6a      	ldr	r3, [pc, #424]	; (800520c <HAL_RCC_OscConfig+0x474>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0f0      	beq.n	800504e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d106      	bne.n	8005082 <HAL_RCC_OscConfig+0x2ea>
 8005074:	4b64      	ldr	r3, [pc, #400]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005078:	4a63      	ldr	r2, [pc, #396]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	6713      	str	r3, [r2, #112]	; 0x70
 8005080:	e01c      	b.n	80050bc <HAL_RCC_OscConfig+0x324>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	2b05      	cmp	r3, #5
 8005088:	d10c      	bne.n	80050a4 <HAL_RCC_OscConfig+0x30c>
 800508a:	4b5f      	ldr	r3, [pc, #380]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 800508c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508e:	4a5e      	ldr	r2, [pc, #376]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005090:	f043 0304 	orr.w	r3, r3, #4
 8005094:	6713      	str	r3, [r2, #112]	; 0x70
 8005096:	4b5c      	ldr	r3, [pc, #368]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509a:	4a5b      	ldr	r2, [pc, #364]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 800509c:	f043 0301 	orr.w	r3, r3, #1
 80050a0:	6713      	str	r3, [r2, #112]	; 0x70
 80050a2:	e00b      	b.n	80050bc <HAL_RCC_OscConfig+0x324>
 80050a4:	4b58      	ldr	r3, [pc, #352]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 80050a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a8:	4a57      	ldr	r2, [pc, #348]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 80050aa:	f023 0301 	bic.w	r3, r3, #1
 80050ae:	6713      	str	r3, [r2, #112]	; 0x70
 80050b0:	4b55      	ldr	r3, [pc, #340]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 80050b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b4:	4a54      	ldr	r2, [pc, #336]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 80050b6:	f023 0304 	bic.w	r3, r3, #4
 80050ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d015      	beq.n	80050f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c4:	f7ff f800 	bl	80040c8 <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ca:	e00a      	b.n	80050e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050cc:	f7fe fffc 	bl	80040c8 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050da:	4293      	cmp	r3, r2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e0cb      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050e2:	4b49      	ldr	r3, [pc, #292]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 80050e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0ee      	beq.n	80050cc <HAL_RCC_OscConfig+0x334>
 80050ee:	e014      	b.n	800511a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050f0:	f7fe ffea 	bl	80040c8 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050f6:	e00a      	b.n	800510e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050f8:	f7fe ffe6 	bl	80040c8 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	f241 3288 	movw	r2, #5000	; 0x1388
 8005106:	4293      	cmp	r3, r2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e0b5      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800510e:	4b3e      	ldr	r3, [pc, #248]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1ee      	bne.n	80050f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800511a:	7dfb      	ldrb	r3, [r7, #23]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d105      	bne.n	800512c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005120:	4b39      	ldr	r3, [pc, #228]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005124:	4a38      	ldr	r2, [pc, #224]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800512a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 80a1 	beq.w	8005278 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005136:	4b34      	ldr	r3, [pc, #208]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 030c 	and.w	r3, r3, #12
 800513e:	2b08      	cmp	r3, #8
 8005140:	d05c      	beq.n	80051fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d141      	bne.n	80051ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800514a:	4b31      	ldr	r3, [pc, #196]	; (8005210 <HAL_RCC_OscConfig+0x478>)
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005150:	f7fe ffba 	bl	80040c8 <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005158:	f7fe ffb6 	bl	80040c8 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e087      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800516a:	4b27      	ldr	r3, [pc, #156]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1f0      	bne.n	8005158 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69da      	ldr	r2, [r3, #28]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	019b      	lsls	r3, r3, #6
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518c:	085b      	lsrs	r3, r3, #1
 800518e:	3b01      	subs	r3, #1
 8005190:	041b      	lsls	r3, r3, #16
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005198:	061b      	lsls	r3, r3, #24
 800519a:	491b      	ldr	r1, [pc, #108]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 800519c:	4313      	orrs	r3, r2
 800519e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051a0:	4b1b      	ldr	r3, [pc, #108]	; (8005210 <HAL_RCC_OscConfig+0x478>)
 80051a2:	2201      	movs	r2, #1
 80051a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a6:	f7fe ff8f 	bl	80040c8 <HAL_GetTick>
 80051aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ac:	e008      	b.n	80051c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051ae:	f7fe ff8b 	bl	80040c8 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e05c      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051c0:	4b11      	ldr	r3, [pc, #68]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0f0      	beq.n	80051ae <HAL_RCC_OscConfig+0x416>
 80051cc:	e054      	b.n	8005278 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ce:	4b10      	ldr	r3, [pc, #64]	; (8005210 <HAL_RCC_OscConfig+0x478>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d4:	f7fe ff78 	bl	80040c8 <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051dc:	f7fe ff74 	bl	80040c8 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e045      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ee:	4b06      	ldr	r3, [pc, #24]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1f0      	bne.n	80051dc <HAL_RCC_OscConfig+0x444>
 80051fa:	e03d      	b.n	8005278 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d107      	bne.n	8005214 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e038      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
 8005208:	40023800 	.word	0x40023800
 800520c:	40007000 	.word	0x40007000
 8005210:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005214:	4b1b      	ldr	r3, [pc, #108]	; (8005284 <HAL_RCC_OscConfig+0x4ec>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d028      	beq.n	8005274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800522c:	429a      	cmp	r2, r3
 800522e:	d121      	bne.n	8005274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800523a:	429a      	cmp	r2, r3
 800523c:	d11a      	bne.n	8005274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005244:	4013      	ands	r3, r2
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800524a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800524c:	4293      	cmp	r3, r2
 800524e:	d111      	bne.n	8005274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525a:	085b      	lsrs	r3, r3, #1
 800525c:	3b01      	subs	r3, #1
 800525e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005260:	429a      	cmp	r2, r3
 8005262:	d107      	bne.n	8005274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005270:	429a      	cmp	r2, r3
 8005272:	d001      	beq.n	8005278 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e000      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	40023800 	.word	0x40023800

08005288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e0cc      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800529c:	4b68      	ldr	r3, [pc, #416]	; (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d90c      	bls.n	80052c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052aa:	4b65      	ldr	r3, [pc, #404]	; (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b2:	4b63      	ldr	r3, [pc, #396]	; (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d001      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e0b8      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d020      	beq.n	8005312 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d005      	beq.n	80052e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052dc:	4b59      	ldr	r3, [pc, #356]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	4a58      	ldr	r2, [pc, #352]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80052e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0308 	and.w	r3, r3, #8
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d005      	beq.n	8005300 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052f4:	4b53      	ldr	r3, [pc, #332]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	4a52      	ldr	r2, [pc, #328]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80052fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005300:	4b50      	ldr	r3, [pc, #320]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	494d      	ldr	r1, [pc, #308]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 800530e:	4313      	orrs	r3, r2
 8005310:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d044      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d107      	bne.n	8005336 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005326:	4b47      	ldr	r3, [pc, #284]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d119      	bne.n	8005366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e07f      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	2b02      	cmp	r3, #2
 800533c:	d003      	beq.n	8005346 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005342:	2b03      	cmp	r3, #3
 8005344:	d107      	bne.n	8005356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005346:	4b3f      	ldr	r3, [pc, #252]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d109      	bne.n	8005366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e06f      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005356:	4b3b      	ldr	r3, [pc, #236]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e067      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005366:	4b37      	ldr	r3, [pc, #220]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f023 0203 	bic.w	r2, r3, #3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	4934      	ldr	r1, [pc, #208]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005374:	4313      	orrs	r3, r2
 8005376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005378:	f7fe fea6 	bl	80040c8 <HAL_GetTick>
 800537c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800537e:	e00a      	b.n	8005396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005380:	f7fe fea2 	bl	80040c8 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	f241 3288 	movw	r2, #5000	; 0x1388
 800538e:	4293      	cmp	r3, r2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e04f      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005396:	4b2b      	ldr	r3, [pc, #172]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 020c 	and.w	r2, r3, #12
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d1eb      	bne.n	8005380 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053a8:	4b25      	ldr	r3, [pc, #148]	; (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d20c      	bcs.n	80053d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053b6:	4b22      	ldr	r3, [pc, #136]	; (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053be:	4b20      	ldr	r3, [pc, #128]	; (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d001      	beq.n	80053d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e032      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d008      	beq.n	80053ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053dc:	4b19      	ldr	r3, [pc, #100]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	4916      	ldr	r1, [pc, #88]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0308 	and.w	r3, r3, #8
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d009      	beq.n	800540e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053fa:	4b12      	ldr	r3, [pc, #72]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	490e      	ldr	r1, [pc, #56]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 800540a:	4313      	orrs	r3, r2
 800540c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800540e:	f000 f821 	bl	8005454 <HAL_RCC_GetSysClockFreq>
 8005412:	4602      	mov	r2, r0
 8005414:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	091b      	lsrs	r3, r3, #4
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	490a      	ldr	r1, [pc, #40]	; (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 8005420:	5ccb      	ldrb	r3, [r1, r3]
 8005422:	fa22 f303 	lsr.w	r3, r2, r3
 8005426:	4a09      	ldr	r2, [pc, #36]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800542a:	4b09      	ldr	r3, [pc, #36]	; (8005450 <HAL_RCC_ClockConfig+0x1c8>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f7fe fe06 	bl	8004040 <HAL_InitTick>

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	40023c00 	.word	0x40023c00
 8005444:	40023800 	.word	0x40023800
 8005448:	08009f70 	.word	0x08009f70
 800544c:	20000014 	.word	0x20000014
 8005450:	20000018 	.word	0x20000018

08005454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005458:	b090      	sub	sp, #64	; 0x40
 800545a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	637b      	str	r3, [r7, #52]	; 0x34
 8005460:	2300      	movs	r3, #0
 8005462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005464:	2300      	movs	r3, #0
 8005466:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800546c:	4b59      	ldr	r3, [pc, #356]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f003 030c 	and.w	r3, r3, #12
 8005474:	2b08      	cmp	r3, #8
 8005476:	d00d      	beq.n	8005494 <HAL_RCC_GetSysClockFreq+0x40>
 8005478:	2b08      	cmp	r3, #8
 800547a:	f200 80a1 	bhi.w	80055c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800547e:	2b00      	cmp	r3, #0
 8005480:	d002      	beq.n	8005488 <HAL_RCC_GetSysClockFreq+0x34>
 8005482:	2b04      	cmp	r3, #4
 8005484:	d003      	beq.n	800548e <HAL_RCC_GetSysClockFreq+0x3a>
 8005486:	e09b      	b.n	80055c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005488:	4b53      	ldr	r3, [pc, #332]	; (80055d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800548a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800548c:	e09b      	b.n	80055c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800548e:	4b53      	ldr	r3, [pc, #332]	; (80055dc <HAL_RCC_GetSysClockFreq+0x188>)
 8005490:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005492:	e098      	b.n	80055c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005494:	4b4f      	ldr	r3, [pc, #316]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800549c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800549e:	4b4d      	ldr	r3, [pc, #308]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d028      	beq.n	80054fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054aa:	4b4a      	ldr	r3, [pc, #296]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	099b      	lsrs	r3, r3, #6
 80054b0:	2200      	movs	r2, #0
 80054b2:	623b      	str	r3, [r7, #32]
 80054b4:	627a      	str	r2, [r7, #36]	; 0x24
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80054bc:	2100      	movs	r1, #0
 80054be:	4b47      	ldr	r3, [pc, #284]	; (80055dc <HAL_RCC_GetSysClockFreq+0x188>)
 80054c0:	fb03 f201 	mul.w	r2, r3, r1
 80054c4:	2300      	movs	r3, #0
 80054c6:	fb00 f303 	mul.w	r3, r0, r3
 80054ca:	4413      	add	r3, r2
 80054cc:	4a43      	ldr	r2, [pc, #268]	; (80055dc <HAL_RCC_GetSysClockFreq+0x188>)
 80054ce:	fba0 1202 	umull	r1, r2, r0, r2
 80054d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054d4:	460a      	mov	r2, r1
 80054d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80054d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054da:	4413      	add	r3, r2
 80054dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e0:	2200      	movs	r2, #0
 80054e2:	61bb      	str	r3, [r7, #24]
 80054e4:	61fa      	str	r2, [r7, #28]
 80054e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80054ee:	f7fb fb45 	bl	8000b7c <__aeabi_uldivmod>
 80054f2:	4602      	mov	r2, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	4613      	mov	r3, r2
 80054f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054fa:	e053      	b.n	80055a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054fc:	4b35      	ldr	r3, [pc, #212]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	099b      	lsrs	r3, r3, #6
 8005502:	2200      	movs	r2, #0
 8005504:	613b      	str	r3, [r7, #16]
 8005506:	617a      	str	r2, [r7, #20]
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800550e:	f04f 0b00 	mov.w	fp, #0
 8005512:	4652      	mov	r2, sl
 8005514:	465b      	mov	r3, fp
 8005516:	f04f 0000 	mov.w	r0, #0
 800551a:	f04f 0100 	mov.w	r1, #0
 800551e:	0159      	lsls	r1, r3, #5
 8005520:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005524:	0150      	lsls	r0, r2, #5
 8005526:	4602      	mov	r2, r0
 8005528:	460b      	mov	r3, r1
 800552a:	ebb2 080a 	subs.w	r8, r2, sl
 800552e:	eb63 090b 	sbc.w	r9, r3, fp
 8005532:	f04f 0200 	mov.w	r2, #0
 8005536:	f04f 0300 	mov.w	r3, #0
 800553a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800553e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005542:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005546:	ebb2 0408 	subs.w	r4, r2, r8
 800554a:	eb63 0509 	sbc.w	r5, r3, r9
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	f04f 0300 	mov.w	r3, #0
 8005556:	00eb      	lsls	r3, r5, #3
 8005558:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800555c:	00e2      	lsls	r2, r4, #3
 800555e:	4614      	mov	r4, r2
 8005560:	461d      	mov	r5, r3
 8005562:	eb14 030a 	adds.w	r3, r4, sl
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	eb45 030b 	adc.w	r3, r5, fp
 800556c:	607b      	str	r3, [r7, #4]
 800556e:	f04f 0200 	mov.w	r2, #0
 8005572:	f04f 0300 	mov.w	r3, #0
 8005576:	e9d7 4500 	ldrd	r4, r5, [r7]
 800557a:	4629      	mov	r1, r5
 800557c:	028b      	lsls	r3, r1, #10
 800557e:	4621      	mov	r1, r4
 8005580:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005584:	4621      	mov	r1, r4
 8005586:	028a      	lsls	r2, r1, #10
 8005588:	4610      	mov	r0, r2
 800558a:	4619      	mov	r1, r3
 800558c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558e:	2200      	movs	r2, #0
 8005590:	60bb      	str	r3, [r7, #8]
 8005592:	60fa      	str	r2, [r7, #12]
 8005594:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005598:	f7fb faf0 	bl	8000b7c <__aeabi_uldivmod>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4613      	mov	r3, r2
 80055a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055a4:	4b0b      	ldr	r3, [pc, #44]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	0c1b      	lsrs	r3, r3, #16
 80055aa:	f003 0303 	and.w	r3, r3, #3
 80055ae:	3301      	adds	r3, #1
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80055b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80055be:	e002      	b.n	80055c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055c0:	4b05      	ldr	r3, [pc, #20]	; (80055d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80055c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80055c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3740      	adds	r7, #64	; 0x40
 80055cc:	46bd      	mov	sp, r7
 80055ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055d2:	bf00      	nop
 80055d4:	40023800 	.word	0x40023800
 80055d8:	00f42400 	.word	0x00f42400
 80055dc:	017d7840 	.word	0x017d7840

080055e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055e0:	b480      	push	{r7}
 80055e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055e4:	4b03      	ldr	r3, [pc, #12]	; (80055f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80055e6:	681b      	ldr	r3, [r3, #0]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	20000014 	.word	0x20000014

080055f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055fc:	f7ff fff0 	bl	80055e0 <HAL_RCC_GetHCLKFreq>
 8005600:	4602      	mov	r2, r0
 8005602:	4b05      	ldr	r3, [pc, #20]	; (8005618 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	0a9b      	lsrs	r3, r3, #10
 8005608:	f003 0307 	and.w	r3, r3, #7
 800560c:	4903      	ldr	r1, [pc, #12]	; (800561c <HAL_RCC_GetPCLK1Freq+0x24>)
 800560e:	5ccb      	ldrb	r3, [r1, r3]
 8005610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005614:	4618      	mov	r0, r3
 8005616:	bd80      	pop	{r7, pc}
 8005618:	40023800 	.word	0x40023800
 800561c:	08009f80 	.word	0x08009f80

08005620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005624:	f7ff ffdc 	bl	80055e0 <HAL_RCC_GetHCLKFreq>
 8005628:	4602      	mov	r2, r0
 800562a:	4b05      	ldr	r3, [pc, #20]	; (8005640 <HAL_RCC_GetPCLK2Freq+0x20>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	0b5b      	lsrs	r3, r3, #13
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	4903      	ldr	r1, [pc, #12]	; (8005644 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005636:	5ccb      	ldrb	r3, [r1, r3]
 8005638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800563c:	4618      	mov	r0, r3
 800563e:	bd80      	pop	{r7, pc}
 8005640:	40023800 	.word	0x40023800
 8005644:	08009f80 	.word	0x08009f80

08005648 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e07b      	b.n	8005752 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565e:	2b00      	cmp	r3, #0
 8005660:	d108      	bne.n	8005674 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800566a:	d009      	beq.n	8005680 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	61da      	str	r2, [r3, #28]
 8005672:	e005      	b.n	8005680 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d106      	bne.n	80056a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7fe f8c0 	bl	8003820 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80056c8:	431a      	orrs	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056d2:	431a      	orrs	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	431a      	orrs	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	431a      	orrs	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056f0:	431a      	orrs	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005704:	ea42 0103 	orr.w	r1, r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	0c1b      	lsrs	r3, r3, #16
 800571e:	f003 0104 	and.w	r1, r3, #4
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	f003 0210 	and.w	r2, r3, #16
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69da      	ldr	r2, [r3, #28]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005740:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b088      	sub	sp, #32
 800575e:	af00      	add	r7, sp, #0
 8005760:	60f8      	str	r0, [r7, #12]
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	603b      	str	r3, [r7, #0]
 8005766:	4613      	mov	r3, r2
 8005768:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <HAL_SPI_Transmit+0x22>
 8005778:	2302      	movs	r3, #2
 800577a:	e126      	b.n	80059ca <HAL_SPI_Transmit+0x270>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005784:	f7fe fca0 	bl	80040c8 <HAL_GetTick>
 8005788:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800578a:	88fb      	ldrh	r3, [r7, #6]
 800578c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b01      	cmp	r3, #1
 8005798:	d002      	beq.n	80057a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800579a:	2302      	movs	r3, #2
 800579c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800579e:	e10b      	b.n	80059b8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d002      	beq.n	80057ac <HAL_SPI_Transmit+0x52>
 80057a6:	88fb      	ldrh	r3, [r7, #6]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d102      	bne.n	80057b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057b0:	e102      	b.n	80059b8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2203      	movs	r2, #3
 80057b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	88fa      	ldrh	r2, [r7, #6]
 80057ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	88fa      	ldrh	r2, [r7, #6]
 80057d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f8:	d10f      	bne.n	800581a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005808:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005818:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005824:	2b40      	cmp	r3, #64	; 0x40
 8005826:	d007      	beq.n	8005838 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005836:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005840:	d14b      	bne.n	80058da <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <HAL_SPI_Transmit+0xf6>
 800584a:	8afb      	ldrh	r3, [r7, #22]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d13e      	bne.n	80058ce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005854:	881a      	ldrh	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005860:	1c9a      	adds	r2, r3, #2
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800586a:	b29b      	uxth	r3, r3
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005874:	e02b      	b.n	80058ce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b02      	cmp	r3, #2
 8005882:	d112      	bne.n	80058aa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005888:	881a      	ldrh	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005894:	1c9a      	adds	r2, r3, #2
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800589e:	b29b      	uxth	r3, r3
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80058a8:	e011      	b.n	80058ce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058aa:	f7fe fc0d 	bl	80040c8 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d803      	bhi.n	80058c2 <HAL_SPI_Transmit+0x168>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c0:	d102      	bne.n	80058c8 <HAL_SPI_Transmit+0x16e>
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d102      	bne.n	80058ce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80058cc:	e074      	b.n	80059b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1ce      	bne.n	8005876 <HAL_SPI_Transmit+0x11c>
 80058d8:	e04c      	b.n	8005974 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <HAL_SPI_Transmit+0x18e>
 80058e2:	8afb      	ldrh	r3, [r7, #22]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d140      	bne.n	800596a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	330c      	adds	r3, #12
 80058f2:	7812      	ldrb	r2, [r2, #0]
 80058f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800590e:	e02c      	b.n	800596a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b02      	cmp	r3, #2
 800591c:	d113      	bne.n	8005946 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	330c      	adds	r3, #12
 8005928:	7812      	ldrb	r2, [r2, #0]
 800592a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800593a:	b29b      	uxth	r3, r3
 800593c:	3b01      	subs	r3, #1
 800593e:	b29a      	uxth	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	86da      	strh	r2, [r3, #54]	; 0x36
 8005944:	e011      	b.n	800596a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005946:	f7fe fbbf 	bl	80040c8 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	429a      	cmp	r2, r3
 8005954:	d803      	bhi.n	800595e <HAL_SPI_Transmit+0x204>
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595c:	d102      	bne.n	8005964 <HAL_SPI_Transmit+0x20a>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d102      	bne.n	800596a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005968:	e026      	b.n	80059b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800596e:	b29b      	uxth	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1cd      	bne.n	8005910 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	6839      	ldr	r1, [r7, #0]
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 fa55 	bl	8005e28 <SPI_EndRxTxTransaction>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2220      	movs	r2, #32
 8005988:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10a      	bne.n	80059a8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005992:	2300      	movs	r3, #0
 8005994:	613b      	str	r3, [r7, #16]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	613b      	str	r3, [r7, #16]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	613b      	str	r3, [r7, #16]
 80059a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	77fb      	strb	r3, [r7, #31]
 80059b4:	e000      	b.n	80059b8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80059b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3720      	adds	r7, #32
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b08c      	sub	sp, #48	; 0x30
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	60f8      	str	r0, [r7, #12]
 80059da:	60b9      	str	r1, [r7, #8]
 80059dc:	607a      	str	r2, [r7, #4]
 80059de:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80059e0:	2301      	movs	r3, #1
 80059e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80059e4:	2300      	movs	r3, #0
 80059e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d101      	bne.n	80059f8 <HAL_SPI_TransmitReceive+0x26>
 80059f4:	2302      	movs	r3, #2
 80059f6:	e18a      	b.n	8005d0e <HAL_SPI_TransmitReceive+0x33c>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a00:	f7fe fb62 	bl	80040c8 <HAL_GetTick>
 8005a04:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a16:	887b      	ldrh	r3, [r7, #2]
 8005a18:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d00f      	beq.n	8005a42 <HAL_SPI_TransmitReceive+0x70>
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a28:	d107      	bne.n	8005a3a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d103      	bne.n	8005a3a <HAL_SPI_TransmitReceive+0x68>
 8005a32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d003      	beq.n	8005a42 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a40:	e15b      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d005      	beq.n	8005a54 <HAL_SPI_TransmitReceive+0x82>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <HAL_SPI_TransmitReceive+0x82>
 8005a4e:	887b      	ldrh	r3, [r7, #2]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d103      	bne.n	8005a5c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a5a:	e14e      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d003      	beq.n	8005a70 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2205      	movs	r2, #5
 8005a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	887a      	ldrh	r2, [r7, #2]
 8005a80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	887a      	ldrh	r2, [r7, #2]
 8005a86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	887a      	ldrh	r2, [r7, #2]
 8005a92:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	887a      	ldrh	r2, [r7, #2]
 8005a98:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab0:	2b40      	cmp	r3, #64	; 0x40
 8005ab2:	d007      	beq.n	8005ac4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ac2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005acc:	d178      	bne.n	8005bc0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <HAL_SPI_TransmitReceive+0x10a>
 8005ad6:	8b7b      	ldrh	r3, [r7, #26]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d166      	bne.n	8005baa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae0:	881a      	ldrh	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aec:	1c9a      	adds	r2, r3, #2
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	3b01      	subs	r3, #1
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b00:	e053      	b.n	8005baa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d11b      	bne.n	8005b48 <HAL_SPI_TransmitReceive+0x176>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d016      	beq.n	8005b48 <HAL_SPI_TransmitReceive+0x176>
 8005b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d113      	bne.n	8005b48 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b24:	881a      	ldrh	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b30:	1c9a      	adds	r2, r3, #2
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d119      	bne.n	8005b8a <HAL_SPI_TransmitReceive+0x1b8>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d014      	beq.n	8005b8a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	b292      	uxth	r2, r2
 8005b6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b72:	1c9a      	adds	r2, r3, #2
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b86:	2301      	movs	r3, #1
 8005b88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b8a:	f7fe fa9d 	bl	80040c8 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d807      	bhi.n	8005baa <HAL_SPI_TransmitReceive+0x1d8>
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba0:	d003      	beq.n	8005baa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ba8:	e0a7      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1a6      	bne.n	8005b02 <HAL_SPI_TransmitReceive+0x130>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1a1      	bne.n	8005b02 <HAL_SPI_TransmitReceive+0x130>
 8005bbe:	e07c      	b.n	8005cba <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d002      	beq.n	8005bce <HAL_SPI_TransmitReceive+0x1fc>
 8005bc8:	8b7b      	ldrh	r3, [r7, #26]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d16b      	bne.n	8005ca6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	330c      	adds	r3, #12
 8005bd8:	7812      	ldrb	r2, [r2, #0]
 8005bda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	3b01      	subs	r3, #1
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bf4:	e057      	b.n	8005ca6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f003 0302 	and.w	r3, r3, #2
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d11c      	bne.n	8005c3e <HAL_SPI_TransmitReceive+0x26c>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d017      	beq.n	8005c3e <HAL_SPI_TransmitReceive+0x26c>
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d114      	bne.n	8005c3e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	330c      	adds	r3, #12
 8005c1e:	7812      	ldrb	r2, [r2, #0]
 8005c20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d119      	bne.n	8005c80 <HAL_SPI_TransmitReceive+0x2ae>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d014      	beq.n	8005c80 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	1c5a      	adds	r2, r3, #1
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	3b01      	subs	r3, #1
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c80:	f7fe fa22 	bl	80040c8 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d803      	bhi.n	8005c98 <HAL_SPI_TransmitReceive+0x2c6>
 8005c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c96:	d102      	bne.n	8005c9e <HAL_SPI_TransmitReceive+0x2cc>
 8005c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d103      	bne.n	8005ca6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ca4:	e029      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1a2      	bne.n	8005bf6 <HAL_SPI_TransmitReceive+0x224>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d19d      	bne.n	8005bf6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 f8b2 	bl	8005e28 <SPI_EndRxTxTransaction>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d006      	beq.n	8005cd8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005cd6:	e010      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10b      	bne.n	8005cf8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	e000      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005cf8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3730      	adds	r7, #48	; 0x30
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
	...

08005d18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b088      	sub	sp, #32
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	603b      	str	r3, [r7, #0]
 8005d24:	4613      	mov	r3, r2
 8005d26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d28:	f7fe f9ce 	bl	80040c8 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d30:	1a9b      	subs	r3, r3, r2
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	4413      	add	r3, r2
 8005d36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d38:	f7fe f9c6 	bl	80040c8 <HAL_GetTick>
 8005d3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d3e:	4b39      	ldr	r3, [pc, #228]	; (8005e24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	015b      	lsls	r3, r3, #5
 8005d44:	0d1b      	lsrs	r3, r3, #20
 8005d46:	69fa      	ldr	r2, [r7, #28]
 8005d48:	fb02 f303 	mul.w	r3, r2, r3
 8005d4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d4e:	e054      	b.n	8005dfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d56:	d050      	beq.n	8005dfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d58:	f7fe f9b6 	bl	80040c8 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	69fa      	ldr	r2, [r7, #28]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d902      	bls.n	8005d6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d13d      	bne.n	8005dea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d86:	d111      	bne.n	8005dac <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d90:	d004      	beq.n	8005d9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d9a:	d107      	bne.n	8005dac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005daa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005db4:	d10f      	bne.n	8005dd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005dd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e017      	b.n	8005e1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d101      	bne.n	8005df4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	3b01      	subs	r3, #1
 8005df8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689a      	ldr	r2, [r3, #8]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	4013      	ands	r3, r2
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	bf0c      	ite	eq
 8005e0a:	2301      	moveq	r3, #1
 8005e0c:	2300      	movne	r3, #0
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	461a      	mov	r2, r3
 8005e12:	79fb      	ldrb	r3, [r7, #7]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d19b      	bne.n	8005d50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3720      	adds	r7, #32
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20000014 	.word	0x20000014

08005e28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b088      	sub	sp, #32
 8005e2c:	af02      	add	r7, sp, #8
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e34:	4b1b      	ldr	r3, [pc, #108]	; (8005ea4 <SPI_EndRxTxTransaction+0x7c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a1b      	ldr	r2, [pc, #108]	; (8005ea8 <SPI_EndRxTxTransaction+0x80>)
 8005e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3e:	0d5b      	lsrs	r3, r3, #21
 8005e40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e44:	fb02 f303 	mul.w	r3, r2, r3
 8005e48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e52:	d112      	bne.n	8005e7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	2180      	movs	r1, #128	; 0x80
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f7ff ff5a 	bl	8005d18 <SPI_WaitFlagStateUntilTimeout>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d016      	beq.n	8005e98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e6e:	f043 0220 	orr.w	r2, r3, #32
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e00f      	b.n	8005e9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00a      	beq.n	8005e96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e90:	2b80      	cmp	r3, #128	; 0x80
 8005e92:	d0f2      	beq.n	8005e7a <SPI_EndRxTxTransaction+0x52>
 8005e94:	e000      	b.n	8005e98 <SPI_EndRxTxTransaction+0x70>
        break;
 8005e96:	bf00      	nop
  }

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20000014 	.word	0x20000014
 8005ea8:	165e9f81 	.word	0x165e9f81

08005eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e041      	b.n	8005f42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d106      	bne.n	8005ed8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7fd fd22 	bl	800391c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4610      	mov	r0, r2
 8005eec:	f000 fe38 	bl	8006b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
	...

08005f4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d001      	beq.n	8005f64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e044      	b.n	8005fee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68da      	ldr	r2, [r3, #12]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0201 	orr.w	r2, r2, #1
 8005f7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a1e      	ldr	r2, [pc, #120]	; (8005ffc <HAL_TIM_Base_Start_IT+0xb0>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d018      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0x6c>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f8e:	d013      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0x6c>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a1a      	ldr	r2, [pc, #104]	; (8006000 <HAL_TIM_Base_Start_IT+0xb4>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d00e      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0x6c>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a19      	ldr	r2, [pc, #100]	; (8006004 <HAL_TIM_Base_Start_IT+0xb8>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d009      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0x6c>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a17      	ldr	r2, [pc, #92]	; (8006008 <HAL_TIM_Base_Start_IT+0xbc>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d004      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0x6c>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a16      	ldr	r2, [pc, #88]	; (800600c <HAL_TIM_Base_Start_IT+0xc0>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d111      	bne.n	8005fdc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2b06      	cmp	r3, #6
 8005fc8:	d010      	beq.n	8005fec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f042 0201 	orr.w	r2, r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fda:	e007      	b.n	8005fec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0201 	orr.w	r2, r2, #1
 8005fea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	40010000 	.word	0x40010000
 8006000:	40000400 	.word	0x40000400
 8006004:	40000800 	.word	0x40000800
 8006008:	40000c00 	.word	0x40000c00
 800600c:	40014000 	.word	0x40014000

08006010 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e041      	b.n	80060a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d106      	bne.n	800603c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f839 	bl	80060ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3304      	adds	r3, #4
 800604c:	4619      	mov	r1, r3
 800604e:	4610      	mov	r0, r2
 8006050:	f000 fd86 	bl	8006b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
	...

080060c4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80060d2:	2300      	movs	r3, #0
 80060d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d109      	bne.n	80060f0 <HAL_TIM_PWM_Start_DMA+0x2c>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	bf0c      	ite	eq
 80060e8:	2301      	moveq	r3, #1
 80060ea:	2300      	movne	r3, #0
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	e022      	b.n	8006136 <HAL_TIM_PWM_Start_DMA+0x72>
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b04      	cmp	r3, #4
 80060f4:	d109      	bne.n	800610a <HAL_TIM_PWM_Start_DMA+0x46>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	bf0c      	ite	eq
 8006102:	2301      	moveq	r3, #1
 8006104:	2300      	movne	r3, #0
 8006106:	b2db      	uxtb	r3, r3
 8006108:	e015      	b.n	8006136 <HAL_TIM_PWM_Start_DMA+0x72>
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	2b08      	cmp	r3, #8
 800610e:	d109      	bne.n	8006124 <HAL_TIM_PWM_Start_DMA+0x60>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b02      	cmp	r3, #2
 800611a:	bf0c      	ite	eq
 800611c:	2301      	moveq	r3, #1
 800611e:	2300      	movne	r3, #0
 8006120:	b2db      	uxtb	r3, r3
 8006122:	e008      	b.n	8006136 <HAL_TIM_PWM_Start_DMA+0x72>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b02      	cmp	r3, #2
 800612e:	bf0c      	ite	eq
 8006130:	2301      	moveq	r3, #1
 8006132:	2300      	movne	r3, #0
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800613a:	2302      	movs	r3, #2
 800613c:	e15d      	b.n	80063fa <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d109      	bne.n	8006158 <HAL_TIM_PWM_Start_DMA+0x94>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b01      	cmp	r3, #1
 800614e:	bf0c      	ite	eq
 8006150:	2301      	moveq	r3, #1
 8006152:	2300      	movne	r3, #0
 8006154:	b2db      	uxtb	r3, r3
 8006156:	e022      	b.n	800619e <HAL_TIM_PWM_Start_DMA+0xda>
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	2b04      	cmp	r3, #4
 800615c:	d109      	bne.n	8006172 <HAL_TIM_PWM_Start_DMA+0xae>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b01      	cmp	r3, #1
 8006168:	bf0c      	ite	eq
 800616a:	2301      	moveq	r3, #1
 800616c:	2300      	movne	r3, #0
 800616e:	b2db      	uxtb	r3, r3
 8006170:	e015      	b.n	800619e <HAL_TIM_PWM_Start_DMA+0xda>
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b08      	cmp	r3, #8
 8006176:	d109      	bne.n	800618c <HAL_TIM_PWM_Start_DMA+0xc8>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b01      	cmp	r3, #1
 8006182:	bf0c      	ite	eq
 8006184:	2301      	moveq	r3, #1
 8006186:	2300      	movne	r3, #0
 8006188:	b2db      	uxtb	r3, r3
 800618a:	e008      	b.n	800619e <HAL_TIM_PWM_Start_DMA+0xda>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b01      	cmp	r3, #1
 8006196:	bf0c      	ite	eq
 8006198:	2301      	moveq	r3, #1
 800619a:	2300      	movne	r3, #0
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d024      	beq.n	80061ec <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d104      	bne.n	80061b2 <HAL_TIM_PWM_Start_DMA+0xee>
 80061a8:	887b      	ldrh	r3, [r7, #2]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e123      	b.n	80063fa <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d104      	bne.n	80061c2 <HAL_TIM_PWM_Start_DMA+0xfe>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061c0:	e016      	b.n	80061f0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d104      	bne.n	80061d2 <HAL_TIM_PWM_Start_DMA+0x10e>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061d0:	e00e      	b.n	80061f0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d104      	bne.n	80061e2 <HAL_TIM_PWM_Start_DMA+0x11e>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061e0:	e006      	b.n	80061f0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2202      	movs	r2, #2
 80061e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061ea:	e001      	b.n	80061f0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e104      	b.n	80063fa <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2b0c      	cmp	r3, #12
 80061f4:	f200 80ae 	bhi.w	8006354 <HAL_TIM_PWM_Start_DMA+0x290>
 80061f8:	a201      	add	r2, pc, #4	; (adr r2, 8006200 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80061fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fe:	bf00      	nop
 8006200:	08006235 	.word	0x08006235
 8006204:	08006355 	.word	0x08006355
 8006208:	08006355 	.word	0x08006355
 800620c:	08006355 	.word	0x08006355
 8006210:	0800627d 	.word	0x0800627d
 8006214:	08006355 	.word	0x08006355
 8006218:	08006355 	.word	0x08006355
 800621c:	08006355 	.word	0x08006355
 8006220:	080062c5 	.word	0x080062c5
 8006224:	08006355 	.word	0x08006355
 8006228:	08006355 	.word	0x08006355
 800622c:	08006355 	.word	0x08006355
 8006230:	0800630d 	.word	0x0800630d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006238:	4a72      	ldr	r2, [pc, #456]	; (8006404 <HAL_TIM_PWM_Start_DMA+0x340>)
 800623a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006240:	4a71      	ldr	r2, [pc, #452]	; (8006408 <HAL_TIM_PWM_Start_DMA+0x344>)
 8006242:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	4a70      	ldr	r2, [pc, #448]	; (800640c <HAL_TIM_PWM_Start_DMA+0x348>)
 800624a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006250:	6879      	ldr	r1, [r7, #4]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3334      	adds	r3, #52	; 0x34
 8006258:	461a      	mov	r2, r3
 800625a:	887b      	ldrh	r3, [r7, #2]
 800625c:	f7fe f924 	bl	80044a8 <HAL_DMA_Start_IT>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e0c7      	b.n	80063fa <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68da      	ldr	r2, [r3, #12]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006278:	60da      	str	r2, [r3, #12]
      break;
 800627a:	e06e      	b.n	800635a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006280:	4a60      	ldr	r2, [pc, #384]	; (8006404 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006282:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006288:	4a5f      	ldr	r2, [pc, #380]	; (8006408 <HAL_TIM_PWM_Start_DMA+0x344>)
 800628a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006290:	4a5e      	ldr	r2, [pc, #376]	; (800640c <HAL_TIM_PWM_Start_DMA+0x348>)
 8006292:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006298:	6879      	ldr	r1, [r7, #4]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3338      	adds	r3, #56	; 0x38
 80062a0:	461a      	mov	r2, r3
 80062a2:	887b      	ldrh	r3, [r7, #2]
 80062a4:	f7fe f900 	bl	80044a8 <HAL_DMA_Start_IT>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d001      	beq.n	80062b2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e0a3      	b.n	80063fa <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68da      	ldr	r2, [r3, #12]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062c0:	60da      	str	r2, [r3, #12]
      break;
 80062c2:	e04a      	b.n	800635a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c8:	4a4e      	ldr	r2, [pc, #312]	; (8006404 <HAL_TIM_PWM_Start_DMA+0x340>)
 80062ca:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d0:	4a4d      	ldr	r2, [pc, #308]	; (8006408 <HAL_TIM_PWM_Start_DMA+0x344>)
 80062d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d8:	4a4c      	ldr	r2, [pc, #304]	; (800640c <HAL_TIM_PWM_Start_DMA+0x348>)
 80062da:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80062e0:	6879      	ldr	r1, [r7, #4]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	333c      	adds	r3, #60	; 0x3c
 80062e8:	461a      	mov	r2, r3
 80062ea:	887b      	ldrh	r3, [r7, #2]
 80062ec:	f7fe f8dc 	bl	80044a8 <HAL_DMA_Start_IT>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e07f      	b.n	80063fa <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68da      	ldr	r2, [r3, #12]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006308:	60da      	str	r2, [r3, #12]
      break;
 800630a:	e026      	b.n	800635a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006310:	4a3c      	ldr	r2, [pc, #240]	; (8006404 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006312:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006318:	4a3b      	ldr	r2, [pc, #236]	; (8006408 <HAL_TIM_PWM_Start_DMA+0x344>)
 800631a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006320:	4a3a      	ldr	r2, [pc, #232]	; (800640c <HAL_TIM_PWM_Start_DMA+0x348>)
 8006322:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006328:	6879      	ldr	r1, [r7, #4]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3340      	adds	r3, #64	; 0x40
 8006330:	461a      	mov	r2, r3
 8006332:	887b      	ldrh	r3, [r7, #2]
 8006334:	f7fe f8b8 	bl	80044a8 <HAL_DMA_Start_IT>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e05b      	b.n	80063fa <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006350:	60da      	str	r2, [r3, #12]
      break;
 8006352:	e002      	b.n	800635a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	75fb      	strb	r3, [r7, #23]
      break;
 8006358:	bf00      	nop
  }

  if (status == HAL_OK)
 800635a:	7dfb      	ldrb	r3, [r7, #23]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d14b      	bne.n	80063f8 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2201      	movs	r2, #1
 8006366:	68b9      	ldr	r1, [r7, #8]
 8006368:	4618      	mov	r0, r3
 800636a:	f000 fe9f 	bl	80070ac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a27      	ldr	r2, [pc, #156]	; (8006410 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d107      	bne.n	8006388 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006386:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a20      	ldr	r2, [pc, #128]	; (8006410 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d018      	beq.n	80063c4 <HAL_TIM_PWM_Start_DMA+0x300>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800639a:	d013      	beq.n	80063c4 <HAL_TIM_PWM_Start_DMA+0x300>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a1c      	ldr	r2, [pc, #112]	; (8006414 <HAL_TIM_PWM_Start_DMA+0x350>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d00e      	beq.n	80063c4 <HAL_TIM_PWM_Start_DMA+0x300>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a1b      	ldr	r2, [pc, #108]	; (8006418 <HAL_TIM_PWM_Start_DMA+0x354>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d009      	beq.n	80063c4 <HAL_TIM_PWM_Start_DMA+0x300>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a19      	ldr	r2, [pc, #100]	; (800641c <HAL_TIM_PWM_Start_DMA+0x358>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d004      	beq.n	80063c4 <HAL_TIM_PWM_Start_DMA+0x300>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a18      	ldr	r2, [pc, #96]	; (8006420 <HAL_TIM_PWM_Start_DMA+0x35c>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d111      	bne.n	80063e8 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f003 0307 	and.w	r3, r3, #7
 80063ce:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	2b06      	cmp	r3, #6
 80063d4:	d010      	beq.n	80063f8 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f042 0201 	orr.w	r2, r2, #1
 80063e4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063e6:	e007      	b.n	80063f8 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f042 0201 	orr.w	r2, r2, #1
 80063f6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80063f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3718      	adds	r7, #24
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	08006a51 	.word	0x08006a51
 8006408:	08006af9 	.word	0x08006af9
 800640c:	080069bf 	.word	0x080069bf
 8006410:	40010000 	.word	0x40010000
 8006414:	40000400 	.word	0x40000400
 8006418:	40000800 	.word	0x40000800
 800641c:	40000c00 	.word	0x40000c00
 8006420:	40014000 	.word	0x40014000

08006424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b02      	cmp	r3, #2
 8006438:	d122      	bne.n	8006480 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b02      	cmp	r3, #2
 8006446:	d11b      	bne.n	8006480 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f06f 0202 	mvn.w	r2, #2
 8006450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	f003 0303 	and.w	r3, r3, #3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fa77 	bl	800695a <HAL_TIM_IC_CaptureCallback>
 800646c:	e005      	b.n	800647a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fa69 	bl	8006946 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fa7a 	bl	800696e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f003 0304 	and.w	r3, r3, #4
 800648a:	2b04      	cmp	r3, #4
 800648c:	d122      	bne.n	80064d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b04      	cmp	r3, #4
 800649a:	d11b      	bne.n	80064d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f06f 0204 	mvn.w	r2, #4
 80064a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2202      	movs	r2, #2
 80064aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fa4d 	bl	800695a <HAL_TIM_IC_CaptureCallback>
 80064c0:	e005      	b.n	80064ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 fa3f 	bl	8006946 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fa50 	bl	800696e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	f003 0308 	and.w	r3, r3, #8
 80064de:	2b08      	cmp	r3, #8
 80064e0:	d122      	bne.n	8006528 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f003 0308 	and.w	r3, r3, #8
 80064ec:	2b08      	cmp	r3, #8
 80064ee:	d11b      	bne.n	8006528 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f06f 0208 	mvn.w	r2, #8
 80064f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2204      	movs	r2, #4
 80064fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	f003 0303 	and.w	r3, r3, #3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fa23 	bl	800695a <HAL_TIM_IC_CaptureCallback>
 8006514:	e005      	b.n	8006522 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fa15 	bl	8006946 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 fa26 	bl	800696e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	f003 0310 	and.w	r3, r3, #16
 8006532:	2b10      	cmp	r3, #16
 8006534:	d122      	bne.n	800657c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f003 0310 	and.w	r3, r3, #16
 8006540:	2b10      	cmp	r3, #16
 8006542:	d11b      	bne.n	800657c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f06f 0210 	mvn.w	r2, #16
 800654c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2208      	movs	r2, #8
 8006552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f9f9 	bl	800695a <HAL_TIM_IC_CaptureCallback>
 8006568:	e005      	b.n	8006576 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f9eb 	bl	8006946 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f9fc 	bl	800696e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	2b01      	cmp	r3, #1
 8006588:	d10e      	bne.n	80065a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	2b01      	cmp	r3, #1
 8006596:	d107      	bne.n	80065a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f06f 0201 	mvn.w	r2, #1
 80065a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7fb ffba 	bl	800251c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b2:	2b80      	cmp	r3, #128	; 0x80
 80065b4:	d10e      	bne.n	80065d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c0:	2b80      	cmp	r3, #128	; 0x80
 80065c2:	d107      	bne.n	80065d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 fe5c 	bl	800728c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065de:	2b40      	cmp	r3, #64	; 0x40
 80065e0:	d10e      	bne.n	8006600 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ec:	2b40      	cmp	r3, #64	; 0x40
 80065ee:	d107      	bne.n	8006600 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f9cb 	bl	8006996 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	f003 0320 	and.w	r3, r3, #32
 800660a:	2b20      	cmp	r3, #32
 800660c:	d10e      	bne.n	800662c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f003 0320 	and.w	r3, r3, #32
 8006618:	2b20      	cmp	r3, #32
 800661a:	d107      	bne.n	800662c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f06f 0220 	mvn.w	r2, #32
 8006624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fe26 	bl	8007278 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800662c:	bf00      	nop
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b086      	sub	sp, #24
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006640:	2300      	movs	r3, #0
 8006642:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800664a:	2b01      	cmp	r3, #1
 800664c:	d101      	bne.n	8006652 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800664e:	2302      	movs	r3, #2
 8006650:	e0ae      	b.n	80067b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b0c      	cmp	r3, #12
 800665e:	f200 809f 	bhi.w	80067a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006662:	a201      	add	r2, pc, #4	; (adr r2, 8006668 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006668:	0800669d 	.word	0x0800669d
 800666c:	080067a1 	.word	0x080067a1
 8006670:	080067a1 	.word	0x080067a1
 8006674:	080067a1 	.word	0x080067a1
 8006678:	080066dd 	.word	0x080066dd
 800667c:	080067a1 	.word	0x080067a1
 8006680:	080067a1 	.word	0x080067a1
 8006684:	080067a1 	.word	0x080067a1
 8006688:	0800671f 	.word	0x0800671f
 800668c:	080067a1 	.word	0x080067a1
 8006690:	080067a1 	.word	0x080067a1
 8006694:	080067a1 	.word	0x080067a1
 8006698:	0800675f 	.word	0x0800675f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68b9      	ldr	r1, [r7, #8]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f000 fadc 	bl	8006c60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699a      	ldr	r2, [r3, #24]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f042 0208 	orr.w	r2, r2, #8
 80066b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	699a      	ldr	r2, [r3, #24]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 0204 	bic.w	r2, r2, #4
 80066c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6999      	ldr	r1, [r3, #24]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	691a      	ldr	r2, [r3, #16]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	619a      	str	r2, [r3, #24]
      break;
 80066da:	e064      	b.n	80067a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68b9      	ldr	r1, [r7, #8]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 fb22 	bl	8006d2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	699a      	ldr	r2, [r3, #24]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699a      	ldr	r2, [r3, #24]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6999      	ldr	r1, [r3, #24]
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	021a      	lsls	r2, r3, #8
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	430a      	orrs	r2, r1
 800671a:	619a      	str	r2, [r3, #24]
      break;
 800671c:	e043      	b.n	80067a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68b9      	ldr	r1, [r7, #8]
 8006724:	4618      	mov	r0, r3
 8006726:	f000 fb6d 	bl	8006e04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	69da      	ldr	r2, [r3, #28]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f042 0208 	orr.w	r2, r2, #8
 8006738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69da      	ldr	r2, [r3, #28]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f022 0204 	bic.w	r2, r2, #4
 8006748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	69d9      	ldr	r1, [r3, #28]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	691a      	ldr	r2, [r3, #16]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	61da      	str	r2, [r3, #28]
      break;
 800675c:	e023      	b.n	80067a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68b9      	ldr	r1, [r7, #8]
 8006764:	4618      	mov	r0, r3
 8006766:	f000 fbb7 	bl	8006ed8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	69da      	ldr	r2, [r3, #28]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69da      	ldr	r2, [r3, #28]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	69d9      	ldr	r1, [r3, #28]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	021a      	lsls	r2, r3, #8
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	61da      	str	r2, [r3, #28]
      break;
 800679e:	e002      	b.n	80067a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	75fb      	strb	r3, [r7, #23]
      break;
 80067a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3718      	adds	r7, #24
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067c2:	2300      	movs	r3, #0
 80067c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d101      	bne.n	80067d4 <HAL_TIM_ConfigClockSource+0x1c>
 80067d0:	2302      	movs	r3, #2
 80067d2:	e0b4      	b.n	800693e <HAL_TIM_ConfigClockSource+0x186>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2202      	movs	r2, #2
 80067e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800680c:	d03e      	beq.n	800688c <HAL_TIM_ConfigClockSource+0xd4>
 800680e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006812:	f200 8087 	bhi.w	8006924 <HAL_TIM_ConfigClockSource+0x16c>
 8006816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800681a:	f000 8086 	beq.w	800692a <HAL_TIM_ConfigClockSource+0x172>
 800681e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006822:	d87f      	bhi.n	8006924 <HAL_TIM_ConfigClockSource+0x16c>
 8006824:	2b70      	cmp	r3, #112	; 0x70
 8006826:	d01a      	beq.n	800685e <HAL_TIM_ConfigClockSource+0xa6>
 8006828:	2b70      	cmp	r3, #112	; 0x70
 800682a:	d87b      	bhi.n	8006924 <HAL_TIM_ConfigClockSource+0x16c>
 800682c:	2b60      	cmp	r3, #96	; 0x60
 800682e:	d050      	beq.n	80068d2 <HAL_TIM_ConfigClockSource+0x11a>
 8006830:	2b60      	cmp	r3, #96	; 0x60
 8006832:	d877      	bhi.n	8006924 <HAL_TIM_ConfigClockSource+0x16c>
 8006834:	2b50      	cmp	r3, #80	; 0x50
 8006836:	d03c      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0xfa>
 8006838:	2b50      	cmp	r3, #80	; 0x50
 800683a:	d873      	bhi.n	8006924 <HAL_TIM_ConfigClockSource+0x16c>
 800683c:	2b40      	cmp	r3, #64	; 0x40
 800683e:	d058      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x13a>
 8006840:	2b40      	cmp	r3, #64	; 0x40
 8006842:	d86f      	bhi.n	8006924 <HAL_TIM_ConfigClockSource+0x16c>
 8006844:	2b30      	cmp	r3, #48	; 0x30
 8006846:	d064      	beq.n	8006912 <HAL_TIM_ConfigClockSource+0x15a>
 8006848:	2b30      	cmp	r3, #48	; 0x30
 800684a:	d86b      	bhi.n	8006924 <HAL_TIM_ConfigClockSource+0x16c>
 800684c:	2b20      	cmp	r3, #32
 800684e:	d060      	beq.n	8006912 <HAL_TIM_ConfigClockSource+0x15a>
 8006850:	2b20      	cmp	r3, #32
 8006852:	d867      	bhi.n	8006924 <HAL_TIM_ConfigClockSource+0x16c>
 8006854:	2b00      	cmp	r3, #0
 8006856:	d05c      	beq.n	8006912 <HAL_TIM_ConfigClockSource+0x15a>
 8006858:	2b10      	cmp	r3, #16
 800685a:	d05a      	beq.n	8006912 <HAL_TIM_ConfigClockSource+0x15a>
 800685c:	e062      	b.n	8006924 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6818      	ldr	r0, [r3, #0]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	6899      	ldr	r1, [r3, #8]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	f000 fbfd 	bl	800706c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006880:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	609a      	str	r2, [r3, #8]
      break;
 800688a:	e04f      	b.n	800692c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6818      	ldr	r0, [r3, #0]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	6899      	ldr	r1, [r3, #8]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	685a      	ldr	r2, [r3, #4]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f000 fbe6 	bl	800706c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689a      	ldr	r2, [r3, #8]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068ae:	609a      	str	r2, [r3, #8]
      break;
 80068b0:	e03c      	b.n	800692c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6818      	ldr	r0, [r3, #0]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	6859      	ldr	r1, [r3, #4]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	461a      	mov	r2, r3
 80068c0:	f000 fb5a 	bl	8006f78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2150      	movs	r1, #80	; 0x50
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 fbb3 	bl	8007036 <TIM_ITRx_SetConfig>
      break;
 80068d0:	e02c      	b.n	800692c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6818      	ldr	r0, [r3, #0]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	6859      	ldr	r1, [r3, #4]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	461a      	mov	r2, r3
 80068e0:	f000 fb79 	bl	8006fd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2160      	movs	r1, #96	; 0x60
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 fba3 	bl	8007036 <TIM_ITRx_SetConfig>
      break;
 80068f0:	e01c      	b.n	800692c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6818      	ldr	r0, [r3, #0]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	6859      	ldr	r1, [r3, #4]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	461a      	mov	r2, r3
 8006900:	f000 fb3a 	bl	8006f78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2140      	movs	r1, #64	; 0x40
 800690a:	4618      	mov	r0, r3
 800690c:	f000 fb93 	bl	8007036 <TIM_ITRx_SetConfig>
      break;
 8006910:	e00c      	b.n	800692c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4619      	mov	r1, r3
 800691c:	4610      	mov	r0, r2
 800691e:	f000 fb8a 	bl	8007036 <TIM_ITRx_SetConfig>
      break;
 8006922:	e003      	b.n	800692c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	73fb      	strb	r3, [r7, #15]
      break;
 8006928:	e000      	b.n	800692c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800692a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800693c:	7bfb      	ldrb	r3, [r7, #15]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006946:	b480      	push	{r7}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800694e:	bf00      	nop
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800695a:	b480      	push	{r7}
 800695c:	b083      	sub	sp, #12
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006962:	bf00      	nop
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800696e:	b480      	push	{r7}
 8006970:	b083      	sub	sp, #12
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006976:	bf00      	nop
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006982:	b480      	push	{r7}
 8006984:	b083      	sub	sp, #12
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800698a:	bf00      	nop
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800699e:	bf00      	nop
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80069aa:	b480      	push	{r7}
 80069ac:	b083      	sub	sp, #12
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80069b2:	bf00      	nop
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b084      	sub	sp, #16
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ca:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d107      	bne.n	80069e6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2201      	movs	r2, #1
 80069da:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069e4:	e02a      	b.n	8006a3c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d107      	bne.n	8006a00 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2202      	movs	r2, #2
 80069f4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069fe:	e01d      	b.n	8006a3c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d107      	bne.n	8006a1a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2204      	movs	r2, #4
 8006a0e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a18:	e010      	b.n	8006a3c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d107      	bne.n	8006a34 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2208      	movs	r2, #8
 8006a28:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a32:	e003      	b.n	8006a3c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f7ff ffb4 	bl	80069aa <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	771a      	strb	r2, [r3, #28]
}
 8006a48:	bf00      	nop
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d10b      	bne.n	8006a80 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d136      	bne.n	8006ae4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a7e:	e031      	b.n	8006ae4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d10b      	bne.n	8006aa2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d125      	bne.n	8006ae4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006aa0:	e020      	b.n	8006ae4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d10b      	bne.n	8006ac4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2204      	movs	r2, #4
 8006ab0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d114      	bne.n	8006ae4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ac2:	e00f      	b.n	8006ae4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d10a      	bne.n	8006ae4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2208      	movs	r2, #8
 8006ad2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d103      	bne.n	8006ae4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f7ff ff42 	bl	800696e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	771a      	strb	r2, [r3, #28]
}
 8006af0:	bf00      	nop
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b04:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d103      	bne.n	8006b18 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2201      	movs	r2, #1
 8006b14:	771a      	strb	r2, [r3, #28]
 8006b16:	e019      	b.n	8006b4c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d103      	bne.n	8006b2a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2202      	movs	r2, #2
 8006b26:	771a      	strb	r2, [r3, #28]
 8006b28:	e010      	b.n	8006b4c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d103      	bne.n	8006b3c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2204      	movs	r2, #4
 8006b38:	771a      	strb	r2, [r3, #28]
 8006b3a:	e007      	b.n	8006b4c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d102      	bne.n	8006b4c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2208      	movs	r2, #8
 8006b4a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f7ff ff18 	bl	8006982 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	771a      	strb	r2, [r3, #28]
}
 8006b58:	bf00      	nop
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a34      	ldr	r2, [pc, #208]	; (8006c44 <TIM_Base_SetConfig+0xe4>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d00f      	beq.n	8006b98 <TIM_Base_SetConfig+0x38>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b7e:	d00b      	beq.n	8006b98 <TIM_Base_SetConfig+0x38>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a31      	ldr	r2, [pc, #196]	; (8006c48 <TIM_Base_SetConfig+0xe8>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d007      	beq.n	8006b98 <TIM_Base_SetConfig+0x38>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a30      	ldr	r2, [pc, #192]	; (8006c4c <TIM_Base_SetConfig+0xec>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d003      	beq.n	8006b98 <TIM_Base_SetConfig+0x38>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a2f      	ldr	r2, [pc, #188]	; (8006c50 <TIM_Base_SetConfig+0xf0>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d108      	bne.n	8006baa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a25      	ldr	r2, [pc, #148]	; (8006c44 <TIM_Base_SetConfig+0xe4>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d01b      	beq.n	8006bea <TIM_Base_SetConfig+0x8a>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bb8:	d017      	beq.n	8006bea <TIM_Base_SetConfig+0x8a>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a22      	ldr	r2, [pc, #136]	; (8006c48 <TIM_Base_SetConfig+0xe8>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d013      	beq.n	8006bea <TIM_Base_SetConfig+0x8a>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a21      	ldr	r2, [pc, #132]	; (8006c4c <TIM_Base_SetConfig+0xec>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d00f      	beq.n	8006bea <TIM_Base_SetConfig+0x8a>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a20      	ldr	r2, [pc, #128]	; (8006c50 <TIM_Base_SetConfig+0xf0>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d00b      	beq.n	8006bea <TIM_Base_SetConfig+0x8a>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a1f      	ldr	r2, [pc, #124]	; (8006c54 <TIM_Base_SetConfig+0xf4>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d007      	beq.n	8006bea <TIM_Base_SetConfig+0x8a>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a1e      	ldr	r2, [pc, #120]	; (8006c58 <TIM_Base_SetConfig+0xf8>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d003      	beq.n	8006bea <TIM_Base_SetConfig+0x8a>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a1d      	ldr	r2, [pc, #116]	; (8006c5c <TIM_Base_SetConfig+0xfc>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d108      	bne.n	8006bfc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a08      	ldr	r2, [pc, #32]	; (8006c44 <TIM_Base_SetConfig+0xe4>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d103      	bne.n	8006c30 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	691a      	ldr	r2, [r3, #16]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	615a      	str	r2, [r3, #20]
}
 8006c36:	bf00      	nop
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	40010000 	.word	0x40010000
 8006c48:	40000400 	.word	0x40000400
 8006c4c:	40000800 	.word	0x40000800
 8006c50:	40000c00 	.word	0x40000c00
 8006c54:	40014000 	.word	0x40014000
 8006c58:	40014400 	.word	0x40014400
 8006c5c:	40014800 	.word	0x40014800

08006c60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b087      	sub	sp, #28
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	f023 0201 	bic.w	r2, r3, #1
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f023 0303 	bic.w	r3, r3, #3
 8006c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f023 0302 	bic.w	r3, r3, #2
 8006ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a1c      	ldr	r2, [pc, #112]	; (8006d28 <TIM_OC1_SetConfig+0xc8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d10c      	bne.n	8006cd6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	f023 0308 	bic.w	r3, r3, #8
 8006cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f023 0304 	bic.w	r3, r3, #4
 8006cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a13      	ldr	r2, [pc, #76]	; (8006d28 <TIM_OC1_SetConfig+0xc8>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d111      	bne.n	8006d02 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	621a      	str	r2, [r3, #32]
}
 8006d1c:	bf00      	nop
 8006d1e:	371c      	adds	r7, #28
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	40010000 	.word	0x40010000

08006d2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b087      	sub	sp, #28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	f023 0210 	bic.w	r2, r3, #16
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	021b      	lsls	r3, r3, #8
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f023 0320 	bic.w	r3, r3, #32
 8006d76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	011b      	lsls	r3, r3, #4
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a1e      	ldr	r2, [pc, #120]	; (8006e00 <TIM_OC2_SetConfig+0xd4>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d10d      	bne.n	8006da8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	011b      	lsls	r3, r3, #4
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006da6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a15      	ldr	r2, [pc, #84]	; (8006e00 <TIM_OC2_SetConfig+0xd4>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d113      	bne.n	8006dd8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006db6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	695b      	ldr	r3, [r3, #20]
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	621a      	str	r2, [r3, #32]
}
 8006df2:	bf00      	nop
 8006df4:	371c      	adds	r7, #28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	40010000 	.word	0x40010000

08006e04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b087      	sub	sp, #28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	69db      	ldr	r3, [r3, #28]
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0303 	bic.w	r3, r3, #3
 8006e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	021b      	lsls	r3, r3, #8
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a1d      	ldr	r2, [pc, #116]	; (8006ed4 <TIM_OC3_SetConfig+0xd0>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d10d      	bne.n	8006e7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	021b      	lsls	r3, r3, #8
 8006e70:	697a      	ldr	r2, [r7, #20]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a14      	ldr	r2, [pc, #80]	; (8006ed4 <TIM_OC3_SetConfig+0xd0>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d113      	bne.n	8006eae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	011b      	lsls	r3, r3, #4
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	011b      	lsls	r3, r3, #4
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	621a      	str	r2, [r3, #32]
}
 8006ec8:	bf00      	nop
 8006eca:	371c      	adds	r7, #28
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	40010000 	.word	0x40010000

08006ed8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	021b      	lsls	r3, r3, #8
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	031b      	lsls	r3, r3, #12
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a10      	ldr	r2, [pc, #64]	; (8006f74 <TIM_OC4_SetConfig+0x9c>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d109      	bne.n	8006f4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	695b      	ldr	r3, [r3, #20]
 8006f44:	019b      	lsls	r3, r3, #6
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	685a      	ldr	r2, [r3, #4]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	621a      	str	r2, [r3, #32]
}
 8006f66:	bf00      	nop
 8006f68:	371c      	adds	r7, #28
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	40010000 	.word	0x40010000

08006f78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b087      	sub	sp, #28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	f023 0201 	bic.w	r2, r3, #1
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	011b      	lsls	r3, r3, #4
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f023 030a 	bic.w	r3, r3, #10
 8006fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	621a      	str	r2, [r3, #32]
}
 8006fca:	bf00      	nop
 8006fcc:	371c      	adds	r7, #28
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b087      	sub	sp, #28
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	60f8      	str	r0, [r7, #12]
 8006fde:	60b9      	str	r1, [r7, #8]
 8006fe0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	f023 0210 	bic.w	r2, r3, #16
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007000:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	031b      	lsls	r3, r3, #12
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	4313      	orrs	r3, r2
 800700a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007012:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	011b      	lsls	r3, r3, #4
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	4313      	orrs	r3, r2
 800701c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	621a      	str	r2, [r3, #32]
}
 800702a:	bf00      	nop
 800702c:	371c      	adds	r7, #28
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007036:	b480      	push	{r7}
 8007038:	b085      	sub	sp, #20
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800704c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4313      	orrs	r3, r2
 8007054:	f043 0307 	orr.w	r3, r3, #7
 8007058:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	609a      	str	r2, [r3, #8]
}
 8007060:	bf00      	nop
 8007062:	3714      	adds	r7, #20
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
 8007078:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007086:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	021a      	lsls	r2, r3, #8
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	431a      	orrs	r2, r3
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	4313      	orrs	r3, r2
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	4313      	orrs	r3, r2
 8007098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	609a      	str	r2, [r3, #8]
}
 80070a0:	bf00      	nop
 80070a2:	371c      	adds	r7, #28
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b087      	sub	sp, #28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	f003 031f 	and.w	r3, r3, #31
 80070be:	2201      	movs	r2, #1
 80070c0:	fa02 f303 	lsl.w	r3, r2, r3
 80070c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6a1a      	ldr	r2, [r3, #32]
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	43db      	mvns	r3, r3
 80070ce:	401a      	ands	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6a1a      	ldr	r2, [r3, #32]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	f003 031f 	and.w	r3, r3, #31
 80070de:	6879      	ldr	r1, [r7, #4]
 80070e0:	fa01 f303 	lsl.w	r3, r1, r3
 80070e4:	431a      	orrs	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	621a      	str	r2, [r3, #32]
}
 80070ea:	bf00      	nop
 80070ec:	371c      	adds	r7, #28
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
	...

080070f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007108:	2b01      	cmp	r3, #1
 800710a:	d101      	bne.n	8007110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800710c:	2302      	movs	r3, #2
 800710e:	e050      	b.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2202      	movs	r2, #2
 800711c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007136:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	4313      	orrs	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a1c      	ldr	r2, [pc, #112]	; (80071c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d018      	beq.n	8007186 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800715c:	d013      	beq.n	8007186 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a18      	ldr	r2, [pc, #96]	; (80071c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d00e      	beq.n	8007186 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a16      	ldr	r2, [pc, #88]	; (80071c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d009      	beq.n	8007186 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a15      	ldr	r2, [pc, #84]	; (80071cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d004      	beq.n	8007186 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a13      	ldr	r2, [pc, #76]	; (80071d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d10c      	bne.n	80071a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800718c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	4313      	orrs	r3, r2
 8007196:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	40010000 	.word	0x40010000
 80071c4:	40000400 	.word	0x40000400
 80071c8:	40000800 	.word	0x40000800
 80071cc:	40000c00 	.word	0x40000c00
 80071d0:	40014000 	.word	0x40014000

080071d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80071de:	2300      	movs	r3, #0
 80071e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d101      	bne.n	80071f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80071ec:	2302      	movs	r3, #2
 80071ee:	e03d      	b.n	800726c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	4313      	orrs	r3, r2
 8007204:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	4313      	orrs	r3, r2
 8007212:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	4313      	orrs	r3, r2
 8007220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4313      	orrs	r3, r2
 800722e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	4313      	orrs	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	695b      	ldr	r3, [r3, #20]
 8007248:	4313      	orrs	r3, r2
 800724a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	69db      	ldr	r3, [r3, #28]
 8007256:	4313      	orrs	r3, r2
 8007258:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3714      	adds	r7, #20
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d101      	bne.n	80072b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e03f      	b.n	8007332 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d106      	bne.n	80072cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7fc fbd4 	bl	8003a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2224      	movs	r2, #36	; 0x24
 80072d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68da      	ldr	r2, [r3, #12]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 f929 	bl	800753c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	691a      	ldr	r2, [r3, #16]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	695a      	ldr	r2, [r3, #20]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007308:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68da      	ldr	r2, [r3, #12]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007318:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2220      	movs	r2, #32
 8007324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2220      	movs	r2, #32
 800732c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b08a      	sub	sp, #40	; 0x28
 800733e:	af02      	add	r7, sp, #8
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	60b9      	str	r1, [r7, #8]
 8007344:	603b      	str	r3, [r7, #0]
 8007346:	4613      	mov	r3, r2
 8007348:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800734a:	2300      	movs	r3, #0
 800734c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b20      	cmp	r3, #32
 8007358:	d17c      	bne.n	8007454 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <HAL_UART_Transmit+0x2c>
 8007360:	88fb      	ldrh	r3, [r7, #6]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e075      	b.n	8007456 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007370:	2b01      	cmp	r3, #1
 8007372:	d101      	bne.n	8007378 <HAL_UART_Transmit+0x3e>
 8007374:	2302      	movs	r3, #2
 8007376:	e06e      	b.n	8007456 <HAL_UART_Transmit+0x11c>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2221      	movs	r2, #33	; 0x21
 800738a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800738e:	f7fc fe9b 	bl	80040c8 <HAL_GetTick>
 8007392:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	88fa      	ldrh	r2, [r7, #6]
 8007398:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	88fa      	ldrh	r2, [r7, #6]
 800739e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073a8:	d108      	bne.n	80073bc <HAL_UART_Transmit+0x82>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d104      	bne.n	80073bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80073b2:	2300      	movs	r3, #0
 80073b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	61bb      	str	r3, [r7, #24]
 80073ba:	e003      	b.n	80073c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073c0:	2300      	movs	r3, #0
 80073c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80073cc:	e02a      	b.n	8007424 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	2200      	movs	r2, #0
 80073d6:	2180      	movs	r1, #128	; 0x80
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f000 f840 	bl	800745e <UART_WaitOnFlagUntilTimeout>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d001      	beq.n	80073e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e036      	b.n	8007456 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10b      	bne.n	8007406 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	461a      	mov	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	3302      	adds	r3, #2
 8007402:	61bb      	str	r3, [r7, #24]
 8007404:	e007      	b.n	8007416 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	781a      	ldrb	r2, [r3, #0]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	3301      	adds	r3, #1
 8007414:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800741a:	b29b      	uxth	r3, r3
 800741c:	3b01      	subs	r3, #1
 800741e:	b29a      	uxth	r2, r3
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007428:	b29b      	uxth	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1cf      	bne.n	80073ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	2200      	movs	r2, #0
 8007436:	2140      	movs	r1, #64	; 0x40
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 f810 	bl	800745e <UART_WaitOnFlagUntilTimeout>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e006      	b.n	8007456 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2220      	movs	r2, #32
 800744c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007450:	2300      	movs	r3, #0
 8007452:	e000      	b.n	8007456 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007454:	2302      	movs	r3, #2
  }
}
 8007456:	4618      	mov	r0, r3
 8007458:	3720      	adds	r7, #32
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b090      	sub	sp, #64	; 0x40
 8007462:	af00      	add	r7, sp, #0
 8007464:	60f8      	str	r0, [r7, #12]
 8007466:	60b9      	str	r1, [r7, #8]
 8007468:	603b      	str	r3, [r7, #0]
 800746a:	4613      	mov	r3, r2
 800746c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800746e:	e050      	b.n	8007512 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007476:	d04c      	beq.n	8007512 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800747a:	2b00      	cmp	r3, #0
 800747c:	d007      	beq.n	800748e <UART_WaitOnFlagUntilTimeout+0x30>
 800747e:	f7fc fe23 	bl	80040c8 <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800748a:	429a      	cmp	r2, r3
 800748c:	d241      	bcs.n	8007512 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	330c      	adds	r3, #12
 8007494:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007498:	e853 3f00 	ldrex	r3, [r3]
 800749c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	330c      	adds	r3, #12
 80074ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80074ae:	637a      	str	r2, [r7, #52]	; 0x34
 80074b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074b6:	e841 2300 	strex	r3, r2, [r1]
 80074ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1e5      	bne.n	800748e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3314      	adds	r3, #20
 80074c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	e853 3f00 	ldrex	r3, [r3]
 80074d0:	613b      	str	r3, [r7, #16]
   return(result);
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	f023 0301 	bic.w	r3, r3, #1
 80074d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	3314      	adds	r3, #20
 80074e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074e2:	623a      	str	r2, [r7, #32]
 80074e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e6:	69f9      	ldr	r1, [r7, #28]
 80074e8:	6a3a      	ldr	r2, [r7, #32]
 80074ea:	e841 2300 	strex	r3, r2, [r1]
 80074ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1e5      	bne.n	80074c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2220      	movs	r2, #32
 80074fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2220      	movs	r2, #32
 8007502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e00f      	b.n	8007532 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	4013      	ands	r3, r2
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	429a      	cmp	r2, r3
 8007520:	bf0c      	ite	eq
 8007522:	2301      	moveq	r3, #1
 8007524:	2300      	movne	r3, #0
 8007526:	b2db      	uxtb	r3, r3
 8007528:	461a      	mov	r2, r3
 800752a:	79fb      	ldrb	r3, [r7, #7]
 800752c:	429a      	cmp	r2, r3
 800752e:	d09f      	beq.n	8007470 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3740      	adds	r7, #64	; 0x40
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
	...

0800753c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800753c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007540:	b0c0      	sub	sp, #256	; 0x100
 8007542:	af00      	add	r7, sp, #0
 8007544:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007558:	68d9      	ldr	r1, [r3, #12]
 800755a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	ea40 0301 	orr.w	r3, r0, r1
 8007564:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800756a:	689a      	ldr	r2, [r3, #8]
 800756c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	431a      	orrs	r2, r3
 8007574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007578:	695b      	ldr	r3, [r3, #20]
 800757a:	431a      	orrs	r2, r3
 800757c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007580:	69db      	ldr	r3, [r3, #28]
 8007582:	4313      	orrs	r3, r2
 8007584:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007594:	f021 010c 	bic.w	r1, r1, #12
 8007598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80075a2:	430b      	orrs	r3, r1
 80075a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80075b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b6:	6999      	ldr	r1, [r3, #24]
 80075b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	ea40 0301 	orr.w	r3, r0, r1
 80075c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80075c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	4b8f      	ldr	r3, [pc, #572]	; (8007808 <UART_SetConfig+0x2cc>)
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d005      	beq.n	80075dc <UART_SetConfig+0xa0>
 80075d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	4b8d      	ldr	r3, [pc, #564]	; (800780c <UART_SetConfig+0x2d0>)
 80075d8:	429a      	cmp	r2, r3
 80075da:	d104      	bne.n	80075e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80075dc:	f7fe f820 	bl	8005620 <HAL_RCC_GetPCLK2Freq>
 80075e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80075e4:	e003      	b.n	80075ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80075e6:	f7fe f807 	bl	80055f8 <HAL_RCC_GetPCLK1Freq>
 80075ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f2:	69db      	ldr	r3, [r3, #28]
 80075f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075f8:	f040 810c 	bne.w	8007814 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007600:	2200      	movs	r2, #0
 8007602:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007606:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800760a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800760e:	4622      	mov	r2, r4
 8007610:	462b      	mov	r3, r5
 8007612:	1891      	adds	r1, r2, r2
 8007614:	65b9      	str	r1, [r7, #88]	; 0x58
 8007616:	415b      	adcs	r3, r3
 8007618:	65fb      	str	r3, [r7, #92]	; 0x5c
 800761a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800761e:	4621      	mov	r1, r4
 8007620:	eb12 0801 	adds.w	r8, r2, r1
 8007624:	4629      	mov	r1, r5
 8007626:	eb43 0901 	adc.w	r9, r3, r1
 800762a:	f04f 0200 	mov.w	r2, #0
 800762e:	f04f 0300 	mov.w	r3, #0
 8007632:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007636:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800763a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800763e:	4690      	mov	r8, r2
 8007640:	4699      	mov	r9, r3
 8007642:	4623      	mov	r3, r4
 8007644:	eb18 0303 	adds.w	r3, r8, r3
 8007648:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800764c:	462b      	mov	r3, r5
 800764e:	eb49 0303 	adc.w	r3, r9, r3
 8007652:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007662:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007666:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800766a:	460b      	mov	r3, r1
 800766c:	18db      	adds	r3, r3, r3
 800766e:	653b      	str	r3, [r7, #80]	; 0x50
 8007670:	4613      	mov	r3, r2
 8007672:	eb42 0303 	adc.w	r3, r2, r3
 8007676:	657b      	str	r3, [r7, #84]	; 0x54
 8007678:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800767c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007680:	f7f9 fa7c 	bl	8000b7c <__aeabi_uldivmod>
 8007684:	4602      	mov	r2, r0
 8007686:	460b      	mov	r3, r1
 8007688:	4b61      	ldr	r3, [pc, #388]	; (8007810 <UART_SetConfig+0x2d4>)
 800768a:	fba3 2302 	umull	r2, r3, r3, r2
 800768e:	095b      	lsrs	r3, r3, #5
 8007690:	011c      	lsls	r4, r3, #4
 8007692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007696:	2200      	movs	r2, #0
 8007698:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800769c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80076a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80076a4:	4642      	mov	r2, r8
 80076a6:	464b      	mov	r3, r9
 80076a8:	1891      	adds	r1, r2, r2
 80076aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80076ac:	415b      	adcs	r3, r3
 80076ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80076b4:	4641      	mov	r1, r8
 80076b6:	eb12 0a01 	adds.w	sl, r2, r1
 80076ba:	4649      	mov	r1, r9
 80076bc:	eb43 0b01 	adc.w	fp, r3, r1
 80076c0:	f04f 0200 	mov.w	r2, #0
 80076c4:	f04f 0300 	mov.w	r3, #0
 80076c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80076cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80076d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076d4:	4692      	mov	sl, r2
 80076d6:	469b      	mov	fp, r3
 80076d8:	4643      	mov	r3, r8
 80076da:	eb1a 0303 	adds.w	r3, sl, r3
 80076de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80076e2:	464b      	mov	r3, r9
 80076e4:	eb4b 0303 	adc.w	r3, fp, r3
 80076e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80076ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80076fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007700:	460b      	mov	r3, r1
 8007702:	18db      	adds	r3, r3, r3
 8007704:	643b      	str	r3, [r7, #64]	; 0x40
 8007706:	4613      	mov	r3, r2
 8007708:	eb42 0303 	adc.w	r3, r2, r3
 800770c:	647b      	str	r3, [r7, #68]	; 0x44
 800770e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007712:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007716:	f7f9 fa31 	bl	8000b7c <__aeabi_uldivmod>
 800771a:	4602      	mov	r2, r0
 800771c:	460b      	mov	r3, r1
 800771e:	4611      	mov	r1, r2
 8007720:	4b3b      	ldr	r3, [pc, #236]	; (8007810 <UART_SetConfig+0x2d4>)
 8007722:	fba3 2301 	umull	r2, r3, r3, r1
 8007726:	095b      	lsrs	r3, r3, #5
 8007728:	2264      	movs	r2, #100	; 0x64
 800772a:	fb02 f303 	mul.w	r3, r2, r3
 800772e:	1acb      	subs	r3, r1, r3
 8007730:	00db      	lsls	r3, r3, #3
 8007732:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007736:	4b36      	ldr	r3, [pc, #216]	; (8007810 <UART_SetConfig+0x2d4>)
 8007738:	fba3 2302 	umull	r2, r3, r3, r2
 800773c:	095b      	lsrs	r3, r3, #5
 800773e:	005b      	lsls	r3, r3, #1
 8007740:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007744:	441c      	add	r4, r3
 8007746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800774a:	2200      	movs	r2, #0
 800774c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007750:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007754:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007758:	4642      	mov	r2, r8
 800775a:	464b      	mov	r3, r9
 800775c:	1891      	adds	r1, r2, r2
 800775e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007760:	415b      	adcs	r3, r3
 8007762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007764:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007768:	4641      	mov	r1, r8
 800776a:	1851      	adds	r1, r2, r1
 800776c:	6339      	str	r1, [r7, #48]	; 0x30
 800776e:	4649      	mov	r1, r9
 8007770:	414b      	adcs	r3, r1
 8007772:	637b      	str	r3, [r7, #52]	; 0x34
 8007774:	f04f 0200 	mov.w	r2, #0
 8007778:	f04f 0300 	mov.w	r3, #0
 800777c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007780:	4659      	mov	r1, fp
 8007782:	00cb      	lsls	r3, r1, #3
 8007784:	4651      	mov	r1, sl
 8007786:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800778a:	4651      	mov	r1, sl
 800778c:	00ca      	lsls	r2, r1, #3
 800778e:	4610      	mov	r0, r2
 8007790:	4619      	mov	r1, r3
 8007792:	4603      	mov	r3, r0
 8007794:	4642      	mov	r2, r8
 8007796:	189b      	adds	r3, r3, r2
 8007798:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800779c:	464b      	mov	r3, r9
 800779e:	460a      	mov	r2, r1
 80077a0:	eb42 0303 	adc.w	r3, r2, r3
 80077a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80077a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80077b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80077b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80077bc:	460b      	mov	r3, r1
 80077be:	18db      	adds	r3, r3, r3
 80077c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80077c2:	4613      	mov	r3, r2
 80077c4:	eb42 0303 	adc.w	r3, r2, r3
 80077c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80077ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80077d2:	f7f9 f9d3 	bl	8000b7c <__aeabi_uldivmod>
 80077d6:	4602      	mov	r2, r0
 80077d8:	460b      	mov	r3, r1
 80077da:	4b0d      	ldr	r3, [pc, #52]	; (8007810 <UART_SetConfig+0x2d4>)
 80077dc:	fba3 1302 	umull	r1, r3, r3, r2
 80077e0:	095b      	lsrs	r3, r3, #5
 80077e2:	2164      	movs	r1, #100	; 0x64
 80077e4:	fb01 f303 	mul.w	r3, r1, r3
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	00db      	lsls	r3, r3, #3
 80077ec:	3332      	adds	r3, #50	; 0x32
 80077ee:	4a08      	ldr	r2, [pc, #32]	; (8007810 <UART_SetConfig+0x2d4>)
 80077f0:	fba2 2303 	umull	r2, r3, r2, r3
 80077f4:	095b      	lsrs	r3, r3, #5
 80077f6:	f003 0207 	and.w	r2, r3, #7
 80077fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4422      	add	r2, r4
 8007802:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007804:	e105      	b.n	8007a12 <UART_SetConfig+0x4d6>
 8007806:	bf00      	nop
 8007808:	40011000 	.word	0x40011000
 800780c:	40011400 	.word	0x40011400
 8007810:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007818:	2200      	movs	r2, #0
 800781a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800781e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007822:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007826:	4642      	mov	r2, r8
 8007828:	464b      	mov	r3, r9
 800782a:	1891      	adds	r1, r2, r2
 800782c:	6239      	str	r1, [r7, #32]
 800782e:	415b      	adcs	r3, r3
 8007830:	627b      	str	r3, [r7, #36]	; 0x24
 8007832:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007836:	4641      	mov	r1, r8
 8007838:	1854      	adds	r4, r2, r1
 800783a:	4649      	mov	r1, r9
 800783c:	eb43 0501 	adc.w	r5, r3, r1
 8007840:	f04f 0200 	mov.w	r2, #0
 8007844:	f04f 0300 	mov.w	r3, #0
 8007848:	00eb      	lsls	r3, r5, #3
 800784a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800784e:	00e2      	lsls	r2, r4, #3
 8007850:	4614      	mov	r4, r2
 8007852:	461d      	mov	r5, r3
 8007854:	4643      	mov	r3, r8
 8007856:	18e3      	adds	r3, r4, r3
 8007858:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800785c:	464b      	mov	r3, r9
 800785e:	eb45 0303 	adc.w	r3, r5, r3
 8007862:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007872:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007876:	f04f 0200 	mov.w	r2, #0
 800787a:	f04f 0300 	mov.w	r3, #0
 800787e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007882:	4629      	mov	r1, r5
 8007884:	008b      	lsls	r3, r1, #2
 8007886:	4621      	mov	r1, r4
 8007888:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800788c:	4621      	mov	r1, r4
 800788e:	008a      	lsls	r2, r1, #2
 8007890:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007894:	f7f9 f972 	bl	8000b7c <__aeabi_uldivmod>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	4b60      	ldr	r3, [pc, #384]	; (8007a20 <UART_SetConfig+0x4e4>)
 800789e:	fba3 2302 	umull	r2, r3, r3, r2
 80078a2:	095b      	lsrs	r3, r3, #5
 80078a4:	011c      	lsls	r4, r3, #4
 80078a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078aa:	2200      	movs	r2, #0
 80078ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80078b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80078b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80078b8:	4642      	mov	r2, r8
 80078ba:	464b      	mov	r3, r9
 80078bc:	1891      	adds	r1, r2, r2
 80078be:	61b9      	str	r1, [r7, #24]
 80078c0:	415b      	adcs	r3, r3
 80078c2:	61fb      	str	r3, [r7, #28]
 80078c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078c8:	4641      	mov	r1, r8
 80078ca:	1851      	adds	r1, r2, r1
 80078cc:	6139      	str	r1, [r7, #16]
 80078ce:	4649      	mov	r1, r9
 80078d0:	414b      	adcs	r3, r1
 80078d2:	617b      	str	r3, [r7, #20]
 80078d4:	f04f 0200 	mov.w	r2, #0
 80078d8:	f04f 0300 	mov.w	r3, #0
 80078dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80078e0:	4659      	mov	r1, fp
 80078e2:	00cb      	lsls	r3, r1, #3
 80078e4:	4651      	mov	r1, sl
 80078e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078ea:	4651      	mov	r1, sl
 80078ec:	00ca      	lsls	r2, r1, #3
 80078ee:	4610      	mov	r0, r2
 80078f0:	4619      	mov	r1, r3
 80078f2:	4603      	mov	r3, r0
 80078f4:	4642      	mov	r2, r8
 80078f6:	189b      	adds	r3, r3, r2
 80078f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078fc:	464b      	mov	r3, r9
 80078fe:	460a      	mov	r2, r1
 8007900:	eb42 0303 	adc.w	r3, r2, r3
 8007904:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	67bb      	str	r3, [r7, #120]	; 0x78
 8007912:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007914:	f04f 0200 	mov.w	r2, #0
 8007918:	f04f 0300 	mov.w	r3, #0
 800791c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007920:	4649      	mov	r1, r9
 8007922:	008b      	lsls	r3, r1, #2
 8007924:	4641      	mov	r1, r8
 8007926:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800792a:	4641      	mov	r1, r8
 800792c:	008a      	lsls	r2, r1, #2
 800792e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007932:	f7f9 f923 	bl	8000b7c <__aeabi_uldivmod>
 8007936:	4602      	mov	r2, r0
 8007938:	460b      	mov	r3, r1
 800793a:	4b39      	ldr	r3, [pc, #228]	; (8007a20 <UART_SetConfig+0x4e4>)
 800793c:	fba3 1302 	umull	r1, r3, r3, r2
 8007940:	095b      	lsrs	r3, r3, #5
 8007942:	2164      	movs	r1, #100	; 0x64
 8007944:	fb01 f303 	mul.w	r3, r1, r3
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	011b      	lsls	r3, r3, #4
 800794c:	3332      	adds	r3, #50	; 0x32
 800794e:	4a34      	ldr	r2, [pc, #208]	; (8007a20 <UART_SetConfig+0x4e4>)
 8007950:	fba2 2303 	umull	r2, r3, r2, r3
 8007954:	095b      	lsrs	r3, r3, #5
 8007956:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800795a:	441c      	add	r4, r3
 800795c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007960:	2200      	movs	r2, #0
 8007962:	673b      	str	r3, [r7, #112]	; 0x70
 8007964:	677a      	str	r2, [r7, #116]	; 0x74
 8007966:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800796a:	4642      	mov	r2, r8
 800796c:	464b      	mov	r3, r9
 800796e:	1891      	adds	r1, r2, r2
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	415b      	adcs	r3, r3
 8007974:	60fb      	str	r3, [r7, #12]
 8007976:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800797a:	4641      	mov	r1, r8
 800797c:	1851      	adds	r1, r2, r1
 800797e:	6039      	str	r1, [r7, #0]
 8007980:	4649      	mov	r1, r9
 8007982:	414b      	adcs	r3, r1
 8007984:	607b      	str	r3, [r7, #4]
 8007986:	f04f 0200 	mov.w	r2, #0
 800798a:	f04f 0300 	mov.w	r3, #0
 800798e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007992:	4659      	mov	r1, fp
 8007994:	00cb      	lsls	r3, r1, #3
 8007996:	4651      	mov	r1, sl
 8007998:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800799c:	4651      	mov	r1, sl
 800799e:	00ca      	lsls	r2, r1, #3
 80079a0:	4610      	mov	r0, r2
 80079a2:	4619      	mov	r1, r3
 80079a4:	4603      	mov	r3, r0
 80079a6:	4642      	mov	r2, r8
 80079a8:	189b      	adds	r3, r3, r2
 80079aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80079ac:	464b      	mov	r3, r9
 80079ae:	460a      	mov	r2, r1
 80079b0:	eb42 0303 	adc.w	r3, r2, r3
 80079b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	663b      	str	r3, [r7, #96]	; 0x60
 80079c0:	667a      	str	r2, [r7, #100]	; 0x64
 80079c2:	f04f 0200 	mov.w	r2, #0
 80079c6:	f04f 0300 	mov.w	r3, #0
 80079ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80079ce:	4649      	mov	r1, r9
 80079d0:	008b      	lsls	r3, r1, #2
 80079d2:	4641      	mov	r1, r8
 80079d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079d8:	4641      	mov	r1, r8
 80079da:	008a      	lsls	r2, r1, #2
 80079dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80079e0:	f7f9 f8cc 	bl	8000b7c <__aeabi_uldivmod>
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	4b0d      	ldr	r3, [pc, #52]	; (8007a20 <UART_SetConfig+0x4e4>)
 80079ea:	fba3 1302 	umull	r1, r3, r3, r2
 80079ee:	095b      	lsrs	r3, r3, #5
 80079f0:	2164      	movs	r1, #100	; 0x64
 80079f2:	fb01 f303 	mul.w	r3, r1, r3
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	011b      	lsls	r3, r3, #4
 80079fa:	3332      	adds	r3, #50	; 0x32
 80079fc:	4a08      	ldr	r2, [pc, #32]	; (8007a20 <UART_SetConfig+0x4e4>)
 80079fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007a02:	095b      	lsrs	r3, r3, #5
 8007a04:	f003 020f 	and.w	r2, r3, #15
 8007a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4422      	add	r2, r4
 8007a10:	609a      	str	r2, [r3, #8]
}
 8007a12:	bf00      	nop
 8007a14:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a1e:	bf00      	nop
 8007a20:	51eb851f 	.word	0x51eb851f

08007a24 <__errno>:
 8007a24:	4b01      	ldr	r3, [pc, #4]	; (8007a2c <__errno+0x8>)
 8007a26:	6818      	ldr	r0, [r3, #0]
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	20000020 	.word	0x20000020

08007a30 <__libc_init_array>:
 8007a30:	b570      	push	{r4, r5, r6, lr}
 8007a32:	4d0d      	ldr	r5, [pc, #52]	; (8007a68 <__libc_init_array+0x38>)
 8007a34:	4c0d      	ldr	r4, [pc, #52]	; (8007a6c <__libc_init_array+0x3c>)
 8007a36:	1b64      	subs	r4, r4, r5
 8007a38:	10a4      	asrs	r4, r4, #2
 8007a3a:	2600      	movs	r6, #0
 8007a3c:	42a6      	cmp	r6, r4
 8007a3e:	d109      	bne.n	8007a54 <__libc_init_array+0x24>
 8007a40:	4d0b      	ldr	r5, [pc, #44]	; (8007a70 <__libc_init_array+0x40>)
 8007a42:	4c0c      	ldr	r4, [pc, #48]	; (8007a74 <__libc_init_array+0x44>)
 8007a44:	f000 fcd4 	bl	80083f0 <_init>
 8007a48:	1b64      	subs	r4, r4, r5
 8007a4a:	10a4      	asrs	r4, r4, #2
 8007a4c:	2600      	movs	r6, #0
 8007a4e:	42a6      	cmp	r6, r4
 8007a50:	d105      	bne.n	8007a5e <__libc_init_array+0x2e>
 8007a52:	bd70      	pop	{r4, r5, r6, pc}
 8007a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a58:	4798      	blx	r3
 8007a5a:	3601      	adds	r6, #1
 8007a5c:	e7ee      	b.n	8007a3c <__libc_init_array+0xc>
 8007a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a62:	4798      	blx	r3
 8007a64:	3601      	adds	r6, #1
 8007a66:	e7f2      	b.n	8007a4e <__libc_init_array+0x1e>
 8007a68:	08009fcc 	.word	0x08009fcc
 8007a6c:	08009fcc 	.word	0x08009fcc
 8007a70:	08009fcc 	.word	0x08009fcc
 8007a74:	08009fd0 	.word	0x08009fd0

08007a78 <memcpy>:
 8007a78:	440a      	add	r2, r1
 8007a7a:	4291      	cmp	r1, r2
 8007a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a80:	d100      	bne.n	8007a84 <memcpy+0xc>
 8007a82:	4770      	bx	lr
 8007a84:	b510      	push	{r4, lr}
 8007a86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a8e:	4291      	cmp	r1, r2
 8007a90:	d1f9      	bne.n	8007a86 <memcpy+0xe>
 8007a92:	bd10      	pop	{r4, pc}

08007a94 <memset>:
 8007a94:	4402      	add	r2, r0
 8007a96:	4603      	mov	r3, r0
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d100      	bne.n	8007a9e <memset+0xa>
 8007a9c:	4770      	bx	lr
 8007a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8007aa2:	e7f9      	b.n	8007a98 <memset+0x4>

08007aa4 <sniprintf>:
 8007aa4:	b40c      	push	{r2, r3}
 8007aa6:	b530      	push	{r4, r5, lr}
 8007aa8:	4b17      	ldr	r3, [pc, #92]	; (8007b08 <sniprintf+0x64>)
 8007aaa:	1e0c      	subs	r4, r1, #0
 8007aac:	681d      	ldr	r5, [r3, #0]
 8007aae:	b09d      	sub	sp, #116	; 0x74
 8007ab0:	da08      	bge.n	8007ac4 <sniprintf+0x20>
 8007ab2:	238b      	movs	r3, #139	; 0x8b
 8007ab4:	602b      	str	r3, [r5, #0]
 8007ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8007aba:	b01d      	add	sp, #116	; 0x74
 8007abc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ac0:	b002      	add	sp, #8
 8007ac2:	4770      	bx	lr
 8007ac4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007ac8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007acc:	bf14      	ite	ne
 8007ace:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007ad2:	4623      	moveq	r3, r4
 8007ad4:	9304      	str	r3, [sp, #16]
 8007ad6:	9307      	str	r3, [sp, #28]
 8007ad8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007adc:	9002      	str	r0, [sp, #8]
 8007ade:	9006      	str	r0, [sp, #24]
 8007ae0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007ae4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007ae6:	ab21      	add	r3, sp, #132	; 0x84
 8007ae8:	a902      	add	r1, sp, #8
 8007aea:	4628      	mov	r0, r5
 8007aec:	9301      	str	r3, [sp, #4]
 8007aee:	f000 f869 	bl	8007bc4 <_svfiprintf_r>
 8007af2:	1c43      	adds	r3, r0, #1
 8007af4:	bfbc      	itt	lt
 8007af6:	238b      	movlt	r3, #139	; 0x8b
 8007af8:	602b      	strlt	r3, [r5, #0]
 8007afa:	2c00      	cmp	r4, #0
 8007afc:	d0dd      	beq.n	8007aba <sniprintf+0x16>
 8007afe:	9b02      	ldr	r3, [sp, #8]
 8007b00:	2200      	movs	r2, #0
 8007b02:	701a      	strb	r2, [r3, #0]
 8007b04:	e7d9      	b.n	8007aba <sniprintf+0x16>
 8007b06:	bf00      	nop
 8007b08:	20000020 	.word	0x20000020

08007b0c <__ssputs_r>:
 8007b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b10:	688e      	ldr	r6, [r1, #8]
 8007b12:	429e      	cmp	r6, r3
 8007b14:	4682      	mov	sl, r0
 8007b16:	460c      	mov	r4, r1
 8007b18:	4690      	mov	r8, r2
 8007b1a:	461f      	mov	r7, r3
 8007b1c:	d838      	bhi.n	8007b90 <__ssputs_r+0x84>
 8007b1e:	898a      	ldrh	r2, [r1, #12]
 8007b20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b24:	d032      	beq.n	8007b8c <__ssputs_r+0x80>
 8007b26:	6825      	ldr	r5, [r4, #0]
 8007b28:	6909      	ldr	r1, [r1, #16]
 8007b2a:	eba5 0901 	sub.w	r9, r5, r1
 8007b2e:	6965      	ldr	r5, [r4, #20]
 8007b30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b38:	3301      	adds	r3, #1
 8007b3a:	444b      	add	r3, r9
 8007b3c:	106d      	asrs	r5, r5, #1
 8007b3e:	429d      	cmp	r5, r3
 8007b40:	bf38      	it	cc
 8007b42:	461d      	movcc	r5, r3
 8007b44:	0553      	lsls	r3, r2, #21
 8007b46:	d531      	bpl.n	8007bac <__ssputs_r+0xa0>
 8007b48:	4629      	mov	r1, r5
 8007b4a:	f000 fb55 	bl	80081f8 <_malloc_r>
 8007b4e:	4606      	mov	r6, r0
 8007b50:	b950      	cbnz	r0, 8007b68 <__ssputs_r+0x5c>
 8007b52:	230c      	movs	r3, #12
 8007b54:	f8ca 3000 	str.w	r3, [sl]
 8007b58:	89a3      	ldrh	r3, [r4, #12]
 8007b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b5e:	81a3      	strh	r3, [r4, #12]
 8007b60:	f04f 30ff 	mov.w	r0, #4294967295
 8007b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b68:	6921      	ldr	r1, [r4, #16]
 8007b6a:	464a      	mov	r2, r9
 8007b6c:	f7ff ff84 	bl	8007a78 <memcpy>
 8007b70:	89a3      	ldrh	r3, [r4, #12]
 8007b72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b7a:	81a3      	strh	r3, [r4, #12]
 8007b7c:	6126      	str	r6, [r4, #16]
 8007b7e:	6165      	str	r5, [r4, #20]
 8007b80:	444e      	add	r6, r9
 8007b82:	eba5 0509 	sub.w	r5, r5, r9
 8007b86:	6026      	str	r6, [r4, #0]
 8007b88:	60a5      	str	r5, [r4, #8]
 8007b8a:	463e      	mov	r6, r7
 8007b8c:	42be      	cmp	r6, r7
 8007b8e:	d900      	bls.n	8007b92 <__ssputs_r+0x86>
 8007b90:	463e      	mov	r6, r7
 8007b92:	6820      	ldr	r0, [r4, #0]
 8007b94:	4632      	mov	r2, r6
 8007b96:	4641      	mov	r1, r8
 8007b98:	f000 faa8 	bl	80080ec <memmove>
 8007b9c:	68a3      	ldr	r3, [r4, #8]
 8007b9e:	1b9b      	subs	r3, r3, r6
 8007ba0:	60a3      	str	r3, [r4, #8]
 8007ba2:	6823      	ldr	r3, [r4, #0]
 8007ba4:	4433      	add	r3, r6
 8007ba6:	6023      	str	r3, [r4, #0]
 8007ba8:	2000      	movs	r0, #0
 8007baa:	e7db      	b.n	8007b64 <__ssputs_r+0x58>
 8007bac:	462a      	mov	r2, r5
 8007bae:	f000 fb97 	bl	80082e0 <_realloc_r>
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	d1e1      	bne.n	8007b7c <__ssputs_r+0x70>
 8007bb8:	6921      	ldr	r1, [r4, #16]
 8007bba:	4650      	mov	r0, sl
 8007bbc:	f000 fab0 	bl	8008120 <_free_r>
 8007bc0:	e7c7      	b.n	8007b52 <__ssputs_r+0x46>
	...

08007bc4 <_svfiprintf_r>:
 8007bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc8:	4698      	mov	r8, r3
 8007bca:	898b      	ldrh	r3, [r1, #12]
 8007bcc:	061b      	lsls	r3, r3, #24
 8007bce:	b09d      	sub	sp, #116	; 0x74
 8007bd0:	4607      	mov	r7, r0
 8007bd2:	460d      	mov	r5, r1
 8007bd4:	4614      	mov	r4, r2
 8007bd6:	d50e      	bpl.n	8007bf6 <_svfiprintf_r+0x32>
 8007bd8:	690b      	ldr	r3, [r1, #16]
 8007bda:	b963      	cbnz	r3, 8007bf6 <_svfiprintf_r+0x32>
 8007bdc:	2140      	movs	r1, #64	; 0x40
 8007bde:	f000 fb0b 	bl	80081f8 <_malloc_r>
 8007be2:	6028      	str	r0, [r5, #0]
 8007be4:	6128      	str	r0, [r5, #16]
 8007be6:	b920      	cbnz	r0, 8007bf2 <_svfiprintf_r+0x2e>
 8007be8:	230c      	movs	r3, #12
 8007bea:	603b      	str	r3, [r7, #0]
 8007bec:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf0:	e0d1      	b.n	8007d96 <_svfiprintf_r+0x1d2>
 8007bf2:	2340      	movs	r3, #64	; 0x40
 8007bf4:	616b      	str	r3, [r5, #20]
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8007bfa:	2320      	movs	r3, #32
 8007bfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c00:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c04:	2330      	movs	r3, #48	; 0x30
 8007c06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007db0 <_svfiprintf_r+0x1ec>
 8007c0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c0e:	f04f 0901 	mov.w	r9, #1
 8007c12:	4623      	mov	r3, r4
 8007c14:	469a      	mov	sl, r3
 8007c16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c1a:	b10a      	cbz	r2, 8007c20 <_svfiprintf_r+0x5c>
 8007c1c:	2a25      	cmp	r2, #37	; 0x25
 8007c1e:	d1f9      	bne.n	8007c14 <_svfiprintf_r+0x50>
 8007c20:	ebba 0b04 	subs.w	fp, sl, r4
 8007c24:	d00b      	beq.n	8007c3e <_svfiprintf_r+0x7a>
 8007c26:	465b      	mov	r3, fp
 8007c28:	4622      	mov	r2, r4
 8007c2a:	4629      	mov	r1, r5
 8007c2c:	4638      	mov	r0, r7
 8007c2e:	f7ff ff6d 	bl	8007b0c <__ssputs_r>
 8007c32:	3001      	adds	r0, #1
 8007c34:	f000 80aa 	beq.w	8007d8c <_svfiprintf_r+0x1c8>
 8007c38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c3a:	445a      	add	r2, fp
 8007c3c:	9209      	str	r2, [sp, #36]	; 0x24
 8007c3e:	f89a 3000 	ldrb.w	r3, [sl]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 80a2 	beq.w	8007d8c <_svfiprintf_r+0x1c8>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c52:	f10a 0a01 	add.w	sl, sl, #1
 8007c56:	9304      	str	r3, [sp, #16]
 8007c58:	9307      	str	r3, [sp, #28]
 8007c5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c5e:	931a      	str	r3, [sp, #104]	; 0x68
 8007c60:	4654      	mov	r4, sl
 8007c62:	2205      	movs	r2, #5
 8007c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c68:	4851      	ldr	r0, [pc, #324]	; (8007db0 <_svfiprintf_r+0x1ec>)
 8007c6a:	f7f8 fac1 	bl	80001f0 <memchr>
 8007c6e:	9a04      	ldr	r2, [sp, #16]
 8007c70:	b9d8      	cbnz	r0, 8007caa <_svfiprintf_r+0xe6>
 8007c72:	06d0      	lsls	r0, r2, #27
 8007c74:	bf44      	itt	mi
 8007c76:	2320      	movmi	r3, #32
 8007c78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c7c:	0711      	lsls	r1, r2, #28
 8007c7e:	bf44      	itt	mi
 8007c80:	232b      	movmi	r3, #43	; 0x2b
 8007c82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c86:	f89a 3000 	ldrb.w	r3, [sl]
 8007c8a:	2b2a      	cmp	r3, #42	; 0x2a
 8007c8c:	d015      	beq.n	8007cba <_svfiprintf_r+0xf6>
 8007c8e:	9a07      	ldr	r2, [sp, #28]
 8007c90:	4654      	mov	r4, sl
 8007c92:	2000      	movs	r0, #0
 8007c94:	f04f 0c0a 	mov.w	ip, #10
 8007c98:	4621      	mov	r1, r4
 8007c9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c9e:	3b30      	subs	r3, #48	; 0x30
 8007ca0:	2b09      	cmp	r3, #9
 8007ca2:	d94e      	bls.n	8007d42 <_svfiprintf_r+0x17e>
 8007ca4:	b1b0      	cbz	r0, 8007cd4 <_svfiprintf_r+0x110>
 8007ca6:	9207      	str	r2, [sp, #28]
 8007ca8:	e014      	b.n	8007cd4 <_svfiprintf_r+0x110>
 8007caa:	eba0 0308 	sub.w	r3, r0, r8
 8007cae:	fa09 f303 	lsl.w	r3, r9, r3
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	9304      	str	r3, [sp, #16]
 8007cb6:	46a2      	mov	sl, r4
 8007cb8:	e7d2      	b.n	8007c60 <_svfiprintf_r+0x9c>
 8007cba:	9b03      	ldr	r3, [sp, #12]
 8007cbc:	1d19      	adds	r1, r3, #4
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	9103      	str	r1, [sp, #12]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	bfbb      	ittet	lt
 8007cc6:	425b      	neglt	r3, r3
 8007cc8:	f042 0202 	orrlt.w	r2, r2, #2
 8007ccc:	9307      	strge	r3, [sp, #28]
 8007cce:	9307      	strlt	r3, [sp, #28]
 8007cd0:	bfb8      	it	lt
 8007cd2:	9204      	strlt	r2, [sp, #16]
 8007cd4:	7823      	ldrb	r3, [r4, #0]
 8007cd6:	2b2e      	cmp	r3, #46	; 0x2e
 8007cd8:	d10c      	bne.n	8007cf4 <_svfiprintf_r+0x130>
 8007cda:	7863      	ldrb	r3, [r4, #1]
 8007cdc:	2b2a      	cmp	r3, #42	; 0x2a
 8007cde:	d135      	bne.n	8007d4c <_svfiprintf_r+0x188>
 8007ce0:	9b03      	ldr	r3, [sp, #12]
 8007ce2:	1d1a      	adds	r2, r3, #4
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	9203      	str	r2, [sp, #12]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	bfb8      	it	lt
 8007cec:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cf0:	3402      	adds	r4, #2
 8007cf2:	9305      	str	r3, [sp, #20]
 8007cf4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007dc0 <_svfiprintf_r+0x1fc>
 8007cf8:	7821      	ldrb	r1, [r4, #0]
 8007cfa:	2203      	movs	r2, #3
 8007cfc:	4650      	mov	r0, sl
 8007cfe:	f7f8 fa77 	bl	80001f0 <memchr>
 8007d02:	b140      	cbz	r0, 8007d16 <_svfiprintf_r+0x152>
 8007d04:	2340      	movs	r3, #64	; 0x40
 8007d06:	eba0 000a 	sub.w	r0, r0, sl
 8007d0a:	fa03 f000 	lsl.w	r0, r3, r0
 8007d0e:	9b04      	ldr	r3, [sp, #16]
 8007d10:	4303      	orrs	r3, r0
 8007d12:	3401      	adds	r4, #1
 8007d14:	9304      	str	r3, [sp, #16]
 8007d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d1a:	4826      	ldr	r0, [pc, #152]	; (8007db4 <_svfiprintf_r+0x1f0>)
 8007d1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d20:	2206      	movs	r2, #6
 8007d22:	f7f8 fa65 	bl	80001f0 <memchr>
 8007d26:	2800      	cmp	r0, #0
 8007d28:	d038      	beq.n	8007d9c <_svfiprintf_r+0x1d8>
 8007d2a:	4b23      	ldr	r3, [pc, #140]	; (8007db8 <_svfiprintf_r+0x1f4>)
 8007d2c:	bb1b      	cbnz	r3, 8007d76 <_svfiprintf_r+0x1b2>
 8007d2e:	9b03      	ldr	r3, [sp, #12]
 8007d30:	3307      	adds	r3, #7
 8007d32:	f023 0307 	bic.w	r3, r3, #7
 8007d36:	3308      	adds	r3, #8
 8007d38:	9303      	str	r3, [sp, #12]
 8007d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d3c:	4433      	add	r3, r6
 8007d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d40:	e767      	b.n	8007c12 <_svfiprintf_r+0x4e>
 8007d42:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d46:	460c      	mov	r4, r1
 8007d48:	2001      	movs	r0, #1
 8007d4a:	e7a5      	b.n	8007c98 <_svfiprintf_r+0xd4>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	3401      	adds	r4, #1
 8007d50:	9305      	str	r3, [sp, #20]
 8007d52:	4619      	mov	r1, r3
 8007d54:	f04f 0c0a 	mov.w	ip, #10
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d5e:	3a30      	subs	r2, #48	; 0x30
 8007d60:	2a09      	cmp	r2, #9
 8007d62:	d903      	bls.n	8007d6c <_svfiprintf_r+0x1a8>
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d0c5      	beq.n	8007cf4 <_svfiprintf_r+0x130>
 8007d68:	9105      	str	r1, [sp, #20]
 8007d6a:	e7c3      	b.n	8007cf4 <_svfiprintf_r+0x130>
 8007d6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d70:	4604      	mov	r4, r0
 8007d72:	2301      	movs	r3, #1
 8007d74:	e7f0      	b.n	8007d58 <_svfiprintf_r+0x194>
 8007d76:	ab03      	add	r3, sp, #12
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	462a      	mov	r2, r5
 8007d7c:	4b0f      	ldr	r3, [pc, #60]	; (8007dbc <_svfiprintf_r+0x1f8>)
 8007d7e:	a904      	add	r1, sp, #16
 8007d80:	4638      	mov	r0, r7
 8007d82:	f3af 8000 	nop.w
 8007d86:	1c42      	adds	r2, r0, #1
 8007d88:	4606      	mov	r6, r0
 8007d8a:	d1d6      	bne.n	8007d3a <_svfiprintf_r+0x176>
 8007d8c:	89ab      	ldrh	r3, [r5, #12]
 8007d8e:	065b      	lsls	r3, r3, #25
 8007d90:	f53f af2c 	bmi.w	8007bec <_svfiprintf_r+0x28>
 8007d94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d96:	b01d      	add	sp, #116	; 0x74
 8007d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d9c:	ab03      	add	r3, sp, #12
 8007d9e:	9300      	str	r3, [sp, #0]
 8007da0:	462a      	mov	r2, r5
 8007da2:	4b06      	ldr	r3, [pc, #24]	; (8007dbc <_svfiprintf_r+0x1f8>)
 8007da4:	a904      	add	r1, sp, #16
 8007da6:	4638      	mov	r0, r7
 8007da8:	f000 f87a 	bl	8007ea0 <_printf_i>
 8007dac:	e7eb      	b.n	8007d86 <_svfiprintf_r+0x1c2>
 8007dae:	bf00      	nop
 8007db0:	08009f90 	.word	0x08009f90
 8007db4:	08009f9a 	.word	0x08009f9a
 8007db8:	00000000 	.word	0x00000000
 8007dbc:	08007b0d 	.word	0x08007b0d
 8007dc0:	08009f96 	.word	0x08009f96

08007dc4 <_printf_common>:
 8007dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc8:	4616      	mov	r6, r2
 8007dca:	4699      	mov	r9, r3
 8007dcc:	688a      	ldr	r2, [r1, #8]
 8007dce:	690b      	ldr	r3, [r1, #16]
 8007dd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	bfb8      	it	lt
 8007dd8:	4613      	movlt	r3, r2
 8007dda:	6033      	str	r3, [r6, #0]
 8007ddc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007de0:	4607      	mov	r7, r0
 8007de2:	460c      	mov	r4, r1
 8007de4:	b10a      	cbz	r2, 8007dea <_printf_common+0x26>
 8007de6:	3301      	adds	r3, #1
 8007de8:	6033      	str	r3, [r6, #0]
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	0699      	lsls	r1, r3, #26
 8007dee:	bf42      	ittt	mi
 8007df0:	6833      	ldrmi	r3, [r6, #0]
 8007df2:	3302      	addmi	r3, #2
 8007df4:	6033      	strmi	r3, [r6, #0]
 8007df6:	6825      	ldr	r5, [r4, #0]
 8007df8:	f015 0506 	ands.w	r5, r5, #6
 8007dfc:	d106      	bne.n	8007e0c <_printf_common+0x48>
 8007dfe:	f104 0a19 	add.w	sl, r4, #25
 8007e02:	68e3      	ldr	r3, [r4, #12]
 8007e04:	6832      	ldr	r2, [r6, #0]
 8007e06:	1a9b      	subs	r3, r3, r2
 8007e08:	42ab      	cmp	r3, r5
 8007e0a:	dc26      	bgt.n	8007e5a <_printf_common+0x96>
 8007e0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e10:	1e13      	subs	r3, r2, #0
 8007e12:	6822      	ldr	r2, [r4, #0]
 8007e14:	bf18      	it	ne
 8007e16:	2301      	movne	r3, #1
 8007e18:	0692      	lsls	r2, r2, #26
 8007e1a:	d42b      	bmi.n	8007e74 <_printf_common+0xb0>
 8007e1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e20:	4649      	mov	r1, r9
 8007e22:	4638      	mov	r0, r7
 8007e24:	47c0      	blx	r8
 8007e26:	3001      	adds	r0, #1
 8007e28:	d01e      	beq.n	8007e68 <_printf_common+0xa4>
 8007e2a:	6823      	ldr	r3, [r4, #0]
 8007e2c:	68e5      	ldr	r5, [r4, #12]
 8007e2e:	6832      	ldr	r2, [r6, #0]
 8007e30:	f003 0306 	and.w	r3, r3, #6
 8007e34:	2b04      	cmp	r3, #4
 8007e36:	bf08      	it	eq
 8007e38:	1aad      	subeq	r5, r5, r2
 8007e3a:	68a3      	ldr	r3, [r4, #8]
 8007e3c:	6922      	ldr	r2, [r4, #16]
 8007e3e:	bf0c      	ite	eq
 8007e40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e44:	2500      	movne	r5, #0
 8007e46:	4293      	cmp	r3, r2
 8007e48:	bfc4      	itt	gt
 8007e4a:	1a9b      	subgt	r3, r3, r2
 8007e4c:	18ed      	addgt	r5, r5, r3
 8007e4e:	2600      	movs	r6, #0
 8007e50:	341a      	adds	r4, #26
 8007e52:	42b5      	cmp	r5, r6
 8007e54:	d11a      	bne.n	8007e8c <_printf_common+0xc8>
 8007e56:	2000      	movs	r0, #0
 8007e58:	e008      	b.n	8007e6c <_printf_common+0xa8>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	4652      	mov	r2, sl
 8007e5e:	4649      	mov	r1, r9
 8007e60:	4638      	mov	r0, r7
 8007e62:	47c0      	blx	r8
 8007e64:	3001      	adds	r0, #1
 8007e66:	d103      	bne.n	8007e70 <_printf_common+0xac>
 8007e68:	f04f 30ff 	mov.w	r0, #4294967295
 8007e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e70:	3501      	adds	r5, #1
 8007e72:	e7c6      	b.n	8007e02 <_printf_common+0x3e>
 8007e74:	18e1      	adds	r1, r4, r3
 8007e76:	1c5a      	adds	r2, r3, #1
 8007e78:	2030      	movs	r0, #48	; 0x30
 8007e7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e7e:	4422      	add	r2, r4
 8007e80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e88:	3302      	adds	r3, #2
 8007e8a:	e7c7      	b.n	8007e1c <_printf_common+0x58>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	4622      	mov	r2, r4
 8007e90:	4649      	mov	r1, r9
 8007e92:	4638      	mov	r0, r7
 8007e94:	47c0      	blx	r8
 8007e96:	3001      	adds	r0, #1
 8007e98:	d0e6      	beq.n	8007e68 <_printf_common+0xa4>
 8007e9a:	3601      	adds	r6, #1
 8007e9c:	e7d9      	b.n	8007e52 <_printf_common+0x8e>
	...

08007ea0 <_printf_i>:
 8007ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea4:	7e0f      	ldrb	r7, [r1, #24]
 8007ea6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ea8:	2f78      	cmp	r7, #120	; 0x78
 8007eaa:	4691      	mov	r9, r2
 8007eac:	4680      	mov	r8, r0
 8007eae:	460c      	mov	r4, r1
 8007eb0:	469a      	mov	sl, r3
 8007eb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007eb6:	d807      	bhi.n	8007ec8 <_printf_i+0x28>
 8007eb8:	2f62      	cmp	r7, #98	; 0x62
 8007eba:	d80a      	bhi.n	8007ed2 <_printf_i+0x32>
 8007ebc:	2f00      	cmp	r7, #0
 8007ebe:	f000 80d8 	beq.w	8008072 <_printf_i+0x1d2>
 8007ec2:	2f58      	cmp	r7, #88	; 0x58
 8007ec4:	f000 80a3 	beq.w	800800e <_printf_i+0x16e>
 8007ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ecc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ed0:	e03a      	b.n	8007f48 <_printf_i+0xa8>
 8007ed2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ed6:	2b15      	cmp	r3, #21
 8007ed8:	d8f6      	bhi.n	8007ec8 <_printf_i+0x28>
 8007eda:	a101      	add	r1, pc, #4	; (adr r1, 8007ee0 <_printf_i+0x40>)
 8007edc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ee0:	08007f39 	.word	0x08007f39
 8007ee4:	08007f4d 	.word	0x08007f4d
 8007ee8:	08007ec9 	.word	0x08007ec9
 8007eec:	08007ec9 	.word	0x08007ec9
 8007ef0:	08007ec9 	.word	0x08007ec9
 8007ef4:	08007ec9 	.word	0x08007ec9
 8007ef8:	08007f4d 	.word	0x08007f4d
 8007efc:	08007ec9 	.word	0x08007ec9
 8007f00:	08007ec9 	.word	0x08007ec9
 8007f04:	08007ec9 	.word	0x08007ec9
 8007f08:	08007ec9 	.word	0x08007ec9
 8007f0c:	08008059 	.word	0x08008059
 8007f10:	08007f7d 	.word	0x08007f7d
 8007f14:	0800803b 	.word	0x0800803b
 8007f18:	08007ec9 	.word	0x08007ec9
 8007f1c:	08007ec9 	.word	0x08007ec9
 8007f20:	0800807b 	.word	0x0800807b
 8007f24:	08007ec9 	.word	0x08007ec9
 8007f28:	08007f7d 	.word	0x08007f7d
 8007f2c:	08007ec9 	.word	0x08007ec9
 8007f30:	08007ec9 	.word	0x08007ec9
 8007f34:	08008043 	.word	0x08008043
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	1d1a      	adds	r2, r3, #4
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	602a      	str	r2, [r5, #0]
 8007f40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e0a3      	b.n	8008094 <_printf_i+0x1f4>
 8007f4c:	6820      	ldr	r0, [r4, #0]
 8007f4e:	6829      	ldr	r1, [r5, #0]
 8007f50:	0606      	lsls	r6, r0, #24
 8007f52:	f101 0304 	add.w	r3, r1, #4
 8007f56:	d50a      	bpl.n	8007f6e <_printf_i+0xce>
 8007f58:	680e      	ldr	r6, [r1, #0]
 8007f5a:	602b      	str	r3, [r5, #0]
 8007f5c:	2e00      	cmp	r6, #0
 8007f5e:	da03      	bge.n	8007f68 <_printf_i+0xc8>
 8007f60:	232d      	movs	r3, #45	; 0x2d
 8007f62:	4276      	negs	r6, r6
 8007f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f68:	485e      	ldr	r0, [pc, #376]	; (80080e4 <_printf_i+0x244>)
 8007f6a:	230a      	movs	r3, #10
 8007f6c:	e019      	b.n	8007fa2 <_printf_i+0x102>
 8007f6e:	680e      	ldr	r6, [r1, #0]
 8007f70:	602b      	str	r3, [r5, #0]
 8007f72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f76:	bf18      	it	ne
 8007f78:	b236      	sxthne	r6, r6
 8007f7a:	e7ef      	b.n	8007f5c <_printf_i+0xbc>
 8007f7c:	682b      	ldr	r3, [r5, #0]
 8007f7e:	6820      	ldr	r0, [r4, #0]
 8007f80:	1d19      	adds	r1, r3, #4
 8007f82:	6029      	str	r1, [r5, #0]
 8007f84:	0601      	lsls	r1, r0, #24
 8007f86:	d501      	bpl.n	8007f8c <_printf_i+0xec>
 8007f88:	681e      	ldr	r6, [r3, #0]
 8007f8a:	e002      	b.n	8007f92 <_printf_i+0xf2>
 8007f8c:	0646      	lsls	r6, r0, #25
 8007f8e:	d5fb      	bpl.n	8007f88 <_printf_i+0xe8>
 8007f90:	881e      	ldrh	r6, [r3, #0]
 8007f92:	4854      	ldr	r0, [pc, #336]	; (80080e4 <_printf_i+0x244>)
 8007f94:	2f6f      	cmp	r7, #111	; 0x6f
 8007f96:	bf0c      	ite	eq
 8007f98:	2308      	moveq	r3, #8
 8007f9a:	230a      	movne	r3, #10
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fa2:	6865      	ldr	r5, [r4, #4]
 8007fa4:	60a5      	str	r5, [r4, #8]
 8007fa6:	2d00      	cmp	r5, #0
 8007fa8:	bfa2      	ittt	ge
 8007faa:	6821      	ldrge	r1, [r4, #0]
 8007fac:	f021 0104 	bicge.w	r1, r1, #4
 8007fb0:	6021      	strge	r1, [r4, #0]
 8007fb2:	b90e      	cbnz	r6, 8007fb8 <_printf_i+0x118>
 8007fb4:	2d00      	cmp	r5, #0
 8007fb6:	d04d      	beq.n	8008054 <_printf_i+0x1b4>
 8007fb8:	4615      	mov	r5, r2
 8007fba:	fbb6 f1f3 	udiv	r1, r6, r3
 8007fbe:	fb03 6711 	mls	r7, r3, r1, r6
 8007fc2:	5dc7      	ldrb	r7, [r0, r7]
 8007fc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007fc8:	4637      	mov	r7, r6
 8007fca:	42bb      	cmp	r3, r7
 8007fcc:	460e      	mov	r6, r1
 8007fce:	d9f4      	bls.n	8007fba <_printf_i+0x11a>
 8007fd0:	2b08      	cmp	r3, #8
 8007fd2:	d10b      	bne.n	8007fec <_printf_i+0x14c>
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	07de      	lsls	r6, r3, #31
 8007fd8:	d508      	bpl.n	8007fec <_printf_i+0x14c>
 8007fda:	6923      	ldr	r3, [r4, #16]
 8007fdc:	6861      	ldr	r1, [r4, #4]
 8007fde:	4299      	cmp	r1, r3
 8007fe0:	bfde      	ittt	le
 8007fe2:	2330      	movle	r3, #48	; 0x30
 8007fe4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fe8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007fec:	1b52      	subs	r2, r2, r5
 8007fee:	6122      	str	r2, [r4, #16]
 8007ff0:	f8cd a000 	str.w	sl, [sp]
 8007ff4:	464b      	mov	r3, r9
 8007ff6:	aa03      	add	r2, sp, #12
 8007ff8:	4621      	mov	r1, r4
 8007ffa:	4640      	mov	r0, r8
 8007ffc:	f7ff fee2 	bl	8007dc4 <_printf_common>
 8008000:	3001      	adds	r0, #1
 8008002:	d14c      	bne.n	800809e <_printf_i+0x1fe>
 8008004:	f04f 30ff 	mov.w	r0, #4294967295
 8008008:	b004      	add	sp, #16
 800800a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800800e:	4835      	ldr	r0, [pc, #212]	; (80080e4 <_printf_i+0x244>)
 8008010:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008014:	6829      	ldr	r1, [r5, #0]
 8008016:	6823      	ldr	r3, [r4, #0]
 8008018:	f851 6b04 	ldr.w	r6, [r1], #4
 800801c:	6029      	str	r1, [r5, #0]
 800801e:	061d      	lsls	r5, r3, #24
 8008020:	d514      	bpl.n	800804c <_printf_i+0x1ac>
 8008022:	07df      	lsls	r7, r3, #31
 8008024:	bf44      	itt	mi
 8008026:	f043 0320 	orrmi.w	r3, r3, #32
 800802a:	6023      	strmi	r3, [r4, #0]
 800802c:	b91e      	cbnz	r6, 8008036 <_printf_i+0x196>
 800802e:	6823      	ldr	r3, [r4, #0]
 8008030:	f023 0320 	bic.w	r3, r3, #32
 8008034:	6023      	str	r3, [r4, #0]
 8008036:	2310      	movs	r3, #16
 8008038:	e7b0      	b.n	8007f9c <_printf_i+0xfc>
 800803a:	6823      	ldr	r3, [r4, #0]
 800803c:	f043 0320 	orr.w	r3, r3, #32
 8008040:	6023      	str	r3, [r4, #0]
 8008042:	2378      	movs	r3, #120	; 0x78
 8008044:	4828      	ldr	r0, [pc, #160]	; (80080e8 <_printf_i+0x248>)
 8008046:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800804a:	e7e3      	b.n	8008014 <_printf_i+0x174>
 800804c:	0659      	lsls	r1, r3, #25
 800804e:	bf48      	it	mi
 8008050:	b2b6      	uxthmi	r6, r6
 8008052:	e7e6      	b.n	8008022 <_printf_i+0x182>
 8008054:	4615      	mov	r5, r2
 8008056:	e7bb      	b.n	8007fd0 <_printf_i+0x130>
 8008058:	682b      	ldr	r3, [r5, #0]
 800805a:	6826      	ldr	r6, [r4, #0]
 800805c:	6961      	ldr	r1, [r4, #20]
 800805e:	1d18      	adds	r0, r3, #4
 8008060:	6028      	str	r0, [r5, #0]
 8008062:	0635      	lsls	r5, r6, #24
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	d501      	bpl.n	800806c <_printf_i+0x1cc>
 8008068:	6019      	str	r1, [r3, #0]
 800806a:	e002      	b.n	8008072 <_printf_i+0x1d2>
 800806c:	0670      	lsls	r0, r6, #25
 800806e:	d5fb      	bpl.n	8008068 <_printf_i+0x1c8>
 8008070:	8019      	strh	r1, [r3, #0]
 8008072:	2300      	movs	r3, #0
 8008074:	6123      	str	r3, [r4, #16]
 8008076:	4615      	mov	r5, r2
 8008078:	e7ba      	b.n	8007ff0 <_printf_i+0x150>
 800807a:	682b      	ldr	r3, [r5, #0]
 800807c:	1d1a      	adds	r2, r3, #4
 800807e:	602a      	str	r2, [r5, #0]
 8008080:	681d      	ldr	r5, [r3, #0]
 8008082:	6862      	ldr	r2, [r4, #4]
 8008084:	2100      	movs	r1, #0
 8008086:	4628      	mov	r0, r5
 8008088:	f7f8 f8b2 	bl	80001f0 <memchr>
 800808c:	b108      	cbz	r0, 8008092 <_printf_i+0x1f2>
 800808e:	1b40      	subs	r0, r0, r5
 8008090:	6060      	str	r0, [r4, #4]
 8008092:	6863      	ldr	r3, [r4, #4]
 8008094:	6123      	str	r3, [r4, #16]
 8008096:	2300      	movs	r3, #0
 8008098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800809c:	e7a8      	b.n	8007ff0 <_printf_i+0x150>
 800809e:	6923      	ldr	r3, [r4, #16]
 80080a0:	462a      	mov	r2, r5
 80080a2:	4649      	mov	r1, r9
 80080a4:	4640      	mov	r0, r8
 80080a6:	47d0      	blx	sl
 80080a8:	3001      	adds	r0, #1
 80080aa:	d0ab      	beq.n	8008004 <_printf_i+0x164>
 80080ac:	6823      	ldr	r3, [r4, #0]
 80080ae:	079b      	lsls	r3, r3, #30
 80080b0:	d413      	bmi.n	80080da <_printf_i+0x23a>
 80080b2:	68e0      	ldr	r0, [r4, #12]
 80080b4:	9b03      	ldr	r3, [sp, #12]
 80080b6:	4298      	cmp	r0, r3
 80080b8:	bfb8      	it	lt
 80080ba:	4618      	movlt	r0, r3
 80080bc:	e7a4      	b.n	8008008 <_printf_i+0x168>
 80080be:	2301      	movs	r3, #1
 80080c0:	4632      	mov	r2, r6
 80080c2:	4649      	mov	r1, r9
 80080c4:	4640      	mov	r0, r8
 80080c6:	47d0      	blx	sl
 80080c8:	3001      	adds	r0, #1
 80080ca:	d09b      	beq.n	8008004 <_printf_i+0x164>
 80080cc:	3501      	adds	r5, #1
 80080ce:	68e3      	ldr	r3, [r4, #12]
 80080d0:	9903      	ldr	r1, [sp, #12]
 80080d2:	1a5b      	subs	r3, r3, r1
 80080d4:	42ab      	cmp	r3, r5
 80080d6:	dcf2      	bgt.n	80080be <_printf_i+0x21e>
 80080d8:	e7eb      	b.n	80080b2 <_printf_i+0x212>
 80080da:	2500      	movs	r5, #0
 80080dc:	f104 0619 	add.w	r6, r4, #25
 80080e0:	e7f5      	b.n	80080ce <_printf_i+0x22e>
 80080e2:	bf00      	nop
 80080e4:	08009fa1 	.word	0x08009fa1
 80080e8:	08009fb2 	.word	0x08009fb2

080080ec <memmove>:
 80080ec:	4288      	cmp	r0, r1
 80080ee:	b510      	push	{r4, lr}
 80080f0:	eb01 0402 	add.w	r4, r1, r2
 80080f4:	d902      	bls.n	80080fc <memmove+0x10>
 80080f6:	4284      	cmp	r4, r0
 80080f8:	4623      	mov	r3, r4
 80080fa:	d807      	bhi.n	800810c <memmove+0x20>
 80080fc:	1e43      	subs	r3, r0, #1
 80080fe:	42a1      	cmp	r1, r4
 8008100:	d008      	beq.n	8008114 <memmove+0x28>
 8008102:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008106:	f803 2f01 	strb.w	r2, [r3, #1]!
 800810a:	e7f8      	b.n	80080fe <memmove+0x12>
 800810c:	4402      	add	r2, r0
 800810e:	4601      	mov	r1, r0
 8008110:	428a      	cmp	r2, r1
 8008112:	d100      	bne.n	8008116 <memmove+0x2a>
 8008114:	bd10      	pop	{r4, pc}
 8008116:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800811a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800811e:	e7f7      	b.n	8008110 <memmove+0x24>

08008120 <_free_r>:
 8008120:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008122:	2900      	cmp	r1, #0
 8008124:	d044      	beq.n	80081b0 <_free_r+0x90>
 8008126:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800812a:	9001      	str	r0, [sp, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	f1a1 0404 	sub.w	r4, r1, #4
 8008132:	bfb8      	it	lt
 8008134:	18e4      	addlt	r4, r4, r3
 8008136:	f000 f913 	bl	8008360 <__malloc_lock>
 800813a:	4a1e      	ldr	r2, [pc, #120]	; (80081b4 <_free_r+0x94>)
 800813c:	9801      	ldr	r0, [sp, #4]
 800813e:	6813      	ldr	r3, [r2, #0]
 8008140:	b933      	cbnz	r3, 8008150 <_free_r+0x30>
 8008142:	6063      	str	r3, [r4, #4]
 8008144:	6014      	str	r4, [r2, #0]
 8008146:	b003      	add	sp, #12
 8008148:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800814c:	f000 b90e 	b.w	800836c <__malloc_unlock>
 8008150:	42a3      	cmp	r3, r4
 8008152:	d908      	bls.n	8008166 <_free_r+0x46>
 8008154:	6825      	ldr	r5, [r4, #0]
 8008156:	1961      	adds	r1, r4, r5
 8008158:	428b      	cmp	r3, r1
 800815a:	bf01      	itttt	eq
 800815c:	6819      	ldreq	r1, [r3, #0]
 800815e:	685b      	ldreq	r3, [r3, #4]
 8008160:	1949      	addeq	r1, r1, r5
 8008162:	6021      	streq	r1, [r4, #0]
 8008164:	e7ed      	b.n	8008142 <_free_r+0x22>
 8008166:	461a      	mov	r2, r3
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	b10b      	cbz	r3, 8008170 <_free_r+0x50>
 800816c:	42a3      	cmp	r3, r4
 800816e:	d9fa      	bls.n	8008166 <_free_r+0x46>
 8008170:	6811      	ldr	r1, [r2, #0]
 8008172:	1855      	adds	r5, r2, r1
 8008174:	42a5      	cmp	r5, r4
 8008176:	d10b      	bne.n	8008190 <_free_r+0x70>
 8008178:	6824      	ldr	r4, [r4, #0]
 800817a:	4421      	add	r1, r4
 800817c:	1854      	adds	r4, r2, r1
 800817e:	42a3      	cmp	r3, r4
 8008180:	6011      	str	r1, [r2, #0]
 8008182:	d1e0      	bne.n	8008146 <_free_r+0x26>
 8008184:	681c      	ldr	r4, [r3, #0]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	6053      	str	r3, [r2, #4]
 800818a:	4421      	add	r1, r4
 800818c:	6011      	str	r1, [r2, #0]
 800818e:	e7da      	b.n	8008146 <_free_r+0x26>
 8008190:	d902      	bls.n	8008198 <_free_r+0x78>
 8008192:	230c      	movs	r3, #12
 8008194:	6003      	str	r3, [r0, #0]
 8008196:	e7d6      	b.n	8008146 <_free_r+0x26>
 8008198:	6825      	ldr	r5, [r4, #0]
 800819a:	1961      	adds	r1, r4, r5
 800819c:	428b      	cmp	r3, r1
 800819e:	bf04      	itt	eq
 80081a0:	6819      	ldreq	r1, [r3, #0]
 80081a2:	685b      	ldreq	r3, [r3, #4]
 80081a4:	6063      	str	r3, [r4, #4]
 80081a6:	bf04      	itt	eq
 80081a8:	1949      	addeq	r1, r1, r5
 80081aa:	6021      	streq	r1, [r4, #0]
 80081ac:	6054      	str	r4, [r2, #4]
 80081ae:	e7ca      	b.n	8008146 <_free_r+0x26>
 80081b0:	b003      	add	sp, #12
 80081b2:	bd30      	pop	{r4, r5, pc}
 80081b4:	200079e8 	.word	0x200079e8

080081b8 <sbrk_aligned>:
 80081b8:	b570      	push	{r4, r5, r6, lr}
 80081ba:	4e0e      	ldr	r6, [pc, #56]	; (80081f4 <sbrk_aligned+0x3c>)
 80081bc:	460c      	mov	r4, r1
 80081be:	6831      	ldr	r1, [r6, #0]
 80081c0:	4605      	mov	r5, r0
 80081c2:	b911      	cbnz	r1, 80081ca <sbrk_aligned+0x12>
 80081c4:	f000 f8bc 	bl	8008340 <_sbrk_r>
 80081c8:	6030      	str	r0, [r6, #0]
 80081ca:	4621      	mov	r1, r4
 80081cc:	4628      	mov	r0, r5
 80081ce:	f000 f8b7 	bl	8008340 <_sbrk_r>
 80081d2:	1c43      	adds	r3, r0, #1
 80081d4:	d00a      	beq.n	80081ec <sbrk_aligned+0x34>
 80081d6:	1cc4      	adds	r4, r0, #3
 80081d8:	f024 0403 	bic.w	r4, r4, #3
 80081dc:	42a0      	cmp	r0, r4
 80081de:	d007      	beq.n	80081f0 <sbrk_aligned+0x38>
 80081e0:	1a21      	subs	r1, r4, r0
 80081e2:	4628      	mov	r0, r5
 80081e4:	f000 f8ac 	bl	8008340 <_sbrk_r>
 80081e8:	3001      	adds	r0, #1
 80081ea:	d101      	bne.n	80081f0 <sbrk_aligned+0x38>
 80081ec:	f04f 34ff 	mov.w	r4, #4294967295
 80081f0:	4620      	mov	r0, r4
 80081f2:	bd70      	pop	{r4, r5, r6, pc}
 80081f4:	200079ec 	.word	0x200079ec

080081f8 <_malloc_r>:
 80081f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081fc:	1ccd      	adds	r5, r1, #3
 80081fe:	f025 0503 	bic.w	r5, r5, #3
 8008202:	3508      	adds	r5, #8
 8008204:	2d0c      	cmp	r5, #12
 8008206:	bf38      	it	cc
 8008208:	250c      	movcc	r5, #12
 800820a:	2d00      	cmp	r5, #0
 800820c:	4607      	mov	r7, r0
 800820e:	db01      	blt.n	8008214 <_malloc_r+0x1c>
 8008210:	42a9      	cmp	r1, r5
 8008212:	d905      	bls.n	8008220 <_malloc_r+0x28>
 8008214:	230c      	movs	r3, #12
 8008216:	603b      	str	r3, [r7, #0]
 8008218:	2600      	movs	r6, #0
 800821a:	4630      	mov	r0, r6
 800821c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008220:	4e2e      	ldr	r6, [pc, #184]	; (80082dc <_malloc_r+0xe4>)
 8008222:	f000 f89d 	bl	8008360 <__malloc_lock>
 8008226:	6833      	ldr	r3, [r6, #0]
 8008228:	461c      	mov	r4, r3
 800822a:	bb34      	cbnz	r4, 800827a <_malloc_r+0x82>
 800822c:	4629      	mov	r1, r5
 800822e:	4638      	mov	r0, r7
 8008230:	f7ff ffc2 	bl	80081b8 <sbrk_aligned>
 8008234:	1c43      	adds	r3, r0, #1
 8008236:	4604      	mov	r4, r0
 8008238:	d14d      	bne.n	80082d6 <_malloc_r+0xde>
 800823a:	6834      	ldr	r4, [r6, #0]
 800823c:	4626      	mov	r6, r4
 800823e:	2e00      	cmp	r6, #0
 8008240:	d140      	bne.n	80082c4 <_malloc_r+0xcc>
 8008242:	6823      	ldr	r3, [r4, #0]
 8008244:	4631      	mov	r1, r6
 8008246:	4638      	mov	r0, r7
 8008248:	eb04 0803 	add.w	r8, r4, r3
 800824c:	f000 f878 	bl	8008340 <_sbrk_r>
 8008250:	4580      	cmp	r8, r0
 8008252:	d13a      	bne.n	80082ca <_malloc_r+0xd2>
 8008254:	6821      	ldr	r1, [r4, #0]
 8008256:	3503      	adds	r5, #3
 8008258:	1a6d      	subs	r5, r5, r1
 800825a:	f025 0503 	bic.w	r5, r5, #3
 800825e:	3508      	adds	r5, #8
 8008260:	2d0c      	cmp	r5, #12
 8008262:	bf38      	it	cc
 8008264:	250c      	movcc	r5, #12
 8008266:	4629      	mov	r1, r5
 8008268:	4638      	mov	r0, r7
 800826a:	f7ff ffa5 	bl	80081b8 <sbrk_aligned>
 800826e:	3001      	adds	r0, #1
 8008270:	d02b      	beq.n	80082ca <_malloc_r+0xd2>
 8008272:	6823      	ldr	r3, [r4, #0]
 8008274:	442b      	add	r3, r5
 8008276:	6023      	str	r3, [r4, #0]
 8008278:	e00e      	b.n	8008298 <_malloc_r+0xa0>
 800827a:	6822      	ldr	r2, [r4, #0]
 800827c:	1b52      	subs	r2, r2, r5
 800827e:	d41e      	bmi.n	80082be <_malloc_r+0xc6>
 8008280:	2a0b      	cmp	r2, #11
 8008282:	d916      	bls.n	80082b2 <_malloc_r+0xba>
 8008284:	1961      	adds	r1, r4, r5
 8008286:	42a3      	cmp	r3, r4
 8008288:	6025      	str	r5, [r4, #0]
 800828a:	bf18      	it	ne
 800828c:	6059      	strne	r1, [r3, #4]
 800828e:	6863      	ldr	r3, [r4, #4]
 8008290:	bf08      	it	eq
 8008292:	6031      	streq	r1, [r6, #0]
 8008294:	5162      	str	r2, [r4, r5]
 8008296:	604b      	str	r3, [r1, #4]
 8008298:	4638      	mov	r0, r7
 800829a:	f104 060b 	add.w	r6, r4, #11
 800829e:	f000 f865 	bl	800836c <__malloc_unlock>
 80082a2:	f026 0607 	bic.w	r6, r6, #7
 80082a6:	1d23      	adds	r3, r4, #4
 80082a8:	1af2      	subs	r2, r6, r3
 80082aa:	d0b6      	beq.n	800821a <_malloc_r+0x22>
 80082ac:	1b9b      	subs	r3, r3, r6
 80082ae:	50a3      	str	r3, [r4, r2]
 80082b0:	e7b3      	b.n	800821a <_malloc_r+0x22>
 80082b2:	6862      	ldr	r2, [r4, #4]
 80082b4:	42a3      	cmp	r3, r4
 80082b6:	bf0c      	ite	eq
 80082b8:	6032      	streq	r2, [r6, #0]
 80082ba:	605a      	strne	r2, [r3, #4]
 80082bc:	e7ec      	b.n	8008298 <_malloc_r+0xa0>
 80082be:	4623      	mov	r3, r4
 80082c0:	6864      	ldr	r4, [r4, #4]
 80082c2:	e7b2      	b.n	800822a <_malloc_r+0x32>
 80082c4:	4634      	mov	r4, r6
 80082c6:	6876      	ldr	r6, [r6, #4]
 80082c8:	e7b9      	b.n	800823e <_malloc_r+0x46>
 80082ca:	230c      	movs	r3, #12
 80082cc:	603b      	str	r3, [r7, #0]
 80082ce:	4638      	mov	r0, r7
 80082d0:	f000 f84c 	bl	800836c <__malloc_unlock>
 80082d4:	e7a1      	b.n	800821a <_malloc_r+0x22>
 80082d6:	6025      	str	r5, [r4, #0]
 80082d8:	e7de      	b.n	8008298 <_malloc_r+0xa0>
 80082da:	bf00      	nop
 80082dc:	200079e8 	.word	0x200079e8

080082e0 <_realloc_r>:
 80082e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082e4:	4680      	mov	r8, r0
 80082e6:	4614      	mov	r4, r2
 80082e8:	460e      	mov	r6, r1
 80082ea:	b921      	cbnz	r1, 80082f6 <_realloc_r+0x16>
 80082ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082f0:	4611      	mov	r1, r2
 80082f2:	f7ff bf81 	b.w	80081f8 <_malloc_r>
 80082f6:	b92a      	cbnz	r2, 8008304 <_realloc_r+0x24>
 80082f8:	f7ff ff12 	bl	8008120 <_free_r>
 80082fc:	4625      	mov	r5, r4
 80082fe:	4628      	mov	r0, r5
 8008300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008304:	f000 f838 	bl	8008378 <_malloc_usable_size_r>
 8008308:	4284      	cmp	r4, r0
 800830a:	4607      	mov	r7, r0
 800830c:	d802      	bhi.n	8008314 <_realloc_r+0x34>
 800830e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008312:	d812      	bhi.n	800833a <_realloc_r+0x5a>
 8008314:	4621      	mov	r1, r4
 8008316:	4640      	mov	r0, r8
 8008318:	f7ff ff6e 	bl	80081f8 <_malloc_r>
 800831c:	4605      	mov	r5, r0
 800831e:	2800      	cmp	r0, #0
 8008320:	d0ed      	beq.n	80082fe <_realloc_r+0x1e>
 8008322:	42bc      	cmp	r4, r7
 8008324:	4622      	mov	r2, r4
 8008326:	4631      	mov	r1, r6
 8008328:	bf28      	it	cs
 800832a:	463a      	movcs	r2, r7
 800832c:	f7ff fba4 	bl	8007a78 <memcpy>
 8008330:	4631      	mov	r1, r6
 8008332:	4640      	mov	r0, r8
 8008334:	f7ff fef4 	bl	8008120 <_free_r>
 8008338:	e7e1      	b.n	80082fe <_realloc_r+0x1e>
 800833a:	4635      	mov	r5, r6
 800833c:	e7df      	b.n	80082fe <_realloc_r+0x1e>
	...

08008340 <_sbrk_r>:
 8008340:	b538      	push	{r3, r4, r5, lr}
 8008342:	4d06      	ldr	r5, [pc, #24]	; (800835c <_sbrk_r+0x1c>)
 8008344:	2300      	movs	r3, #0
 8008346:	4604      	mov	r4, r0
 8008348:	4608      	mov	r0, r1
 800834a:	602b      	str	r3, [r5, #0]
 800834c:	f7fb fc18 	bl	8003b80 <_sbrk>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	d102      	bne.n	800835a <_sbrk_r+0x1a>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	b103      	cbz	r3, 800835a <_sbrk_r+0x1a>
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	bd38      	pop	{r3, r4, r5, pc}
 800835c:	200079f0 	.word	0x200079f0

08008360 <__malloc_lock>:
 8008360:	4801      	ldr	r0, [pc, #4]	; (8008368 <__malloc_lock+0x8>)
 8008362:	f000 b811 	b.w	8008388 <__retarget_lock_acquire_recursive>
 8008366:	bf00      	nop
 8008368:	200079f4 	.word	0x200079f4

0800836c <__malloc_unlock>:
 800836c:	4801      	ldr	r0, [pc, #4]	; (8008374 <__malloc_unlock+0x8>)
 800836e:	f000 b80c 	b.w	800838a <__retarget_lock_release_recursive>
 8008372:	bf00      	nop
 8008374:	200079f4 	.word	0x200079f4

08008378 <_malloc_usable_size_r>:
 8008378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800837c:	1f18      	subs	r0, r3, #4
 800837e:	2b00      	cmp	r3, #0
 8008380:	bfbc      	itt	lt
 8008382:	580b      	ldrlt	r3, [r1, r0]
 8008384:	18c0      	addlt	r0, r0, r3
 8008386:	4770      	bx	lr

08008388 <__retarget_lock_acquire_recursive>:
 8008388:	4770      	bx	lr

0800838a <__retarget_lock_release_recursive>:
 800838a:	4770      	bx	lr

0800838c <trunc>:
 800838c:	ec51 0b10 	vmov	r0, r1, d0
 8008390:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008394:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8008398:	2b13      	cmp	r3, #19
 800839a:	b5d0      	push	{r4, r6, r7, lr}
 800839c:	460c      	mov	r4, r1
 800839e:	dc10      	bgt.n	80083c2 <trunc+0x36>
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	bfa5      	ittet	ge
 80083a4:	4a11      	ldrge	r2, [pc, #68]	; (80083ec <trunc+0x60>)
 80083a6:	fa42 f303 	asrge.w	r3, r2, r3
 80083aa:	2100      	movlt	r1, #0
 80083ac:	2100      	movge	r1, #0
 80083ae:	bfb9      	ittee	lt
 80083b0:	2000      	movlt	r0, #0
 80083b2:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 80083b6:	2000      	movge	r0, #0
 80083b8:	ea24 0103 	bicge.w	r1, r4, r3
 80083bc:	ec41 0b10 	vmov	d0, r0, r1
 80083c0:	bdd0      	pop	{r4, r6, r7, pc}
 80083c2:	2b33      	cmp	r3, #51	; 0x33
 80083c4:	dd08      	ble.n	80083d8 <trunc+0x4c>
 80083c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083ca:	d1f7      	bne.n	80083bc <trunc+0x30>
 80083cc:	ee10 2a10 	vmov	r2, s0
 80083d0:	460b      	mov	r3, r1
 80083d2:	f7f7 ff63 	bl	800029c <__adddf3>
 80083d6:	e7f1      	b.n	80083bc <trunc+0x30>
 80083d8:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80083dc:	f04f 33ff 	mov.w	r3, #4294967295
 80083e0:	fa23 f202 	lsr.w	r2, r3, r2
 80083e4:	ea20 0602 	bic.w	r6, r0, r2
 80083e8:	4630      	mov	r0, r6
 80083ea:	e7e7      	b.n	80083bc <trunc+0x30>
 80083ec:	000fffff 	.word	0x000fffff

080083f0 <_init>:
 80083f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f2:	bf00      	nop
 80083f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083f6:	bc08      	pop	{r3}
 80083f8:	469e      	mov	lr, r3
 80083fa:	4770      	bx	lr

080083fc <_fini>:
 80083fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fe:	bf00      	nop
 8008400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008402:	bc08      	pop	{r3}
 8008404:	469e      	mov	lr, r3
 8008406:	4770      	bx	lr
