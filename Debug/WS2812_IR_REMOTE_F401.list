
WS2812_IR_REMOTE_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d8  08009254  08009254  00019254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c2c  08009c2c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08009c2c  08009c2c  00019c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c34  08009c34  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c34  08009c34  00019c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c38  08009c38  00019c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08009c3c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007b44  20000068  08009ca4  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20007bac  08009ca4  00027bac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000160f9  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003174  00000000  00000000  000361d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  00039348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f7f  00000000  00000000  0003a6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019261  00000000  00000000  0003b677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019de1  00000000  00000000  000548d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093a9b  00000000  00000000  0006e6b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a18  00000000  00000000  00102154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00107b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800923c 	.word	0x0800923c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800923c 	.word	0x0800923c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b970 	b.w	8000e74 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9e08      	ldr	r6, [sp, #32]
 8000bb2:	460d      	mov	r5, r1
 8000bb4:	4604      	mov	r4, r0
 8000bb6:	460f      	mov	r7, r1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d14a      	bne.n	8000c52 <__udivmoddi4+0xa6>
 8000bbc:	428a      	cmp	r2, r1
 8000bbe:	4694      	mov	ip, r2
 8000bc0:	d965      	bls.n	8000c8e <__udivmoddi4+0xe2>
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	b143      	cbz	r3, 8000bda <__udivmoddi4+0x2e>
 8000bc8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bcc:	f1c3 0220 	rsb	r2, r3, #32
 8000bd0:	409f      	lsls	r7, r3
 8000bd2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bd6:	4317      	orrs	r7, r2
 8000bd8:	409c      	lsls	r4, r3
 8000bda:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bde:	fa1f f58c 	uxth.w	r5, ip
 8000be2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000be6:	0c22      	lsrs	r2, r4, #16
 8000be8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bf0:	fb01 f005 	mul.w	r0, r1, r5
 8000bf4:	4290      	cmp	r0, r2
 8000bf6:	d90a      	bls.n	8000c0e <__udivmoddi4+0x62>
 8000bf8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bfc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c00:	f080 811c 	bcs.w	8000e3c <__udivmoddi4+0x290>
 8000c04:	4290      	cmp	r0, r2
 8000c06:	f240 8119 	bls.w	8000e3c <__udivmoddi4+0x290>
 8000c0a:	3902      	subs	r1, #2
 8000c0c:	4462      	add	r2, ip
 8000c0e:	1a12      	subs	r2, r2, r0
 8000c10:	b2a4      	uxth	r4, r4
 8000c12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c1e:	fb00 f505 	mul.w	r5, r0, r5
 8000c22:	42a5      	cmp	r5, r4
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x90>
 8000c26:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c2e:	f080 8107 	bcs.w	8000e40 <__udivmoddi4+0x294>
 8000c32:	42a5      	cmp	r5, r4
 8000c34:	f240 8104 	bls.w	8000e40 <__udivmoddi4+0x294>
 8000c38:	4464      	add	r4, ip
 8000c3a:	3802      	subs	r0, #2
 8000c3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c40:	1b64      	subs	r4, r4, r5
 8000c42:	2100      	movs	r1, #0
 8000c44:	b11e      	cbz	r6, 8000c4e <__udivmoddi4+0xa2>
 8000c46:	40dc      	lsrs	r4, r3
 8000c48:	2300      	movs	r3, #0
 8000c4a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0xbc>
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	f000 80ed 	beq.w	8000e36 <__udivmoddi4+0x28a>
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c62:	4608      	mov	r0, r1
 8000c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c68:	fab3 f183 	clz	r1, r3
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	d149      	bne.n	8000d04 <__udivmoddi4+0x158>
 8000c70:	42ab      	cmp	r3, r5
 8000c72:	d302      	bcc.n	8000c7a <__udivmoddi4+0xce>
 8000c74:	4282      	cmp	r2, r0
 8000c76:	f200 80f8 	bhi.w	8000e6a <__udivmoddi4+0x2be>
 8000c7a:	1a84      	subs	r4, r0, r2
 8000c7c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c80:	2001      	movs	r0, #1
 8000c82:	4617      	mov	r7, r2
 8000c84:	2e00      	cmp	r6, #0
 8000c86:	d0e2      	beq.n	8000c4e <__udivmoddi4+0xa2>
 8000c88:	e9c6 4700 	strd	r4, r7, [r6]
 8000c8c:	e7df      	b.n	8000c4e <__udivmoddi4+0xa2>
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xe6>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f382 	clz	r3, r2
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f040 8090 	bne.w	8000dbc <__udivmoddi4+0x210>
 8000c9c:	1a8a      	subs	r2, r1, r2
 8000c9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca2:	fa1f fe8c 	uxth.w	lr, ip
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cac:	fb07 2015 	mls	r0, r7, r5, r2
 8000cb0:	0c22      	lsrs	r2, r4, #16
 8000cb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cb6:	fb0e f005 	mul.w	r0, lr, r5
 8000cba:	4290      	cmp	r0, r2
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x124>
 8000cbe:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x122>
 8000cc8:	4290      	cmp	r0, r2
 8000cca:	f200 80cb 	bhi.w	8000e64 <__udivmoddi4+0x2b8>
 8000cce:	4645      	mov	r5, r8
 8000cd0:	1a12      	subs	r2, r2, r0
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cd8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ce0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x14e>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x14c>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	f200 80bb 	bhi.w	8000e6e <__udivmoddi4+0x2c2>
 8000cf8:	4610      	mov	r0, r2
 8000cfa:	eba4 040e 	sub.w	r4, r4, lr
 8000cfe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d02:	e79f      	b.n	8000c44 <__udivmoddi4+0x98>
 8000d04:	f1c1 0720 	rsb	r7, r1, #32
 8000d08:	408b      	lsls	r3, r1
 8000d0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d12:	fa05 f401 	lsl.w	r4, r5, r1
 8000d16:	fa20 f307 	lsr.w	r3, r0, r7
 8000d1a:	40fd      	lsrs	r5, r7
 8000d1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d20:	4323      	orrs	r3, r4
 8000d22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d2e:	0c1c      	lsrs	r4, r3, #16
 8000d30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d34:	fb08 f50e 	mul.w	r5, r8, lr
 8000d38:	42a5      	cmp	r5, r4
 8000d3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b0>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d4c:	f080 8088 	bcs.w	8000e60 <__udivmoddi4+0x2b4>
 8000d50:	42a5      	cmp	r5, r4
 8000d52:	f240 8085 	bls.w	8000e60 <__udivmoddi4+0x2b4>
 8000d56:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5a:	4464      	add	r4, ip
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	b29d      	uxth	r5, r3
 8000d60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d64:	fb09 4413 	mls	r4, r9, r3, r4
 8000d68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1da>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d7c:	d26c      	bcs.n	8000e58 <__udivmoddi4+0x2ac>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	d96a      	bls.n	8000e58 <__udivmoddi4+0x2ac>
 8000d82:	3b02      	subs	r3, #2
 8000d84:	4464      	add	r4, ip
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	42ac      	cmp	r4, r5
 8000d94:	46c8      	mov	r8, r9
 8000d96:	46ae      	mov	lr, r5
 8000d98:	d356      	bcc.n	8000e48 <__udivmoddi4+0x29c>
 8000d9a:	d053      	beq.n	8000e44 <__udivmoddi4+0x298>
 8000d9c:	b156      	cbz	r6, 8000db4 <__udivmoddi4+0x208>
 8000d9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000da2:	eb64 040e 	sbc.w	r4, r4, lr
 8000da6:	fa04 f707 	lsl.w	r7, r4, r7
 8000daa:	40ca      	lsrs	r2, r1
 8000dac:	40cc      	lsrs	r4, r1
 8000dae:	4317      	orrs	r7, r2
 8000db0:	e9c6 7400 	strd	r7, r4, [r6]
 8000db4:	4618      	mov	r0, r3
 8000db6:	2100      	movs	r1, #0
 8000db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbc:	f1c3 0120 	rsb	r1, r3, #32
 8000dc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dc4:	fa20 f201 	lsr.w	r2, r0, r1
 8000dc8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dcc:	409d      	lsls	r5, r3
 8000dce:	432a      	orrs	r2, r5
 8000dd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd4:	fa1f fe8c 	uxth.w	lr, ip
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1510 	mls	r5, r7, r0, r1
 8000de0:	0c11      	lsrs	r1, r2, #16
 8000de2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000de6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dea:	428d      	cmp	r5, r1
 8000dec:	fa04 f403 	lsl.w	r4, r4, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x258>
 8000df2:	eb1c 0101 	adds.w	r1, ip, r1
 8000df6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dfa:	d22f      	bcs.n	8000e5c <__udivmoddi4+0x2b0>
 8000dfc:	428d      	cmp	r5, r1
 8000dfe:	d92d      	bls.n	8000e5c <__udivmoddi4+0x2b0>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4461      	add	r1, ip
 8000e04:	1b49      	subs	r1, r1, r5
 8000e06:	b292      	uxth	r2, r2
 8000e08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e14:	fb05 f10e 	mul.w	r1, r5, lr
 8000e18:	4291      	cmp	r1, r2
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x282>
 8000e1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e24:	d216      	bcs.n	8000e54 <__udivmoddi4+0x2a8>
 8000e26:	4291      	cmp	r1, r2
 8000e28:	d914      	bls.n	8000e54 <__udivmoddi4+0x2a8>
 8000e2a:	3d02      	subs	r5, #2
 8000e2c:	4462      	add	r2, ip
 8000e2e:	1a52      	subs	r2, r2, r1
 8000e30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e34:	e738      	b.n	8000ca8 <__udivmoddi4+0xfc>
 8000e36:	4631      	mov	r1, r6
 8000e38:	4630      	mov	r0, r6
 8000e3a:	e708      	b.n	8000c4e <__udivmoddi4+0xa2>
 8000e3c:	4639      	mov	r1, r7
 8000e3e:	e6e6      	b.n	8000c0e <__udivmoddi4+0x62>
 8000e40:	4610      	mov	r0, r2
 8000e42:	e6fb      	b.n	8000c3c <__udivmoddi4+0x90>
 8000e44:	4548      	cmp	r0, r9
 8000e46:	d2a9      	bcs.n	8000d9c <__udivmoddi4+0x1f0>
 8000e48:	ebb9 0802 	subs.w	r8, r9, r2
 8000e4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e50:	3b01      	subs	r3, #1
 8000e52:	e7a3      	b.n	8000d9c <__udivmoddi4+0x1f0>
 8000e54:	4645      	mov	r5, r8
 8000e56:	e7ea      	b.n	8000e2e <__udivmoddi4+0x282>
 8000e58:	462b      	mov	r3, r5
 8000e5a:	e794      	b.n	8000d86 <__udivmoddi4+0x1da>
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	e7d1      	b.n	8000e04 <__udivmoddi4+0x258>
 8000e60:	46d0      	mov	r8, sl
 8000e62:	e77b      	b.n	8000d5c <__udivmoddi4+0x1b0>
 8000e64:	3d02      	subs	r5, #2
 8000e66:	4462      	add	r2, ip
 8000e68:	e732      	b.n	8000cd0 <__udivmoddi4+0x124>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e70a      	b.n	8000c84 <__udivmoddi4+0xd8>
 8000e6e:	4464      	add	r4, ip
 8000e70:	3802      	subs	r0, #2
 8000e72:	e742      	b.n	8000cfa <__udivmoddi4+0x14e>

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <AT24XX_Save>:
		return 1;
	else
		return 0;
}

uint8_t AT24XX_Save(uint16_t address, void *data, size_t size_of_data) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af04      	add	r7, sp, #16
 8000e7e:	4603      	mov	r3, r0
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 4) || (AT24XX_SIZE_KBIT == 8) || (AT24XX_SIZE_KBIT == 16))
	if(size_of_data > 16)
		return 0;
#endif
#if ((AT24XX_SIZE_KBIT == 32) || (AT24XX_SIZE_KBIT == 64) || (AT24XX_SIZE_KBIT == 128))
	if(size_of_data > 32)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b20      	cmp	r3, #32
 8000e8a:	d901      	bls.n	8000e90 <AT24XX_Save+0x18>
		return 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e016      	b.n	8000ebe <AT24XX_Save+0x46>
#endif

#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Write(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, HAL_MAX_DELAY) == HAL_OK)
#else
		if (HAL_I2C_Mem_Write(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, HAL_MAX_DELAY) == HAL_OK)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	89fa      	ldrh	r2, [r7, #14]
 8000e96:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9a:	9102      	str	r1, [sp, #8]
 8000e9c:	9301      	str	r3, [sp, #4]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	2310      	movs	r3, #16
 8000ea4:	21ae      	movs	r1, #174	; 0xae
 8000ea6:	4808      	ldr	r0, [pc, #32]	; (8000ec8 <AT24XX_Save+0x50>)
 8000ea8:	f003 ff00 	bl	8004cac <HAL_I2C_Mem_Write>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d104      	bne.n	8000ebc <AT24XX_Save+0x44>
#endif
{

			HAL_Delay(5);
 8000eb2:	2005      	movs	r0, #5
 8000eb4:	f002 ff5a 	bl	8003d6c <HAL_Delay>
			return 1;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e000      	b.n	8000ebe <AT24XX_Save+0x46>
} else
	return 0;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200006cc 	.word	0x200006cc

08000ecc <AT24XX_Load>:

uint8_t AT24XX_Load(uint16_t address, void *data, size_t size_of_data) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af04      	add	r7, sp, #16
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
 8000ed8:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Read(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, HAL_MAX_DELAY) == HAL_OK)
#else
		if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, HAL_MAX_DELAY) == HAL_OK)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	89fa      	ldrh	r2, [r7, #14]
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee4:	9102      	str	r1, [sp, #8]
 8000ee6:	9301      	str	r3, [sp, #4]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2310      	movs	r3, #16
 8000eee:	21ae      	movs	r1, #174	; 0xae
 8000ef0:	4806      	ldr	r0, [pc, #24]	; (8000f0c <AT24XX_Load+0x40>)
 8000ef2:	f003 ffd5 	bl	8004ea0 <HAL_I2C_Mem_Read>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d101      	bne.n	8000f00 <AT24XX_Load+0x34>
#endif
{
	return 1;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e000      	b.n	8000f02 <AT24XX_Load+0x36>
} else
	return 0;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200006cc 	.word	0x200006cc

08000f10 <AT24XX_Read>:

uint8_t AT24XX_Read(uint16_t address) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	80fb      	strh	r3, [r7, #6]
	uint16_t dt[1] = {0};
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	81bb      	strh	r3, [r7, #12]
	AT24XX_Load(address, dt, 1);
 8000f1e:	f107 010c 	add.w	r1, r7, #12
 8000f22:	88fb      	ldrh	r3, [r7, #6]
 8000f24:	2201      	movs	r2, #1
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ffd0 	bl	8000ecc <AT24XX_Load>
	return dt[0];
 8000f2c:	89bb      	ldrh	r3, [r7, #12]
 8000f2e:	b2db      	uxtb	r3, r3
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <AT24XX_Write>:

void AT24XX_Write(uint16_t address, uint8_t val) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	460a      	mov	r2, r1
 8000f42:	80fb      	strh	r3, [r7, #6]
 8000f44:	4613      	mov	r3, r2
 8000f46:	717b      	strb	r3, [r7, #5]
	uint8_t save[] = {val};
 8000f48:	797b      	ldrb	r3, [r7, #5]
 8000f4a:	733b      	strb	r3, [r7, #12]
	AT24XX_Save(address, save, 1);
 8000f4c:	f107 010c 	add.w	r1, r7, #12
 8000f50:	88fb      	ldrh	r3, [r7, #6]
 8000f52:	2201      	movs	r2, #1
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff8f 	bl	8000e78 <AT24XX_Save>
}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <LCD_Command>:

uint32_t RGB(uint8_t r, uint8_t g, uint8_t b) {
	return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
}

inline static void LCD_Command(uint8_t cmd) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
	if (SOFT_CS) LCD_U_CS
	LCD_U_DC
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2102      	movs	r1, #2
 8000f72:	4806      	ldr	r0, [pc, #24]	; (8000f8c <LCD_Command+0x28>)
 8000f74:	f003 fd3c 	bl	80049f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&LCD_SPI, &cmd, 1, 0);
 8000f78:	1df9      	adds	r1, r7, #7
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	4804      	ldr	r0, [pc, #16]	; (8000f90 <LCD_Command+0x2c>)
 8000f80:	f005 f9f1 	bl	8006366 <HAL_SPI_Transmit>
	if (SOFT_CS) LCD_S_CS
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40020400 	.word	0x40020400
 8000f90:	20000778 	.word	0x20000778

08000f94 <LCD_Data_8>:

inline static void LCD_Data_8(uint8_t data) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
	if (SOFT_CS)
		LCD_U_CS
	LCD_S_DC
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2102      	movs	r1, #2
 8000fa2:	4806      	ldr	r0, [pc, #24]	; (8000fbc <LCD_Data_8+0x28>)
 8000fa4:	f003 fd24 	bl	80049f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&LCD_SPI, &data, 1, 0);
 8000fa8:	1df9      	adds	r1, r7, #7
 8000faa:	2300      	movs	r3, #0
 8000fac:	2201      	movs	r2, #1
 8000fae:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <LCD_Data_8+0x2c>)
 8000fb0:	f005 f9d9 	bl	8006366 <HAL_SPI_Transmit>
	if (SOFT_CS)
		LCD_S_CS
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40020400 	.word	0x40020400
 8000fc0:	20000778 	.word	0x20000778

08000fc4 <LCD_Data_16>:

inline static void LCD_Data_16(uint16_t word) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	80fb      	strh	r3, [r7, #6]
	if (SOFT_CS) LCD_U_CS
	LCD_S_DC
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2102      	movs	r1, #2
 8000fd2:	4809      	ldr	r0, [pc, #36]	; (8000ff8 <LCD_Data_16+0x34>)
 8000fd4:	f003 fd0c 	bl	80049f0 <HAL_GPIO_WritePin>
	LCD_Data_8((word >> 8) & 0x00FF);
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	0a1b      	lsrs	r3, r3, #8
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ffd7 	bl	8000f94 <LCD_Data_8>
	LCD_Data_8(word & 0x00FF);
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ffd2 	bl	8000f94 <LCD_Data_8>
	if (SOFT_CS) LCD_S_CS
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40020400 	.word	0x40020400

08000ffc <LCD_Data_24>:

inline static void LCD_Data_24(uint32_t word) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	if (SOFT_CS) LCD_U_CS
	LCD_S_DC
 8001004:	2201      	movs	r2, #1
 8001006:	2102      	movs	r1, #2
 8001008:	480b      	ldr	r0, [pc, #44]	; (8001038 <LCD_Data_24+0x3c>)
 800100a:	f003 fcf1 	bl	80049f0 <HAL_GPIO_WritePin>
	LCD_Data_8((word >> 16) & 0x00FFFF);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	0c1b      	lsrs	r3, r3, #16
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ffbd 	bl	8000f94 <LCD_Data_8>
	LCD_Data_8((word >> 8) & 0x00FFFF);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	b2db      	uxtb	r3, r3
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ffb7 	bl	8000f94 <LCD_Data_8>
	LCD_Data_8(word & 0x00FFFF);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ffb2 	bl	8000f94 <LCD_Data_8>
	if (SOFT_CS) LCD_S_CS
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40020400 	.word	0x40020400

0800103c <LCD_Window>:

inline static void LCD_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4604      	mov	r4, r0
 8001044:	4608      	mov	r0, r1
 8001046:	4611      	mov	r1, r2
 8001048:	461a      	mov	r2, r3
 800104a:	4623      	mov	r3, r4
 800104c:	80fb      	strh	r3, [r7, #6]
 800104e:	4603      	mov	r3, r0
 8001050:	80bb      	strh	r3, [r7, #4]
 8001052:	460b      	mov	r3, r1
 8001054:	807b      	strh	r3, [r7, #2]
 8001056:	4613      	mov	r3, r2
 8001058:	803b      	strh	r3, [r7, #0]
	LCD_Command(COLUMN_ADDRESS_SET);
 800105a:	202a      	movs	r0, #42	; 0x2a
 800105c:	f7ff ff82 	bl	8000f64 <LCD_Command>
	LCD_Data_16(y1);
 8001060:	88bb      	ldrh	r3, [r7, #4]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ffae 	bl	8000fc4 <LCD_Data_16>
	LCD_Data_16(y2);
 8001068:	883b      	ldrh	r3, [r7, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ffaa 	bl	8000fc4 <LCD_Data_16>
	LCD_Command(PAGE_ADDRESS_SET);
 8001070:	202b      	movs	r0, #43	; 0x2b
 8001072:	f7ff ff77 	bl	8000f64 <LCD_Command>
	LCD_Data_16(x1);
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ffa3 	bl	8000fc4 <LCD_Data_16>
	LCD_Data_16(x2);
 800107e:	887b      	ldrh	r3, [r7, #2]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff9f 	bl	8000fc4 <LCD_Data_16>
	LCD_Command(MEMORY_WRITE);
 8001086:	202c      	movs	r0, #44	; 0x2c
 8001088:	f7ff ff6c 	bl	8000f64 <LCD_Command>
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	bd90      	pop	{r4, r7, pc}

08001094 <LCD_Rect_Fill>:
void LCD_Pixel(uint16_t x, uint16_t y, uint32_t color24) {
	LCD_Window(x, y, x, y);
	LCD_Data_24(color24);
}

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24) {
 8001094:	b590      	push	{r4, r7, lr}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	4604      	mov	r4, r0
 800109c:	4608      	mov	r0, r1
 800109e:	4611      	mov	r1, r2
 80010a0:	461a      	mov	r2, r3
 80010a2:	4623      	mov	r3, r4
 80010a4:	80fb      	strh	r3, [r7, #6]
 80010a6:	4603      	mov	r3, r0
 80010a8:	80bb      	strh	r3, [r7, #4]
 80010aa:	460b      	mov	r3, r1
 80010ac:	807b      	strh	r3, [r7, #2]
 80010ae:	4613      	mov	r3, r2
 80010b0:	803b      	strh	r3, [r7, #0]
	uint32_t i = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
	uint32_t j = (uint32_t) w * (uint32_t) h;
 80010b6:	887b      	ldrh	r3, [r7, #2]
 80010b8:	883a      	ldrh	r2, [r7, #0]
 80010ba:	fb02 f303 	mul.w	r3, r2, r3
 80010be:	60bb      	str	r3, [r7, #8]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80010c0:	88ba      	ldrh	r2, [r7, #4]
 80010c2:	883b      	ldrh	r3, [r7, #0]
 80010c4:	4413      	add	r3, r2
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	3b01      	subs	r3, #1
 80010ca:	b29c      	uxth	r4, r3
 80010cc:	88fa      	ldrh	r2, [r7, #6]
 80010ce:	887b      	ldrh	r3, [r7, #2]
 80010d0:	4413      	add	r3, r2
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	3b01      	subs	r3, #1
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	88f9      	ldrh	r1, [r7, #6]
 80010da:	88b8      	ldrh	r0, [r7, #4]
 80010dc:	4622      	mov	r2, r4
 80010de:	f7ff ffad 	bl	800103c <LCD_Window>
	for (i = 0; i < j; i++) LCD_Data_24(color24);
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	e005      	b.n	80010f4 <LCD_Rect_Fill+0x60>
 80010e8:	6a38      	ldr	r0, [r7, #32]
 80010ea:	f7ff ff87 	bl	8000ffc <LCD_Data_24>
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	3301      	adds	r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d3f5      	bcc.n	80010e8 <LCD_Rect_Fill+0x54>
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	bd90      	pop	{r4, r7, pc}

08001106 <LCD_Line>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24) {
 8001106:	b590      	push	{r4, r7, lr}
 8001108:	b08b      	sub	sp, #44	; 0x2c
 800110a:	af02      	add	r7, sp, #8
 800110c:	4604      	mov	r4, r0
 800110e:	4608      	mov	r0, r1
 8001110:	4611      	mov	r1, r2
 8001112:	461a      	mov	r2, r3
 8001114:	4623      	mov	r3, r4
 8001116:	80fb      	strh	r3, [r7, #6]
 8001118:	4603      	mov	r3, r0
 800111a:	80bb      	strh	r3, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	807b      	strh	r3, [r7, #2]
 8001120:	4613      	mov	r3, r2
 8001122:	803b      	strh	r3, [r7, #0]
	int deltaX = abs(x2 - x1);
 8001124:	887a      	ldrh	r2, [r7, #2]
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	bfb8      	it	lt
 800112e:	425b      	neglt	r3, r3
 8001130:	61bb      	str	r3, [r7, #24]
	int deltaY = abs(y2 - y1);
 8001132:	883a      	ldrh	r2, [r7, #0]
 8001134:	88bb      	ldrh	r3, [r7, #4]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	bfb8      	it	lt
 800113c:	425b      	neglt	r3, r3
 800113e:	617b      	str	r3, [r7, #20]
	int signX = x1 < x2 ? 1 : -1;
 8001140:	88fa      	ldrh	r2, [r7, #6]
 8001142:	887b      	ldrh	r3, [r7, #2]
 8001144:	429a      	cmp	r2, r3
 8001146:	d201      	bcs.n	800114c <LCD_Line+0x46>
 8001148:	2301      	movs	r3, #1
 800114a:	e001      	b.n	8001150 <LCD_Line+0x4a>
 800114c:	f04f 33ff 	mov.w	r3, #4294967295
 8001150:	613b      	str	r3, [r7, #16]
	int signY = y1 < y2 ? 1 : -1;
 8001152:	88ba      	ldrh	r2, [r7, #4]
 8001154:	883b      	ldrh	r3, [r7, #0]
 8001156:	429a      	cmp	r2, r3
 8001158:	d201      	bcs.n	800115e <LCD_Line+0x58>
 800115a:	2301      	movs	r3, #1
 800115c:	e001      	b.n	8001162 <LCD_Line+0x5c>
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	60fb      	str	r3, [r7, #12]
	int error = deltaX - deltaY;
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	61fb      	str	r3, [r7, #28]
	int error2 = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	60bb      	str	r3, [r7, #8]
	for (;;) {
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8001170:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001174:	b29a      	uxth	r2, r3
 8001176:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800117a:	b29c      	uxth	r4, r3
 800117c:	88b9      	ldrh	r1, [r7, #4]
 800117e:	88f8      	ldrh	r0, [r7, #6]
 8001180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	4623      	mov	r3, r4
 8001186:	f7ff ff85 	bl	8001094 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 800118a:	88fa      	ldrh	r2, [r7, #6]
 800118c:	887b      	ldrh	r3, [r7, #2]
 800118e:	429a      	cmp	r2, r3
 8001190:	d103      	bne.n	800119a <LCD_Line+0x94>
 8001192:	88ba      	ldrh	r2, [r7, #4]
 8001194:	883b      	ldrh	r3, [r7, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	d01e      	beq.n	80011d8 <LCD_Line+0xd2>
			break;
		error2 = error * 2;
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
		if (error2 > -deltaY) {
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	425b      	negs	r3, r3
 80011a4:	68ba      	ldr	r2, [r7, #8]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	dd08      	ble.n	80011bc <LCD_Line+0xb6>
			error -= deltaY;
 80011aa:	69fa      	ldr	r2, [r7, #28]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	61fb      	str	r3, [r7, #28]
			x1 += signX;
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	4413      	add	r3, r2
 80011ba:	80fb      	strh	r3, [r7, #6]
		}
		if (error2 < deltaX) {
 80011bc:	68ba      	ldr	r2, [r7, #8]
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	dad5      	bge.n	8001170 <LCD_Line+0x6a>
			error += deltaX;
 80011c4:	69fa      	ldr	r2, [r7, #28]
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	4413      	add	r3, r2
 80011ca:	61fb      	str	r3, [r7, #28]
			y1 += signY;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	88bb      	ldrh	r3, [r7, #4]
 80011d2:	4413      	add	r3, r2
 80011d4:	80bb      	strh	r3, [r7, #4]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 80011d6:	e7cb      	b.n	8001170 <LCD_Line+0x6a>
			break;
 80011d8:	bf00      	nop
		}
	}
}
 80011da:	bf00      	nop
 80011dc:	3724      	adds	r7, #36	; 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd90      	pop	{r4, r7, pc}

080011e2 <LCD_Rect>:

void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24) {
 80011e2:	b590      	push	{r4, r7, lr}
 80011e4:	b085      	sub	sp, #20
 80011e6:	af02      	add	r7, sp, #8
 80011e8:	4604      	mov	r4, r0
 80011ea:	4608      	mov	r0, r1
 80011ec:	4611      	mov	r1, r2
 80011ee:	461a      	mov	r2, r3
 80011f0:	4623      	mov	r3, r4
 80011f2:	80fb      	strh	r3, [r7, #6]
 80011f4:	4603      	mov	r3, r0
 80011f6:	80bb      	strh	r3, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	807b      	strh	r3, [r7, #2]
 80011fc:	4613      	mov	r3, r2
 80011fe:	803b      	strh	r3, [r7, #0]
	LCD_Line(x, y, x + w, y, size, color24);
 8001200:	88fa      	ldrh	r2, [r7, #6]
 8001202:	887b      	ldrh	r3, [r7, #2]
 8001204:	4413      	add	r3, r2
 8001206:	b29a      	uxth	r2, r3
 8001208:	88bc      	ldrh	r4, [r7, #4]
 800120a:	88b9      	ldrh	r1, [r7, #4]
 800120c:	88f8      	ldrh	r0, [r7, #6]
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	7e3b      	ldrb	r3, [r7, #24]
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	4623      	mov	r3, r4
 8001218:	f7ff ff75 	bl	8001106 <LCD_Line>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 800121c:	88ba      	ldrh	r2, [r7, #4]
 800121e:	883b      	ldrh	r3, [r7, #0]
 8001220:	4413      	add	r3, r2
 8001222:	b299      	uxth	r1, r3
 8001224:	88fa      	ldrh	r2, [r7, #6]
 8001226:	887b      	ldrh	r3, [r7, #2]
 8001228:	4413      	add	r3, r2
 800122a:	b29c      	uxth	r4, r3
 800122c:	88ba      	ldrh	r2, [r7, #4]
 800122e:	883b      	ldrh	r3, [r7, #0]
 8001230:	4413      	add	r3, r2
 8001232:	b29a      	uxth	r2, r3
 8001234:	88f8      	ldrh	r0, [r7, #6]
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	7e3b      	ldrb	r3, [r7, #24]
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	4613      	mov	r3, r2
 8001240:	4622      	mov	r2, r4
 8001242:	f7ff ff60 	bl	8001106 <LCD_Line>
	LCD_Line(x, y, x, y + h, size, color24);
 8001246:	88ba      	ldrh	r2, [r7, #4]
 8001248:	883b      	ldrh	r3, [r7, #0]
 800124a:	4413      	add	r3, r2
 800124c:	b29c      	uxth	r4, r3
 800124e:	88fa      	ldrh	r2, [r7, #6]
 8001250:	88b9      	ldrh	r1, [r7, #4]
 8001252:	88f8      	ldrh	r0, [r7, #6]
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	9301      	str	r3, [sp, #4]
 8001258:	7e3b      	ldrb	r3, [r7, #24]
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	4623      	mov	r3, r4
 800125e:	f7ff ff52 	bl	8001106 <LCD_Line>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8001262:	88fa      	ldrh	r2, [r7, #6]
 8001264:	887b      	ldrh	r3, [r7, #2]
 8001266:	4413      	add	r3, r2
 8001268:	b298      	uxth	r0, r3
 800126a:	88fa      	ldrh	r2, [r7, #6]
 800126c:	887b      	ldrh	r3, [r7, #2]
 800126e:	4413      	add	r3, r2
 8001270:	b29c      	uxth	r4, r3
 8001272:	88ba      	ldrh	r2, [r7, #4]
 8001274:	883b      	ldrh	r3, [r7, #0]
 8001276:	4413      	add	r3, r2
 8001278:	b29a      	uxth	r2, r3
 800127a:	88b9      	ldrh	r1, [r7, #4]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	7e3b      	ldrb	r3, [r7, #24]
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	4613      	mov	r3, r2
 8001286:	4622      	mov	r2, r4
 8001288:	f7ff ff3d 	bl	8001106 <LCD_Line>
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	bd90      	pop	{r4, r7, pc}

08001294 <LCD_Circle_Helper>:
			b_--;
		}
	}
}

void LCD_Circle_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint8_t size, uint32_t color24) {
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b089      	sub	sp, #36	; 0x24
 8001298:	af02      	add	r7, sp, #8
 800129a:	4604      	mov	r4, r0
 800129c:	4608      	mov	r0, r1
 800129e:	4611      	mov	r1, r2
 80012a0:	461a      	mov	r2, r3
 80012a2:	4623      	mov	r3, r4
 80012a4:	80fb      	strh	r3, [r7, #6]
 80012a6:	4603      	mov	r3, r0
 80012a8:	80bb      	strh	r3, [r7, #4]
 80012aa:	460b      	mov	r3, r1
 80012ac:	807b      	strh	r3, [r7, #2]
 80012ae:	4613      	mov	r3, r2
 80012b0:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80012b2:	887b      	ldrh	r3, [r7, #2]
 80012b4:	f1c3 0301 	rsb	r3, r3, #1
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80012bc:	2301      	movs	r3, #1
 80012be:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80012c0:	887b      	ldrh	r3, [r7, #2]
 80012c2:	461a      	mov	r2, r3
 80012c4:	03d2      	lsls	r2, r2, #15
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80012d2:	887b      	ldrh	r3, [r7, #2]
 80012d4:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 80012d6:	e0cd      	b.n	8001474 <LCD_Circle_Helper+0x1e0>
		if (f >= 0) {
 80012d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	db0e      	blt.n	80012fe <LCD_Circle_Helper+0x6a>
			y--;
 80012e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	3b01      	subs	r3, #1
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80012ec:	8a7b      	ldrh	r3, [r7, #18]
 80012ee:	3302      	adds	r3, #2
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80012f4:	8afa      	ldrh	r2, [r7, #22]
 80012f6:	8a7b      	ldrh	r3, [r7, #18]
 80012f8:	4413      	add	r3, r2
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80012fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001302:	b29b      	uxth	r3, r3
 8001304:	3301      	adds	r3, #1
 8001306:	b29b      	uxth	r3, r3
 8001308:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 800130a:	8abb      	ldrh	r3, [r7, #20]
 800130c:	3302      	adds	r3, #2
 800130e:	b29b      	uxth	r3, r3
 8001310:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8001312:	8afa      	ldrh	r2, [r7, #22]
 8001314:	8abb      	ldrh	r3, [r7, #20]
 8001316:	4413      	add	r3, r2
 8001318:	b29b      	uxth	r3, r3
 800131a:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4) {
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	2b00      	cmp	r3, #0
 8001324:	d025      	beq.n	8001372 <LCD_Circle_Helper+0xde>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 8001326:	88fa      	ldrh	r2, [r7, #6]
 8001328:	8a3b      	ldrh	r3, [r7, #16]
 800132a:	4413      	add	r3, r2
 800132c:	b298      	uxth	r0, r3
 800132e:	88ba      	ldrh	r2, [r7, #4]
 8001330:	89fb      	ldrh	r3, [r7, #14]
 8001332:	4413      	add	r3, r2
 8001334:	b299      	uxth	r1, r3
 8001336:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800133a:	b29a      	uxth	r2, r3
 800133c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001340:	b29c      	uxth	r4, r3
 8001342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	4623      	mov	r3, r4
 8001348:	f7ff fea4 	bl	8001094 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 + x, size, size, color24);
 800134c:	88fa      	ldrh	r2, [r7, #6]
 800134e:	89fb      	ldrh	r3, [r7, #14]
 8001350:	4413      	add	r3, r2
 8001352:	b298      	uxth	r0, r3
 8001354:	88ba      	ldrh	r2, [r7, #4]
 8001356:	8a3b      	ldrh	r3, [r7, #16]
 8001358:	4413      	add	r3, r2
 800135a:	b299      	uxth	r1, r3
 800135c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001360:	b29a      	uxth	r2, r3
 8001362:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001366:	b29c      	uxth	r4, r3
 8001368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	4623      	mov	r3, r4
 800136e:	f7ff fe91 	bl	8001094 <LCD_Rect_Fill>
		}
		if (cornername & 0x2) {
 8001372:	787b      	ldrb	r3, [r7, #1]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d025      	beq.n	80013c8 <LCD_Circle_Helper+0x134>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 800137c:	88fa      	ldrh	r2, [r7, #6]
 800137e:	8a3b      	ldrh	r3, [r7, #16]
 8001380:	4413      	add	r3, r2
 8001382:	b298      	uxth	r0, r3
 8001384:	88ba      	ldrh	r2, [r7, #4]
 8001386:	89fb      	ldrh	r3, [r7, #14]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	b299      	uxth	r1, r3
 800138c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001390:	b29a      	uxth	r2, r3
 8001392:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001396:	b29c      	uxth	r4, r3
 8001398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	4623      	mov	r3, r4
 800139e:	f7ff fe79 	bl	8001094 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 - x, size, size, color24);
 80013a2:	88fa      	ldrh	r2, [r7, #6]
 80013a4:	89fb      	ldrh	r3, [r7, #14]
 80013a6:	4413      	add	r3, r2
 80013a8:	b298      	uxth	r0, r3
 80013aa:	88ba      	ldrh	r2, [r7, #4]
 80013ac:	8a3b      	ldrh	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	b299      	uxth	r1, r3
 80013b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013bc:	b29c      	uxth	r4, r3
 80013be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	4623      	mov	r3, r4
 80013c4:	f7ff fe66 	bl	8001094 <LCD_Rect_Fill>
		}
		if (cornername & 0x8) {
 80013c8:	787b      	ldrb	r3, [r7, #1]
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d025      	beq.n	800141e <LCD_Circle_Helper+0x18a>
			LCD_Rect_Fill(x0 - y, y0 + x, size, size, color24);
 80013d2:	88fa      	ldrh	r2, [r7, #6]
 80013d4:	89fb      	ldrh	r3, [r7, #14]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	b298      	uxth	r0, r3
 80013da:	88ba      	ldrh	r2, [r7, #4]
 80013dc:	8a3b      	ldrh	r3, [r7, #16]
 80013de:	4413      	add	r3, r2
 80013e0:	b299      	uxth	r1, r3
 80013e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013ec:	b29c      	uxth	r4, r3
 80013ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	4623      	mov	r3, r4
 80013f4:	f7ff fe4e 	bl	8001094 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 80013f8:	88fa      	ldrh	r2, [r7, #6]
 80013fa:	8a3b      	ldrh	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	b298      	uxth	r0, r3
 8001400:	88ba      	ldrh	r2, [r7, #4]
 8001402:	89fb      	ldrh	r3, [r7, #14]
 8001404:	4413      	add	r3, r2
 8001406:	b299      	uxth	r1, r3
 8001408:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800140c:	b29a      	uxth	r2, r3
 800140e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001412:	b29c      	uxth	r4, r3
 8001414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	4623      	mov	r3, r4
 800141a:	f7ff fe3b 	bl	8001094 <LCD_Rect_Fill>
		}
		if (cornername & 0x1) {
 800141e:	787b      	ldrb	r3, [r7, #1]
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	2b00      	cmp	r3, #0
 8001426:	d025      	beq.n	8001474 <LCD_Circle_Helper+0x1e0>
			LCD_Rect_Fill(x0 - y, y0 - x, size, size, color24);
 8001428:	88fa      	ldrh	r2, [r7, #6]
 800142a:	89fb      	ldrh	r3, [r7, #14]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	b298      	uxth	r0, r3
 8001430:	88ba      	ldrh	r2, [r7, #4]
 8001432:	8a3b      	ldrh	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	b299      	uxth	r1, r3
 8001438:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800143c:	b29a      	uxth	r2, r3
 800143e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001442:	b29c      	uxth	r4, r3
 8001444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	4623      	mov	r3, r4
 800144a:	f7ff fe23 	bl	8001094 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 800144e:	88fa      	ldrh	r2, [r7, #6]
 8001450:	8a3b      	ldrh	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	b298      	uxth	r0, r3
 8001456:	88ba      	ldrh	r2, [r7, #4]
 8001458:	89fb      	ldrh	r3, [r7, #14]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	b299      	uxth	r1, r3
 800145e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001462:	b29a      	uxth	r2, r3
 8001464:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001468:	b29c      	uxth	r4, r3
 800146a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	4623      	mov	r3, r4
 8001470:	f7ff fe10 	bl	8001094 <LCD_Rect_Fill>
	while (x < y) {
 8001474:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001478:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800147c:	429a      	cmp	r2, r3
 800147e:	f6ff af2b 	blt.w	80012d8 <LCD_Circle_Helper+0x44>
		}
	}
}
 8001482:	bf00      	nop
 8001484:	bf00      	nop
 8001486:	371c      	adds	r7, #28
 8001488:	46bd      	mov	sp, r7
 800148a:	bd90      	pop	{r4, r7, pc}

0800148c <LCD_Rect_Round>:

void LCD_Rect_Round(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint8_t size, uint32_t color24) {
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b085      	sub	sp, #20
 8001490:	af02      	add	r7, sp, #8
 8001492:	4604      	mov	r4, r0
 8001494:	4608      	mov	r0, r1
 8001496:	4611      	mov	r1, r2
 8001498:	461a      	mov	r2, r3
 800149a:	4623      	mov	r3, r4
 800149c:	80fb      	strh	r3, [r7, #6]
 800149e:	4603      	mov	r3, r0
 80014a0:	80bb      	strh	r3, [r7, #4]
 80014a2:	460b      	mov	r3, r1
 80014a4:	807b      	strh	r3, [r7, #2]
 80014a6:	4613      	mov	r3, r2
 80014a8:	803b      	strh	r3, [r7, #0]
	LCD_Line(x + (r + 2), y, x + length + size - (r + 2), y, size, color24);
 80014aa:	8b3a      	ldrh	r2, [r7, #24]
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	4413      	add	r3, r2
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	3302      	adds	r3, #2
 80014b4:	b298      	uxth	r0, r3
 80014b6:	88fa      	ldrh	r2, [r7, #6]
 80014b8:	887b      	ldrh	r3, [r7, #2]
 80014ba:	4413      	add	r3, r2
 80014bc:	b29a      	uxth	r2, r3
 80014be:	7f3b      	ldrb	r3, [r7, #28]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	4413      	add	r3, r2
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	8b3b      	ldrh	r3, [r7, #24]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	3b02      	subs	r3, #2
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	88bc      	ldrh	r4, [r7, #4]
 80014d2:	88b9      	ldrh	r1, [r7, #4]
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	9301      	str	r3, [sp, #4]
 80014d8:	7f3b      	ldrb	r3, [r7, #28]
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	4623      	mov	r3, r4
 80014de:	f7ff fe12 	bl	8001106 <LCD_Line>
	LCD_Line(x + (r + 2), y + width - 1, x + length + size - (r + 2),y + width - 1, size, color24);
 80014e2:	8b3a      	ldrh	r2, [r7, #24]
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	4413      	add	r3, r2
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	3302      	adds	r3, #2
 80014ec:	b298      	uxth	r0, r3
 80014ee:	88ba      	ldrh	r2, [r7, #4]
 80014f0:	883b      	ldrh	r3, [r7, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	3b01      	subs	r3, #1
 80014f8:	b299      	uxth	r1, r3
 80014fa:	88fa      	ldrh	r2, [r7, #6]
 80014fc:	887b      	ldrh	r3, [r7, #2]
 80014fe:	4413      	add	r3, r2
 8001500:	b29a      	uxth	r2, r3
 8001502:	7f3b      	ldrb	r3, [r7, #28]
 8001504:	b29b      	uxth	r3, r3
 8001506:	4413      	add	r3, r2
 8001508:	b29a      	uxth	r2, r3
 800150a:	8b3b      	ldrh	r3, [r7, #24]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	b29b      	uxth	r3, r3
 8001510:	3b02      	subs	r3, #2
 8001512:	b29c      	uxth	r4, r3
 8001514:	88ba      	ldrh	r2, [r7, #4]
 8001516:	883b      	ldrh	r3, [r7, #0]
 8001518:	4413      	add	r3, r2
 800151a:	b29b      	uxth	r3, r3
 800151c:	3b01      	subs	r3, #1
 800151e:	b29a      	uxth	r2, r3
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	9301      	str	r3, [sp, #4]
 8001524:	7f3b      	ldrb	r3, [r7, #28]
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	4613      	mov	r3, r2
 800152a:	4622      	mov	r2, r4
 800152c:	f7ff fdeb 	bl	8001106 <LCD_Line>
	LCD_Line(x, y + (r + 2), x, y + width - size - (r + 2), size, color24);
 8001530:	8b3a      	ldrh	r2, [r7, #24]
 8001532:	88bb      	ldrh	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	b29b      	uxth	r3, r3
 8001538:	3302      	adds	r3, #2
 800153a:	b299      	uxth	r1, r3
 800153c:	88ba      	ldrh	r2, [r7, #4]
 800153e:	883b      	ldrh	r3, [r7, #0]
 8001540:	4413      	add	r3, r2
 8001542:	b29a      	uxth	r2, r3
 8001544:	7f3b      	ldrb	r3, [r7, #28]
 8001546:	b29b      	uxth	r3, r3
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	b29a      	uxth	r2, r3
 800154c:	8b3b      	ldrh	r3, [r7, #24]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	b29b      	uxth	r3, r3
 8001552:	3b02      	subs	r3, #2
 8001554:	b29c      	uxth	r4, r3
 8001556:	88fa      	ldrh	r2, [r7, #6]
 8001558:	88f8      	ldrh	r0, [r7, #6]
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	7f3b      	ldrb	r3, [r7, #28]
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	4623      	mov	r3, r4
 8001564:	f7ff fdcf 	bl	8001106 <LCD_Line>
	LCD_Line(x + length - 1, y + (r + 2), x + length - 1, y + width - size - (r + 2), size, color24);
 8001568:	88fa      	ldrh	r2, [r7, #6]
 800156a:	887b      	ldrh	r3, [r7, #2]
 800156c:	4413      	add	r3, r2
 800156e:	b29b      	uxth	r3, r3
 8001570:	3b01      	subs	r3, #1
 8001572:	b298      	uxth	r0, r3
 8001574:	8b3a      	ldrh	r2, [r7, #24]
 8001576:	88bb      	ldrh	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	b29b      	uxth	r3, r3
 800157c:	3302      	adds	r3, #2
 800157e:	b299      	uxth	r1, r3
 8001580:	88fa      	ldrh	r2, [r7, #6]
 8001582:	887b      	ldrh	r3, [r7, #2]
 8001584:	4413      	add	r3, r2
 8001586:	b29b      	uxth	r3, r3
 8001588:	3b01      	subs	r3, #1
 800158a:	b29c      	uxth	r4, r3
 800158c:	88ba      	ldrh	r2, [r7, #4]
 800158e:	883b      	ldrh	r3, [r7, #0]
 8001590:	4413      	add	r3, r2
 8001592:	b29a      	uxth	r2, r3
 8001594:	7f3b      	ldrb	r3, [r7, #28]
 8001596:	b29b      	uxth	r3, r3
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	b29a      	uxth	r2, r3
 800159c:	8b3b      	ldrh	r3, [r7, #24]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	3b02      	subs	r3, #2
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	6a3b      	ldr	r3, [r7, #32]
 80015a8:	9301      	str	r3, [sp, #4]
 80015aa:	7f3b      	ldrb	r3, [r7, #28]
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	4613      	mov	r3, r2
 80015b0:	4622      	mov	r2, r4
 80015b2:	f7ff fda8 	bl	8001106 <LCD_Line>

	LCD_Circle_Helper(x + (r + 2), y + (r + 2), (r + 2), 1, size, color24);
 80015b6:	8b3a      	ldrh	r2, [r7, #24]
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	4413      	add	r3, r2
 80015bc:	b29b      	uxth	r3, r3
 80015be:	3302      	adds	r3, #2
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	b218      	sxth	r0, r3
 80015c4:	8b3a      	ldrh	r2, [r7, #24]
 80015c6:	88bb      	ldrh	r3, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	3302      	adds	r3, #2
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	b219      	sxth	r1, r3
 80015d2:	8b3b      	ldrh	r3, [r7, #24]
 80015d4:	3302      	adds	r3, #2
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	b21a      	sxth	r2, r3
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	9301      	str	r3, [sp, #4]
 80015de:	7f3b      	ldrb	r3, [r7, #28]
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	2301      	movs	r3, #1
 80015e4:	f7ff fe56 	bl	8001294 <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + (r + 2), (r + 2), 2, size, color24);
 80015e8:	88fa      	ldrh	r2, [r7, #6]
 80015ea:	887b      	ldrh	r3, [r7, #2]
 80015ec:	4413      	add	r3, r2
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	8b3b      	ldrh	r3, [r7, #24]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	3b03      	subs	r3, #3
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	b218      	sxth	r0, r3
 80015fc:	8b3a      	ldrh	r2, [r7, #24]
 80015fe:	88bb      	ldrh	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	b29b      	uxth	r3, r3
 8001604:	3302      	adds	r3, #2
 8001606:	b29b      	uxth	r3, r3
 8001608:	b219      	sxth	r1, r3
 800160a:	8b3b      	ldrh	r3, [r7, #24]
 800160c:	3302      	adds	r3, #2
 800160e:	b29b      	uxth	r3, r3
 8001610:	b21a      	sxth	r2, r3
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	9301      	str	r3, [sp, #4]
 8001616:	7f3b      	ldrb	r3, [r7, #28]
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2302      	movs	r3, #2
 800161c:	f7ff fe3a 	bl	8001294 <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + width - (r + 2) - 1, (r + 2), 4, size, color24);
 8001620:	88fa      	ldrh	r2, [r7, #6]
 8001622:	887b      	ldrh	r3, [r7, #2]
 8001624:	4413      	add	r3, r2
 8001626:	b29a      	uxth	r2, r3
 8001628:	8b3b      	ldrh	r3, [r7, #24]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	b29b      	uxth	r3, r3
 800162e:	3b03      	subs	r3, #3
 8001630:	b29b      	uxth	r3, r3
 8001632:	b218      	sxth	r0, r3
 8001634:	88ba      	ldrh	r2, [r7, #4]
 8001636:	883b      	ldrh	r3, [r7, #0]
 8001638:	4413      	add	r3, r2
 800163a:	b29a      	uxth	r2, r3
 800163c:	8b3b      	ldrh	r3, [r7, #24]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	b29b      	uxth	r3, r3
 8001642:	3b03      	subs	r3, #3
 8001644:	b29b      	uxth	r3, r3
 8001646:	b219      	sxth	r1, r3
 8001648:	8b3b      	ldrh	r3, [r7, #24]
 800164a:	3302      	adds	r3, #2
 800164c:	b29b      	uxth	r3, r3
 800164e:	b21a      	sxth	r2, r3
 8001650:	6a3b      	ldr	r3, [r7, #32]
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	7f3b      	ldrb	r3, [r7, #28]
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2304      	movs	r3, #4
 800165a:	f7ff fe1b 	bl	8001294 <LCD_Circle_Helper>
	LCD_Circle_Helper(x + (r + 2), y + width - (r + 2) - 1, (r + 2), 8, size, color24);
 800165e:	8b3a      	ldrh	r2, [r7, #24]
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	4413      	add	r3, r2
 8001664:	b29b      	uxth	r3, r3
 8001666:	3302      	adds	r3, #2
 8001668:	b29b      	uxth	r3, r3
 800166a:	b218      	sxth	r0, r3
 800166c:	88ba      	ldrh	r2, [r7, #4]
 800166e:	883b      	ldrh	r3, [r7, #0]
 8001670:	4413      	add	r3, r2
 8001672:	b29a      	uxth	r2, r3
 8001674:	8b3b      	ldrh	r3, [r7, #24]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	b29b      	uxth	r3, r3
 800167a:	3b03      	subs	r3, #3
 800167c:	b29b      	uxth	r3, r3
 800167e:	b219      	sxth	r1, r3
 8001680:	8b3b      	ldrh	r3, [r7, #24]
 8001682:	3302      	adds	r3, #2
 8001684:	b29b      	uxth	r3, r3
 8001686:	b21a      	sxth	r2, r3
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	7f3b      	ldrb	r3, [r7, #28]
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2308      	movs	r3, #8
 8001692:	f7ff fdff 	bl	8001294 <LCD_Circle_Helper>
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	bd90      	pop	{r4, r7, pc}

0800169e <LCD_Char>:
	LCD_Rect_Fill(x + r, y, length - 2 * r, width, color24);
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
}

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24) {
 800169e:	b590      	push	{r4, r7, lr}
 80016a0:	b08b      	sub	sp, #44	; 0x2c
 80016a2:	af02      	add	r7, sp, #8
 80016a4:	60ba      	str	r2, [r7, #8]
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	4603      	mov	r3, r0
 80016aa:	81fb      	strh	r3, [r7, #14]
 80016ac:	460b      	mov	r3, r1
 80016ae:	81bb      	strh	r3, [r7, #12]
	uint8_t *bitmap = font->bitmap;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph->bitmapOffset;
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	777b      	strb	r3, [r7, #29]
 80016c0:	2300      	movs	r3, #0
 80016c2:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	837b      	strh	r3, [r7, #26]
	uint8_t cur_x, cur_y;
	for (cur_y = 0; cur_y < glyph->height; cur_y++) {
 80016c8:	2300      	movs	r3, #0
 80016ca:	763b      	strb	r3, [r7, #24]
 80016cc:	e093      	b.n	80017f6 <LCD_Char+0x158>
		for (cur_x = 0; cur_x < glyph->width; cur_x++) {
 80016ce:	2300      	movs	r3, #0
 80016d0:	767b      	strb	r3, [r7, #25]
 80016d2:	e052      	b.n	800177a <LCD_Char+0xdc>
			if (bit == 0) {
 80016d4:	7f3b      	ldrb	r3, [r7, #28]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d109      	bne.n	80016ee <LCD_Char+0x50>
				bits = (*(const unsigned char*) (&bitmap[bo++]));
 80016da:	8bfb      	ldrh	r3, [r7, #30]
 80016dc:	1c5a      	adds	r2, r3, #1
 80016de:	83fa      	strh	r2, [r7, #30]
 80016e0:	461a      	mov	r2, r3
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	4413      	add	r3, r2
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	777b      	strb	r3, [r7, #29]
				bit = 0x80;
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	773b      	strb	r3, [r7, #28]
			}
			if (bits & bit)
 80016ee:	7f7a      	ldrb	r2, [r7, #29]
 80016f0:	7f3b      	ldrb	r3, [r7, #28]
 80016f2:	4013      	ands	r3, r2
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <LCD_Char+0x64>
				set_pixels++;
 80016fa:	8b7b      	ldrh	r3, [r7, #26]
 80016fc:	3301      	adds	r3, #1
 80016fe:	837b      	strh	r3, [r7, #26]
 8001700:	e035      	b.n	800176e <LCD_Char+0xd0>
			else if (set_pixels > 0) {
 8001702:	8b7b      	ldrh	r3, [r7, #26]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d032      	beq.n	800176e <LCD_Char+0xd0>
				LCD_Rect_Fill(x + (glyph->xOffset + cur_x - set_pixels) * size,
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800170e:	461a      	mov	r2, r3
 8001710:	7e7b      	ldrb	r3, [r7, #25]
 8001712:	441a      	add	r2, r3
 8001714:	8b7b      	ldrh	r3, [r7, #26]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	b29a      	uxth	r2, r3
 800171a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800171e:	b29b      	uxth	r3, r3
 8001720:	fb12 f303 	smulbb	r3, r2, r3
 8001724:	b29a      	uxth	r2, r3
 8001726:	89fb      	ldrh	r3, [r7, #14]
 8001728:	4413      	add	r3, r2
 800172a:	b298      	uxth	r0, r3
						y + (glyph->yOffset + cur_y) * size, size * set_pixels,
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001732:	461a      	mov	r2, r3
 8001734:	7e3b      	ldrb	r3, [r7, #24]
 8001736:	4413      	add	r3, r2
				LCD_Rect_Fill(x + (glyph->xOffset + cur_x - set_pixels) * size,
 8001738:	b29a      	uxth	r2, r3
 800173a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800173e:	b29b      	uxth	r3, r3
 8001740:	fb12 f303 	smulbb	r3, r2, r3
 8001744:	b29a      	uxth	r2, r3
 8001746:	89bb      	ldrh	r3, [r7, #12]
 8001748:	4413      	add	r3, r2
 800174a:	b299      	uxth	r1, r3
 800174c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001750:	b29b      	uxth	r3, r3
 8001752:	8b7a      	ldrh	r2, [r7, #26]
 8001754:	fb12 f303 	smulbb	r3, r2, r3
 8001758:	b29a      	uxth	r2, r3
 800175a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800175e:	b29c      	uxth	r4, r3
 8001760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	4623      	mov	r3, r4
 8001766:	f7ff fc95 	bl	8001094 <LCD_Rect_Fill>
						size, color24);
				set_pixels = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 800176e:	7f3b      	ldrb	r3, [r7, #28]
 8001770:	085b      	lsrs	r3, r3, #1
 8001772:	773b      	strb	r3, [r7, #28]
		for (cur_x = 0; cur_x < glyph->width; cur_x++) {
 8001774:	7e7b      	ldrb	r3, [r7, #25]
 8001776:	3301      	adds	r3, #1
 8001778:	767b      	strb	r3, [r7, #25]
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	789b      	ldrb	r3, [r3, #2]
 800177e:	7e7a      	ldrb	r2, [r7, #25]
 8001780:	429a      	cmp	r2, r3
 8001782:	d3a7      	bcc.n	80016d4 <LCD_Char+0x36>
		}
		if (set_pixels > 0) {
 8001784:	8b7b      	ldrh	r3, [r7, #26]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d032      	beq.n	80017f0 <LCD_Char+0x152>
			LCD_Rect_Fill(x + (glyph->xOffset + cur_x - set_pixels) * size,
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001790:	461a      	mov	r2, r3
 8001792:	7e7b      	ldrb	r3, [r7, #25]
 8001794:	441a      	add	r2, r3
 8001796:	8b7b      	ldrh	r3, [r7, #26]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	b29a      	uxth	r2, r3
 800179c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	fb12 f303 	smulbb	r3, r2, r3
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	89fb      	ldrh	r3, [r7, #14]
 80017aa:	4413      	add	r3, r2
 80017ac:	b298      	uxth	r0, r3
					y + (glyph->yOffset + cur_y) * size, size * set_pixels,
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80017b4:	461a      	mov	r2, r3
 80017b6:	7e3b      	ldrb	r3, [r7, #24]
 80017b8:	4413      	add	r3, r2
			LCD_Rect_Fill(x + (glyph->xOffset + cur_x - set_pixels) * size,
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	fb12 f303 	smulbb	r3, r2, r3
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	89bb      	ldrh	r3, [r7, #12]
 80017ca:	4413      	add	r3, r2
 80017cc:	b299      	uxth	r1, r3
 80017ce:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	8b7a      	ldrh	r2, [r7, #26]
 80017d6:	fb12 f303 	smulbb	r3, r2, r3
 80017da:	b29a      	uxth	r2, r3
 80017dc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017e0:	b29c      	uxth	r4, r3
 80017e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	4623      	mov	r3, r4
 80017e8:	f7ff fc54 	bl	8001094 <LCD_Rect_Fill>
					size, color24);
			set_pixels = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	837b      	strh	r3, [r7, #26]
	for (cur_y = 0; cur_y < glyph->height; cur_y++) {
 80017f0:	7e3b      	ldrb	r3, [r7, #24]
 80017f2:	3301      	adds	r3, #1
 80017f4:	763b      	strb	r3, [r7, #24]
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	78db      	ldrb	r3, [r3, #3]
 80017fa:	7e3a      	ldrb	r2, [r7, #24]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	f4ff af66 	bcc.w	80016ce <LCD_Char+0x30>
		}
	}
}
 8001802:	bf00      	nop
 8001804:	bf00      	nop
 8001806:	3724      	adds	r7, #36	; 0x24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd90      	pop	{r4, r7, pc}

0800180c <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24) {
 800180c:	b590      	push	{r4, r7, lr}
 800180e:	b08f      	sub	sp, #60	; 0x3c
 8001810:	af02      	add	r7, sp, #8
 8001812:	60ba      	str	r2, [r7, #8]
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4603      	mov	r3, r0
 8001818:	81fb      	strh	r3, [r7, #14]
 800181a:	460b      	mov	r3, r1
 800181c:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 800181e:	89fb      	ldrh	r3, [r7, #14]
 8001820:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 8001822:	89bb      	ldrh	r3, [r7, #12]
 8001824:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy(&font, p_font, sizeof(GFXfont));
 8001826:	f107 031c 	add.w	r3, r7, #28
 800182a:	220c      	movs	r2, #12
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4618      	mov	r0, r3
 8001830:	f007 f87a 	bl	8008928 <memcpy>
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++) {
 8001834:	2300      	movs	r3, #0
 8001836:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001838:	e056      	b.n	80018e8 <LCD_Font+0xdc>
		char c = text[text_pos];
 800183a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	4413      	add	r3, r2
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if (c == '\n') {
 8001846:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800184a:	2b0a      	cmp	r3, #10
 800184c:	d10f      	bne.n	800186e <LCD_Font+0x62>
			cursor_x = x;
 800184e:	89fb      	ldrh	r3, [r7, #14]
 8001850:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 8001852:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001856:	b29a      	uxth	r2, r3
 8001858:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800185c:	b29b      	uxth	r3, r3
 800185e:	fb12 f303 	smulbb	r3, r2, r3
 8001862:	b29a      	uxth	r2, r3
 8001864:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001866:	4413      	add	r3, r2
 8001868:	b29b      	uxth	r3, r3
 800186a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800186c:	e039      	b.n	80018e2 <LCD_Font+0xd6>
		} else if (c >= font.first && c <= font.last && c != '\r') {
 800186e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001872:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001876:	429a      	cmp	r2, r3
 8001878:	d333      	bcc.n	80018e2 <LCD_Font+0xd6>
 800187a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800187e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001882:	429a      	cmp	r2, r3
 8001884:	d82d      	bhi.n	80018e2 <LCD_Font+0xd6>
 8001886:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800188a:	2b0d      	cmp	r3, #13
 800188c:	d029      	beq.n	80018e2 <LCD_Font+0xd6>
			GFXglyph glyph;
			memcpy(&glyph, &font.glyph[c - font.first], sizeof(GFXglyph));
 800188e:	6a3a      	ldr	r2, [r7, #32]
 8001890:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001894:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001898:	1a5b      	subs	r3, r3, r1
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	18d1      	adds	r1, r2, r3
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	2208      	movs	r2, #8
 80018a4:	4618      	mov	r0, r3
 80018a6:	f007 f83f 	bl	8008928 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80018aa:	f107 041c 	add.w	r4, r7, #28
 80018ae:	f107 0214 	add.w	r2, r7, #20
 80018b2:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80018b6:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80018ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	4623      	mov	r3, r4
 80018c6:	f7ff feea 	bl	800169e <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 80018ca:	7e3b      	ldrb	r3, [r7, #24]
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	fb12 f303 	smulbb	r3, r2, r3
 80018d8:	b29a      	uxth	r2, r3
 80018da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018dc:	4413      	add	r3, r2
 80018de:	b29b      	uxth	r3, r3
 80018e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++) {
 80018e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80018e4:	3301      	adds	r3, #1
 80018e6:	857b      	strh	r3, [r7, #42]	; 0x2a
 80018e8:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 80018ea:	68b8      	ldr	r0, [r7, #8]
 80018ec:	f7fe fc78 	bl	80001e0 <strlen>
 80018f0:	4603      	mov	r3, r0
 80018f2:	429c      	cmp	r4, r3
 80018f4:	d3a1      	bcc.n	800183a <LCD_Font+0x2e>
		}
	}
}
 80018f6:	bf00      	nop
 80018f8:	bf00      	nop
 80018fa:	3734      	adds	r7, #52	; 0x34
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd90      	pop	{r4, r7, pc}

08001900 <LCD_Reset>:
		yStart = TOP_FIXED_AREA + (yStart - LCD_WIDTH + BOT_FIXED_AREA); // The value must wrap around as the screen memory is a circular buffer
	LCD_scrollAddress(yStart); // Now we can scroll the display
	return yTemp;
}

void LCD_Reset(void) {
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	LCD_U_CS
 8001904:	2200      	movs	r2, #0
 8001906:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800190a:	480d      	ldr	r0, [pc, #52]	; (8001940 <LCD_Reset+0x40>)
 800190c:	f003 f870 	bl	80049f0 <HAL_GPIO_WritePin>
	LCD_S_RST
 8001910:	2201      	movs	r2, #1
 8001912:	2101      	movs	r1, #1
 8001914:	480a      	ldr	r0, [pc, #40]	; (8001940 <LCD_Reset+0x40>)
 8001916:	f003 f86b 	bl	80049f0 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 800191a:	2096      	movs	r0, #150	; 0x96
 800191c:	f002 fa26 	bl	8003d6c <HAL_Delay>
	LCD_U_RST
 8001920:	2200      	movs	r2, #0
 8001922:	2101      	movs	r1, #1
 8001924:	4806      	ldr	r0, [pc, #24]	; (8001940 <LCD_Reset+0x40>)
 8001926:	f003 f863 	bl	80049f0 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 800192a:	2096      	movs	r0, #150	; 0x96
 800192c:	f002 fa1e 	bl	8003d6c <HAL_Delay>
	LCD_S_RST
 8001930:	2201      	movs	r2, #1
 8001932:	2101      	movs	r1, #1
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <LCD_Reset+0x40>)
 8001936:	f003 f85b 	bl	80049f0 <HAL_GPIO_WritePin>
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40020400 	.word	0x40020400

08001944 <LCD_Orientation>:

void LCD_Orientation(uint8_t orientation) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
	LCD_Command(MEMORY_ACCESS_CONTROL);
 800194e:	2036      	movs	r0, #54	; 0x36
 8001950:	f7ff fb08 	bl	8000f64 <LCD_Command>
	switch (orientation) {
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	2b03      	cmp	r3, #3
 8001958:	d83a      	bhi.n	80019d0 <LCD_Orientation+0x8c>
 800195a:	a201      	add	r2, pc, #4	; (adr r2, 8001960 <LCD_Orientation+0x1c>)
 800195c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001960:	08001971 	.word	0x08001971
 8001964:	08001989 	.word	0x08001989
 8001968:	080019a1 	.word	0x080019a1
 800196c:	080019b9 	.word	0x080019b9
	case 0:
		LCD_Data_8(0x40 | 0x08);
 8001970:	2048      	movs	r0, #72	; 0x48
 8001972:	f7ff fb0f 	bl	8000f94 <LCD_Data_8>
		LCD_Width = LCD_HEIGHT;
 8001976:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <LCD_Orientation+0x94>)
 8001978:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800197c:	801a      	strh	r2, [r3, #0]
		LCD_Height = LCD_WIDTH;
 800197e:	4b17      	ldr	r3, [pc, #92]	; (80019dc <LCD_Orientation+0x98>)
 8001980:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001984:	801a      	strh	r2, [r3, #0]
		break;
 8001986:	e023      	b.n	80019d0 <LCD_Orientation+0x8c>
	case 1:
		LCD_Data_8(0x20 | 0x08);
 8001988:	2028      	movs	r0, #40	; 0x28
 800198a:	f7ff fb03 	bl	8000f94 <LCD_Data_8>
		LCD_Width = LCD_WIDTH;
 800198e:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <LCD_Orientation+0x94>)
 8001990:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001994:	801a      	strh	r2, [r3, #0]
		LCD_Height = LCD_HEIGHT;
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <LCD_Orientation+0x98>)
 8001998:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800199c:	801a      	strh	r2, [r3, #0]
		break;
 800199e:	e017      	b.n	80019d0 <LCD_Orientation+0x8c>
	case 2:
		LCD_Data_8(0x80 | 0x08);
 80019a0:	2088      	movs	r0, #136	; 0x88
 80019a2:	f7ff faf7 	bl	8000f94 <LCD_Data_8>
		LCD_Width = LCD_HEIGHT;
 80019a6:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <LCD_Orientation+0x94>)
 80019a8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019ac:	801a      	strh	r2, [r3, #0]
		LCD_Height = LCD_WIDTH;
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <LCD_Orientation+0x98>)
 80019b0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80019b4:	801a      	strh	r2, [r3, #0]
		break;
 80019b6:	e00b      	b.n	80019d0 <LCD_Orientation+0x8c>
	case 3:
		LCD_Data_8(0x40 | 0x80 | 0x20 | 0x08);
 80019b8:	20e8      	movs	r0, #232	; 0xe8
 80019ba:	f7ff faeb 	bl	8000f94 <LCD_Data_8>
		LCD_Width = LCD_WIDTH;
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <LCD_Orientation+0x94>)
 80019c0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80019c4:	801a      	strh	r2, [r3, #0]
		LCD_Height = LCD_HEIGHT;
 80019c6:	4b05      	ldr	r3, [pc, #20]	; (80019dc <LCD_Orientation+0x98>)
 80019c8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019cc:	801a      	strh	r2, [r3, #0]
		break;
 80019ce:	bf00      	nop
	}
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000084 	.word	0x20000084
 80019dc:	20000086 	.word	0x20000086

080019e0 <LCD_Init>:

void LCD_Init(void) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	LCD_Reset();
 80019e4:	f7ff ff8c 	bl	8001900 <LCD_Reset>
	LCD_Command(SOFTWARE_RESET);
 80019e8:	2001      	movs	r0, #1
 80019ea:	f7ff fabb 	bl	8000f64 <LCD_Command>

	LCD_Command(POWER_CONTROL_1);
 80019ee:	20c0      	movs	r0, #192	; 0xc0
 80019f0:	f7ff fab8 	bl	8000f64 <LCD_Command>
	LCD_Data_8(0x17);    //Vreg1out
 80019f4:	2017      	movs	r0, #23
 80019f6:	f7ff facd 	bl	8000f94 <LCD_Data_8>
	LCD_Data_8(0x15);    //Verg2out
 80019fa:	2015      	movs	r0, #21
 80019fc:	f7ff faca 	bl	8000f94 <LCD_Data_8>

	LCD_Command(POWER_CONTROL_2);
 8001a00:	20c1      	movs	r0, #193	; 0xc1
 8001a02:	f7ff faaf 	bl	8000f64 <LCD_Command>
	LCD_Data_8(0x41);    //VGH,VGL
 8001a06:	2041      	movs	r0, #65	; 0x41
 8001a08:	f7ff fac4 	bl	8000f94 <LCD_Data_8>

	LCD_Command(VCOM_CONTROL_1);
 8001a0c:	20c5      	movs	r0, #197	; 0xc5
 8001a0e:	f7ff faa9 	bl	8000f64 <LCD_Command>
	LCD_Data_8(0x00);
 8001a12:	2000      	movs	r0, #0
 8001a14:	f7ff fabe 	bl	8000f94 <LCD_Data_8>
	LCD_Data_8(0x12);    //Vcom
 8001a18:	2012      	movs	r0, #18
 8001a1a:	f7ff fabb 	bl	8000f94 <LCD_Data_8>
	LCD_Data_8(0x80);
 8001a1e:	2080      	movs	r0, #128	; 0x80
 8001a20:	f7ff fab8 	bl	8000f94 <LCD_Data_8>

	LCD_Command(MEMORY_ACCESS_CONTROL);
 8001a24:	2036      	movs	r0, #54	; 0x36
 8001a26:	f7ff fa9d 	bl	8000f64 <LCD_Command>
	LCD_Data_8(0x48);
 8001a2a:	2048      	movs	r0, #72	; 0x48
 8001a2c:	f7ff fab2 	bl	8000f94 <LCD_Data_8>

	LCD_Command(COLMOD_PIXEL_FORMAT_SET);
 8001a30:	203a      	movs	r0, #58	; 0x3a
 8001a32:	f7ff fa97 	bl	8000f64 <LCD_Command>
	LCD_Data_8(0x66); 	  //18 bit
 8001a36:	2066      	movs	r0, #102	; 0x66
 8001a38:	f7ff faac 	bl	8000f94 <LCD_Data_8>

	LCD_Command(RGB_SIGNAL_CONTROL);
 8001a3c:	20b0      	movs	r0, #176	; 0xb0
 8001a3e:	f7ff fa91 	bl	8000f64 <LCD_Command>
	LCD_Data_8(0x80);    //SDO NOT USE
 8001a42:	2080      	movs	r0, #128	; 0x80
 8001a44:	f7ff faa6 	bl	8000f94 <LCD_Data_8>

	LCD_Command(FRAME_RATE_CONTROL_NORMAL);
 8001a48:	20b1      	movs	r0, #177	; 0xb1
 8001a4a:	f7ff fa8b 	bl	8000f64 <LCD_Command>
	LCD_Data_8(0xA0);    //60Hz
 8001a4e:	20a0      	movs	r0, #160	; 0xa0
 8001a50:	f7ff faa0 	bl	8000f94 <LCD_Data_8>

	LCD_Command(DISPLAY_INVERSION_CONTROL);
 8001a54:	20b4      	movs	r0, #180	; 0xb4
 8001a56:	f7ff fa85 	bl	8000f64 <LCD_Command>
	LCD_Data_8(0x02);    //2-dot
 8001a5a:	2002      	movs	r0, #2
 8001a5c:	f7ff fa9a 	bl	8000f94 <LCD_Data_8>

	LCD_Command(DISPLAY_FUNCTION_CONTROL);
 8001a60:	20b6      	movs	r0, #182	; 0xb6
 8001a62:	f7ff fa7f 	bl	8000f64 <LCD_Command>
	LCD_Data_8(0x02);    //MCU
 8001a66:	2002      	movs	r0, #2
 8001a68:	f7ff fa94 	bl	8000f94 <LCD_Data_8>
	LCD_Data_8(0x02);    //Source,Gate scan dieection
 8001a6c:	2002      	movs	r0, #2
 8001a6e:	f7ff fa91 	bl	8000f94 <LCD_Data_8>

	LCD_Command(0XE9);   // Set Image Functio
 8001a72:	20e9      	movs	r0, #233	; 0xe9
 8001a74:	f7ff fa76 	bl	8000f64 <LCD_Command>
	LCD_Data_8(0x00);    // Disable 24 bit data
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f7ff fa8b 	bl	8000f94 <LCD_Data_8>

	LCD_Command(PUMP_RATIO_CONTROL);
 8001a7e:	20f7      	movs	r0, #247	; 0xf7
 8001a80:	f7ff fa70 	bl	8000f64 <LCD_Command>
	LCD_Data_8(0xA9);
 8001a84:	20a9      	movs	r0, #169	; 0xa9
 8001a86:	f7ff fa85 	bl	8000f94 <LCD_Data_8>
	LCD_Data_8(0x51);
 8001a8a:	2051      	movs	r0, #81	; 0x51
 8001a8c:	f7ff fa82 	bl	8000f94 <LCD_Data_8>
	LCD_Data_8(0x2C);
 8001a90:	202c      	movs	r0, #44	; 0x2c
 8001a92:	f7ff fa7f 	bl	8000f94 <LCD_Data_8>
	LCD_Data_8(0x82);    // D7 stream, loose
 8001a96:	2082      	movs	r0, #130	; 0x82
 8001a98:	f7ff fa7c 	bl	8000f94 <LCD_Data_8>
//	LCD_Data_8(0x0A);
//	LCD_Data_8(0x82);
//	LCD_Data_8(0x27);
//	LCD_Command(COLMOD_PIXEL_FORMAT_SET);
//	LCD_Data_8(0x55);
	LCD_Command(SLEEP_OUT);
 8001a9c:	2011      	movs	r0, #17
 8001a9e:	f7ff fa61 	bl	8000f64 <LCD_Command>
	LCD_Command(DISPLAY_ON);
 8001aa2:	2029      	movs	r0, #41	; 0x29
 8001aa4:	f7ff fa5e 	bl	8000f64 <LCD_Command>
	LCD_Orientation(DEFAULT_ORIENTATION);
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	f7ff ff4b 	bl	8001944 <LCD_Orientation>
//	LCD_Rect_Fill(0, 0, LCD_WIDTH, LCD_HEIGHT, BLACK);
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <show_clean>:
#include "interface.h"

void show_clean() {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af04      	add	r7, sp, #16
	LCD_Rect_Fill(0, 0, LCD_WIDTH, LCD_HEIGHT, BLACK);
 8001aba:	2300      	movs	r3, #0
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001ac2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f7ff fae3 	bl	8001094 <LCD_Rect_Fill>
	LCD_Rect(0, 0, LCD_WIDTH, LCD_HEIGHT, 1, WHITE);
 8001ace:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001ad2:	9301      	str	r3, [sp, #4]
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001adc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f7ff fb7d 	bl	80011e2 <LCD_Rect>

	LCD_Rect_Round(79, 10, 15, 15, 0, 1, RED);		LCD_Rect(97, 10, 256, 15, 1, RED);		LCD_Rect_Round(356, 10, 15, 15, 1, 1, RED);
 8001ae8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8001aec:	9302      	str	r3, [sp, #8]
 8001aee:	2301      	movs	r3, #1
 8001af0:	9301      	str	r3, [sp, #4]
 8001af2:	2300      	movs	r3, #0
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	230f      	movs	r3, #15
 8001af8:	220f      	movs	r2, #15
 8001afa:	210a      	movs	r1, #10
 8001afc:	204f      	movs	r0, #79	; 0x4f
 8001afe:	f7ff fcc5 	bl	800148c <LCD_Rect_Round>
 8001b02:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8001b06:	9301      	str	r3, [sp, #4]
 8001b08:	2301      	movs	r3, #1
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	230f      	movs	r3, #15
 8001b0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b12:	210a      	movs	r1, #10
 8001b14:	2061      	movs	r0, #97	; 0x61
 8001b16:	f7ff fb64 	bl	80011e2 <LCD_Rect>
 8001b1a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8001b1e:	9302      	str	r3, [sp, #8]
 8001b20:	2301      	movs	r3, #1
 8001b22:	9301      	str	r3, [sp, #4]
 8001b24:	2301      	movs	r3, #1
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	230f      	movs	r3, #15
 8001b2a:	220f      	movs	r2, #15
 8001b2c:	210a      	movs	r1, #10
 8001b2e:	f44f 70b2 	mov.w	r0, #356	; 0x164
 8001b32:	f7ff fcab 	bl	800148c <LCD_Rect_Round>
	LCD_Rect_Round(79, 35, 15, 15, 1, 1, GREEN);	LCD_Rect(97, 35, 256, 15, 1, GREEN);	LCD_Rect_Round(356, 35, 15, 15, 1, 1, GREEN);
 8001b36:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	2301      	movs	r3, #1
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	230f      	movs	r3, #15
 8001b46:	220f      	movs	r2, #15
 8001b48:	2123      	movs	r1, #35	; 0x23
 8001b4a:	204f      	movs	r0, #79	; 0x4f
 8001b4c:	f7ff fc9e 	bl	800148c <LCD_Rect_Round>
 8001b50:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	2301      	movs	r3, #1
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	230f      	movs	r3, #15
 8001b5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b60:	2123      	movs	r1, #35	; 0x23
 8001b62:	2061      	movs	r0, #97	; 0x61
 8001b64:	f7ff fb3d 	bl	80011e2 <LCD_Rect>
 8001b68:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001b6c:	9302      	str	r3, [sp, #8]
 8001b6e:	2301      	movs	r3, #1
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	2301      	movs	r3, #1
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	230f      	movs	r3, #15
 8001b78:	220f      	movs	r2, #15
 8001b7a:	2123      	movs	r1, #35	; 0x23
 8001b7c:	f44f 70b2 	mov.w	r0, #356	; 0x164
 8001b80:	f7ff fc84 	bl	800148c <LCD_Rect_Round>
	LCD_Rect_Round(79, 60, 15, 15, 1, 1, BLUE);		LCD_Rect(97, 60, 256, 15, 1, BLUE);	LCD_Rect_Round(356, 60, 15, 15, 1, 1, BLUE);
 8001b84:	23ff      	movs	r3, #255	; 0xff
 8001b86:	9302      	str	r3, [sp, #8]
 8001b88:	2301      	movs	r3, #1
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	230f      	movs	r3, #15
 8001b92:	220f      	movs	r2, #15
 8001b94:	213c      	movs	r1, #60	; 0x3c
 8001b96:	204f      	movs	r0, #79	; 0x4f
 8001b98:	f7ff fc78 	bl	800148c <LCD_Rect_Round>
 8001b9c:	23ff      	movs	r3, #255	; 0xff
 8001b9e:	9301      	str	r3, [sp, #4]
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	230f      	movs	r3, #15
 8001ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001baa:	213c      	movs	r1, #60	; 0x3c
 8001bac:	2061      	movs	r0, #97	; 0x61
 8001bae:	f7ff fb18 	bl	80011e2 <LCD_Rect>
 8001bb2:	23ff      	movs	r3, #255	; 0xff
 8001bb4:	9302      	str	r3, [sp, #8]
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	9301      	str	r3, [sp, #4]
 8001bba:	2301      	movs	r3, #1
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	230f      	movs	r3, #15
 8001bc0:	220f      	movs	r2, #15
 8001bc2:	213c      	movs	r1, #60	; 0x3c
 8001bc4:	f44f 70b2 	mov.w	r0, #356	; 0x164
 8001bc8:	f7ff fc60 	bl	800148c <LCD_Rect_Round>
	LCD_Rect_Round(79, 85, 15, 15, 1, 1, WHITE);	LCD_Rect(97, 85, 361, 15, 1, WHITE);	LCD_Rect_Round(461, 85, 15, 15, 1, 1, WHITE);
 8001bcc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001bd0:	9302      	str	r3, [sp, #8]
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	9301      	str	r3, [sp, #4]
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	230f      	movs	r3, #15
 8001bdc:	220f      	movs	r2, #15
 8001bde:	2155      	movs	r1, #85	; 0x55
 8001be0:	204f      	movs	r0, #79	; 0x4f
 8001be2:	f7ff fc53 	bl	800148c <LCD_Rect_Round>
 8001be6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001bea:	9301      	str	r3, [sp, #4]
 8001bec:	2301      	movs	r3, #1
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	230f      	movs	r3, #15
 8001bf2:	f240 1269 	movw	r2, #361	; 0x169
 8001bf6:	2155      	movs	r1, #85	; 0x55
 8001bf8:	2061      	movs	r0, #97	; 0x61
 8001bfa:	f7ff faf2 	bl	80011e2 <LCD_Rect>
 8001bfe:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001c02:	9302      	str	r3, [sp, #8]
 8001c04:	2301      	movs	r3, #1
 8001c06:	9301      	str	r3, [sp, #4]
 8001c08:	2301      	movs	r3, #1
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	230f      	movs	r3, #15
 8001c0e:	220f      	movs	r2, #15
 8001c10:	2155      	movs	r1, #85	; 0x55
 8001c12:	f240 10cd 	movw	r0, #461	; 0x1cd
 8001c16:	f7ff fc39 	bl	800148c <LCD_Rect_Round>
	LCD_Rect_Round(79, 110, 15, 15, 1, 1, GRAY);	LCD_Rect(97, 110, 256, 15, 1, GRAY);	LCD_Rect_Round(356, 110, 15, 15, 1, 1, GRAY);
 8001c1a:	4b39      	ldr	r3, [pc, #228]	; (8001d00 <show_clean+0x24c>)
 8001c1c:	9302      	str	r3, [sp, #8]
 8001c1e:	2301      	movs	r3, #1
 8001c20:	9301      	str	r3, [sp, #4]
 8001c22:	2301      	movs	r3, #1
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	230f      	movs	r3, #15
 8001c28:	220f      	movs	r2, #15
 8001c2a:	216e      	movs	r1, #110	; 0x6e
 8001c2c:	204f      	movs	r0, #79	; 0x4f
 8001c2e:	f7ff fc2d 	bl	800148c <LCD_Rect_Round>
 8001c32:	4b33      	ldr	r3, [pc, #204]	; (8001d00 <show_clean+0x24c>)
 8001c34:	9301      	str	r3, [sp, #4]
 8001c36:	2301      	movs	r3, #1
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	230f      	movs	r3, #15
 8001c3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c40:	216e      	movs	r1, #110	; 0x6e
 8001c42:	2061      	movs	r0, #97	; 0x61
 8001c44:	f7ff facd 	bl	80011e2 <LCD_Rect>
 8001c48:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <show_clean+0x24c>)
 8001c4a:	9302      	str	r3, [sp, #8]
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	9301      	str	r3, [sp, #4]
 8001c50:	2301      	movs	r3, #1
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	230f      	movs	r3, #15
 8001c56:	220f      	movs	r2, #15
 8001c58:	216e      	movs	r1, #110	; 0x6e
 8001c5a:	f44f 70b2 	mov.w	r0, #356	; 0x164
 8001c5e:	f7ff fc15 	bl	800148c <LCD_Rect_Round>
	LCD_Rect_Round(79, 135, 15, 15, 1, 1, YELLOW);	LCD_Rect(97, 135, 256, 15, 1, YELLOW);	LCD_Rect_Round(356, 135, 15, 15, 1, 1, YELLOW);
 8001c62:	4b28      	ldr	r3, [pc, #160]	; (8001d04 <show_clean+0x250>)
 8001c64:	9302      	str	r3, [sp, #8]
 8001c66:	2301      	movs	r3, #1
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	230f      	movs	r3, #15
 8001c70:	220f      	movs	r2, #15
 8001c72:	2187      	movs	r1, #135	; 0x87
 8001c74:	204f      	movs	r0, #79	; 0x4f
 8001c76:	f7ff fc09 	bl	800148c <LCD_Rect_Round>
 8001c7a:	4b22      	ldr	r3, [pc, #136]	; (8001d04 <show_clean+0x250>)
 8001c7c:	9301      	str	r3, [sp, #4]
 8001c7e:	2301      	movs	r3, #1
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	230f      	movs	r3, #15
 8001c84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c88:	2187      	movs	r1, #135	; 0x87
 8001c8a:	2061      	movs	r0, #97	; 0x61
 8001c8c:	f7ff faa9 	bl	80011e2 <LCD_Rect>
 8001c90:	4b1c      	ldr	r3, [pc, #112]	; (8001d04 <show_clean+0x250>)
 8001c92:	9302      	str	r3, [sp, #8]
 8001c94:	2301      	movs	r3, #1
 8001c96:	9301      	str	r3, [sp, #4]
 8001c98:	2301      	movs	r3, #1
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	230f      	movs	r3, #15
 8001c9e:	220f      	movs	r2, #15
 8001ca0:	2187      	movs	r1, #135	; 0x87
 8001ca2:	f44f 70b2 	mov.w	r0, #356	; 0x164
 8001ca6:	f7ff fbf1 	bl	800148c <LCD_Rect_Round>
	LCD_Rect_Round(79, 160, 15, 15, 1, 1, CYAN);	LCD_Rect(97, 160, 256, 15, 1, CYAN);	LCD_Rect_Round(356, 160, 15, 15, 1, 1, CYAN);
 8001caa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cae:	9302      	str	r3, [sp, #8]
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	9301      	str	r3, [sp, #4]
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	230f      	movs	r3, #15
 8001cba:	220f      	movs	r2, #15
 8001cbc:	21a0      	movs	r1, #160	; 0xa0
 8001cbe:	204f      	movs	r0, #79	; 0x4f
 8001cc0:	f7ff fbe4 	bl	800148c <LCD_Rect_Round>
 8001cc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cc8:	9301      	str	r3, [sp, #4]
 8001cca:	2301      	movs	r3, #1
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	230f      	movs	r3, #15
 8001cd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cd4:	21a0      	movs	r1, #160	; 0xa0
 8001cd6:	2061      	movs	r0, #97	; 0x61
 8001cd8:	f7ff fa83 	bl	80011e2 <LCD_Rect>
 8001cdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ce0:	9302      	str	r3, [sp, #8]
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	9301      	str	r3, [sp, #4]
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	230f      	movs	r3, #15
 8001cec:	220f      	movs	r2, #15
 8001cee:	21a0      	movs	r1, #160	; 0xa0
 8001cf0:	f44f 70b2 	mov.w	r0, #356	; 0x164
 8001cf4:	f7ff fbca 	bl	800148c <LCD_Rect_Round>
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	007f7f7f 	.word	0x007f7f7f
 8001d04:	00ffff00 	.word	0x00ffff00

08001d08 <drawR>:

void drawR (uint8_t x) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af02      	add	r7, sp, #8
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < x; i++) LCD_Line(98 + i, 11, 98 + i, 24, 1, RED);
 8001d12:	2300      	movs	r3, #0
 8001d14:	73fb      	strb	r3, [r7, #15]
 8001d16:	e013      	b.n	8001d40 <drawR+0x38>
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	3362      	adds	r3, #98	; 0x62
 8001d1e:	b298      	uxth	r0, r3
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	3362      	adds	r3, #98	; 0x62
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8001d2c:	9301      	str	r3, [sp, #4]
 8001d2e:	2301      	movs	r3, #1
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	2318      	movs	r3, #24
 8001d34:	210b      	movs	r1, #11
 8001d36:	f7ff f9e6 	bl	8001106 <LCD_Line>
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
 8001d40:	7bfa      	ldrb	r2, [r7, #15]
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d3e7      	bcc.n	8001d18 <drawR+0x10>
	for (uint8_t i = 0; i < 255 - x; i++) LCD_Line(97 + (255 - i), 11, 97 + (255 - i), 24, 1, BLACK);
 8001d48:	2300      	movs	r3, #0
 8001d4a:	73bb      	strb	r3, [r7, #14]
 8001d4c:	e014      	b.n	8001d78 <drawR+0x70>
 8001d4e:	7bbb      	ldrb	r3, [r7, #14]
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	f5c3 73b0 	rsb	r3, r3, #352	; 0x160
 8001d56:	b298      	uxth	r0, r3
 8001d58:	7bbb      	ldrb	r3, [r7, #14]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	f5c3 73b0 	rsb	r3, r3, #352	; 0x160
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	2300      	movs	r3, #0
 8001d64:	9301      	str	r3, [sp, #4]
 8001d66:	2301      	movs	r3, #1
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	2318      	movs	r3, #24
 8001d6c:	210b      	movs	r1, #11
 8001d6e:	f7ff f9ca 	bl	8001106 <LCD_Line>
 8001d72:	7bbb      	ldrb	r3, [r7, #14]
 8001d74:	3301      	adds	r3, #1
 8001d76:	73bb      	strb	r3, [r7, #14]
 8001d78:	7bba      	ldrb	r2, [r7, #14]
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001d80:	429a      	cmp	r2, r3
 8001d82:	dbe4      	blt.n	8001d4e <drawR+0x46>
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <drawG>:

void drawG (uint8_t x) {
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af02      	add	r7, sp, #8
 8001d94:	4603      	mov	r3, r0
 8001d96:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < x; i++) LCD_Line(98 + i, 36, 98 + i, 49, 1, GREEN);
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73fb      	strb	r3, [r7, #15]
 8001d9c:	e013      	b.n	8001dc6 <drawG+0x38>
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	3362      	adds	r3, #98	; 0x62
 8001da4:	b298      	uxth	r0, r3
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	3362      	adds	r3, #98	; 0x62
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001db2:	9301      	str	r3, [sp, #4]
 8001db4:	2301      	movs	r3, #1
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	2331      	movs	r3, #49	; 0x31
 8001dba:	2124      	movs	r1, #36	; 0x24
 8001dbc:	f7ff f9a3 	bl	8001106 <LCD_Line>
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	73fb      	strb	r3, [r7, #15]
 8001dc6:	7bfa      	ldrb	r2, [r7, #15]
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d3e7      	bcc.n	8001d9e <drawG+0x10>
	for (uint8_t i = 0; i < 255 - x; i++) LCD_Line(97 + (255 - i), 36, 97 + (255 - i), 49, 1, BLACK);
 8001dce:	2300      	movs	r3, #0
 8001dd0:	73bb      	strb	r3, [r7, #14]
 8001dd2:	e014      	b.n	8001dfe <drawG+0x70>
 8001dd4:	7bbb      	ldrb	r3, [r7, #14]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	f5c3 73b0 	rsb	r3, r3, #352	; 0x160
 8001ddc:	b298      	uxth	r0, r3
 8001dde:	7bbb      	ldrb	r3, [r7, #14]
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	f5c3 73b0 	rsb	r3, r3, #352	; 0x160
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	2300      	movs	r3, #0
 8001dea:	9301      	str	r3, [sp, #4]
 8001dec:	2301      	movs	r3, #1
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	2331      	movs	r3, #49	; 0x31
 8001df2:	2124      	movs	r1, #36	; 0x24
 8001df4:	f7ff f987 	bl	8001106 <LCD_Line>
 8001df8:	7bbb      	ldrb	r3, [r7, #14]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	73bb      	strb	r3, [r7, #14]
 8001dfe:	7bba      	ldrb	r2, [r7, #14]
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001e06:	429a      	cmp	r2, r3
 8001e08:	dbe4      	blt.n	8001dd4 <drawG+0x46>
}
 8001e0a:	bf00      	nop
 8001e0c:	bf00      	nop
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <drawB>:

void drawB (uint8_t x) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af02      	add	r7, sp, #8
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < x; i++) LCD_Line(98 + i, 61, 98 + i, 74, 1, BLUE);
 8001e1e:	2300      	movs	r3, #0
 8001e20:	73fb      	strb	r3, [r7, #15]
 8001e22:	e012      	b.n	8001e4a <drawB+0x36>
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	3362      	adds	r3, #98	; 0x62
 8001e2a:	b298      	uxth	r0, r3
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	3362      	adds	r3, #98	; 0x62
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	23ff      	movs	r3, #255	; 0xff
 8001e36:	9301      	str	r3, [sp, #4]
 8001e38:	2301      	movs	r3, #1
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	234a      	movs	r3, #74	; 0x4a
 8001e3e:	213d      	movs	r1, #61	; 0x3d
 8001e40:	f7ff f961 	bl	8001106 <LCD_Line>
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
 8001e46:	3301      	adds	r3, #1
 8001e48:	73fb      	strb	r3, [r7, #15]
 8001e4a:	7bfa      	ldrb	r2, [r7, #15]
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d3e8      	bcc.n	8001e24 <drawB+0x10>
	for (uint8_t i = 0; i < 255 - x; i++) LCD_Line(97 + (255 - i), 61, 97 + (255 - i), 74, 1, BLACK);
 8001e52:	2300      	movs	r3, #0
 8001e54:	73bb      	strb	r3, [r7, #14]
 8001e56:	e014      	b.n	8001e82 <drawB+0x6e>
 8001e58:	7bbb      	ldrb	r3, [r7, #14]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	f5c3 73b0 	rsb	r3, r3, #352	; 0x160
 8001e60:	b298      	uxth	r0, r3
 8001e62:	7bbb      	ldrb	r3, [r7, #14]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	f5c3 73b0 	rsb	r3, r3, #352	; 0x160
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	9301      	str	r3, [sp, #4]
 8001e70:	2301      	movs	r3, #1
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	234a      	movs	r3, #74	; 0x4a
 8001e76:	213d      	movs	r1, #61	; 0x3d
 8001e78:	f7ff f945 	bl	8001106 <LCD_Line>
 8001e7c:	7bbb      	ldrb	r3, [r7, #14]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	73bb      	strb	r3, [r7, #14]
 8001e82:	7bba      	ldrb	r2, [r7, #14]
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	dbe4      	blt.n	8001e58 <drawB+0x44>
}
 8001e8e:	bf00      	nop
 8001e90:	bf00      	nop
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <drawH>:

void drawH (uint16_t x) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = 0; i < x; i++) LCD_Line(98 + i, 86, 98 + i, 99, 1, WHITE);
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	81fb      	strh	r3, [r7, #14]
 8001ea6:	e011      	b.n	8001ecc <drawH+0x34>
 8001ea8:	89fb      	ldrh	r3, [r7, #14]
 8001eaa:	3362      	adds	r3, #98	; 0x62
 8001eac:	b298      	uxth	r0, r3
 8001eae:	89fb      	ldrh	r3, [r7, #14]
 8001eb0:	3362      	adds	r3, #98	; 0x62
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001eb8:	9301      	str	r3, [sp, #4]
 8001eba:	2301      	movs	r3, #1
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	2363      	movs	r3, #99	; 0x63
 8001ec0:	2156      	movs	r1, #86	; 0x56
 8001ec2:	f7ff f920 	bl	8001106 <LCD_Line>
 8001ec6:	89fb      	ldrh	r3, [r7, #14]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	81fb      	strh	r3, [r7, #14]
 8001ecc:	89fa      	ldrh	r2, [r7, #14]
 8001ece:	88fb      	ldrh	r3, [r7, #6]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d3e9      	bcc.n	8001ea8 <drawH+0x10>
	for (uint8_t i = 0; i < 360 - x; i++) LCD_Line(97 + (360 - i), 86, 97 + (360 - i), 99, 1, BLACK);
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	737b      	strb	r3, [r7, #13]
 8001ed8:	e016      	b.n	8001f08 <drawH+0x70>
 8001eda:	7b7b      	ldrb	r3, [r7, #13]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	f5c3 73e4 	rsb	r3, r3, #456	; 0x1c8
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	b298      	uxth	r0, r3
 8001ee6:	7b7b      	ldrb	r3, [r7, #13]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	f5c3 73e4 	rsb	r3, r3, #456	; 0x1c8
 8001eee:	3301      	adds	r3, #1
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	2363      	movs	r3, #99	; 0x63
 8001efc:	2156      	movs	r1, #86	; 0x56
 8001efe:	f7ff f902 	bl	8001106 <LCD_Line>
 8001f02:	7b7b      	ldrb	r3, [r7, #13]
 8001f04:	3301      	adds	r3, #1
 8001f06:	737b      	strb	r3, [r7, #13]
 8001f08:	7b7a      	ldrb	r2, [r7, #13]
 8001f0a:	88fb      	ldrh	r3, [r7, #6]
 8001f0c:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8001f10:	429a      	cmp	r2, r3
 8001f12:	dbe2      	blt.n	8001eda <drawH+0x42>
}
 8001f14:	bf00      	nop
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <drawS>:

void drawS (uint8_t x) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af02      	add	r7, sp, #8
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < x; i++) LCD_Line(98 + i, 111, 98 + i, 124, 1, GRAY);
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	73fb      	strb	r3, [r7, #15]
 8001f2e:	e012      	b.n	8001f56 <drawS+0x36>
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	3362      	adds	r3, #98	; 0x62
 8001f36:	b298      	uxth	r0, r3
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	3362      	adds	r3, #98	; 0x62
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	4b18      	ldr	r3, [pc, #96]	; (8001fa4 <drawS+0x84>)
 8001f42:	9301      	str	r3, [sp, #4]
 8001f44:	2301      	movs	r3, #1
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	237c      	movs	r3, #124	; 0x7c
 8001f4a:	216f      	movs	r1, #111	; 0x6f
 8001f4c:	f7ff f8db 	bl	8001106 <LCD_Line>
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	3301      	adds	r3, #1
 8001f54:	73fb      	strb	r3, [r7, #15]
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d3e8      	bcc.n	8001f30 <drawS+0x10>
	for (uint8_t i = 0; i < 255 - x; i++) LCD_Line(97 + (255 - i), 111, 97 + (255 - i), 124, 1, BLACK);
 8001f5e:	2300      	movs	r3, #0
 8001f60:	73bb      	strb	r3, [r7, #14]
 8001f62:	e014      	b.n	8001f8e <drawS+0x6e>
 8001f64:	7bbb      	ldrb	r3, [r7, #14]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	f5c3 73b0 	rsb	r3, r3, #352	; 0x160
 8001f6c:	b298      	uxth	r0, r3
 8001f6e:	7bbb      	ldrb	r3, [r7, #14]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	f5c3 73b0 	rsb	r3, r3, #352	; 0x160
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	2300      	movs	r3, #0
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	237c      	movs	r3, #124	; 0x7c
 8001f82:	216f      	movs	r1, #111	; 0x6f
 8001f84:	f7ff f8bf 	bl	8001106 <LCD_Line>
 8001f88:	7bbb      	ldrb	r3, [r7, #14]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	73bb      	strb	r3, [r7, #14]
 8001f8e:	7bba      	ldrb	r2, [r7, #14]
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001f96:	429a      	cmp	r2, r3
 8001f98:	dbe4      	blt.n	8001f64 <drawS+0x44>
}
 8001f9a:	bf00      	nop
 8001f9c:	bf00      	nop
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	007f7f7f 	.word	0x007f7f7f

08001fa8 <drawV>:

void drawV (uint8_t x) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	4603      	mov	r3, r0
 8001fb0:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < x; i++) LCD_Line(98 + i, 136, 98 + i, 149, 1, YELLOW);
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	73fb      	strb	r3, [r7, #15]
 8001fb6:	e012      	b.n	8001fde <drawV+0x36>
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	3362      	adds	r3, #98	; 0x62
 8001fbe:	b298      	uxth	r0, r3
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	3362      	adds	r3, #98	; 0x62
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	4b18      	ldr	r3, [pc, #96]	; (800202c <drawV+0x84>)
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	2301      	movs	r3, #1
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	2395      	movs	r3, #149	; 0x95
 8001fd2:	2188      	movs	r1, #136	; 0x88
 8001fd4:	f7ff f897 	bl	8001106 <LCD_Line>
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	73fb      	strb	r3, [r7, #15]
 8001fde:	7bfa      	ldrb	r2, [r7, #15]
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d3e8      	bcc.n	8001fb8 <drawV+0x10>
	for (uint8_t i = 0; i < 255 - x; i++) LCD_Line(97 + (255 - i), 136, 97 + (255 - i), 149, 1, BLACK);
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	73bb      	strb	r3, [r7, #14]
 8001fea:	e014      	b.n	8002016 <drawV+0x6e>
 8001fec:	7bbb      	ldrb	r3, [r7, #14]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	f5c3 73b0 	rsb	r3, r3, #352	; 0x160
 8001ff4:	b298      	uxth	r0, r3
 8001ff6:	7bbb      	ldrb	r3, [r7, #14]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	f5c3 73b0 	rsb	r3, r3, #352	; 0x160
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	2300      	movs	r3, #0
 8002002:	9301      	str	r3, [sp, #4]
 8002004:	2301      	movs	r3, #1
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	2395      	movs	r3, #149	; 0x95
 800200a:	2188      	movs	r1, #136	; 0x88
 800200c:	f7ff f87b 	bl	8001106 <LCD_Line>
 8002010:	7bbb      	ldrb	r3, [r7, #14]
 8002012:	3301      	adds	r3, #1
 8002014:	73bb      	strb	r3, [r7, #14]
 8002016:	7bba      	ldrb	r2, [r7, #14]
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800201e:	429a      	cmp	r2, r3
 8002020:	dbe4      	blt.n	8001fec <drawV+0x44>
}
 8002022:	bf00      	nop
 8002024:	bf00      	nop
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	00ffff00 	.word	0x00ffff00

08002030 <drawD>:

void drawD (uint8_t x) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af02      	add	r7, sp, #8
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < x; i++) LCD_Line(98 + i, 161, 98 + i, 174, 1, CYAN);
 800203a:	2300      	movs	r3, #0
 800203c:	73fb      	strb	r3, [r7, #15]
 800203e:	e013      	b.n	8002068 <drawD+0x38>
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	b29b      	uxth	r3, r3
 8002044:	3362      	adds	r3, #98	; 0x62
 8002046:	b298      	uxth	r0, r3
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	b29b      	uxth	r3, r3
 800204c:	3362      	adds	r3, #98	; 0x62
 800204e:	b29a      	uxth	r2, r3
 8002050:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002054:	9301      	str	r3, [sp, #4]
 8002056:	2301      	movs	r3, #1
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	23ae      	movs	r3, #174	; 0xae
 800205c:	21a1      	movs	r1, #161	; 0xa1
 800205e:	f7ff f852 	bl	8001106 <LCD_Line>
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	3301      	adds	r3, #1
 8002066:	73fb      	strb	r3, [r7, #15]
 8002068:	7bfa      	ldrb	r2, [r7, #15]
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	429a      	cmp	r2, r3
 800206e:	d3e7      	bcc.n	8002040 <drawD+0x10>
	for (uint8_t i = 0; i < 255 - x; i++) LCD_Line(97 + (255 - i), 161, 97 + (255 - i), 174, 1, BLACK);
 8002070:	2300      	movs	r3, #0
 8002072:	73bb      	strb	r3, [r7, #14]
 8002074:	e014      	b.n	80020a0 <drawD+0x70>
 8002076:	7bbb      	ldrb	r3, [r7, #14]
 8002078:	b29b      	uxth	r3, r3
 800207a:	f5c3 73b0 	rsb	r3, r3, #352	; 0x160
 800207e:	b298      	uxth	r0, r3
 8002080:	7bbb      	ldrb	r3, [r7, #14]
 8002082:	b29b      	uxth	r3, r3
 8002084:	f5c3 73b0 	rsb	r3, r3, #352	; 0x160
 8002088:	b29a      	uxth	r2, r3
 800208a:	2300      	movs	r3, #0
 800208c:	9301      	str	r3, [sp, #4]
 800208e:	2301      	movs	r3, #1
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	23ae      	movs	r3, #174	; 0xae
 8002094:	21a1      	movs	r1, #161	; 0xa1
 8002096:	f7ff f836 	bl	8001106 <LCD_Line>
 800209a:	7bbb      	ldrb	r3, [r7, #14]
 800209c:	3301      	adds	r3, #1
 800209e:	73bb      	strb	r3, [r7, #14]
 80020a0:	7bba      	ldrb	r2, [r7, #14]
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80020a8:	429a      	cmp	r2, r3
 80020aa:	dbe4      	blt.n	8002076 <drawD+0x46>
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <HAL_TIM_PeriodElapsedCallback>:
#include "ir_remote.h"

volatile irparams_t irparams;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	if(htim == &TIMER_IR)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a55      	ldr	r2, [pc, #340]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	f040 80a2 	bne.w	800220e <HAL_TIM_PeriodElapsedCallback+0x156>
	{
		uint8_t irdata = RECIV_PIN;
 80020ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020ce:	4853      	ldr	r0, [pc, #332]	; (800221c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80020d0:	f002 fc76 	bl	80049c0 <HAL_GPIO_ReadPin>
 80020d4:	4603      	mov	r3, r0
 80020d6:	73fb      	strb	r3, [r7, #15]

		irparams.timer++;  // One more 50uS tick
 80020d8:	4b51      	ldr	r3, [pc, #324]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80020da:	885b      	ldrh	r3, [r3, #2]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	3301      	adds	r3, #1
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	4b4f      	ldr	r3, [pc, #316]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80020e4:	805a      	strh	r2, [r3, #2]
		if(irparams.rawlen >= RAWBUF) irparams.rcvstate = STATE_OVERFLOW;  // Buffer overflow
 80020e6:	4b4e      	ldr	r3, [pc, #312]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80020e8:	785b      	ldrb	r3, [r3, #1]

		switch(irparams.rcvstate)
 80020ea:	4b4d      	ldr	r3, [pc, #308]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	3b02      	subs	r3, #2
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	f200 808b 	bhi.w	800220e <HAL_TIM_PeriodElapsedCallback+0x156>
 80020f8:	a201      	add	r2, pc, #4	; (adr r2, 8002100 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80020fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fe:	bf00      	nop
 8002100:	08002115 	.word	0x08002115
 8002104:	08002169 	.word	0x08002169
 8002108:	0800219d 	.word	0x0800219d
 800210c:	080021e3 	.word	0x080021e3
 8002110:	080021f1 	.word	0x080021f1
		{
			case STATE_IDLE: // In the middle of a gap
				if(irdata == MARK)
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d172      	bne.n	8002200 <HAL_TIM_PeriodElapsedCallback+0x148>
				{
					if(irparams.timer < GAP_TICKS)  // Not big enough to be a gap.
 800211a:	4b41      	ldr	r3, [pc, #260]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800211c:	885b      	ldrh	r3, [r3, #2]
 800211e:	b29b      	uxth	r3, r3
 8002120:	2b63      	cmp	r3, #99	; 0x63
 8002122:	d803      	bhi.n	800212c <HAL_TIM_PeriodElapsedCallback+0x74>
					{
						irparams.timer = 0;
 8002124:	4b3e      	ldr	r3, [pc, #248]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002126:	2200      	movs	r2, #0
 8002128:	805a      	strh	r2, [r3, #2]
						irparams.timer = 0;
						irparams.rcvstate = STATE_MARK;
					}
				}

			break;
 800212a:	e069      	b.n	8002200 <HAL_TIM_PeriodElapsedCallback+0x148>
						irparams.overflow = 0;
 800212c:	4b3c      	ldr	r3, [pc, #240]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						irparams.rawlen  = 0;
 8002134:	4b3a      	ldr	r3, [pc, #232]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002136:	2200      	movs	r2, #0
 8002138:	705a      	strb	r2, [r3, #1]
						irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 800213a:	4b39      	ldr	r3, [pc, #228]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800213c:	785b      	ldrb	r3, [r3, #1]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	b2d1      	uxtb	r1, r2
 8002144:	4a36      	ldr	r2, [pc, #216]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002146:	7051      	strb	r1, [r2, #1]
 8002148:	4618      	mov	r0, r3
 800214a:	4b35      	ldr	r3, [pc, #212]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800214c:	885b      	ldrh	r3, [r3, #2]
 800214e:	b299      	uxth	r1, r3
 8002150:	4a33      	ldr	r2, [pc, #204]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002152:	0043      	lsls	r3, r0, #1
 8002154:	4413      	add	r3, r2
 8002156:	460a      	mov	r2, r1
 8002158:	809a      	strh	r2, [r3, #4]
						irparams.timer = 0;
 800215a:	4b31      	ldr	r3, [pc, #196]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800215c:	2200      	movs	r2, #0
 800215e:	805a      	strh	r2, [r3, #2]
						irparams.rcvstate = STATE_MARK;
 8002160:	4b2f      	ldr	r3, [pc, #188]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002162:	2203      	movs	r2, #3
 8002164:	701a      	strb	r2, [r3, #0]
			break;
 8002166:	e04b      	b.n	8002200 <HAL_TIM_PeriodElapsedCallback+0x148>

			case STATE_MARK:  // Timing Mark
				if(irdata == SPACE) // Mark ended; Record time
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d14a      	bne.n	8002204 <HAL_TIM_PeriodElapsedCallback+0x14c>
				{
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 800216e:	4b2c      	ldr	r3, [pc, #176]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002170:	785b      	ldrb	r3, [r3, #1]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	b2d1      	uxtb	r1, r2
 8002178:	4a29      	ldr	r2, [pc, #164]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800217a:	7051      	strb	r1, [r2, #1]
 800217c:	4618      	mov	r0, r3
 800217e:	4b28      	ldr	r3, [pc, #160]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002180:	885b      	ldrh	r3, [r3, #2]
 8002182:	b299      	uxth	r1, r3
 8002184:	4a26      	ldr	r2, [pc, #152]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002186:	0043      	lsls	r3, r0, #1
 8002188:	4413      	add	r3, r2
 800218a:	460a      	mov	r2, r1
 800218c:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 800218e:	4b24      	ldr	r3, [pc, #144]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002190:	2200      	movs	r2, #0
 8002192:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_SPACE;
 8002194:	4b22      	ldr	r3, [pc, #136]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002196:	2204      	movs	r2, #4
 8002198:	701a      	strb	r2, [r3, #0]
				}

			break;
 800219a:	e033      	b.n	8002204 <HAL_TIM_PeriodElapsedCallback+0x14c>

			case STATE_SPACE:  // Timing Space
				if(irdata == MARK) // Space just ended; Record time
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d116      	bne.n	80021d0 <HAL_TIM_PeriodElapsedCallback+0x118>
				{
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 80021a2:	4b1f      	ldr	r3, [pc, #124]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80021a4:	785b      	ldrb	r3, [r3, #1]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	b2d1      	uxtb	r1, r2
 80021ac:	4a1c      	ldr	r2, [pc, #112]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80021ae:	7051      	strb	r1, [r2, #1]
 80021b0:	4618      	mov	r0, r3
 80021b2:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80021b4:	885b      	ldrh	r3, [r3, #2]
 80021b6:	b299      	uxth	r1, r3
 80021b8:	4a19      	ldr	r2, [pc, #100]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80021ba:	0043      	lsls	r3, r0, #1
 80021bc:	4413      	add	r3, r2
 80021be:	460a      	mov	r2, r1
 80021c0:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 80021c2:	4b17      	ldr	r3, [pc, #92]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_MARK;
 80021c8:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80021ca:	2203      	movs	r2, #3
 80021cc:	701a      	strb	r2, [r3, #0]
				else if(irparams.timer > GAP_TICKS) // Space
				{
					irparams.rcvstate = STATE_STOP;
				}

			break;
 80021ce:	e01b      	b.n	8002208 <HAL_TIM_PeriodElapsedCallback+0x150>
				else if(irparams.timer > GAP_TICKS) // Space
 80021d0:	4b13      	ldr	r3, [pc, #76]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80021d2:	885b      	ldrh	r3, [r3, #2]
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	2b64      	cmp	r3, #100	; 0x64
 80021d8:	d916      	bls.n	8002208 <HAL_TIM_PeriodElapsedCallback+0x150>
					irparams.rcvstate = STATE_STOP;
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80021dc:	2205      	movs	r2, #5
 80021de:	701a      	strb	r2, [r3, #0]
			break;
 80021e0:	e012      	b.n	8002208 <HAL_TIM_PeriodElapsedCallback+0x150>

			case STATE_STOP:  // Waiting; Measuring Gap
			 	if(irdata == MARK) irparams.timer = 0;  // Reset gap timer
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d111      	bne.n	800220c <HAL_TIM_PeriodElapsedCallback+0x154>
 80021e8:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	805a      	strh	r2, [r3, #2]
			break;
 80021ee:	e00d      	b.n	800220c <HAL_TIM_PeriodElapsedCallback+0x154>

			case STATE_OVERFLOW:  // Flag up a read overflow; Stop the State Machine
				irparams.overflow = 1;
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				irparams.rcvstate = STATE_STOP;
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80021fa:	2205      	movs	r2, #5
 80021fc:	701a      	strb	r2, [r3, #0]
			break;
 80021fe:	e006      	b.n	800220e <HAL_TIM_PeriodElapsedCallback+0x156>
			break;
 8002200:	bf00      	nop
 8002202:	e004      	b.n	800220e <HAL_TIM_PeriodElapsedCallback+0x156>
			break;
 8002204:	bf00      	nop
 8002206:	e002      	b.n	800220e <HAL_TIM_PeriodElapsedCallback+0x156>
			break;
 8002208:	bf00      	nop
 800220a:	e000      	b.n	800220e <HAL_TIM_PeriodElapsedCallback+0x156>
			break;
 800220c:	bf00      	nop
		}
	}
}
 800220e:	bf00      	nop
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000818 	.word	0x20000818
 800221c:	40020800 	.word	0x40020800
 8002220:	20000088 	.word	0x20000088

08002224 <ir_decode>:

int16_t ir_decode(decode_results *results)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
	if(irparams.rcvstate != STATE_STOP) return 0;
 800222c:	4b12      	ldr	r3, [pc, #72]	; (8002278 <ir_decode+0x54>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b05      	cmp	r3, #5
 8002234:	d001      	beq.n	800223a <ir_decode+0x16>
 8002236:	2300      	movs	r3, #0
 8002238:	e01a      	b.n	8002270 <ir_decode+0x4c>

	results->rawbuf = irparams.rawbuf;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a0f      	ldr	r2, [pc, #60]	; (800227c <ir_decode+0x58>)
 800223e:	609a      	str	r2, [r3, #8]
	results->rawlen = irparams.rawlen;
 8002240:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <ir_decode+0x54>)
 8002242:	785b      	ldrb	r3, [r3, #1]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	b21a      	sxth	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	819a      	strh	r2, [r3, #12]
	results->overflow = irparams.overflow;
 800224c:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <ir_decode+0x54>)
 800224e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8002252:	b2db      	uxtb	r3, r3
 8002254:	b21a      	sxth	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	81da      	strh	r2, [r3, #14]

	if(decodeHash(results)) return 1;
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f880 	bl	8002360 <decodeHash>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <ir_decode+0x46>
 8002266:	2301      	movs	r3, #1
 8002268:	e002      	b.n	8002270 <ir_decode+0x4c>
	ir_enableIRIn();
 800226a:	f000 f809 	bl	8002280 <ir_enableIRIn>
	return 0;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000088 	.word	0x20000088
 800227c:	2000008c 	.word	0x2000008c

08002280 <ir_enableIRIn>:

void ir_enableIRIn()
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <ir_enableIRIn+0x24>)
 8002286:	2202      	movs	r2, #2
 8002288:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 800228a:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <ir_enableIRIn+0x24>)
 800228c:	2200      	movs	r2, #0
 800228e:	705a      	strb	r2, [r3, #1]

	__HAL_TIM_SET_COUNTER(&TIMER_IR, 0x0000);
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <ir_enableIRIn+0x28>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2200      	movs	r2, #0
 8002296:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&TIMER_IR);
 8002298:	4803      	ldr	r0, [pc, #12]	; (80022a8 <ir_enableIRIn+0x28>)
 800229a:	f004 fc5d 	bl	8006b58 <HAL_TIM_Base_Start_IT>
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000088 	.word	0x20000088
 80022a8:	20000818 	.word	0x20000818

080022ac <ir_resume>:

void ir_resume() // Restart the ISR state machine
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <ir_resume+0x1c>)
 80022b2:	2202      	movs	r2, #2
 80022b4:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 80022b6:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <ir_resume+0x1c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	705a      	strb	r2, [r3, #1]
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	20000088 	.word	0x20000088
 80022cc:	00000000 	.word	0x00000000

080022d0 <compare>:

int16_t compare(uint16_t oldval, uint16_t newval)
{
 80022d0:	b5b0      	push	{r4, r5, r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	460a      	mov	r2, r1
 80022da:	80fb      	strh	r3, [r7, #6]
 80022dc:	4613      	mov	r3, r2
 80022de:	80bb      	strh	r3, [r7, #4]
	if(newval < oldval * .8) return 0;
 80022e0:	88bb      	ldrh	r3, [r7, #4]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe f926 	bl	8000534 <__aeabi_i2d>
 80022e8:	4604      	mov	r4, r0
 80022ea:	460d      	mov	r5, r1
 80022ec:	88fb      	ldrh	r3, [r7, #6]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe f920 	bl	8000534 <__aeabi_i2d>
 80022f4:	a318      	add	r3, pc, #96	; (adr r3, 8002358 <compare+0x88>)
 80022f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fa:	f7fe f985 	bl	8000608 <__aeabi_dmul>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	4620      	mov	r0, r4
 8002304:	4629      	mov	r1, r5
 8002306:	f7fe fbf1 	bl	8000aec <__aeabi_dcmplt>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <compare+0x44>
 8002310:	2300      	movs	r3, #0
 8002312:	e01a      	b.n	800234a <compare+0x7a>
	else if(oldval < newval * .8) return 2;
 8002314:	88fb      	ldrh	r3, [r7, #6]
 8002316:	4618      	mov	r0, r3
 8002318:	f7fe f90c 	bl	8000534 <__aeabi_i2d>
 800231c:	4604      	mov	r4, r0
 800231e:	460d      	mov	r5, r1
 8002320:	88bb      	ldrh	r3, [r7, #4]
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe f906 	bl	8000534 <__aeabi_i2d>
 8002328:	a30b      	add	r3, pc, #44	; (adr r3, 8002358 <compare+0x88>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	f7fe f96b 	bl	8000608 <__aeabi_dmul>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4620      	mov	r0, r4
 8002338:	4629      	mov	r1, r5
 800233a:	f7fe fbd7 	bl	8000aec <__aeabi_dcmplt>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <compare+0x78>
 8002344:	2302      	movs	r3, #2
 8002346:	e000      	b.n	800234a <compare+0x7a>
	else return 1;
 8002348:	2301      	movs	r3, #1
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bdb0      	pop	{r4, r5, r7, pc}
 8002352:	bf00      	nop
 8002354:	f3af 8000 	nop.w
 8002358:	9999999a 	.word	0x9999999a
 800235c:	3fe99999 	.word	0x3fe99999

08002360 <decodeHash>:

#define FNV_PRIME_32 16777619
#define FNV_BASIS_32 2166136261

int32_t decodeHash(decode_results *results)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
	int32_t hash = FNV_BASIS_32;
 8002368:	4b21      	ldr	r3, [pc, #132]	; (80023f0 <decodeHash+0x90>)
 800236a:	60fb      	str	r3, [r7, #12]

	if(results->rawlen < 6) return 0;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002372:	2b05      	cmp	r3, #5
 8002374:	dc01      	bgt.n	800237a <decodeHash+0x1a>
 8002376:	2300      	movs	r3, #0
 8002378:	e035      	b.n	80023e6 <decodeHash+0x86>

	for(int16_t i = 1; (i + 2) < results->rawlen; i++)
 800237a:	2301      	movs	r3, #1
 800237c:	817b      	strh	r3, [r7, #10]
 800237e:	e023      	b.n	80023c8 <decodeHash+0x68>
	{
		int16_t value = compare(results->rawbuf[i], results->rawbuf[i+2]);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4413      	add	r3, r2
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	b298      	uxth	r0, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002398:	3302      	adds	r3, #2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4413      	add	r3, r2
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	4619      	mov	r1, r3
 80023a4:	f7ff ff94 	bl	80022d0 <compare>
 80023a8:	4603      	mov	r3, r0
 80023aa:	813b      	strh	r3, [r7, #8]
		hash = (hash * FNV_PRIME_32) ^ value;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4a11      	ldr	r2, [pc, #68]	; (80023f4 <decodeHash+0x94>)
 80023b0:	fb03 f202 	mul.w	r2, r3, r2
 80023b4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80023b8:	4053      	eors	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]
	for(int16_t i = 1; (i + 2) < results->rawlen; i++)
 80023bc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	3301      	adds	r3, #1
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	817b      	strh	r3, [r7, #10]
 80023c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80023cc:	3302      	adds	r3, #2
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80023d4:	4293      	cmp	r3, r2
 80023d6:	dbd3      	blt.n	8002380 <decodeHash+0x20>
	}

	results->value = hash;
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	601a      	str	r2, [r3, #0]
	results->bits = 32;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2220      	movs	r2, #32
 80023e2:	809a      	strh	r2, [r3, #4]
	return 1;
 80023e4:	2301      	movs	r3, #1
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	811c9dc5 	.word	0x811c9dc5
 80023f4:	01000193 	.word	0x01000193

080023f8 <remake_palette>:

long long lastTick;

uint8_t palette[3][360];

void remake_palette(double brightness, double saturation) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	ed87 0b02 	vstr	d0, [r7, #8]
 8002402:	ed87 1b00 	vstr	d1, [r7]
	for (uint16_t i = 0; i < 360; i++) {
 8002406:	2300      	movs	r3, #0
 8002408:	82fb      	strh	r3, [r7, #22]
 800240a:	e02f      	b.n	800246c <remake_palette+0x74>
		rgb = hsv_to_rgb(i, saturation, brightness);
 800240c:	8afb      	ldrh	r3, [r7, #22]
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe f880 	bl	8000514 <__aeabi_ui2d>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	ed97 2b02 	vldr	d2, [r7, #8]
 800241c:	ed97 1b00 	vldr	d1, [r7]
 8002420:	ec43 2b10 	vmov	d0, r2, r3
 8002424:	f000 fe0c 	bl	8003040 <hsv_to_rgb>
 8002428:	4602      	mov	r2, r0
 800242a:	4b15      	ldr	r3, [pc, #84]	; (8002480 <remake_palette+0x88>)
 800242c:	4611      	mov	r1, r2
 800242e:	7019      	strb	r1, [r3, #0]
 8002430:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8002434:	7059      	strb	r1, [r3, #1]
 8002436:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800243a:	709a      	strb	r2, [r3, #2]
		palette[0][i] = rgb.r;
 800243c:	8afb      	ldrh	r3, [r7, #22]
 800243e:	4a10      	ldr	r2, [pc, #64]	; (8002480 <remake_palette+0x88>)
 8002440:	7811      	ldrb	r1, [r2, #0]
 8002442:	4a10      	ldr	r2, [pc, #64]	; (8002484 <remake_palette+0x8c>)
 8002444:	54d1      	strb	r1, [r2, r3]
		palette[1][i] = rgb.g;
 8002446:	8afb      	ldrh	r3, [r7, #22]
 8002448:	4a0d      	ldr	r2, [pc, #52]	; (8002480 <remake_palette+0x88>)
 800244a:	7851      	ldrb	r1, [r2, #1]
 800244c:	4a0d      	ldr	r2, [pc, #52]	; (8002484 <remake_palette+0x8c>)
 800244e:	4413      	add	r3, r2
 8002450:	460a      	mov	r2, r1
 8002452:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
		palette[2][i] = rgb.b;
 8002456:	8afb      	ldrh	r3, [r7, #22]
 8002458:	4a09      	ldr	r2, [pc, #36]	; (8002480 <remake_palette+0x88>)
 800245a:	7891      	ldrb	r1, [r2, #2]
 800245c:	4a09      	ldr	r2, [pc, #36]	; (8002484 <remake_palette+0x8c>)
 800245e:	4413      	add	r3, r2
 8002460:	460a      	mov	r2, r1
 8002462:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
	for (uint16_t i = 0; i < 360; i++) {
 8002466:	8afb      	ldrh	r3, [r7, #22]
 8002468:	3301      	adds	r3, #1
 800246a:	82fb      	strh	r3, [r7, #22]
 800246c:	8afb      	ldrh	r3, [r7, #22]
 800246e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002472:	d3cb      	bcc.n	800240c <remake_palette+0x14>
	}
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000978 	.word	0x20000978
 8002484:	20000290 	.word	0x20000290

08002488 <rainbow>:

uint16_t offset = 0;

void rainbow(uint8_t reverse, uint16_t chain, uint16_t segment) {
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	71fb      	strb	r3, [r7, #7]
 8002492:	460b      	mov	r3, r1
 8002494:	80bb      	strh	r3, [r7, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	807b      	strh	r3, [r7, #2]

	if (reverse) {
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d03e      	beq.n	800251e <rainbow+0x96>
		for (uint16_t i = 0; i < chain; i++) {
 80024a0:	2300      	movs	r3, #0
 80024a2:	81fb      	strh	r3, [r7, #14]
 80024a4:	e027      	b.n	80024f6 <rainbow+0x6e>
			uint16_t paletteIndex = ((360 / segment)
 80024a6:	887b      	ldrh	r3, [r7, #2]
 80024a8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80024ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80024b0:	b299      	uxth	r1, r3
					* ((i + offset - 1) % segment));
 80024b2:	89fb      	ldrh	r3, [r7, #14]
 80024b4:	4a3d      	ldr	r2, [pc, #244]	; (80025ac <rainbow+0x124>)
 80024b6:	8812      	ldrh	r2, [r2, #0]
 80024b8:	4413      	add	r3, r2
 80024ba:	3b01      	subs	r3, #1
 80024bc:	887a      	ldrh	r2, [r7, #2]
 80024be:	fb93 f0f2 	sdiv	r0, r3, r2
 80024c2:	fb00 f202 	mul.w	r2, r0, r2
 80024c6:	1a9b      	subs	r3, r3, r2
			uint16_t paletteIndex = ((360 / segment)
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	fb11 f303 	smulbb	r3, r1, r3
 80024ce:	813b      	strh	r3, [r7, #8]
			led_rgb_to_buf_dma(palette[0][paletteIndex],
 80024d0:	893b      	ldrh	r3, [r7, #8]
 80024d2:	4a37      	ldr	r2, [pc, #220]	; (80025b0 <rainbow+0x128>)
 80024d4:	5cd0      	ldrb	r0, [r2, r3]
 80024d6:	893b      	ldrh	r3, [r7, #8]
 80024d8:	4a35      	ldr	r2, [pc, #212]	; (80025b0 <rainbow+0x128>)
 80024da:	4413      	add	r3, r2
 80024dc:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 80024e0:	893b      	ldrh	r3, [r7, #8]
 80024e2:	4a33      	ldr	r2, [pc, #204]	; (80025b0 <rainbow+0x128>)
 80024e4:	4413      	add	r3, r2
 80024e6:	f893 22d0 	ldrb.w	r2, [r3, #720]	; 0x2d0
 80024ea:	89fb      	ldrh	r3, [r7, #14]
 80024ec:	f001 f9d6 	bl	800389c <led_rgb_to_buf_dma>
		for (uint16_t i = 0; i < chain; i++) {
 80024f0:	89fb      	ldrh	r3, [r7, #14]
 80024f2:	3301      	adds	r3, #1
 80024f4:	81fb      	strh	r3, [r7, #14]
 80024f6:	89fa      	ldrh	r2, [r7, #14]
 80024f8:	88bb      	ldrh	r3, [r7, #4]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d3d3      	bcc.n	80024a6 <rainbow+0x1e>
					palette[1][paletteIndex], palette[2][paletteIndex], i);
		}
		led_light();
 80024fe:	f001 fa67 	bl	80039d0 <led_light>
		offset--;
 8002502:	4b2a      	ldr	r3, [pc, #168]	; (80025ac <rainbow+0x124>)
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	3b01      	subs	r3, #1
 8002508:	b29a      	uxth	r2, r3
 800250a:	4b28      	ldr	r3, [pc, #160]	; (80025ac <rainbow+0x124>)
 800250c:	801a      	strh	r2, [r3, #0]
		if (offset == 0)
 800250e:	4b27      	ldr	r3, [pc, #156]	; (80025ac <rainbow+0x124>)
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d145      	bne.n	80025a2 <rainbow+0x11a>
			offset = segment;
 8002516:	4a25      	ldr	r2, [pc, #148]	; (80025ac <rainbow+0x124>)
 8002518:	887b      	ldrh	r3, [r7, #2]
 800251a:	8013      	strh	r3, [r2, #0]
		led_light();
		offset++;
		if (offset == segment)
			offset = 0;
	}
}
 800251c:	e041      	b.n	80025a2 <rainbow+0x11a>
		for (uint16_t i = 0; i < chain; i++) {
 800251e:	2300      	movs	r3, #0
 8002520:	81bb      	strh	r3, [r7, #12]
 8002522:	e02a      	b.n	800257a <rainbow+0xf2>
					- ((360 / segment) * ((i + offset) % segment));
 8002524:	887b      	ldrh	r3, [r7, #2]
 8002526:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800252a:	fb92 f3f3 	sdiv	r3, r2, r3
 800252e:	b299      	uxth	r1, r3
 8002530:	89bb      	ldrh	r3, [r7, #12]
 8002532:	4a1e      	ldr	r2, [pc, #120]	; (80025ac <rainbow+0x124>)
 8002534:	8812      	ldrh	r2, [r2, #0]
 8002536:	4413      	add	r3, r2
 8002538:	887a      	ldrh	r2, [r7, #2]
 800253a:	fb93 f0f2 	sdiv	r0, r3, r2
 800253e:	fb00 f202 	mul.w	r2, r0, r2
 8002542:	1a9b      	subs	r3, r3, r2
 8002544:	b29b      	uxth	r3, r3
 8002546:	fb11 f303 	smulbb	r3, r1, r3
 800254a:	b29b      	uxth	r3, r3
			uint16_t paletteIndex = 359
 800254c:	f5c3 73b3 	rsb	r3, r3, #358	; 0x166
 8002550:	3301      	adds	r3, #1
 8002552:	817b      	strh	r3, [r7, #10]
			led_rgb_to_buf_dma(palette[0][paletteIndex],
 8002554:	897b      	ldrh	r3, [r7, #10]
 8002556:	4a16      	ldr	r2, [pc, #88]	; (80025b0 <rainbow+0x128>)
 8002558:	5cd0      	ldrb	r0, [r2, r3]
 800255a:	897b      	ldrh	r3, [r7, #10]
 800255c:	4a14      	ldr	r2, [pc, #80]	; (80025b0 <rainbow+0x128>)
 800255e:	4413      	add	r3, r2
 8002560:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8002564:	897b      	ldrh	r3, [r7, #10]
 8002566:	4a12      	ldr	r2, [pc, #72]	; (80025b0 <rainbow+0x128>)
 8002568:	4413      	add	r3, r2
 800256a:	f893 22d0 	ldrb.w	r2, [r3, #720]	; 0x2d0
 800256e:	89bb      	ldrh	r3, [r7, #12]
 8002570:	f001 f994 	bl	800389c <led_rgb_to_buf_dma>
		for (uint16_t i = 0; i < chain; i++) {
 8002574:	89bb      	ldrh	r3, [r7, #12]
 8002576:	3301      	adds	r3, #1
 8002578:	81bb      	strh	r3, [r7, #12]
 800257a:	89ba      	ldrh	r2, [r7, #12]
 800257c:	88bb      	ldrh	r3, [r7, #4]
 800257e:	429a      	cmp	r2, r3
 8002580:	d3d0      	bcc.n	8002524 <rainbow+0x9c>
		led_light();
 8002582:	f001 fa25 	bl	80039d0 <led_light>
		offset++;
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <rainbow+0x124>)
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	3301      	adds	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	4b07      	ldr	r3, [pc, #28]	; (80025ac <rainbow+0x124>)
 8002590:	801a      	strh	r2, [r3, #0]
		if (offset == segment)
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <rainbow+0x124>)
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	887a      	ldrh	r2, [r7, #2]
 8002598:	429a      	cmp	r2, r3
 800259a:	d102      	bne.n	80025a2 <rainbow+0x11a>
			offset = 0;
 800259c:	4b03      	ldr	r3, [pc, #12]	; (80025ac <rainbow+0x124>)
 800259e:	2200      	movs	r2, #0
 80025a0:	801a      	strh	r2, [r3, #0]
}
 80025a2:	bf00      	nop
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	200006c8 	.word	0x200006c8
 80025b0:	20000290 	.word	0x20000290
 80025b4:	00000000 	.word	0x00000000

080025b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025bc:	b094      	sub	sp, #80	; 0x50
 80025be:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025c0:	f001 fb62 	bl	8003c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025c4:	f000 fa26 	bl	8002a14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025c8:	f000 fcaa 	bl	8002f20 <MX_GPIO_Init>
  MX_DMA_Init();
 80025cc:	f000 fc88 	bl	8002ee0 <MX_DMA_Init>
  MX_TIM1_Init();
 80025d0:	f000 fb24 	bl	8002c1c <MX_TIM1_Init>
  MX_TIM4_Init();
 80025d4:	f000 fbc2 	bl	8002d5c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80025d8:	f000 fc58 	bl	8002e8c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80025dc:	f000 fab2 	bl	8002b44 <MX_SPI1_Init>
  MX_SPI2_Init();
 80025e0:	f000 fae6 	bl	8002bb0 <MX_SPI2_Init>
  MX_I2C1_Init();
 80025e4:	f000 fa80 	bl	8002ae8 <MX_I2C1_Init>
  MX_TIM10_Init();
 80025e8:	f000 fc04 	bl	8002df4 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

	TIM10->CCR1 = 125;
 80025ec:	4b17      	ldr	r3, [pc, #92]	; (800264c <main+0x94>)
 80025ee:	227d      	movs	r2, #125	; 0x7d
 80025f0:	635a      	str	r2, [r3, #52]	; 0x34
//	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);

	ir_enableIRIn();
 80025f2:	f7ff fe45 	bl	8002280 <ir_enableIRIn>
	char trans_str[64] = { 0, };
 80025f6:	2300      	movs	r3, #0
 80025f8:	607b      	str	r3, [r7, #4]
 80025fa:	f107 0308 	add.w	r3, r7, #8
 80025fe:	223c      	movs	r2, #60	; 0x3c
 8002600:	2100      	movs	r1, #0
 8002602:	4618      	mov	r0, r3
 8002604:	f006 f95c 	bl	80088c0 <memset>
	snprintf(trans_str, 64, "IR-receiver\r\n");
 8002608:	1d3b      	adds	r3, r7, #4
 800260a:	4a11      	ldr	r2, [pc, #68]	; (8002650 <main+0x98>)
 800260c:	2140      	movs	r1, #64	; 0x40
 800260e:	4618      	mov	r0, r3
 8002610:	f006 f922 	bl	8008858 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) trans_str, strlen(trans_str), 100);
 8002614:	1d3b      	adds	r3, r7, #4
 8002616:	4618      	mov	r0, r3
 8002618:	f7fd fde2 	bl	80001e0 <strlen>
 800261c:	4603      	mov	r3, r0
 800261e:	b29a      	uxth	r2, r3
 8002620:	1d39      	adds	r1, r7, #4
 8002622:	2364      	movs	r3, #100	; 0x64
 8002624:	480b      	ldr	r0, [pc, #44]	; (8002654 <main+0x9c>)
 8002626:	f005 fda2 	bl	800816e <HAL_UART_Transmit>

	bright = AT24XX_Read(10);
 800262a:	200a      	movs	r0, #10
 800262c:	f7fe fc70 	bl	8000f10 <AT24XX_Read>
 8002630:	4603      	mov	r3, r0
 8002632:	4618      	mov	r0, r3
 8002634:	f7fd ff6e 	bl	8000514 <__aeabi_ui2d>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4906      	ldr	r1, [pc, #24]	; (8002658 <main+0xa0>)
 800263e:	e9c1 2300 	strd	r2, r3, [r1]

	for (uint16_t i = 0; i < 40; i++) {
 8002642:	2300      	movs	r3, #0
 8002644:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002648:	e014      	b.n	8002674 <main+0xbc>
 800264a:	bf00      	nop
 800264c:	40014400 	.word	0x40014400
 8002650:	08009254 	.word	0x08009254
 8002654:	20000908 	.word	0x20000908
 8002658:	20000960 	.word	0x20000960
		led_rgb_to_buf_dma(1, 1, 1, i);
 800265c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002660:	2201      	movs	r2, #1
 8002662:	2101      	movs	r1, #1
 8002664:	2001      	movs	r0, #1
 8002666:	f001 f919 	bl	800389c <led_rgb_to_buf_dma>
	for (uint16_t i = 0; i < 40; i++) {
 800266a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800266e:	3301      	adds	r3, #1
 8002670:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002674:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002678:	2b27      	cmp	r3, #39	; 0x27
 800267a:	d9ef      	bls.n	800265c <main+0xa4>
	}
	led_light();
 800267c:	f001 f9a8 	bl	80039d0 <led_light>

	remake_palette(bright / 255, satur);
 8002680:	4bbb      	ldr	r3, [pc, #748]	; (8002970 <main+0x3b8>)
 8002682:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002686:	a3b8      	add	r3, pc, #736	; (adr r3, 8002968 <main+0x3b0>)
 8002688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268c:	f7fe f8e6 	bl	800085c <__aeabi_ddiv>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	ec43 2b16 	vmov	d6, r2, r3
 8002698:	4bb6      	ldr	r3, [pc, #728]	; (8002974 <main+0x3bc>)
 800269a:	ed93 7b00 	vldr	d7, [r3]
 800269e:	eeb0 1a47 	vmov.f32	s2, s14
 80026a2:	eef0 1a67 	vmov.f32	s3, s15
 80026a6:	eeb0 0a46 	vmov.f32	s0, s12
 80026aa:	eef0 0a66 	vmov.f32	s1, s13
 80026ae:	f7ff fea3 	bl	80023f8 <remake_palette>

	LCD_Init();
 80026b2:	f7ff f995 	bl	80019e0 <LCD_Init>
	XPT2046_Init();
 80026b6:	f001 f9c9 	bl	8003a4c <XPT2046_Init>

	show_clean();
 80026ba:	f7ff f9fb 	bl	8001ab4 <show_clean>

	LCD_Font(5, 25, "R:127", &DejaVu_Sans_Mono_20, 1, RED);
 80026be:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80026c2:	9301      	str	r3, [sp, #4]
 80026c4:	2301      	movs	r3, #1
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	4bab      	ldr	r3, [pc, #684]	; (8002978 <main+0x3c0>)
 80026ca:	4aac      	ldr	r2, [pc, #688]	; (800297c <main+0x3c4>)
 80026cc:	2119      	movs	r1, #25
 80026ce:	2005      	movs	r0, #5
 80026d0:	f7ff f89c 	bl	800180c <LCD_Font>
	LCD_Font(5, 50, "G:127", &DejaVu_Sans_Mono_20, 1, GREEN);
 80026d4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80026d8:	9301      	str	r3, [sp, #4]
 80026da:	2301      	movs	r3, #1
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	4ba6      	ldr	r3, [pc, #664]	; (8002978 <main+0x3c0>)
 80026e0:	4aa7      	ldr	r2, [pc, #668]	; (8002980 <main+0x3c8>)
 80026e2:	2132      	movs	r1, #50	; 0x32
 80026e4:	2005      	movs	r0, #5
 80026e6:	f7ff f891 	bl	800180c <LCD_Font>
	LCD_Font(5, 75, "B:127", &DejaVu_Sans_Mono_20, 1, BLUE);
 80026ea:	23ff      	movs	r3, #255	; 0xff
 80026ec:	9301      	str	r3, [sp, #4]
 80026ee:	2301      	movs	r3, #1
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	4ba1      	ldr	r3, [pc, #644]	; (8002978 <main+0x3c0>)
 80026f4:	4aa3      	ldr	r2, [pc, #652]	; (8002984 <main+0x3cc>)
 80026f6:	214b      	movs	r1, #75	; 0x4b
 80026f8:	2005      	movs	r0, #5
 80026fa:	f7ff f887 	bl	800180c <LCD_Font>
	LCD_Font(5, 100, "H:180", &DejaVu_Sans_Mono_20, 1, WHITE);
 80026fe:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002702:	9301      	str	r3, [sp, #4]
 8002704:	2301      	movs	r3, #1
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	4b9b      	ldr	r3, [pc, #620]	; (8002978 <main+0x3c0>)
 800270a:	4a9f      	ldr	r2, [pc, #636]	; (8002988 <main+0x3d0>)
 800270c:	2164      	movs	r1, #100	; 0x64
 800270e:	2005      	movs	r0, #5
 8002710:	f7ff f87c 	bl	800180c <LCD_Font>
	LCD_Font(5, 125, "S:127", &DejaVu_Sans_Mono_20, 1, GRAY);
 8002714:	4b9d      	ldr	r3, [pc, #628]	; (800298c <main+0x3d4>)
 8002716:	9301      	str	r3, [sp, #4]
 8002718:	2301      	movs	r3, #1
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	4b96      	ldr	r3, [pc, #600]	; (8002978 <main+0x3c0>)
 800271e:	4a9c      	ldr	r2, [pc, #624]	; (8002990 <main+0x3d8>)
 8002720:	217d      	movs	r1, #125	; 0x7d
 8002722:	2005      	movs	r0, #5
 8002724:	f7ff f872 	bl	800180c <LCD_Font>
	LCD_Font(5, 150, "V:127", &DejaVu_Sans_Mono_20, 1, YELLOW);
 8002728:	4b9a      	ldr	r3, [pc, #616]	; (8002994 <main+0x3dc>)
 800272a:	9301      	str	r3, [sp, #4]
 800272c:	2301      	movs	r3, #1
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	4b91      	ldr	r3, [pc, #580]	; (8002978 <main+0x3c0>)
 8002732:	4a99      	ldr	r2, [pc, #612]	; (8002998 <main+0x3e0>)
 8002734:	2196      	movs	r1, #150	; 0x96
 8002736:	2005      	movs	r0, #5
 8002738:	f7ff f868 	bl	800180c <LCD_Font>
	LCD_Font(5, 175, "D:100", &DejaVu_Sans_Mono_20, 1, CYAN);
 800273c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002740:	9301      	str	r3, [sp, #4]
 8002742:	2301      	movs	r3, #1
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	4b8c      	ldr	r3, [pc, #560]	; (8002978 <main+0x3c0>)
 8002748:	4a94      	ldr	r2, [pc, #592]	; (800299c <main+0x3e4>)
 800274a:	21af      	movs	r1, #175	; 0xaf
 800274c:	2005      	movs	r0, #5
 800274e:	f7ff f85d 	bl	800180c <LCD_Font>

	drawR (127);
 8002752:	207f      	movs	r0, #127	; 0x7f
 8002754:	f7ff fad8 	bl	8001d08 <drawR>
	drawG (127);
 8002758:	207f      	movs	r0, #127	; 0x7f
 800275a:	f7ff fb18 	bl	8001d8e <drawG>
	drawB (127);
 800275e:	207f      	movs	r0, #127	; 0x7f
 8002760:	f7ff fb58 	bl	8001e14 <drawB>
	drawH (240);
 8002764:	20f0      	movs	r0, #240	; 0xf0
 8002766:	f7ff fb97 	bl	8001e98 <drawH>
	drawS (127);
 800276a:	207f      	movs	r0, #127	; 0x7f
 800276c:	f7ff fbd8 	bl	8001f20 <drawS>
	drawV (127);
 8002770:	207f      	movs	r0, #127	; 0x7f
 8002772:	f7ff fc19 	bl	8001fa8 <drawV>
	drawD (127);
 8002776:	207f      	movs	r0, #127	; 0x7f
 8002778:	f7ff fc5a 	bl	8002030 <drawD>
  /* USER CODE BEGIN WHILE */
	while (1) {

//		if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET)){

			touchX = getX();
 800277c:	f001 fa26 	bl	8003bcc <getX>
 8002780:	4603      	mov	r3, r0
 8002782:	461a      	mov	r2, r3
 8002784:	4b86      	ldr	r3, [pc, #536]	; (80029a0 <main+0x3e8>)
 8002786:	801a      	strh	r2, [r3, #0]
			touchY = getY();
 8002788:	f001 fa3a 	bl	8003c00 <getY>
 800278c:	4603      	mov	r3, r0
 800278e:	461a      	mov	r2, r3
 8002790:	4b84      	ldr	r3, [pc, #528]	; (80029a4 <main+0x3ec>)
 8002792:	801a      	strh	r2, [r3, #0]
			if (touchX && touchY) {
 8002794:	4b82      	ldr	r3, [pc, #520]	; (80029a0 <main+0x3e8>)
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d019      	beq.n	80027d0 <main+0x218>
 800279c:	4b81      	ldr	r3, [pc, #516]	; (80029a4 <main+0x3ec>)
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d015      	beq.n	80027d0 <main+0x218>
				LCD_Rect_Fill(touchX, touchY, 1, 1, WHITE);
 80027a4:	4b7e      	ldr	r3, [pc, #504]	; (80029a0 <main+0x3e8>)
 80027a6:	8818      	ldrh	r0, [r3, #0]
 80027a8:	4b7e      	ldr	r3, [pc, #504]	; (80029a4 <main+0x3ec>)
 80027aa:	8819      	ldrh	r1, [r3, #0]
 80027ac:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	2301      	movs	r3, #1
 80027b4:	2201      	movs	r2, #1
 80027b6:	f7fe fc6d 	bl	8001094 <LCD_Rect_Fill>

				HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 80027ba:	2100      	movs	r1, #0
 80027bc:	487a      	ldr	r0, [pc, #488]	; (80029a8 <main+0x3f0>)
 80027be:	f004 fa87 	bl	8006cd0 <HAL_TIM_PWM_Start>
				HAL_Delay(50);
 80027c2:	2032      	movs	r0, #50	; 0x32
 80027c4:	f001 fad2 	bl	8003d6c <HAL_Delay>
				HAL_TIM_PWM_Stop(&htim10, TIM_CHANNEL_1);
 80027c8:	2100      	movs	r1, #0
 80027ca:	4877      	ldr	r0, [pc, #476]	; (80029a8 <main+0x3f0>)
 80027cc:	f004 fb30 	bl	8006e30 <HAL_TIM_PWM_Stop>
			}
//		}
			touchX = 0;
 80027d0:	4b73      	ldr	r3, [pc, #460]	; (80029a0 <main+0x3e8>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	801a      	strh	r2, [r3, #0]
			touchY = 0;
 80027d6:	4b73      	ldr	r3, [pc, #460]	; (80029a4 <main+0x3ec>)
 80027d8:	2200      	movs	r2, #0
 80027da:	801a      	strh	r2, [r3, #0]

		millis = HAL_GetTick();
 80027dc:	f001 faba 	bl	8003d54 <HAL_GetTick>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2200      	movs	r2, #0
 80027e4:	469a      	mov	sl, r3
 80027e6:	4693      	mov	fp, r2
 80027e8:	4b70      	ldr	r3, [pc, #448]	; (80029ac <main+0x3f4>)
 80027ea:	e9c3 ab00 	strd	sl, fp, [r3]
		if (millis_last + delay < millis) {
 80027ee:	4b70      	ldr	r3, [pc, #448]	; (80029b0 <main+0x3f8>)
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	2200      	movs	r2, #0
 80027f6:	4698      	mov	r8, r3
 80027f8:	4691      	mov	r9, r2
 80027fa:	4b6e      	ldr	r3, [pc, #440]	; (80029b4 <main+0x3fc>)
 80027fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002800:	eb18 0402 	adds.w	r4, r8, r2
 8002804:	eb49 0503 	adc.w	r5, r9, r3
 8002808:	4b68      	ldr	r3, [pc, #416]	; (80029ac <main+0x3f4>)
 800280a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280e:	4294      	cmp	r4, r2
 8002810:	eb75 0303 	sbcs.w	r3, r5, r3
 8002814:	da0b      	bge.n	800282e <main+0x276>
			millis_last = millis;
 8002816:	4b65      	ldr	r3, [pc, #404]	; (80029ac <main+0x3f4>)
 8002818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281c:	4965      	ldr	r1, [pc, #404]	; (80029b4 <main+0x3fc>)
 800281e:	e9c1 2300 	strd	r2, r3, [r1]
			rainbow(1, 600, 8);
 8002822:	2208      	movs	r2, #8
 8002824:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002828:	2001      	movs	r0, #1
 800282a:	f7ff fe2d 	bl	8002488 <rainbow>
		}

		if (ir_decode(&results)) {
 800282e:	4862      	ldr	r0, [pc, #392]	; (80029b8 <main+0x400>)
 8002830:	f7ff fcf8 	bl	8002224 <ir_decode>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0a0      	beq.n	800277c <main+0x1c4>
			snprintf(trans_str, 64, "Code: HEX %p DEC %lu\r\n",
					(void*) results.value, results.value);
 800283a:	4b5f      	ldr	r3, [pc, #380]	; (80029b8 <main+0x400>)
 800283c:	681b      	ldr	r3, [r3, #0]
			snprintf(trans_str, 64, "Code: HEX %p DEC %lu\r\n",
 800283e:	461a      	mov	r2, r3
 8002840:	4b5d      	ldr	r3, [pc, #372]	; (80029b8 <main+0x400>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	1d38      	adds	r0, r7, #4
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	4613      	mov	r3, r2
 800284a:	4a5c      	ldr	r2, [pc, #368]	; (80029bc <main+0x404>)
 800284c:	2140      	movs	r1, #64	; 0x40
 800284e:	f006 f803 	bl	8008858 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) trans_str, strlen(trans_str), 100);
 8002852:	1d3b      	adds	r3, r7, #4
 8002854:	4618      	mov	r0, r3
 8002856:	f7fd fcc3 	bl	80001e0 <strlen>
 800285a:	4603      	mov	r3, r0
 800285c:	b29a      	uxth	r2, r3
 800285e:	1d39      	adds	r1, r7, #4
 8002860:	2364      	movs	r3, #100	; 0x64
 8002862:	4857      	ldr	r0, [pc, #348]	; (80029c0 <main+0x408>)
 8002864:	f005 fc83 	bl	800816e <HAL_UART_Transmit>

			HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8002868:	2100      	movs	r1, #0
 800286a:	484f      	ldr	r0, [pc, #316]	; (80029a8 <main+0x3f0>)
 800286c:	f004 fa30 	bl	8006cd0 <HAL_TIM_PWM_Start>
			HAL_Delay(50);
 8002870:	2032      	movs	r0, #50	; 0x32
 8002872:	f001 fa7b 	bl	8003d6c <HAL_Delay>
			HAL_TIM_PWM_Stop(&htim10, TIM_CHANNEL_1);
 8002876:	2100      	movs	r1, #0
 8002878:	484b      	ldr	r0, [pc, #300]	; (80029a8 <main+0x3f0>)
 800287a:	f004 fad9 	bl	8006e30 <HAL_TIM_PWM_Stop>

			if (results.value == 0x44490a7b && bright > 0) { // Button: "[BR-]"
 800287e:	4b4e      	ldr	r3, [pc, #312]	; (80029b8 <main+0x400>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a50      	ldr	r2, [pc, #320]	; (80029c4 <main+0x40c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d13e      	bne.n	8002906 <main+0x34e>
 8002888:	4b39      	ldr	r3, [pc, #228]	; (8002970 <main+0x3b8>)
 800288a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	f04f 0300 	mov.w	r3, #0
 8002896:	f7fe f947 	bl	8000b28 <__aeabi_dcmpgt>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d032      	beq.n	8002906 <main+0x34e>
				bright -= 1;
 80028a0:	4b33      	ldr	r3, [pc, #204]	; (8002970 <main+0x3b8>)
 80028a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	4b47      	ldr	r3, [pc, #284]	; (80029c8 <main+0x410>)
 80028ac:	f7fd fcf4 	bl	8000298 <__aeabi_dsub>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	492e      	ldr	r1, [pc, #184]	; (8002970 <main+0x3b8>)
 80028b6:	e9c1 2300 	strd	r2, r3, [r1]
				AT24XX_Write(10, bright);
 80028ba:	4b2d      	ldr	r3, [pc, #180]	; (8002970 <main+0x3b8>)
 80028bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c0:	4610      	mov	r0, r2
 80028c2:	4619      	mov	r1, r3
 80028c4:	f7fe f93a 	bl	8000b3c <__aeabi_d2uiz>
 80028c8:	4603      	mov	r3, r0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	4619      	mov	r1, r3
 80028ce:	200a      	movs	r0, #10
 80028d0:	f7fe fb32 	bl	8000f38 <AT24XX_Write>
				remake_palette(bright / 255, satur);
 80028d4:	4b26      	ldr	r3, [pc, #152]	; (8002970 <main+0x3b8>)
 80028d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028da:	a323      	add	r3, pc, #140	; (adr r3, 8002968 <main+0x3b0>)
 80028dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e0:	f7fd ffbc 	bl	800085c <__aeabi_ddiv>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	ec43 2b16 	vmov	d6, r2, r3
 80028ec:	4b21      	ldr	r3, [pc, #132]	; (8002974 <main+0x3bc>)
 80028ee:	ed93 7b00 	vldr	d7, [r3]
 80028f2:	eeb0 1a47 	vmov.f32	s2, s14
 80028f6:	eef0 1a67 	vmov.f32	s3, s15
 80028fa:	eeb0 0a46 	vmov.f32	s0, s12
 80028fe:	eef0 0a66 	vmov.f32	s1, s13
 8002902:	f7ff fd79 	bl	80023f8 <remake_palette>
			}

			if (results.value == 0xb3d4b87f && bright < 255) { // Button: "[BR+]"
 8002906:	4b2c      	ldr	r3, [pc, #176]	; (80029b8 <main+0x400>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a30      	ldr	r2, [pc, #192]	; (80029cc <main+0x414>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d175      	bne.n	80029fc <main+0x444>
 8002910:	4b17      	ldr	r3, [pc, #92]	; (8002970 <main+0x3b8>)
 8002912:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002916:	a314      	add	r3, pc, #80	; (adr r3, 8002968 <main+0x3b0>)
 8002918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291c:	f7fe f8e6 	bl	8000aec <__aeabi_dcmplt>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d06a      	beq.n	80029fc <main+0x444>
				bright += 1;
 8002926:	4b12      	ldr	r3, [pc, #72]	; (8002970 <main+0x3b8>)
 8002928:	e9d3 0100 	ldrd	r0, r1, [r3]
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	4b25      	ldr	r3, [pc, #148]	; (80029c8 <main+0x410>)
 8002932:	f7fd fcb3 	bl	800029c <__adddf3>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	490d      	ldr	r1, [pc, #52]	; (8002970 <main+0x3b8>)
 800293c:	e9c1 2300 	strd	r2, r3, [r1]
				AT24XX_Write(10, bright);
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <main+0x3b8>)
 8002942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002946:	4610      	mov	r0, r2
 8002948:	4619      	mov	r1, r3
 800294a:	f7fe f8f7 	bl	8000b3c <__aeabi_d2uiz>
 800294e:	4603      	mov	r3, r0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	4619      	mov	r1, r3
 8002954:	200a      	movs	r0, #10
 8002956:	f7fe faef 	bl	8000f38 <AT24XX_Write>
				remake_palette(bright / 255, satur);
 800295a:	4b05      	ldr	r3, [pc, #20]	; (8002970 <main+0x3b8>)
 800295c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002960:	e036      	b.n	80029d0 <main+0x418>
 8002962:	bf00      	nop
 8002964:	f3af 8000 	nop.w
 8002968:	00000000 	.word	0x00000000
 800296c:	406fe000 	.word	0x406fe000
 8002970:	20000960 	.word	0x20000960
 8002974:	20000000 	.word	0x20000000
 8002978:	08009bcc 	.word	0x08009bcc
 800297c:	08009264 	.word	0x08009264
 8002980:	0800926c 	.word	0x0800926c
 8002984:	08009274 	.word	0x08009274
 8002988:	0800927c 	.word	0x0800927c
 800298c:	007f7f7f 	.word	0x007f7f7f
 8002990:	08009284 	.word	0x08009284
 8002994:	00ffff00 	.word	0x00ffff00
 8002998:	0800928c 	.word	0x0800928c
 800299c:	08009294 	.word	0x08009294
 80029a0:	2000094c 	.word	0x2000094c
 80029a4:	2000094e 	.word	0x2000094e
 80029a8:	20000860 	.word	0x20000860
 80029ac:	20000968 	.word	0x20000968
 80029b0:	20000008 	.word	0x20000008
 80029b4:	20000970 	.word	0x20000970
 80029b8:	20000950 	.word	0x20000950
 80029bc:	0800929c 	.word	0x0800929c
 80029c0:	20000908 	.word	0x20000908
 80029c4:	44490a7b 	.word	0x44490a7b
 80029c8:	3ff00000 	.word	0x3ff00000
 80029cc:	b3d4b87f 	.word	0xb3d4b87f
 80029d0:	a30e      	add	r3, pc, #56	; (adr r3, 8002a0c <main+0x454>)
 80029d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d6:	f7fd ff41 	bl	800085c <__aeabi_ddiv>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	ec43 2b16 	vmov	d6, r2, r3
 80029e2:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <main+0x450>)
 80029e4:	ed93 7b00 	vldr	d7, [r3]
 80029e8:	eeb0 1a47 	vmov.f32	s2, s14
 80029ec:	eef0 1a67 	vmov.f32	s3, s15
 80029f0:	eeb0 0a46 	vmov.f32	s0, s12
 80029f4:	eef0 0a66 	vmov.f32	s1, s13
 80029f8:	f7ff fcfe 	bl	80023f8 <remake_palette>
			}
			ir_resume();
 80029fc:	f7ff fc56 	bl	80022ac <ir_resume>
			touchX = getX();
 8002a00:	e6bc      	b.n	800277c <main+0x1c4>
 8002a02:	bf00      	nop
 8002a04:	f3af 8000 	nop.w
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	00000000 	.word	0x00000000
 8002a10:	406fe000 	.word	0x406fe000

08002a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b094      	sub	sp, #80	; 0x50
 8002a18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a1a:	f107 0320 	add.w	r3, r7, #32
 8002a1e:	2230      	movs	r2, #48	; 0x30
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f005 ff4c 	bl	80088c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a28:	f107 030c 	add.w	r3, r7, #12
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	4b28      	ldr	r3, [pc, #160]	; (8002ae0 <SystemClock_Config+0xcc>)
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	4a27      	ldr	r2, [pc, #156]	; (8002ae0 <SystemClock_Config+0xcc>)
 8002a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a46:	6413      	str	r3, [r2, #64]	; 0x40
 8002a48:	4b25      	ldr	r3, [pc, #148]	; (8002ae0 <SystemClock_Config+0xcc>)
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a54:	2300      	movs	r3, #0
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	4b22      	ldr	r3, [pc, #136]	; (8002ae4 <SystemClock_Config+0xd0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002a60:	4a20      	ldr	r2, [pc, #128]	; (8002ae4 <SystemClock_Config+0xd0>)
 8002a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	4b1e      	ldr	r3, [pc, #120]	; (8002ae4 <SystemClock_Config+0xd0>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a70:	607b      	str	r3, [r7, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a74:	2301      	movs	r3, #1
 8002a76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002a88:	2319      	movs	r3, #25
 8002a8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002a8c:	23a8      	movs	r3, #168	; 0xa8
 8002a8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a90:	2302      	movs	r3, #2
 8002a92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002a94:	2304      	movs	r3, #4
 8002a96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a98:	f107 0320 	add.w	r3, r7, #32
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f002 ff81 	bl	80059a4 <HAL_RCC_OscConfig>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002aa8:	f000 fac2 	bl	8003030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002aac:	230f      	movs	r3, #15
 8002aae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002abc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ac2:	f107 030c 	add.w	r3, r7, #12
 8002ac6:	2102      	movs	r1, #2
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f003 f9e3 	bl	8005e94 <HAL_RCC_ClockConfig>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002ad4:	f000 faac 	bl	8003030 <Error_Handler>
  }
}
 8002ad8:	bf00      	nop
 8002ada:	3750      	adds	r7, #80	; 0x50
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	40007000 	.word	0x40007000

08002ae8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002aec:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <MX_I2C1_Init+0x50>)
 8002aee:	4a13      	ldr	r2, [pc, #76]	; (8002b3c <MX_I2C1_Init+0x54>)
 8002af0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <MX_I2C1_Init+0x50>)
 8002af4:	4a12      	ldr	r2, [pc, #72]	; (8002b40 <MX_I2C1_Init+0x58>)
 8002af6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002af8:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <MX_I2C1_Init+0x50>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002afe:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <MX_I2C1_Init+0x50>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <MX_I2C1_Init+0x50>)
 8002b06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <MX_I2C1_Init+0x50>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002b12:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <MX_I2C1_Init+0x50>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b18:	4b07      	ldr	r3, [pc, #28]	; (8002b38 <MX_I2C1_Init+0x50>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b1e:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <MX_I2C1_Init+0x50>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b24:	4804      	ldr	r0, [pc, #16]	; (8002b38 <MX_I2C1_Init+0x50>)
 8002b26:	f001 ff7d 	bl	8004a24 <HAL_I2C_Init>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002b30:	f000 fa7e 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b34:	bf00      	nop
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	200006cc 	.word	0x200006cc
 8002b3c:	40005400 	.word	0x40005400
 8002b40:	000186a0 	.word	0x000186a0

08002b44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b48:	4b17      	ldr	r3, [pc, #92]	; (8002ba8 <MX_SPI1_Init+0x64>)
 8002b4a:	4a18      	ldr	r2, [pc, #96]	; (8002bac <MX_SPI1_Init+0x68>)
 8002b4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b4e:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <MX_SPI1_Init+0x64>)
 8002b50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b56:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <MX_SPI1_Init+0x64>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b5c:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <MX_SPI1_Init+0x64>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b62:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <MX_SPI1_Init+0x64>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <MX_SPI1_Init+0x64>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <MX_SPI1_Init+0x64>)
 8002b70:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002b74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002b76:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <MX_SPI1_Init+0x64>)
 8002b78:	2238      	movs	r2, #56	; 0x38
 8002b7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <MX_SPI1_Init+0x64>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <MX_SPI1_Init+0x64>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b88:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <MX_SPI1_Init+0x64>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b8e:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <MX_SPI1_Init+0x64>)
 8002b90:	220a      	movs	r2, #10
 8002b92:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b94:	4804      	ldr	r0, [pc, #16]	; (8002ba8 <MX_SPI1_Init+0x64>)
 8002b96:	f003 fb5d 	bl	8006254 <HAL_SPI_Init>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002ba0:	f000 fa46 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ba4:	bf00      	nop
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000720 	.word	0x20000720
 8002bac:	40013000 	.word	0x40013000

08002bb0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002bb4:	4b17      	ldr	r3, [pc, #92]	; (8002c14 <MX_SPI2_Init+0x64>)
 8002bb6:	4a18      	ldr	r2, [pc, #96]	; (8002c18 <MX_SPI2_Init+0x68>)
 8002bb8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002bba:	4b16      	ldr	r3, [pc, #88]	; (8002c14 <MX_SPI2_Init+0x64>)
 8002bbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002bc0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002bc2:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <MX_SPI2_Init+0x64>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bc8:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <MX_SPI2_Init+0x64>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bce:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <MX_SPI2_Init+0x64>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bd4:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <MX_SPI2_Init+0x64>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002bda:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <MX_SPI2_Init+0x64>)
 8002bdc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002be0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002be2:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <MX_SPI2_Init+0x64>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002be8:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <MX_SPI2_Init+0x64>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bee:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <MX_SPI2_Init+0x64>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bf4:	4b07      	ldr	r3, [pc, #28]	; (8002c14 <MX_SPI2_Init+0x64>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002bfa:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <MX_SPI2_Init+0x64>)
 8002bfc:	220a      	movs	r2, #10
 8002bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c00:	4804      	ldr	r0, [pc, #16]	; (8002c14 <MX_SPI2_Init+0x64>)
 8002c02:	f003 fb27 	bl	8006254 <HAL_SPI_Init>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002c0c:	f000 fa10 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002c10:	bf00      	nop
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	20000778 	.word	0x20000778
 8002c18:	40003800 	.word	0x40003800

08002c1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b096      	sub	sp, #88	; 0x58
 8002c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	609a      	str	r2, [r3, #8]
 8002c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	605a      	str	r2, [r3, #4]
 8002c44:	609a      	str	r2, [r3, #8]
 8002c46:	60da      	str	r2, [r3, #12]
 8002c48:	611a      	str	r2, [r3, #16]
 8002c4a:	615a      	str	r2, [r3, #20]
 8002c4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c4e:	1d3b      	adds	r3, r7, #4
 8002c50:	2220      	movs	r2, #32
 8002c52:	2100      	movs	r1, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f005 fe33 	bl	80088c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c5a:	4b3e      	ldr	r3, [pc, #248]	; (8002d54 <MX_TIM1_Init+0x138>)
 8002c5c:	4a3e      	ldr	r2, [pc, #248]	; (8002d58 <MX_TIM1_Init+0x13c>)
 8002c5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002c60:	4b3c      	ldr	r3, [pc, #240]	; (8002d54 <MX_TIM1_Init+0x138>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c66:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <MX_TIM1_Init+0x138>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 104;
 8002c6c:	4b39      	ldr	r3, [pc, #228]	; (8002d54 <MX_TIM1_Init+0x138>)
 8002c6e:	2268      	movs	r2, #104	; 0x68
 8002c70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c72:	4b38      	ldr	r3, [pc, #224]	; (8002d54 <MX_TIM1_Init+0x138>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c78:	4b36      	ldr	r3, [pc, #216]	; (8002d54 <MX_TIM1_Init+0x138>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c7e:	4b35      	ldr	r3, [pc, #212]	; (8002d54 <MX_TIM1_Init+0x138>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002c84:	4833      	ldr	r0, [pc, #204]	; (8002d54 <MX_TIM1_Init+0x138>)
 8002c86:	f003 ff17 	bl	8006ab8 <HAL_TIM_Base_Init>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002c90:	f000 f9ce 	bl	8003030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c98:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002c9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	482c      	ldr	r0, [pc, #176]	; (8002d54 <MX_TIM1_Init+0x138>)
 8002ca2:	f004 fca3 	bl	80075ec <HAL_TIM_ConfigClockSource>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002cac:	f000 f9c0 	bl	8003030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002cb0:	4828      	ldr	r0, [pc, #160]	; (8002d54 <MX_TIM1_Init+0x138>)
 8002cb2:	f003 ffb3 	bl	8006c1c <HAL_TIM_PWM_Init>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002cbc:	f000 f9b8 	bl	8003030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002cc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4821      	ldr	r0, [pc, #132]	; (8002d54 <MX_TIM1_Init+0x138>)
 8002cd0:	f005 f92c 	bl	8007f2c <HAL_TIMEx_MasterConfigSynchronization>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002cda:	f000 f9a9 	bl	8003030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cde:	2360      	movs	r3, #96	; 0x60
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002cea:	2300      	movs	r3, #0
 8002cec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cfe:	2200      	movs	r2, #0
 8002d00:	4619      	mov	r1, r3
 8002d02:	4814      	ldr	r0, [pc, #80]	; (8002d54 <MX_TIM1_Init+0x138>)
 8002d04:	f004 fbb0 	bl	8007468 <HAL_TIM_PWM_ConfigChannel>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002d0e:	f000 f98f 	bl	8003030 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d12:	2300      	movs	r3, #0
 8002d14:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d16:	2300      	movs	r3, #0
 8002d18:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d2a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d30:	1d3b      	adds	r3, r7, #4
 8002d32:	4619      	mov	r1, r3
 8002d34:	4807      	ldr	r0, [pc, #28]	; (8002d54 <MX_TIM1_Init+0x138>)
 8002d36:	f005 f967 	bl	8008008 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002d40:	f000 f976 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002d44:	4803      	ldr	r0, [pc, #12]	; (8002d54 <MX_TIM1_Init+0x138>)
 8002d46:	f000 fc69 	bl	800361c <HAL_TIM_MspPostInit>

}
 8002d4a:	bf00      	nop
 8002d4c:	3758      	adds	r7, #88	; 0x58
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	200007d0 	.word	0x200007d0
 8002d58:	40010000 	.word	0x40010000

08002d5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d62:	f107 0308 	add.w	r3, r7, #8
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	605a      	str	r2, [r3, #4]
 8002d6c:	609a      	str	r2, [r3, #8]
 8002d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d70:	463b      	mov	r3, r7
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d78:	4b1c      	ldr	r3, [pc, #112]	; (8002dec <MX_TIM4_Init+0x90>)
 8002d7a:	4a1d      	ldr	r2, [pc, #116]	; (8002df0 <MX_TIM4_Init+0x94>)
 8002d7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8002d7e:	4b1b      	ldr	r3, [pc, #108]	; (8002dec <MX_TIM4_Init+0x90>)
 8002d80:	2253      	movs	r2, #83	; 0x53
 8002d82:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d84:	4b19      	ldr	r3, [pc, #100]	; (8002dec <MX_TIM4_Init+0x90>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49;
 8002d8a:	4b18      	ldr	r3, [pc, #96]	; (8002dec <MX_TIM4_Init+0x90>)
 8002d8c:	2231      	movs	r2, #49	; 0x31
 8002d8e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d90:	4b16      	ldr	r3, [pc, #88]	; (8002dec <MX_TIM4_Init+0x90>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d96:	4b15      	ldr	r3, [pc, #84]	; (8002dec <MX_TIM4_Init+0x90>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d9c:	4813      	ldr	r0, [pc, #76]	; (8002dec <MX_TIM4_Init+0x90>)
 8002d9e:	f003 fe8b 	bl	8006ab8 <HAL_TIM_Base_Init>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8002da8:	f000 f942 	bl	8003030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002db0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002db2:	f107 0308 	add.w	r3, r7, #8
 8002db6:	4619      	mov	r1, r3
 8002db8:	480c      	ldr	r0, [pc, #48]	; (8002dec <MX_TIM4_Init+0x90>)
 8002dba:	f004 fc17 	bl	80075ec <HAL_TIM_ConfigClockSource>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8002dc4:	f000 f934 	bl	8003030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002dd0:	463b      	mov	r3, r7
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4805      	ldr	r0, [pc, #20]	; (8002dec <MX_TIM4_Init+0x90>)
 8002dd6:	f005 f8a9 	bl	8007f2c <HAL_TIMEx_MasterConfigSynchronization>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8002de0:	f000 f926 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002de4:	bf00      	nop
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	20000818 	.word	0x20000818
 8002df0:	40000800 	.word	0x40000800

08002df4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b088      	sub	sp, #32
 8002df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dfa:	1d3b      	adds	r3, r7, #4
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	60da      	str	r2, [r3, #12]
 8002e06:	611a      	str	r2, [r3, #16]
 8002e08:	615a      	str	r2, [r3, #20]
 8002e0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002e0c:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <MX_TIM10_Init+0x90>)
 8002e0e:	4a1e      	ldr	r2, [pc, #120]	; (8002e88 <MX_TIM10_Init+0x94>)
 8002e10:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84-1;
 8002e12:	4b1c      	ldr	r3, [pc, #112]	; (8002e84 <MX_TIM10_Init+0x90>)
 8002e14:	2253      	movs	r2, #83	; 0x53
 8002e16:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e18:	4b1a      	ldr	r3, [pc, #104]	; (8002e84 <MX_TIM10_Init+0x90>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 250-1;
 8002e1e:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <MX_TIM10_Init+0x90>)
 8002e20:	22f9      	movs	r2, #249	; 0xf9
 8002e22:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e24:	4b17      	ldr	r3, [pc, #92]	; (8002e84 <MX_TIM10_Init+0x90>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e2a:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <MX_TIM10_Init+0x90>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002e30:	4814      	ldr	r0, [pc, #80]	; (8002e84 <MX_TIM10_Init+0x90>)
 8002e32:	f003 fe41 	bl	8006ab8 <HAL_TIM_Base_Init>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 8002e3c:	f000 f8f8 	bl	8003030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002e40:	4810      	ldr	r0, [pc, #64]	; (8002e84 <MX_TIM10_Init+0x90>)
 8002e42:	f003 feeb 	bl	8006c1c <HAL_TIM_PWM_Init>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 8002e4c:	f000 f8f0 	bl	8003030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e50:	2360      	movs	r3, #96	; 0x60
 8002e52:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e60:	1d3b      	adds	r3, r7, #4
 8002e62:	2200      	movs	r2, #0
 8002e64:	4619      	mov	r1, r3
 8002e66:	4807      	ldr	r0, [pc, #28]	; (8002e84 <MX_TIM10_Init+0x90>)
 8002e68:	f004 fafe 	bl	8007468 <HAL_TIM_PWM_ConfigChannel>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 8002e72:	f000 f8dd 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002e76:	4803      	ldr	r0, [pc, #12]	; (8002e84 <MX_TIM10_Init+0x90>)
 8002e78:	f000 fbd0 	bl	800361c <HAL_TIM_MspPostInit>

}
 8002e7c:	bf00      	nop
 8002e7e:	3720      	adds	r7, #32
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000860 	.word	0x20000860
 8002e88:	40014400 	.word	0x40014400

08002e8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e90:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <MX_USART1_UART_Init+0x4c>)
 8002e92:	4a12      	ldr	r2, [pc, #72]	; (8002edc <MX_USART1_UART_Init+0x50>)
 8002e94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e96:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <MX_USART1_UART_Init+0x4c>)
 8002e98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <MX_USART1_UART_Init+0x4c>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <MX_USART1_UART_Init+0x4c>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002eaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <MX_USART1_UART_Init+0x4c>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002eb0:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <MX_USART1_UART_Init+0x4c>)
 8002eb2:	220c      	movs	r2, #12
 8002eb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eb6:	4b08      	ldr	r3, [pc, #32]	; (8002ed8 <MX_USART1_UART_Init+0x4c>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ebc:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <MX_USART1_UART_Init+0x4c>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ec2:	4805      	ldr	r0, [pc, #20]	; (8002ed8 <MX_USART1_UART_Init+0x4c>)
 8002ec4:	f005 f906 	bl	80080d4 <HAL_UART_Init>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ece:	f000 f8af 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ed2:	bf00      	nop
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000908 	.word	0x20000908
 8002edc:	40011000 	.word	0x40011000

08002ee0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	607b      	str	r3, [r7, #4]
 8002eea:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <MX_DMA_Init+0x3c>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	4a0b      	ldr	r2, [pc, #44]	; (8002f1c <MX_DMA_Init+0x3c>)
 8002ef0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef6:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <MX_DMA_Init+0x3c>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efe:	607b      	str	r3, [r7, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002f02:	2200      	movs	r2, #0
 8002f04:	2100      	movs	r1, #0
 8002f06:	2039      	movs	r0, #57	; 0x39
 8002f08:	f001 f82f 	bl	8003f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002f0c:	2039      	movs	r0, #57	; 0x39
 8002f0e:	f001 f848 	bl	8003fa2 <HAL_NVIC_EnableIRQ>

}
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800

08002f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08a      	sub	sp, #40	; 0x28
 8002f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f26:	f107 0314 	add.w	r3, r7, #20
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	605a      	str	r2, [r3, #4]
 8002f30:	609a      	str	r2, [r3, #8]
 8002f32:	60da      	str	r2, [r3, #12]
 8002f34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	4b39      	ldr	r3, [pc, #228]	; (8003020 <MX_GPIO_Init+0x100>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	4a38      	ldr	r2, [pc, #224]	; (8003020 <MX_GPIO_Init+0x100>)
 8002f40:	f043 0304 	orr.w	r3, r3, #4
 8002f44:	6313      	str	r3, [r2, #48]	; 0x30
 8002f46:	4b36      	ldr	r3, [pc, #216]	; (8003020 <MX_GPIO_Init+0x100>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	4b32      	ldr	r3, [pc, #200]	; (8003020 <MX_GPIO_Init+0x100>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	4a31      	ldr	r2, [pc, #196]	; (8003020 <MX_GPIO_Init+0x100>)
 8002f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f60:	6313      	str	r3, [r2, #48]	; 0x30
 8002f62:	4b2f      	ldr	r3, [pc, #188]	; (8003020 <MX_GPIO_Init+0x100>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	4b2b      	ldr	r3, [pc, #172]	; (8003020 <MX_GPIO_Init+0x100>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	4a2a      	ldr	r2, [pc, #168]	; (8003020 <MX_GPIO_Init+0x100>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7e:	4b28      	ldr	r3, [pc, #160]	; (8003020 <MX_GPIO_Init+0x100>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	60bb      	str	r3, [r7, #8]
 8002f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	607b      	str	r3, [r7, #4]
 8002f8e:	4b24      	ldr	r3, [pc, #144]	; (8003020 <MX_GPIO_Init+0x100>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	4a23      	ldr	r2, [pc, #140]	; (8003020 <MX_GPIO_Init+0x100>)
 8002f94:	f043 0302 	orr.w	r3, r3, #2
 8002f98:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9a:	4b21      	ldr	r3, [pc, #132]	; (8003020 <MX_GPIO_Init+0x100>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	607b      	str	r3, [r7, #4]
 8002fa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2102      	movs	r1, #2
 8002faa:	481e      	ldr	r0, [pc, #120]	; (8003024 <MX_GPIO_Init+0x104>)
 8002fac:	f001 fd20 	bl	80049f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IR_REC_Pin */
  GPIO_InitStruct.Pin = IR_REC_Pin;
 8002fb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR_REC_GPIO_Port, &GPIO_InitStruct);
 8002fbe:	f107 0314 	add.w	r3, r7, #20
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4818      	ldr	r0, [pc, #96]	; (8003028 <MX_GPIO_Init+0x108>)
 8002fc6:	f001 fb77 	bl	80046b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8002fd6:	f107 0314 	add.w	r3, r7, #20
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4813      	ldr	r0, [pc, #76]	; (800302c <MX_GPIO_Init+0x10c>)
 8002fde:	f001 fb6b 	bl	80046b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8002fe2:	2308      	movs	r3, #8
 8002fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fea:	2302      	movs	r3, #2
 8002fec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002fee:	f107 0314 	add.w	r3, r7, #20
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	480d      	ldr	r0, [pc, #52]	; (800302c <MX_GPIO_Init+0x10c>)
 8002ff6:	f001 fb5f 	bl	80046b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ffe:	2301      	movs	r3, #1
 8003000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003006:	2300      	movs	r3, #0
 8003008:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 800300a:	f107 0314 	add.w	r3, r7, #20
 800300e:	4619      	mov	r1, r3
 8003010:	4804      	ldr	r0, [pc, #16]	; (8003024 <MX_GPIO_Init+0x104>)
 8003012:	f001 fb51 	bl	80046b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003016:	bf00      	nop
 8003018:	3728      	adds	r7, #40	; 0x28
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800
 8003024:	40020400 	.word	0x40020400
 8003028:	40020800 	.word	0x40020800
 800302c:	40020000 	.word	0x40020000

08003030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003034:	b672      	cpsid	i
}
 8003036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003038:	e7fe      	b.n	8003038 <Error_Handler+0x8>
 800303a:	0000      	movs	r0, r0
 800303c:	0000      	movs	r0, r0
	...

08003040 <hsv_to_rgb>:
#include "rgb_hsv.h"

C_RGB rgb;

C_RGB hsv_to_rgb(double H, double S, double V) {
 8003040:	b580      	push	{r7, lr}
 8003042:	b098      	sub	sp, #96	; 0x60
 8003044:	af00      	add	r7, sp, #0
 8003046:	ed87 0b04 	vstr	d0, [r7, #16]
 800304a:	ed87 1b02 	vstr	d1, [r7, #8]
 800304e:	ed87 2b00 	vstr	d2, [r7]
	double r = 0, g = 0, b = 0;
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if (S == 0) {
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	f04f 0300 	mov.w	r3, #0
 800307e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003082:	f7fd fd29 	bl	8000ad8 <__aeabi_dcmpeq>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00c      	beq.n	80030a6 <hsv_to_rgb+0x66>
		r = V;
 800308c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003090:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		g = V;
 8003094:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003098:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		b = V;
 800309c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030a0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80030a4:	e0de      	b.n	8003264 <hsv_to_rgb+0x224>
	} else {
		uint16_t i;
		double f, p, q, t;

		if (H == 360)
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	4b95      	ldr	r3, [pc, #596]	; (8003300 <hsv_to_rgb+0x2c0>)
 80030ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030b0:	f7fd fd12 	bl	8000ad8 <__aeabi_dcmpeq>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d006      	beq.n	80030c8 <hsv_to_rgb+0x88>
			H = 0;
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80030c6:	e00a      	b.n	80030de <hsv_to_rgb+0x9e>
		else
			H = H / 60;
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	4b8d      	ldr	r3, [pc, #564]	; (8003304 <hsv_to_rgb+0x2c4>)
 80030ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030d2:	f7fd fbc3 	bl	800085c <__aeabi_ddiv>
 80030d6:	4602      	mov	r2, r0
 80030d8:	460b      	mov	r3, r1
 80030da:	e9c7 2304 	strd	r2, r3, [r7, #16]

		i = (uint16_t) trunc(H);
 80030de:	ed97 0b04 	vldr	d0, [r7, #16]
 80030e2:	f006 f871 	bl	80091c8 <trunc>
 80030e6:	ec53 2b10 	vmov	r2, r3, d0
 80030ea:	4610      	mov	r0, r2
 80030ec:	4619      	mov	r1, r3
 80030ee:	f7fd fd25 	bl	8000b3c <__aeabi_d2uiz>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		f = H - i;
 80030f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fd fa19 	bl	8000534 <__aeabi_i2d>
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800310a:	f7fd f8c5 	bl	8000298 <__aeabi_dsub>
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

		p = V * (1.0 - S);
 8003116:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800311a:	f04f 0000 	mov.w	r0, #0
 800311e:	497a      	ldr	r1, [pc, #488]	; (8003308 <hsv_to_rgb+0x2c8>)
 8003120:	f7fd f8ba 	bl	8000298 <__aeabi_dsub>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	e9d7 0100 	ldrd	r0, r1, [r7]
 800312c:	f7fd fa6c 	bl	8000608 <__aeabi_dmul>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		q = V * (1.0 - (S * f));
 8003138:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800313c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003140:	f7fd fa62 	bl	8000608 <__aeabi_dmul>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	f04f 0000 	mov.w	r0, #0
 800314c:	496e      	ldr	r1, [pc, #440]	; (8003308 <hsv_to_rgb+0x2c8>)
 800314e:	f7fd f8a3 	bl	8000298 <__aeabi_dsub>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	e9d7 0100 	ldrd	r0, r1, [r7]
 800315a:	f7fd fa55 	bl	8000608 <__aeabi_dmul>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		t = V * (1.0 - (S * (1.0 - f)));
 8003166:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800316a:	f04f 0000 	mov.w	r0, #0
 800316e:	4966      	ldr	r1, [pc, #408]	; (8003308 <hsv_to_rgb+0x2c8>)
 8003170:	f7fd f892 	bl	8000298 <__aeabi_dsub>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4610      	mov	r0, r2
 800317a:	4619      	mov	r1, r3
 800317c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003180:	f7fd fa42 	bl	8000608 <__aeabi_dmul>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	f04f 0000 	mov.w	r0, #0
 800318c:	495e      	ldr	r1, [pc, #376]	; (8003308 <hsv_to_rgb+0x2c8>)
 800318e:	f7fd f883 	bl	8000298 <__aeabi_dsub>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	e9d7 0100 	ldrd	r0, r1, [r7]
 800319a:	f7fd fa35 	bl	8000608 <__aeabi_dmul>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	e9c7 2308 	strd	r2, r3, [r7, #32]

		switch (i) {
 80031a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d84d      	bhi.n	800324a <hsv_to_rgb+0x20a>
 80031ae:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <hsv_to_rgb+0x174>)
 80031b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b4:	080031c9 	.word	0x080031c9
 80031b8:	080031e3 	.word	0x080031e3
 80031bc:	080031fd 	.word	0x080031fd
 80031c0:	08003217 	.word	0x08003217
 80031c4:	08003231 	.word	0x08003231
		case 0:
			r = V;
 80031c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031cc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			g = t;
 80031d0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031d4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			b = p;
 80031d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80031dc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			break;
 80031e0:	e040      	b.n	8003264 <hsv_to_rgb+0x224>
		case 1:
			r = q;
 80031e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031e6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			g = V;
 80031ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031ee:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			b = p;
 80031f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80031f6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			break;
 80031fa:	e033      	b.n	8003264 <hsv_to_rgb+0x224>
		case 2:
			r = p;
 80031fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003200:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			g = V;
 8003204:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003208:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			b = t;
 800320c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003210:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			break;
 8003214:	e026      	b.n	8003264 <hsv_to_rgb+0x224>
		case 3:
			r = p;
 8003216:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800321a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			g = q;
 800321e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003222:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			b = V;
 8003226:	e9d7 2300 	ldrd	r2, r3, [r7]
 800322a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			break;
 800322e:	e019      	b.n	8003264 <hsv_to_rgb+0x224>
		case 4:
			r = t;
 8003230:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003234:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			g = p;
 8003238:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800323c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			b = V;
 8003240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003244:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			break;
 8003248:	e00c      	b.n	8003264 <hsv_to_rgb+0x224>
		default:
			r = V;
 800324a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800324e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			g = p;
 8003252:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003256:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			b = q;
 800325a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800325e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			break;
 8003262:	bf00      	nop
		}

	}
	rgb.r = r * 255;
 8003264:	a324      	add	r3, pc, #144	; (adr r3, 80032f8 <hsv_to_rgb+0x2b8>)
 8003266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800326e:	f7fd f9cb 	bl	8000608 <__aeabi_dmul>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	4610      	mov	r0, r2
 8003278:	4619      	mov	r1, r3
 800327a:	f7fd fc5f 	bl	8000b3c <__aeabi_d2uiz>
 800327e:	4603      	mov	r3, r0
 8003280:	b2da      	uxtb	r2, r3
 8003282:	4b22      	ldr	r3, [pc, #136]	; (800330c <hsv_to_rgb+0x2cc>)
 8003284:	701a      	strb	r2, [r3, #0]
	rgb.g = g * 255;
 8003286:	a31c      	add	r3, pc, #112	; (adr r3, 80032f8 <hsv_to_rgb+0x2b8>)
 8003288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003290:	f7fd f9ba 	bl	8000608 <__aeabi_dmul>
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4610      	mov	r0, r2
 800329a:	4619      	mov	r1, r3
 800329c:	f7fd fc4e 	bl	8000b3c <__aeabi_d2uiz>
 80032a0:	4603      	mov	r3, r0
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	4b19      	ldr	r3, [pc, #100]	; (800330c <hsv_to_rgb+0x2cc>)
 80032a6:	705a      	strb	r2, [r3, #1]
	rgb.b = b * 255;
 80032a8:	a313      	add	r3, pc, #76	; (adr r3, 80032f8 <hsv_to_rgb+0x2b8>)
 80032aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80032b2:	f7fd f9a9 	bl	8000608 <__aeabi_dmul>
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	4610      	mov	r0, r2
 80032bc:	4619      	mov	r1, r3
 80032be:	f7fd fc3d 	bl	8000b3c <__aeabi_d2uiz>
 80032c2:	4603      	mov	r3, r0
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	4b11      	ldr	r3, [pc, #68]	; (800330c <hsv_to_rgb+0x2cc>)
 80032c8:	709a      	strb	r2, [r3, #2]
	return rgb;
 80032ca:	4a10      	ldr	r2, [pc, #64]	; (800330c <hsv_to_rgb+0x2cc>)
 80032cc:	f107 031c 	add.w	r3, r7, #28
 80032d0:	6812      	ldr	r2, [r2, #0]
 80032d2:	4611      	mov	r1, r2
 80032d4:	8019      	strh	r1, [r3, #0]
 80032d6:	3302      	adds	r3, #2
 80032d8:	0c12      	lsrs	r2, r2, #16
 80032da:	701a      	strb	r2, [r3, #0]
 80032dc:	2300      	movs	r3, #0
 80032de:	7f3a      	ldrb	r2, [r7, #28]
 80032e0:	f362 0307 	bfi	r3, r2, #0, #8
 80032e4:	7f7a      	ldrb	r2, [r7, #29]
 80032e6:	f362 230f 	bfi	r3, r2, #8, #8
 80032ea:	7fba      	ldrb	r2, [r7, #30]
 80032ec:	f362 4317 	bfi	r3, r2, #16, #8
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3760      	adds	r7, #96	; 0x60
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	00000000 	.word	0x00000000
 80032fc:	406fe000 	.word	0x406fe000
 8003300:	40768000 	.word	0x40768000
 8003304:	404e0000 	.word	0x404e0000
 8003308:	3ff00000 	.word	0x3ff00000
 800330c:	20000978 	.word	0x20000978

08003310 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003316:	2300      	movs	r3, #0
 8003318:	607b      	str	r3, [r7, #4]
 800331a:	4b10      	ldr	r3, [pc, #64]	; (800335c <HAL_MspInit+0x4c>)
 800331c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331e:	4a0f      	ldr	r2, [pc, #60]	; (800335c <HAL_MspInit+0x4c>)
 8003320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003324:	6453      	str	r3, [r2, #68]	; 0x44
 8003326:	4b0d      	ldr	r3, [pc, #52]	; (800335c <HAL_MspInit+0x4c>)
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800332e:	607b      	str	r3, [r7, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003332:	2300      	movs	r3, #0
 8003334:	603b      	str	r3, [r7, #0]
 8003336:	4b09      	ldr	r3, [pc, #36]	; (800335c <HAL_MspInit+0x4c>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	4a08      	ldr	r2, [pc, #32]	; (800335c <HAL_MspInit+0x4c>)
 800333c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003340:	6413      	str	r3, [r2, #64]	; 0x40
 8003342:	4b06      	ldr	r3, [pc, #24]	; (800335c <HAL_MspInit+0x4c>)
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40023800 	.word	0x40023800

08003360 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08a      	sub	sp, #40	; 0x28
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003368:	f107 0314 	add.w	r3, r7, #20
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	609a      	str	r2, [r3, #8]
 8003374:	60da      	str	r2, [r3, #12]
 8003376:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a19      	ldr	r2, [pc, #100]	; (80033e4 <HAL_I2C_MspInit+0x84>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d12b      	bne.n	80033da <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	4b18      	ldr	r3, [pc, #96]	; (80033e8 <HAL_I2C_MspInit+0x88>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	4a17      	ldr	r2, [pc, #92]	; (80033e8 <HAL_I2C_MspInit+0x88>)
 800338c:	f043 0302 	orr.w	r3, r3, #2
 8003390:	6313      	str	r3, [r2, #48]	; 0x30
 8003392:	4b15      	ldr	r3, [pc, #84]	; (80033e8 <HAL_I2C_MspInit+0x88>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800339e:	23c0      	movs	r3, #192	; 0xc0
 80033a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033a2:	2312      	movs	r3, #18
 80033a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033aa:	2303      	movs	r3, #3
 80033ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033ae:	2304      	movs	r3, #4
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b2:	f107 0314 	add.w	r3, r7, #20
 80033b6:	4619      	mov	r1, r3
 80033b8:	480c      	ldr	r0, [pc, #48]	; (80033ec <HAL_I2C_MspInit+0x8c>)
 80033ba:	f001 f97d 	bl	80046b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <HAL_I2C_MspInit+0x88>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	4a08      	ldr	r2, [pc, #32]	; (80033e8 <HAL_I2C_MspInit+0x88>)
 80033c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033cc:	6413      	str	r3, [r2, #64]	; 0x40
 80033ce:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <HAL_I2C_MspInit+0x88>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80033da:	bf00      	nop
 80033dc:	3728      	adds	r7, #40	; 0x28
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40005400 	.word	0x40005400
 80033e8:	40023800 	.word	0x40023800
 80033ec:	40020400 	.word	0x40020400

080033f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08c      	sub	sp, #48	; 0x30
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f8:	f107 031c 	add.w	r3, r7, #28
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	60da      	str	r2, [r3, #12]
 8003406:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a32      	ldr	r2, [pc, #200]	; (80034d8 <HAL_SPI_MspInit+0xe8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d12c      	bne.n	800346c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	61bb      	str	r3, [r7, #24]
 8003416:	4b31      	ldr	r3, [pc, #196]	; (80034dc <HAL_SPI_MspInit+0xec>)
 8003418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341a:	4a30      	ldr	r2, [pc, #192]	; (80034dc <HAL_SPI_MspInit+0xec>)
 800341c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003420:	6453      	str	r3, [r2, #68]	; 0x44
 8003422:	4b2e      	ldr	r3, [pc, #184]	; (80034dc <HAL_SPI_MspInit+0xec>)
 8003424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003426:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800342a:	61bb      	str	r3, [r7, #24]
 800342c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	4b2a      	ldr	r3, [pc, #168]	; (80034dc <HAL_SPI_MspInit+0xec>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	4a29      	ldr	r2, [pc, #164]	; (80034dc <HAL_SPI_MspInit+0xec>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	6313      	str	r3, [r2, #48]	; 0x30
 800343e:	4b27      	ldr	r3, [pc, #156]	; (80034dc <HAL_SPI_MspInit+0xec>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800344a:	23f0      	movs	r3, #240	; 0xf0
 800344c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344e:	2302      	movs	r3, #2
 8003450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003452:	2300      	movs	r3, #0
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003456:	2303      	movs	r3, #3
 8003458:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800345a:	2305      	movs	r3, #5
 800345c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800345e:	f107 031c 	add.w	r3, r7, #28
 8003462:	4619      	mov	r1, r3
 8003464:	481e      	ldr	r0, [pc, #120]	; (80034e0 <HAL_SPI_MspInit+0xf0>)
 8003466:	f001 f927 	bl	80046b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800346a:	e031      	b.n	80034d0 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a1c      	ldr	r2, [pc, #112]	; (80034e4 <HAL_SPI_MspInit+0xf4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d12c      	bne.n	80034d0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003476:	2300      	movs	r3, #0
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	4b18      	ldr	r3, [pc, #96]	; (80034dc <HAL_SPI_MspInit+0xec>)
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	4a17      	ldr	r2, [pc, #92]	; (80034dc <HAL_SPI_MspInit+0xec>)
 8003480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003484:	6413      	str	r3, [r2, #64]	; 0x40
 8003486:	4b15      	ldr	r3, [pc, #84]	; (80034dc <HAL_SPI_MspInit+0xec>)
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	4b11      	ldr	r3, [pc, #68]	; (80034dc <HAL_SPI_MspInit+0xec>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	4a10      	ldr	r2, [pc, #64]	; (80034dc <HAL_SPI_MspInit+0xec>)
 800349c:	f043 0302 	orr.w	r3, r3, #2
 80034a0:	6313      	str	r3, [r2, #48]	; 0x30
 80034a2:	4b0e      	ldr	r3, [pc, #56]	; (80034dc <HAL_SPI_MspInit+0xec>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80034ae:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80034b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b4:	2302      	movs	r3, #2
 80034b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034bc:	2303      	movs	r3, #3
 80034be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034c0:	2305      	movs	r3, #5
 80034c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c4:	f107 031c 	add.w	r3, r7, #28
 80034c8:	4619      	mov	r1, r3
 80034ca:	4807      	ldr	r0, [pc, #28]	; (80034e8 <HAL_SPI_MspInit+0xf8>)
 80034cc:	f001 f8f4 	bl	80046b8 <HAL_GPIO_Init>
}
 80034d0:	bf00      	nop
 80034d2:	3730      	adds	r7, #48	; 0x30
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40013000 	.word	0x40013000
 80034dc:	40023800 	.word	0x40023800
 80034e0:	40020000 	.word	0x40020000
 80034e4:	40003800 	.word	0x40003800
 80034e8:	40020400 	.word	0x40020400

080034ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a42      	ldr	r2, [pc, #264]	; (8003604 <HAL_TIM_Base_MspInit+0x118>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d147      	bne.n	800358e <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	4b41      	ldr	r3, [pc, #260]	; (8003608 <HAL_TIM_Base_MspInit+0x11c>)
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	4a40      	ldr	r2, [pc, #256]	; (8003608 <HAL_TIM_Base_MspInit+0x11c>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	6453      	str	r3, [r2, #68]	; 0x44
 800350e:	4b3e      	ldr	r3, [pc, #248]	; (8003608 <HAL_TIM_Base_MspInit+0x11c>)
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800351a:	4b3c      	ldr	r3, [pc, #240]	; (800360c <HAL_TIM_Base_MspInit+0x120>)
 800351c:	4a3c      	ldr	r2, [pc, #240]	; (8003610 <HAL_TIM_Base_MspInit+0x124>)
 800351e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8003520:	4b3a      	ldr	r3, [pc, #232]	; (800360c <HAL_TIM_Base_MspInit+0x120>)
 8003522:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8003526:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003528:	4b38      	ldr	r3, [pc, #224]	; (800360c <HAL_TIM_Base_MspInit+0x120>)
 800352a:	2240      	movs	r2, #64	; 0x40
 800352c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800352e:	4b37      	ldr	r3, [pc, #220]	; (800360c <HAL_TIM_Base_MspInit+0x120>)
 8003530:	2200      	movs	r2, #0
 8003532:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003534:	4b35      	ldr	r3, [pc, #212]	; (800360c <HAL_TIM_Base_MspInit+0x120>)
 8003536:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800353a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800353c:	4b33      	ldr	r3, [pc, #204]	; (800360c <HAL_TIM_Base_MspInit+0x120>)
 800353e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003542:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003544:	4b31      	ldr	r3, [pc, #196]	; (800360c <HAL_TIM_Base_MspInit+0x120>)
 8003546:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800354a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800354c:	4b2f      	ldr	r3, [pc, #188]	; (800360c <HAL_TIM_Base_MspInit+0x120>)
 800354e:	2200      	movs	r2, #0
 8003550:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003552:	4b2e      	ldr	r3, [pc, #184]	; (800360c <HAL_TIM_Base_MspInit+0x120>)
 8003554:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003558:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800355a:	4b2c      	ldr	r3, [pc, #176]	; (800360c <HAL_TIM_Base_MspInit+0x120>)
 800355c:	2200      	movs	r2, #0
 800355e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8003560:	482a      	ldr	r0, [pc, #168]	; (800360c <HAL_TIM_Base_MspInit+0x120>)
 8003562:	f000 fd39 	bl	8003fd8 <HAL_DMA_Init>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 800356c:	f7ff fd60 	bl	8003030 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a26      	ldr	r2, [pc, #152]	; (800360c <HAL_TIM_Base_MspInit+0x120>)
 8003574:	625a      	str	r2, [r3, #36]	; 0x24
 8003576:	4a25      	ldr	r2, [pc, #148]	; (800360c <HAL_TIM_Base_MspInit+0x120>)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800357c:	2200      	movs	r2, #0
 800357e:	2100      	movs	r1, #0
 8003580:	2019      	movs	r0, #25
 8003582:	f000 fcf2 	bl	8003f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003586:	2019      	movs	r0, #25
 8003588:	f000 fd0b 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800358c:	e036      	b.n	80035fc <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM4)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a20      	ldr	r2, [pc, #128]	; (8003614 <HAL_TIM_Base_MspInit+0x128>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d116      	bne.n	80035c6 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003598:	2300      	movs	r3, #0
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	4b1a      	ldr	r3, [pc, #104]	; (8003608 <HAL_TIM_Base_MspInit+0x11c>)
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	4a19      	ldr	r2, [pc, #100]	; (8003608 <HAL_TIM_Base_MspInit+0x11c>)
 80035a2:	f043 0304 	orr.w	r3, r3, #4
 80035a6:	6413      	str	r3, [r2, #64]	; 0x40
 80035a8:	4b17      	ldr	r3, [pc, #92]	; (8003608 <HAL_TIM_Base_MspInit+0x11c>)
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80035b4:	2200      	movs	r2, #0
 80035b6:	2100      	movs	r1, #0
 80035b8:	201e      	movs	r0, #30
 80035ba:	f000 fcd6 	bl	8003f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80035be:	201e      	movs	r0, #30
 80035c0:	f000 fcef 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
}
 80035c4:	e01a      	b.n	80035fc <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM10)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a13      	ldr	r2, [pc, #76]	; (8003618 <HAL_TIM_Base_MspInit+0x12c>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d115      	bne.n	80035fc <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80035d0:	2300      	movs	r3, #0
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <HAL_TIM_Base_MspInit+0x11c>)
 80035d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d8:	4a0b      	ldr	r2, [pc, #44]	; (8003608 <HAL_TIM_Base_MspInit+0x11c>)
 80035da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035de:	6453      	str	r3, [r2, #68]	; 0x44
 80035e0:	4b09      	ldr	r3, [pc, #36]	; (8003608 <HAL_TIM_Base_MspInit+0x11c>)
 80035e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80035ec:	2200      	movs	r2, #0
 80035ee:	2100      	movs	r1, #0
 80035f0:	2019      	movs	r0, #25
 80035f2:	f000 fcba 	bl	8003f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80035f6:	2019      	movs	r0, #25
 80035f8:	f000 fcd3 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
}
 80035fc:	bf00      	nop
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40010000 	.word	0x40010000
 8003608:	40023800 	.word	0x40023800
 800360c:	200008a8 	.word	0x200008a8
 8003610:	40026428 	.word	0x40026428
 8003614:	40000800 	.word	0x40000800
 8003618:	40014400 	.word	0x40014400

0800361c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	; 0x28
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003624:	f107 0314 	add.w	r3, r7, #20
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a25      	ldr	r2, [pc, #148]	; (80036d0 <HAL_TIM_MspPostInit+0xb4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d11f      	bne.n	800367e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800363e:	2300      	movs	r3, #0
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <HAL_TIM_MspPostInit+0xb8>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	4a23      	ldr	r2, [pc, #140]	; (80036d4 <HAL_TIM_MspPostInit+0xb8>)
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	6313      	str	r3, [r2, #48]	; 0x30
 800364e:	4b21      	ldr	r3, [pc, #132]	; (80036d4 <HAL_TIM_MspPostInit+0xb8>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800365a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800365e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003660:	2302      	movs	r3, #2
 8003662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003664:	2300      	movs	r3, #0
 8003666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003668:	2300      	movs	r3, #0
 800366a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800366c:	2301      	movs	r3, #1
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003670:	f107 0314 	add.w	r3, r7, #20
 8003674:	4619      	mov	r1, r3
 8003676:	4818      	ldr	r0, [pc, #96]	; (80036d8 <HAL_TIM_MspPostInit+0xbc>)
 8003678:	f001 f81e 	bl	80046b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 800367c:	e023      	b.n	80036c6 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM10)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a16      	ldr	r2, [pc, #88]	; (80036dc <HAL_TIM_MspPostInit+0xc0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d11e      	bne.n	80036c6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003688:	2300      	movs	r3, #0
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <HAL_TIM_MspPostInit+0xb8>)
 800368e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003690:	4a10      	ldr	r2, [pc, #64]	; (80036d4 <HAL_TIM_MspPostInit+0xb8>)
 8003692:	f043 0302 	orr.w	r3, r3, #2
 8003696:	6313      	str	r3, [r2, #48]	; 0x30
 8003698:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <HAL_TIM_MspPostInit+0xb8>)
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80036a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036aa:	2302      	movs	r3, #2
 80036ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b2:	2300      	movs	r3, #0
 80036b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80036b6:	2303      	movs	r3, #3
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ba:	f107 0314 	add.w	r3, r7, #20
 80036be:	4619      	mov	r1, r3
 80036c0:	4807      	ldr	r0, [pc, #28]	; (80036e0 <HAL_TIM_MspPostInit+0xc4>)
 80036c2:	f000 fff9 	bl	80046b8 <HAL_GPIO_Init>
}
 80036c6:	bf00      	nop
 80036c8:	3728      	adds	r7, #40	; 0x28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40010000 	.word	0x40010000
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40020000 	.word	0x40020000
 80036dc:	40014400 	.word	0x40014400
 80036e0:	40020400 	.word	0x40020400

080036e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08a      	sub	sp, #40	; 0x28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ec:	f107 0314 	add.w	r3, r7, #20
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	605a      	str	r2, [r3, #4]
 80036f6:	609a      	str	r2, [r3, #8]
 80036f8:	60da      	str	r2, [r3, #12]
 80036fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a19      	ldr	r2, [pc, #100]	; (8003768 <HAL_UART_MspInit+0x84>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d12c      	bne.n	8003760 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	4b18      	ldr	r3, [pc, #96]	; (800376c <HAL_UART_MspInit+0x88>)
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	4a17      	ldr	r2, [pc, #92]	; (800376c <HAL_UART_MspInit+0x88>)
 8003710:	f043 0310 	orr.w	r3, r3, #16
 8003714:	6453      	str	r3, [r2, #68]	; 0x44
 8003716:	4b15      	ldr	r3, [pc, #84]	; (800376c <HAL_UART_MspInit+0x88>)
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	4b11      	ldr	r3, [pc, #68]	; (800376c <HAL_UART_MspInit+0x88>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	4a10      	ldr	r2, [pc, #64]	; (800376c <HAL_UART_MspInit+0x88>)
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	6313      	str	r3, [r2, #48]	; 0x30
 8003732:	4b0e      	ldr	r3, [pc, #56]	; (800376c <HAL_UART_MspInit+0x88>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800373e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003744:	2302      	movs	r3, #2
 8003746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	2300      	movs	r3, #0
 800374a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800374c:	2303      	movs	r3, #3
 800374e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003750:	2307      	movs	r3, #7
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003754:	f107 0314 	add.w	r3, r7, #20
 8003758:	4619      	mov	r1, r3
 800375a:	4805      	ldr	r0, [pc, #20]	; (8003770 <HAL_UART_MspInit+0x8c>)
 800375c:	f000 ffac 	bl	80046b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003760:	bf00      	nop
 8003762:	3728      	adds	r7, #40	; 0x28
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40011000 	.word	0x40011000
 800376c:	40023800 	.word	0x40023800
 8003770:	40020000 	.word	0x40020000

08003774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003778:	e7fe      	b.n	8003778 <NMI_Handler+0x4>

0800377a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800377a:	b480      	push	{r7}
 800377c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800377e:	e7fe      	b.n	800377e <HardFault_Handler+0x4>

08003780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003784:	e7fe      	b.n	8003784 <MemManage_Handler+0x4>

08003786 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003786:	b480      	push	{r7}
 8003788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800378a:	e7fe      	b.n	800378a <BusFault_Handler+0x4>

0800378c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003790:	e7fe      	b.n	8003790 <UsageFault_Handler+0x4>

08003792 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003792:	b480      	push	{r7}
 8003794:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003796:	bf00      	nop
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037a4:	bf00      	nop
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037ae:	b480      	push	{r7}
 80037b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037b2:	bf00      	nop
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037c0:	f000 fab4 	bl	8003d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037c4:	bf00      	nop
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80037cc:	4803      	ldr	r0, [pc, #12]	; (80037dc <TIM1_UP_TIM10_IRQHandler+0x14>)
 80037ce:	f003 fd43 	bl	8007258 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80037d2:	4803      	ldr	r0, [pc, #12]	; (80037e0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80037d4:	f003 fd40 	bl	8007258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80037d8:	bf00      	nop
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	200007d0 	.word	0x200007d0
 80037e0:	20000860 	.word	0x20000860

080037e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80037e8:	4802      	ldr	r0, [pc, #8]	; (80037f4 <TIM4_IRQHandler+0x10>)
 80037ea:	f003 fd35 	bl	8007258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000818 	.word	0x20000818

080037f8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80037fc:	4802      	ldr	r0, [pc, #8]	; (8003808 <DMA2_Stream1_IRQHandler+0x10>)
 80037fe:	f000 fcf1 	bl	80041e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003802:	bf00      	nop
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	200008a8 	.word	0x200008a8

0800380c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003814:	4a14      	ldr	r2, [pc, #80]	; (8003868 <_sbrk+0x5c>)
 8003816:	4b15      	ldr	r3, [pc, #84]	; (800386c <_sbrk+0x60>)
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003820:	4b13      	ldr	r3, [pc, #76]	; (8003870 <_sbrk+0x64>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003828:	4b11      	ldr	r3, [pc, #68]	; (8003870 <_sbrk+0x64>)
 800382a:	4a12      	ldr	r2, [pc, #72]	; (8003874 <_sbrk+0x68>)
 800382c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800382e:	4b10      	ldr	r3, [pc, #64]	; (8003870 <_sbrk+0x64>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4413      	add	r3, r2
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	429a      	cmp	r2, r3
 800383a:	d207      	bcs.n	800384c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800383c:	f005 f848 	bl	80088d0 <__errno>
 8003840:	4603      	mov	r3, r0
 8003842:	220c      	movs	r2, #12
 8003844:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003846:	f04f 33ff 	mov.w	r3, #4294967295
 800384a:	e009      	b.n	8003860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800384c:	4b08      	ldr	r3, [pc, #32]	; (8003870 <_sbrk+0x64>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003852:	4b07      	ldr	r3, [pc, #28]	; (8003870 <_sbrk+0x64>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	4a05      	ldr	r2, [pc, #20]	; (8003870 <_sbrk+0x64>)
 800385c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800385e:	68fb      	ldr	r3, [r7, #12]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20010000 	.word	0x20010000
 800386c:	00000400 	.word	0x00000400
 8003870:	2000097c 	.word	0x2000097c
 8003874:	20007bb0 	.word	0x20007bb0

08003878 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800387c:	4b06      	ldr	r3, [pc, #24]	; (8003898 <SystemInit+0x20>)
 800387e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003882:	4a05      	ldr	r2, [pc, #20]	; (8003898 <SystemInit+0x20>)
 8003884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800388c:	bf00      	nop
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	e000ed00 	.word	0xe000ed00

0800389c <led_rgb_to_buf_dma>:
//void led_init(void) {
//	uint16_t i;
//	for (i = DELAY_LEN; i < ARRAY_LEN; i++) BUF_DMA[i] = LO;
//}

void led_rgb_to_buf_dma(uint8_t pixR, uint8_t pixG, uint8_t pixB, uint16_t posX) {
 800389c:	b490      	push	{r4, r7}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4604      	mov	r4, r0
 80038a4:	4608      	mov	r0, r1
 80038a6:	4611      	mov	r1, r2
 80038a8:	461a      	mov	r2, r3
 80038aa:	4623      	mov	r3, r4
 80038ac:	71fb      	strb	r3, [r7, #7]
 80038ae:	4603      	mov	r3, r0
 80038b0:	71bb      	strb	r3, [r7, #6]
 80038b2:	460b      	mov	r3, r1
 80038b4:	717b      	strb	r3, [r7, #5]
 80038b6:	4613      	mov	r3, r2
 80038b8:	807b      	strh	r3, [r7, #2]
	volatile uint16_t i;
	for (i = 0; i < 8; i++) {
 80038ba:	2300      	movs	r3, #0
 80038bc:	81fb      	strh	r3, [r7, #14]
 80038be:	e07a      	b.n	80039b6 <led_rgb_to_buf_dma+0x11a>
		if (BitIsSet(pixR,(7-i)) == 1) BUF_DMA[DELAY_LEN + posX * 24 + i + 8] = HI;
 80038c0:	79fa      	ldrb	r2, [r7, #7]
 80038c2:	89fb      	ldrh	r3, [r7, #14]
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	f1c3 0307 	rsb	r3, r3, #7
 80038ca:	fa42 f303 	asr.w	r3, r2, r3
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00e      	beq.n	80038f4 <led_rgb_to_buf_dma+0x58>
 80038d6:	887a      	ldrh	r2, [r7, #2]
 80038d8:	4613      	mov	r3, r2
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	4413      	add	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	3330      	adds	r3, #48	; 0x30
 80038e2:	89fa      	ldrh	r2, [r7, #14]
 80038e4:	b292      	uxth	r2, r2
 80038e6:	4413      	add	r3, r2
 80038e8:	3308      	adds	r3, #8
 80038ea:	4a38      	ldr	r2, [pc, #224]	; (80039cc <led_rgb_to_buf_dma+0x130>)
 80038ec:	2141      	movs	r1, #65	; 0x41
 80038ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80038f2:	e00d      	b.n	8003910 <led_rgb_to_buf_dma+0x74>
		else BUF_DMA[DELAY_LEN + posX * 24 + i + 8] = LO;
 80038f4:	887a      	ldrh	r2, [r7, #2]
 80038f6:	4613      	mov	r3, r2
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	4413      	add	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	3330      	adds	r3, #48	; 0x30
 8003900:	89fa      	ldrh	r2, [r7, #14]
 8003902:	b292      	uxth	r2, r2
 8003904:	4413      	add	r3, r2
 8003906:	3308      	adds	r3, #8
 8003908:	4a30      	ldr	r2, [pc, #192]	; (80039cc <led_rgb_to_buf_dma+0x130>)
 800390a:	211a      	movs	r1, #26
 800390c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		if (BitIsSet(pixG,(7-i)) == 1) BUF_DMA[DELAY_LEN + posX * 24 + i + 0] = HI;
 8003910:	79ba      	ldrb	r2, [r7, #6]
 8003912:	89fb      	ldrh	r3, [r7, #14]
 8003914:	b29b      	uxth	r3, r3
 8003916:	f1c3 0307 	rsb	r3, r3, #7
 800391a:	fa42 f303 	asr.w	r3, r2, r3
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00d      	beq.n	8003942 <led_rgb_to_buf_dma+0xa6>
 8003926:	887a      	ldrh	r2, [r7, #2]
 8003928:	4613      	mov	r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	4413      	add	r3, r2
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	3330      	adds	r3, #48	; 0x30
 8003932:	89fa      	ldrh	r2, [r7, #14]
 8003934:	b292      	uxth	r2, r2
 8003936:	4413      	add	r3, r2
 8003938:	4a24      	ldr	r2, [pc, #144]	; (80039cc <led_rgb_to_buf_dma+0x130>)
 800393a:	2141      	movs	r1, #65	; 0x41
 800393c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003940:	e00c      	b.n	800395c <led_rgb_to_buf_dma+0xc0>
		else BUF_DMA[DELAY_LEN + posX * 24 + i + 0] = LO;
 8003942:	887a      	ldrh	r2, [r7, #2]
 8003944:	4613      	mov	r3, r2
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	4413      	add	r3, r2
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	3330      	adds	r3, #48	; 0x30
 800394e:	89fa      	ldrh	r2, [r7, #14]
 8003950:	b292      	uxth	r2, r2
 8003952:	4413      	add	r3, r2
 8003954:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <led_rgb_to_buf_dma+0x130>)
 8003956:	211a      	movs	r1, #26
 8003958:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		if (BitIsSet(pixB,(7-i)) == 1) BUF_DMA[DELAY_LEN + posX * 24 + i + 16] = HI;
 800395c:	797a      	ldrb	r2, [r7, #5]
 800395e:	89fb      	ldrh	r3, [r7, #14]
 8003960:	b29b      	uxth	r3, r3
 8003962:	f1c3 0307 	rsb	r3, r3, #7
 8003966:	fa42 f303 	asr.w	r3, r2, r3
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00e      	beq.n	8003990 <led_rgb_to_buf_dma+0xf4>
 8003972:	887a      	ldrh	r2, [r7, #2]
 8003974:	4613      	mov	r3, r2
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	4413      	add	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	3330      	adds	r3, #48	; 0x30
 800397e:	89fa      	ldrh	r2, [r7, #14]
 8003980:	b292      	uxth	r2, r2
 8003982:	4413      	add	r3, r2
 8003984:	3310      	adds	r3, #16
 8003986:	4a11      	ldr	r2, [pc, #68]	; (80039cc <led_rgb_to_buf_dma+0x130>)
 8003988:	2141      	movs	r1, #65	; 0x41
 800398a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800398e:	e00d      	b.n	80039ac <led_rgb_to_buf_dma+0x110>
		else BUF_DMA[DELAY_LEN + posX * 24 + i + 16] = LO;
 8003990:	887a      	ldrh	r2, [r7, #2]
 8003992:	4613      	mov	r3, r2
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	4413      	add	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	3330      	adds	r3, #48	; 0x30
 800399c:	89fa      	ldrh	r2, [r7, #14]
 800399e:	b292      	uxth	r2, r2
 80039a0:	4413      	add	r3, r2
 80039a2:	3310      	adds	r3, #16
 80039a4:	4a09      	ldr	r2, [pc, #36]	; (80039cc <led_rgb_to_buf_dma+0x130>)
 80039a6:	211a      	movs	r1, #26
 80039a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < 8; i++) {
 80039ac:	89fb      	ldrh	r3, [r7, #14]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3301      	adds	r3, #1
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	81fb      	strh	r3, [r7, #14]
 80039b6:	89fb      	ldrh	r3, [r7, #14]
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b07      	cmp	r3, #7
 80039bc:	d980      	bls.n	80038c0 <led_rgb_to_buf_dma+0x24>
	}
}
 80039be:	bf00      	nop
 80039c0:	bf00      	nop
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc90      	pop	{r4, r7}
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	20000980 	.word	0x20000980

080039d0 <led_light>:
		led_rgb_to_buf_dma(rgb_t[13][0], rgb_t[13][1], rgb_t[13][2], n * 15 + 13);
		led_rgb_to_buf_dma(rgb_t[14][0], rgb_t[14][1], rgb_t[14][2], n * 15 + 14);
	}
}

void led_light(void) {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&TIM_LED, TIM_LED_CH, (uint32_t*) &BUF_DMA, ARRAY_LEN);
 80039d4:	f643 0370 	movw	r3, #14448	; 0x3870
 80039d8:	4a03      	ldr	r2, [pc, #12]	; (80039e8 <led_light+0x18>)
 80039da:	2100      	movs	r1, #0
 80039dc:	4803      	ldr	r0, [pc, #12]	; (80039ec <led_light+0x1c>)
 80039de:	f003 fa8b 	bl	8006ef8 <HAL_TIM_PWM_Start_DMA>
}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20000980 	.word	0x20000980
 80039ec:	200007d0 	.word	0x200007d0

080039f0 <remap>:
#include "xpt2046.h"

extern SPI_HandleTypeDef XPT2046_SPI;

inline static float remap(float x, float in_min, float in_max, float out_min, float out_max)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	ed87 0a05 	vstr	s0, [r7, #20]
 80039fa:	edc7 0a04 	vstr	s1, [r7, #16]
 80039fe:	ed87 1a03 	vstr	s2, [r7, #12]
 8003a02:	edc7 1a02 	vstr	s3, [r7, #8]
 8003a06:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003a0a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a16:	edd7 6a01 	vldr	s13, [r7, #4]
 8003a1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a1e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a22:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003a26:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a36:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a42:	371c      	adds	r7, #28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <XPT2046_Init>:

void XPT2046_Init(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&XPT2046_SPI, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 8003a50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a54:	2201      	movs	r2, #1
 8003a56:	2180      	movs	r1, #128	; 0x80
 8003a58:	4809      	ldr	r0, [pc, #36]	; (8003a80 <XPT2046_Init+0x34>)
 8003a5a:	f002 fc84 	bl	8006366 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 8003a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a62:	2201      	movs	r2, #1
 8003a64:	2100      	movs	r1, #0
 8003a66:	4806      	ldr	r0, [pc, #24]	; (8003a80 <XPT2046_Init+0x34>)
 8003a68:	f002 fc7d 	bl	8006366 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 8003a6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a70:	2201      	movs	r2, #1
 8003a72:	2100      	movs	r1, #0
 8003a74:	4802      	ldr	r0, [pc, #8]	; (8003a80 <XPT2046_Init+0x34>)
 8003a76:	f002 fc76 	bl	8006366 <HAL_SPI_Transmit>
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
}
 8003a7a:	bf00      	nop
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20000720 	.word	0x20000720

08003a84 <getRaw>:

uint16_t getRaw(uint8_t address)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_Delay(1);
 8003a8e:	2001      	movs	r0, #1
 8003a90:	f000 f96c 	bl	8003d6c <HAL_Delay>
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 8003a94:	1df9      	adds	r1, r7, #7
 8003a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	4814      	ldr	r0, [pc, #80]	; (8003af0 <getRaw+0x6c>)
 8003a9e:	f002 fc62 	bl	8006366 <HAL_SPI_Transmit>
	address = 0x00;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 8003aa6:	f107 020b 	add.w	r2, r7, #11
 8003aaa:	1df9      	adds	r1, r7, #7
 8003aac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	480e      	ldr	r0, [pc, #56]	; (8003af0 <getRaw+0x6c>)
 8003ab6:	f002 fd92 	bl	80065de <HAL_SPI_TransmitReceive>
	MSB = data;   
 8003aba:	7afb      	ldrb	r3, [r7, #11]
 8003abc:	81fb      	strh	r3, [r7, #14]
	address = 0x00;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 8003ac2:	f107 020b 	add.w	r2, r7, #11
 8003ac6:	1df9      	adds	r1, r7, #7
 8003ac8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	2301      	movs	r3, #1
 8003ad0:	4807      	ldr	r0, [pc, #28]	; (8003af0 <getRaw+0x6c>)
 8003ad2:	f002 fd84 	bl	80065de <HAL_SPI_TransmitReceive>
	LSB = data;
 8003ad6:	7afb      	ldrb	r3, [r7, #11]
 8003ad8:	81bb      	strh	r3, [r7, #12]
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
	return ((MSB << 8) | (LSB)) >> 3;
 8003ada:	89fb      	ldrh	r3, [r7, #14]
 8003adc:	021a      	lsls	r2, r3, #8
 8003ade:	89bb      	ldrh	r3, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	10db      	asrs	r3, r3, #3
 8003ae4:	b29b      	uxth	r3, r3
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20000720 	.word	0x20000720

08003af4 <X>:

inline static uint16_t X(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
	uint16_t x;
	x = (uint16_t) remap(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 8003afa:	20d0      	movs	r0, #208	; 0xd0
 8003afc:	f7ff ffc2 	bl	8003a84 <getRaw>
 8003b00:	4603      	mov	r3, r0
 8003b02:	ee07 3a90 	vmov	s15, r3
 8003b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b0a:	ed9f 2a12 	vldr	s4, [pc, #72]	; 8003b54 <X+0x60>
 8003b0e:	eddf 1a12 	vldr	s3, [pc, #72]	; 8003b58 <X+0x64>
 8003b12:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8003b5c <X+0x68>
 8003b16:	eddf 0a12 	vldr	s1, [pc, #72]	; 8003b60 <X+0x6c>
 8003b1a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b1e:	f7ff ff67 	bl	80039f0 <remap>
 8003b22:	eef0 7a40 	vmov.f32	s15, s0
 8003b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b2a:	ee17 3a90 	vmov	r3, s15
 8003b2e:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_X) x = OUT_MAX_X - x;
 8003b30:	88fb      	ldrh	r3, [r7, #6]
 8003b32:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8003b36:	80fb      	strh	r3, [r7, #6]
	if (x > OUT_MIN_X && x < OUT_MAX_X) return x;
 8003b38:	88fb      	ldrh	r3, [r7, #6]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d005      	beq.n	8003b4a <X+0x56>
 8003b3e:	88fb      	ldrh	r3, [r7, #6]
 8003b40:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003b44:	d201      	bcs.n	8003b4a <X+0x56>
 8003b46:	88fb      	ldrh	r3, [r7, #6]
 8003b48:	e000      	b.n	8003b4c <X+0x58>
	else return 0;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	43a00000 	.word	0x43a00000
 8003b58:	00000000 	.word	0x00000000
 8003b5c:	45610000 	.word	0x45610000
 8003b60:	43c80000 	.word	0x43c80000

08003b64 <Y>:

inline static uint16_t Y(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
	uint16_t y;
	y = (uint16_t) remap(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
 8003b6a:	2090      	movs	r0, #144	; 0x90
 8003b6c:	f7ff ff8a 	bl	8003a84 <getRaw>
 8003b70:	4603      	mov	r3, r0
 8003b72:	ee07 3a90 	vmov	s15, r3
 8003b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b7a:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8003bbc <Y+0x58>
 8003b7e:	eddf 1a10 	vldr	s3, [pc, #64]	; 8003bc0 <Y+0x5c>
 8003b82:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8003bc4 <Y+0x60>
 8003b86:	eddf 0a10 	vldr	s1, [pc, #64]	; 8003bc8 <Y+0x64>
 8003b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b8e:	f7ff ff2f 	bl	80039f0 <remap>
 8003b92:	eef0 7a40 	vmov.f32	s15, s0
 8003b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b9a:	ee17 3a90 	vmov	r3, s15
 8003b9e:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_Y) y = OUT_MAX_Y - y;
	if (y > OUT_MIN_Y && y < OUT_MAX_Y) return y;
 8003ba0:	88fb      	ldrh	r3, [r7, #6]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d005      	beq.n	8003bb2 <Y+0x4e>
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003bac:	d201      	bcs.n	8003bb2 <Y+0x4e>
 8003bae:	88fb      	ldrh	r3, [r7, #6]
 8003bb0:	e000      	b.n	8003bb4 <Y+0x50>
	else return 0;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	43f00000 	.word	0x43f00000
 8003bc0:	00000000 	.word	0x00000000
 8003bc4:	456a6000 	.word	0x456a6000
 8003bc8:	43480000 	.word	0x43480000

08003bcc <getX>:

uint16_t getX(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t x[2] = { 1, 2 };
 8003bd2:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <getX+0x30>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	607b      	str	r3, [r7, #4]
		while (x[0] != x[1])
 8003bd8:	e007      	b.n	8003bea <getX+0x1e>
		{
			if (XPT2046_REVERSED) { x[0] = Y(); x[1] = Y(); }
 8003bda:	f7ff ffc3 	bl	8003b64 <Y>
 8003bde:	4603      	mov	r3, r0
 8003be0:	80bb      	strh	r3, [r7, #4]
 8003be2:	f7ff ffbf 	bl	8003b64 <Y>
 8003be6:	4603      	mov	r3, r0
 8003be8:	80fb      	strh	r3, [r7, #6]
		while (x[0] != x[1])
 8003bea:	88ba      	ldrh	r2, [r7, #4]
 8003bec:	88fb      	ldrh	r3, [r7, #6]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d1f3      	bne.n	8003bda <getX+0xe>
			else { x[0] = X(); x[1] = X(); }
		}
		return x[0];
 8003bf2:	88bb      	ldrh	r3, [r7, #4]
	} 
	else if (XPT2046_REVERSED) return Y(); else return X();
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	080092b4 	.word	0x080092b4

08003c00 <getY>:

uint16_t getY(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t y[2] = { 1, 2 };
 8003c06:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <getY+0x30>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	607b      	str	r3, [r7, #4]
		while (y[0] != y[1])
 8003c0c:	e007      	b.n	8003c1e <getY+0x1e>
		{
			if (XPT2046_REVERSED) { y[0] = X(); y[1] = X(); }
 8003c0e:	f7ff ff71 	bl	8003af4 <X>
 8003c12:	4603      	mov	r3, r0
 8003c14:	80bb      	strh	r3, [r7, #4]
 8003c16:	f7ff ff6d 	bl	8003af4 <X>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	80fb      	strh	r3, [r7, #6]
		while (y[0] != y[1])
 8003c1e:	88ba      	ldrh	r2, [r7, #4]
 8003c20:	88fb      	ldrh	r3, [r7, #6]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d1f3      	bne.n	8003c0e <getY+0xe>
			else { y[0] = Y(); y[1] = Y(); }
		}
		return y[0];
 8003c26:	88bb      	ldrh	r3, [r7, #4]
	}
	else if (XPT2046_REVERSED) return X(); else return Y();
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	080092b4 	.word	0x080092b4

08003c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c38:	480d      	ldr	r0, [pc, #52]	; (8003c70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003c3a:	490e      	ldr	r1, [pc, #56]	; (8003c74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003c3c:	4a0e      	ldr	r2, [pc, #56]	; (8003c78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c40:	e002      	b.n	8003c48 <LoopCopyDataInit>

08003c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c46:	3304      	adds	r3, #4

08003c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c4c:	d3f9      	bcc.n	8003c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c4e:	4a0b      	ldr	r2, [pc, #44]	; (8003c7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c50:	4c0b      	ldr	r4, [pc, #44]	; (8003c80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c54:	e001      	b.n	8003c5a <LoopFillZerobss>

08003c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c58:	3204      	adds	r2, #4

08003c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c5c:	d3fb      	bcc.n	8003c56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c5e:	f7ff fe0b 	bl	8003878 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c62:	f004 fe3b 	bl	80088dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c66:	f7fe fca7 	bl	80025b8 <main>
  bx  lr    
 8003c6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c6c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c74:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8003c78:	08009c3c 	.word	0x08009c3c
  ldr r2, =_sbss
 8003c7c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8003c80:	20007bac 	.word	0x20007bac

08003c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c84:	e7fe      	b.n	8003c84 <ADC_IRQHandler>
	...

08003c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c8c:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <HAL_Init+0x40>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a0d      	ldr	r2, [pc, #52]	; (8003cc8 <HAL_Init+0x40>)
 8003c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_Init+0x40>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a0a      	ldr	r2, [pc, #40]	; (8003cc8 <HAL_Init+0x40>)
 8003c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ca4:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <HAL_Init+0x40>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a07      	ldr	r2, [pc, #28]	; (8003cc8 <HAL_Init+0x40>)
 8003caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cb0:	2003      	movs	r0, #3
 8003cb2:	f000 f94f 	bl	8003f54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cb6:	200f      	movs	r0, #15
 8003cb8:	f000 f808 	bl	8003ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cbc:	f7ff fb28 	bl	8003310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40023c00 	.word	0x40023c00

08003ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cd4:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <HAL_InitTick+0x54>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	4b12      	ldr	r3, [pc, #72]	; (8003d24 <HAL_InitTick+0x58>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	4619      	mov	r1, r3
 8003cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 f967 	bl	8003fbe <HAL_SYSTICK_Config>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e00e      	b.n	8003d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b0f      	cmp	r3, #15
 8003cfe:	d80a      	bhi.n	8003d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d00:	2200      	movs	r2, #0
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	f04f 30ff 	mov.w	r0, #4294967295
 8003d08:	f000 f92f 	bl	8003f6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d0c:	4a06      	ldr	r2, [pc, #24]	; (8003d28 <HAL_InitTick+0x5c>)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	e000      	b.n	8003d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	2000000c 	.word	0x2000000c
 8003d24:	20000014 	.word	0x20000014
 8003d28:	20000010 	.word	0x20000010

08003d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d30:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <HAL_IncTick+0x20>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <HAL_IncTick+0x24>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	4a04      	ldr	r2, [pc, #16]	; (8003d50 <HAL_IncTick+0x24>)
 8003d3e:	6013      	str	r3, [r2, #0]
}
 8003d40:	bf00      	nop
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	20000014 	.word	0x20000014
 8003d50:	20007a60 	.word	0x20007a60

08003d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  return uwTick;
 8003d58:	4b03      	ldr	r3, [pc, #12]	; (8003d68 <HAL_GetTick+0x14>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	20007a60 	.word	0x20007a60

08003d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d74:	f7ff ffee 	bl	8003d54 <HAL_GetTick>
 8003d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d84:	d005      	beq.n	8003d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d86:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <HAL_Delay+0x44>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4413      	add	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d92:	bf00      	nop
 8003d94:	f7ff ffde 	bl	8003d54 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d8f7      	bhi.n	8003d94 <HAL_Delay+0x28>
  {
  }
}
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20000014 	.word	0x20000014

08003db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dc4:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <__NVIC_SetPriorityGrouping+0x44>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003de6:	4a04      	ldr	r2, [pc, #16]	; (8003df8 <__NVIC_SetPriorityGrouping+0x44>)
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	60d3      	str	r3, [r2, #12]
}
 8003dec:	bf00      	nop
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	e000ed00 	.word	0xe000ed00

08003dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e00:	4b04      	ldr	r3, [pc, #16]	; (8003e14 <__NVIC_GetPriorityGrouping+0x18>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	0a1b      	lsrs	r3, r3, #8
 8003e06:	f003 0307 	and.w	r3, r3, #7
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	e000ed00 	.word	0xe000ed00

08003e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	db0b      	blt.n	8003e42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e2a:	79fb      	ldrb	r3, [r7, #7]
 8003e2c:	f003 021f 	and.w	r2, r3, #31
 8003e30:	4907      	ldr	r1, [pc, #28]	; (8003e50 <__NVIC_EnableIRQ+0x38>)
 8003e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e36:	095b      	lsrs	r3, r3, #5
 8003e38:	2001      	movs	r0, #1
 8003e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	e000e100 	.word	0xe000e100

08003e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	6039      	str	r1, [r7, #0]
 8003e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	db0a      	blt.n	8003e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	490c      	ldr	r1, [pc, #48]	; (8003ea0 <__NVIC_SetPriority+0x4c>)
 8003e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e72:	0112      	lsls	r2, r2, #4
 8003e74:	b2d2      	uxtb	r2, r2
 8003e76:	440b      	add	r3, r1
 8003e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e7c:	e00a      	b.n	8003e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	4908      	ldr	r1, [pc, #32]	; (8003ea4 <__NVIC_SetPriority+0x50>)
 8003e84:	79fb      	ldrb	r3, [r7, #7]
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	3b04      	subs	r3, #4
 8003e8c:	0112      	lsls	r2, r2, #4
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	440b      	add	r3, r1
 8003e92:	761a      	strb	r2, [r3, #24]
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	e000e100 	.word	0xe000e100
 8003ea4:	e000ed00 	.word	0xe000ed00

08003ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b089      	sub	sp, #36	; 0x24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	f1c3 0307 	rsb	r3, r3, #7
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	bf28      	it	cs
 8003ec6:	2304      	movcs	r3, #4
 8003ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	2b06      	cmp	r3, #6
 8003ed0:	d902      	bls.n	8003ed8 <NVIC_EncodePriority+0x30>
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	3b03      	subs	r3, #3
 8003ed6:	e000      	b.n	8003eda <NVIC_EncodePriority+0x32>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003edc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	43da      	mvns	r2, r3
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	401a      	ands	r2, r3
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8003efa:	43d9      	mvns	r1, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f00:	4313      	orrs	r3, r2
         );
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3724      	adds	r7, #36	; 0x24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
	...

08003f10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f20:	d301      	bcc.n	8003f26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f22:	2301      	movs	r3, #1
 8003f24:	e00f      	b.n	8003f46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f26:	4a0a      	ldr	r2, [pc, #40]	; (8003f50 <SysTick_Config+0x40>)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f2e:	210f      	movs	r1, #15
 8003f30:	f04f 30ff 	mov.w	r0, #4294967295
 8003f34:	f7ff ff8e 	bl	8003e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f38:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <SysTick_Config+0x40>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f3e:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <SysTick_Config+0x40>)
 8003f40:	2207      	movs	r2, #7
 8003f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	e000e010 	.word	0xe000e010

08003f54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff ff29 	bl	8003db4 <__NVIC_SetPriorityGrouping>
}
 8003f62:	bf00      	nop
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b086      	sub	sp, #24
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	4603      	mov	r3, r0
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	607a      	str	r2, [r7, #4]
 8003f76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f7c:	f7ff ff3e 	bl	8003dfc <__NVIC_GetPriorityGrouping>
 8003f80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	6978      	ldr	r0, [r7, #20]
 8003f88:	f7ff ff8e 	bl	8003ea8 <NVIC_EncodePriority>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f92:	4611      	mov	r1, r2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff ff5d 	bl	8003e54 <__NVIC_SetPriority>
}
 8003f9a:	bf00      	nop
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	4603      	mov	r3, r0
 8003faa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff ff31 	bl	8003e18 <__NVIC_EnableIRQ>
}
 8003fb6:	bf00      	nop
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b082      	sub	sp, #8
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7ff ffa2 	bl	8003f10 <SysTick_Config>
 8003fcc:	4603      	mov	r3, r0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003fe4:	f7ff feb6 	bl	8003d54 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e099      	b.n	8004128 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0201 	bic.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004014:	e00f      	b.n	8004036 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004016:	f7ff fe9d 	bl	8003d54 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b05      	cmp	r3, #5
 8004022:	d908      	bls.n	8004036 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2220      	movs	r2, #32
 8004028:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2203      	movs	r2, #3
 800402e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e078      	b.n	8004128 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1e8      	bne.n	8004016 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	4b38      	ldr	r3, [pc, #224]	; (8004130 <HAL_DMA_Init+0x158>)
 8004050:	4013      	ands	r3, r2
 8004052:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004062:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800406e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800407a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	2b04      	cmp	r3, #4
 800408e:	d107      	bne.n	80040a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	4313      	orrs	r3, r2
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	4313      	orrs	r3, r2
 800409e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f023 0307 	bic.w	r3, r3, #7
 80040b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	4313      	orrs	r3, r2
 80040c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d117      	bne.n	80040fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00e      	beq.n	80040fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fa6f 	bl	80045c0 <DMA_CheckFifoParam>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d008      	beq.n	80040fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2240      	movs	r2, #64	; 0x40
 80040ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80040f6:	2301      	movs	r3, #1
 80040f8:	e016      	b.n	8004128 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 fa26 	bl	8004554 <DMA_CalcBaseAndBitshift>
 8004108:	4603      	mov	r3, r0
 800410a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004110:	223f      	movs	r2, #63	; 0x3f
 8004112:	409a      	lsls	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	f010803f 	.word	0xf010803f

08004134 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
 8004140:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_DMA_Start_IT+0x26>
 8004156:	2302      	movs	r3, #2
 8004158:	e040      	b.n	80041dc <HAL_DMA_Start_IT+0xa8>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b01      	cmp	r3, #1
 800416c:	d12f      	bne.n	80041ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2202      	movs	r2, #2
 8004172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68b9      	ldr	r1, [r7, #8]
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f9b8 	bl	80044f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418c:	223f      	movs	r2, #63	; 0x3f
 800418e:	409a      	lsls	r2, r3
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0216 	orr.w	r2, r2, #22
 80041a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d007      	beq.n	80041bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0208 	orr.w	r2, r2, #8
 80041ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	e005      	b.n	80041da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80041d6:	2302      	movs	r3, #2
 80041d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80041da:	7dfb      	ldrb	r3, [r7, #23]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041f0:	4b8e      	ldr	r3, [pc, #568]	; (800442c <HAL_DMA_IRQHandler+0x248>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a8e      	ldr	r2, [pc, #568]	; (8004430 <HAL_DMA_IRQHandler+0x24c>)
 80041f6:	fba2 2303 	umull	r2, r3, r2, r3
 80041fa:	0a9b      	lsrs	r3, r3, #10
 80041fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004202:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420e:	2208      	movs	r2, #8
 8004210:	409a      	lsls	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4013      	ands	r3, r2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d01a      	beq.n	8004250 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	d013      	beq.n	8004250 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0204 	bic.w	r2, r2, #4
 8004236:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423c:	2208      	movs	r2, #8
 800423e:	409a      	lsls	r2, r3
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004248:	f043 0201 	orr.w	r2, r3, #1
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004254:	2201      	movs	r2, #1
 8004256:	409a      	lsls	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4013      	ands	r3, r2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d012      	beq.n	8004286 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00b      	beq.n	8004286 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004272:	2201      	movs	r2, #1
 8004274:	409a      	lsls	r2, r3
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427e:	f043 0202 	orr.w	r2, r3, #2
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428a:	2204      	movs	r2, #4
 800428c:	409a      	lsls	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	4013      	ands	r3, r2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d012      	beq.n	80042bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00b      	beq.n	80042bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a8:	2204      	movs	r2, #4
 80042aa:	409a      	lsls	r2, r3
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b4:	f043 0204 	orr.w	r2, r3, #4
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c0:	2210      	movs	r2, #16
 80042c2:	409a      	lsls	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4013      	ands	r3, r2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d043      	beq.n	8004354 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d03c      	beq.n	8004354 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042de:	2210      	movs	r2, #16
 80042e0:	409a      	lsls	r2, r3
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d018      	beq.n	8004326 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d108      	bne.n	8004314 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	2b00      	cmp	r3, #0
 8004308:	d024      	beq.n	8004354 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	4798      	blx	r3
 8004312:	e01f      	b.n	8004354 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004318:	2b00      	cmp	r3, #0
 800431a:	d01b      	beq.n	8004354 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	4798      	blx	r3
 8004324:	e016      	b.n	8004354 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004330:	2b00      	cmp	r3, #0
 8004332:	d107      	bne.n	8004344 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 0208 	bic.w	r2, r2, #8
 8004342:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004358:	2220      	movs	r2, #32
 800435a:	409a      	lsls	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4013      	ands	r3, r2
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 808f 	beq.w	8004484 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0310 	and.w	r3, r3, #16
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 8087 	beq.w	8004484 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437a:	2220      	movs	r2, #32
 800437c:	409a      	lsls	r2, r3
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b05      	cmp	r3, #5
 800438c:	d136      	bne.n	80043fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0216 	bic.w	r2, r2, #22
 800439c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695a      	ldr	r2, [r3, #20]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d103      	bne.n	80043be <HAL_DMA_IRQHandler+0x1da>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d007      	beq.n	80043ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0208 	bic.w	r2, r2, #8
 80043cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d2:	223f      	movs	r2, #63	; 0x3f
 80043d4:	409a      	lsls	r2, r3
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d07e      	beq.n	80044f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	4798      	blx	r3
        }
        return;
 80043fa:	e079      	b.n	80044f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d01d      	beq.n	8004446 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10d      	bne.n	8004434 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441c:	2b00      	cmp	r3, #0
 800441e:	d031      	beq.n	8004484 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	4798      	blx	r3
 8004428:	e02c      	b.n	8004484 <HAL_DMA_IRQHandler+0x2a0>
 800442a:	bf00      	nop
 800442c:	2000000c 	.word	0x2000000c
 8004430:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004438:	2b00      	cmp	r3, #0
 800443a:	d023      	beq.n	8004484 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	4798      	blx	r3
 8004444:	e01e      	b.n	8004484 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10f      	bne.n	8004474 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 0210 	bic.w	r2, r2, #16
 8004462:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004488:	2b00      	cmp	r3, #0
 800448a:	d032      	beq.n	80044f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	d022      	beq.n	80044de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2205      	movs	r2, #5
 800449c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0201 	bic.w	r2, r2, #1
 80044ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	3301      	adds	r3, #1
 80044b4:	60bb      	str	r3, [r7, #8]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d307      	bcc.n	80044cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1f2      	bne.n	80044b0 <HAL_DMA_IRQHandler+0x2cc>
 80044ca:	e000      	b.n	80044ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80044cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d005      	beq.n	80044f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	4798      	blx	r3
 80044ee:	e000      	b.n	80044f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80044f0:	bf00      	nop
    }
  }
}
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004514:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	2b40      	cmp	r3, #64	; 0x40
 8004524:	d108      	bne.n	8004538 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004536:	e007      	b.n	8004548 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	60da      	str	r2, [r3, #12]
}
 8004548:	bf00      	nop
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	b2db      	uxtb	r3, r3
 8004562:	3b10      	subs	r3, #16
 8004564:	4a14      	ldr	r2, [pc, #80]	; (80045b8 <DMA_CalcBaseAndBitshift+0x64>)
 8004566:	fba2 2303 	umull	r2, r3, r2, r3
 800456a:	091b      	lsrs	r3, r3, #4
 800456c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800456e:	4a13      	ldr	r2, [pc, #76]	; (80045bc <DMA_CalcBaseAndBitshift+0x68>)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4413      	add	r3, r2
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2b03      	cmp	r3, #3
 8004580:	d909      	bls.n	8004596 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800458a:	f023 0303 	bic.w	r3, r3, #3
 800458e:	1d1a      	adds	r2, r3, #4
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	659a      	str	r2, [r3, #88]	; 0x58
 8004594:	e007      	b.n	80045a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800459e:	f023 0303 	bic.w	r3, r3, #3
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	aaaaaaab 	.word	0xaaaaaaab
 80045bc:	08009bf0 	.word	0x08009bf0

080045c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d11f      	bne.n	800461a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b03      	cmp	r3, #3
 80045de:	d856      	bhi.n	800468e <DMA_CheckFifoParam+0xce>
 80045e0:	a201      	add	r2, pc, #4	; (adr r2, 80045e8 <DMA_CheckFifoParam+0x28>)
 80045e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e6:	bf00      	nop
 80045e8:	080045f9 	.word	0x080045f9
 80045ec:	0800460b 	.word	0x0800460b
 80045f0:	080045f9 	.word	0x080045f9
 80045f4:	0800468f 	.word	0x0800468f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d046      	beq.n	8004692 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004608:	e043      	b.n	8004692 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004612:	d140      	bne.n	8004696 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004618:	e03d      	b.n	8004696 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004622:	d121      	bne.n	8004668 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b03      	cmp	r3, #3
 8004628:	d837      	bhi.n	800469a <DMA_CheckFifoParam+0xda>
 800462a:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <DMA_CheckFifoParam+0x70>)
 800462c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004630:	08004641 	.word	0x08004641
 8004634:	08004647 	.word	0x08004647
 8004638:	08004641 	.word	0x08004641
 800463c:	08004659 	.word	0x08004659
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	73fb      	strb	r3, [r7, #15]
      break;
 8004644:	e030      	b.n	80046a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d025      	beq.n	800469e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004656:	e022      	b.n	800469e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004660:	d11f      	bne.n	80046a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004666:	e01c      	b.n	80046a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d903      	bls.n	8004676 <DMA_CheckFifoParam+0xb6>
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b03      	cmp	r3, #3
 8004672:	d003      	beq.n	800467c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004674:	e018      	b.n	80046a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	73fb      	strb	r3, [r7, #15]
      break;
 800467a:	e015      	b.n	80046a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00e      	beq.n	80046a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	73fb      	strb	r3, [r7, #15]
      break;
 800468c:	e00b      	b.n	80046a6 <DMA_CheckFifoParam+0xe6>
      break;
 800468e:	bf00      	nop
 8004690:	e00a      	b.n	80046a8 <DMA_CheckFifoParam+0xe8>
      break;
 8004692:	bf00      	nop
 8004694:	e008      	b.n	80046a8 <DMA_CheckFifoParam+0xe8>
      break;
 8004696:	bf00      	nop
 8004698:	e006      	b.n	80046a8 <DMA_CheckFifoParam+0xe8>
      break;
 800469a:	bf00      	nop
 800469c:	e004      	b.n	80046a8 <DMA_CheckFifoParam+0xe8>
      break;
 800469e:	bf00      	nop
 80046a0:	e002      	b.n	80046a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80046a2:	bf00      	nop
 80046a4:	e000      	b.n	80046a8 <DMA_CheckFifoParam+0xe8>
      break;
 80046a6:	bf00      	nop
    }
  } 
  
  return status; 
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop

080046b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b089      	sub	sp, #36	; 0x24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046ce:	2300      	movs	r3, #0
 80046d0:	61fb      	str	r3, [r7, #28]
 80046d2:	e159      	b.n	8004988 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046d4:	2201      	movs	r2, #1
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	4013      	ands	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	f040 8148 	bne.w	8004982 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d005      	beq.n	800470a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004706:	2b02      	cmp	r3, #2
 8004708:	d130      	bne.n	800476c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	2203      	movs	r2, #3
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	43db      	mvns	r3, r3
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	4013      	ands	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	fa02 f303 	lsl.w	r3, r2, r3
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	4313      	orrs	r3, r2
 8004732:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004740:	2201      	movs	r2, #1
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	43db      	mvns	r3, r3
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	4013      	ands	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	091b      	lsrs	r3, r3, #4
 8004756:	f003 0201 	and.w	r2, r3, #1
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	4313      	orrs	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f003 0303 	and.w	r3, r3, #3
 8004774:	2b03      	cmp	r3, #3
 8004776:	d017      	beq.n	80047a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	2203      	movs	r2, #3
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	43db      	mvns	r3, r3
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	4013      	ands	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4313      	orrs	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f003 0303 	and.w	r3, r3, #3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d123      	bne.n	80047fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	08da      	lsrs	r2, r3, #3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3208      	adds	r2, #8
 80047bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	220f      	movs	r2, #15
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	43db      	mvns	r3, r3
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	4013      	ands	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	691a      	ldr	r2, [r3, #16]
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	08da      	lsrs	r2, r3, #3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	3208      	adds	r2, #8
 80047f6:	69b9      	ldr	r1, [r7, #24]
 80047f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	2203      	movs	r2, #3
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	43db      	mvns	r3, r3
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	4013      	ands	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f003 0203 	and.w	r2, r3, #3
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4313      	orrs	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80a2 	beq.w	8004982 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	4b57      	ldr	r3, [pc, #348]	; (80049a0 <HAL_GPIO_Init+0x2e8>)
 8004844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004846:	4a56      	ldr	r2, [pc, #344]	; (80049a0 <HAL_GPIO_Init+0x2e8>)
 8004848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800484c:	6453      	str	r3, [r2, #68]	; 0x44
 800484e:	4b54      	ldr	r3, [pc, #336]	; (80049a0 <HAL_GPIO_Init+0x2e8>)
 8004850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800485a:	4a52      	ldr	r2, [pc, #328]	; (80049a4 <HAL_GPIO_Init+0x2ec>)
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	089b      	lsrs	r3, r3, #2
 8004860:	3302      	adds	r3, #2
 8004862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	220f      	movs	r2, #15
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	43db      	mvns	r3, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4013      	ands	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a49      	ldr	r2, [pc, #292]	; (80049a8 <HAL_GPIO_Init+0x2f0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d019      	beq.n	80048ba <HAL_GPIO_Init+0x202>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a48      	ldr	r2, [pc, #288]	; (80049ac <HAL_GPIO_Init+0x2f4>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d013      	beq.n	80048b6 <HAL_GPIO_Init+0x1fe>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a47      	ldr	r2, [pc, #284]	; (80049b0 <HAL_GPIO_Init+0x2f8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d00d      	beq.n	80048b2 <HAL_GPIO_Init+0x1fa>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a46      	ldr	r2, [pc, #280]	; (80049b4 <HAL_GPIO_Init+0x2fc>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d007      	beq.n	80048ae <HAL_GPIO_Init+0x1f6>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a45      	ldr	r2, [pc, #276]	; (80049b8 <HAL_GPIO_Init+0x300>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d101      	bne.n	80048aa <HAL_GPIO_Init+0x1f2>
 80048a6:	2304      	movs	r3, #4
 80048a8:	e008      	b.n	80048bc <HAL_GPIO_Init+0x204>
 80048aa:	2307      	movs	r3, #7
 80048ac:	e006      	b.n	80048bc <HAL_GPIO_Init+0x204>
 80048ae:	2303      	movs	r3, #3
 80048b0:	e004      	b.n	80048bc <HAL_GPIO_Init+0x204>
 80048b2:	2302      	movs	r3, #2
 80048b4:	e002      	b.n	80048bc <HAL_GPIO_Init+0x204>
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <HAL_GPIO_Init+0x204>
 80048ba:	2300      	movs	r3, #0
 80048bc:	69fa      	ldr	r2, [r7, #28]
 80048be:	f002 0203 	and.w	r2, r2, #3
 80048c2:	0092      	lsls	r2, r2, #2
 80048c4:	4093      	lsls	r3, r2
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048cc:	4935      	ldr	r1, [pc, #212]	; (80049a4 <HAL_GPIO_Init+0x2ec>)
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	089b      	lsrs	r3, r3, #2
 80048d2:	3302      	adds	r3, #2
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048da:	4b38      	ldr	r3, [pc, #224]	; (80049bc <HAL_GPIO_Init+0x304>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	43db      	mvns	r3, r3
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	4013      	ands	r3, r2
 80048e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048fe:	4a2f      	ldr	r2, [pc, #188]	; (80049bc <HAL_GPIO_Init+0x304>)
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004904:	4b2d      	ldr	r3, [pc, #180]	; (80049bc <HAL_GPIO_Init+0x304>)
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	43db      	mvns	r3, r3
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	4013      	ands	r3, r2
 8004912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	4313      	orrs	r3, r2
 8004926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004928:	4a24      	ldr	r2, [pc, #144]	; (80049bc <HAL_GPIO_Init+0x304>)
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800492e:	4b23      	ldr	r3, [pc, #140]	; (80049bc <HAL_GPIO_Init+0x304>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	43db      	mvns	r3, r3
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	4013      	ands	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	4313      	orrs	r3, r2
 8004950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004952:	4a1a      	ldr	r2, [pc, #104]	; (80049bc <HAL_GPIO_Init+0x304>)
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004958:	4b18      	ldr	r3, [pc, #96]	; (80049bc <HAL_GPIO_Init+0x304>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	43db      	mvns	r3, r3
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	4013      	ands	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d003      	beq.n	800497c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	4313      	orrs	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800497c:	4a0f      	ldr	r2, [pc, #60]	; (80049bc <HAL_GPIO_Init+0x304>)
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	3301      	adds	r3, #1
 8004986:	61fb      	str	r3, [r7, #28]
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	2b0f      	cmp	r3, #15
 800498c:	f67f aea2 	bls.w	80046d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004990:	bf00      	nop
 8004992:	bf00      	nop
 8004994:	3724      	adds	r7, #36	; 0x24
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40023800 	.word	0x40023800
 80049a4:	40013800 	.word	0x40013800
 80049a8:	40020000 	.word	0x40020000
 80049ac:	40020400 	.word	0x40020400
 80049b0:	40020800 	.word	0x40020800
 80049b4:	40020c00 	.word	0x40020c00
 80049b8:	40021000 	.word	0x40021000
 80049bc:	40013c00 	.word	0x40013c00

080049c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	887b      	ldrh	r3, [r7, #2]
 80049d2:	4013      	ands	r3, r2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049d8:	2301      	movs	r3, #1
 80049da:	73fb      	strb	r3, [r7, #15]
 80049dc:	e001      	b.n	80049e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049de:	2300      	movs	r3, #0
 80049e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	460b      	mov	r3, r1
 80049fa:	807b      	strh	r3, [r7, #2]
 80049fc:	4613      	mov	r3, r2
 80049fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a00:	787b      	ldrb	r3, [r7, #1]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a06:	887a      	ldrh	r2, [r7, #2]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a0c:	e003      	b.n	8004a16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a0e:	887b      	ldrh	r3, [r7, #2]
 8004a10:	041a      	lsls	r2, r3, #16
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	619a      	str	r2, [r3, #24]
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
	...

08004a24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e12b      	b.n	8004c8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d106      	bne.n	8004a50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7fe fc88 	bl	8003360 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2224      	movs	r2, #36	; 0x24
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0201 	bic.w	r2, r2, #1
 8004a66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a88:	f001 fbbc 	bl	8006204 <HAL_RCC_GetPCLK1Freq>
 8004a8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	4a81      	ldr	r2, [pc, #516]	; (8004c98 <HAL_I2C_Init+0x274>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d807      	bhi.n	8004aa8 <HAL_I2C_Init+0x84>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4a80      	ldr	r2, [pc, #512]	; (8004c9c <HAL_I2C_Init+0x278>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	bf94      	ite	ls
 8004aa0:	2301      	movls	r3, #1
 8004aa2:	2300      	movhi	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	e006      	b.n	8004ab6 <HAL_I2C_Init+0x92>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4a7d      	ldr	r2, [pc, #500]	; (8004ca0 <HAL_I2C_Init+0x27c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	bf94      	ite	ls
 8004ab0:	2301      	movls	r3, #1
 8004ab2:	2300      	movhi	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e0e7      	b.n	8004c8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4a78      	ldr	r2, [pc, #480]	; (8004ca4 <HAL_I2C_Init+0x280>)
 8004ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac6:	0c9b      	lsrs	r3, r3, #18
 8004ac8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	4a6a      	ldr	r2, [pc, #424]	; (8004c98 <HAL_I2C_Init+0x274>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d802      	bhi.n	8004af8 <HAL_I2C_Init+0xd4>
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	3301      	adds	r3, #1
 8004af6:	e009      	b.n	8004b0c <HAL_I2C_Init+0xe8>
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004afe:	fb02 f303 	mul.w	r3, r2, r3
 8004b02:	4a69      	ldr	r2, [pc, #420]	; (8004ca8 <HAL_I2C_Init+0x284>)
 8004b04:	fba2 2303 	umull	r2, r3, r2, r3
 8004b08:	099b      	lsrs	r3, r3, #6
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6812      	ldr	r2, [r2, #0]
 8004b10:	430b      	orrs	r3, r1
 8004b12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	495c      	ldr	r1, [pc, #368]	; (8004c98 <HAL_I2C_Init+0x274>)
 8004b28:	428b      	cmp	r3, r1
 8004b2a:	d819      	bhi.n	8004b60 <HAL_I2C_Init+0x13c>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	1e59      	subs	r1, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b3a:	1c59      	adds	r1, r3, #1
 8004b3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b40:	400b      	ands	r3, r1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <HAL_I2C_Init+0x138>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	1e59      	subs	r1, r3, #1
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b54:	3301      	adds	r3, #1
 8004b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b5a:	e051      	b.n	8004c00 <HAL_I2C_Init+0x1dc>
 8004b5c:	2304      	movs	r3, #4
 8004b5e:	e04f      	b.n	8004c00 <HAL_I2C_Init+0x1dc>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d111      	bne.n	8004b8c <HAL_I2C_Init+0x168>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	1e58      	subs	r0, r3, #1
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6859      	ldr	r1, [r3, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	440b      	add	r3, r1
 8004b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	bf0c      	ite	eq
 8004b84:	2301      	moveq	r3, #1
 8004b86:	2300      	movne	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	e012      	b.n	8004bb2 <HAL_I2C_Init+0x18e>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	1e58      	subs	r0, r3, #1
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6859      	ldr	r1, [r3, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	0099      	lsls	r1, r3, #2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	bf0c      	ite	eq
 8004bac:	2301      	moveq	r3, #1
 8004bae:	2300      	movne	r3, #0
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <HAL_I2C_Init+0x196>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e022      	b.n	8004c00 <HAL_I2C_Init+0x1dc>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10e      	bne.n	8004be0 <HAL_I2C_Init+0x1bc>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	1e58      	subs	r0, r3, #1
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6859      	ldr	r1, [r3, #4]
 8004bca:	460b      	mov	r3, r1
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	440b      	add	r3, r1
 8004bd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bde:	e00f      	b.n	8004c00 <HAL_I2C_Init+0x1dc>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	1e58      	subs	r0, r3, #1
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6859      	ldr	r1, [r3, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	440b      	add	r3, r1
 8004bee:	0099      	lsls	r1, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	6809      	ldr	r1, [r1, #0]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	69da      	ldr	r2, [r3, #28]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6911      	ldr	r1, [r2, #16]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	68d2      	ldr	r2, [r2, #12]
 8004c3a:	4311      	orrs	r1, r2
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6812      	ldr	r2, [r2, #0]
 8004c40:	430b      	orrs	r3, r1
 8004c42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	695a      	ldr	r2, [r3, #20]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0201 	orr.w	r2, r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	000186a0 	.word	0x000186a0
 8004c9c:	001e847f 	.word	0x001e847f
 8004ca0:	003d08ff 	.word	0x003d08ff
 8004ca4:	431bde83 	.word	0x431bde83
 8004ca8:	10624dd3 	.word	0x10624dd3

08004cac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b088      	sub	sp, #32
 8004cb0:	af02      	add	r7, sp, #8
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	4608      	mov	r0, r1
 8004cb6:	4611      	mov	r1, r2
 8004cb8:	461a      	mov	r2, r3
 8004cba:	4603      	mov	r3, r0
 8004cbc:	817b      	strh	r3, [r7, #10]
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	813b      	strh	r3, [r7, #8]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cc6:	f7ff f845 	bl	8003d54 <HAL_GetTick>
 8004cca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b20      	cmp	r3, #32
 8004cd6:	f040 80d9 	bne.w	8004e8c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	2319      	movs	r3, #25
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	496d      	ldr	r1, [pc, #436]	; (8004e98 <HAL_I2C_Mem_Write+0x1ec>)
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 fc7f 	bl	80055e8 <I2C_WaitOnFlagUntilTimeout>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e0cc      	b.n	8004e8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <HAL_I2C_Mem_Write+0x56>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	e0c5      	b.n	8004e8e <HAL_I2C_Mem_Write+0x1e2>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d007      	beq.n	8004d28 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f042 0201 	orr.w	r2, r2, #1
 8004d26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2221      	movs	r2, #33	; 0x21
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2240      	movs	r2, #64	; 0x40
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6a3a      	ldr	r2, [r7, #32]
 8004d52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4a4d      	ldr	r2, [pc, #308]	; (8004e9c <HAL_I2C_Mem_Write+0x1f0>)
 8004d68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d6a:	88f8      	ldrh	r0, [r7, #6]
 8004d6c:	893a      	ldrh	r2, [r7, #8]
 8004d6e:	8979      	ldrh	r1, [r7, #10]
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	9301      	str	r3, [sp, #4]
 8004d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	4603      	mov	r3, r0
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 fab6 	bl	80052ec <I2C_RequestMemoryWrite>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d052      	beq.n	8004e2c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e081      	b.n	8004e8e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 fd00 	bl	8005794 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00d      	beq.n	8004db6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d107      	bne.n	8004db2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e06b      	b.n	8004e8e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	781a      	ldrb	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d11b      	bne.n	8004e2c <HAL_I2C_Mem_Write+0x180>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d017      	beq.n	8004e2c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	781a      	ldrb	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	1c5a      	adds	r2, r3, #1
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e16:	3b01      	subs	r3, #1
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1aa      	bne.n	8004d8a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 fcec 	bl	8005816 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00d      	beq.n	8004e60 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	d107      	bne.n	8004e5c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e5a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e016      	b.n	8004e8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	e000      	b.n	8004e8e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e8c:	2302      	movs	r3, #2
  }
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	00100002 	.word	0x00100002
 8004e9c:	ffff0000 	.word	0xffff0000

08004ea0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08c      	sub	sp, #48	; 0x30
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	4608      	mov	r0, r1
 8004eaa:	4611      	mov	r1, r2
 8004eac:	461a      	mov	r2, r3
 8004eae:	4603      	mov	r3, r0
 8004eb0:	817b      	strh	r3, [r7, #10]
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	813b      	strh	r3, [r7, #8]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004eba:	f7fe ff4b 	bl	8003d54 <HAL_GetTick>
 8004ebe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b20      	cmp	r3, #32
 8004eca:	f040 8208 	bne.w	80052de <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	2319      	movs	r3, #25
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	497b      	ldr	r1, [pc, #492]	; (80050c4 <HAL_I2C_Mem_Read+0x224>)
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f000 fb85 	bl	80055e8 <I2C_WaitOnFlagUntilTimeout>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e1fb      	b.n	80052e0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d101      	bne.n	8004ef6 <HAL_I2C_Mem_Read+0x56>
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	e1f4      	b.n	80052e0 <HAL_I2C_Mem_Read+0x440>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d007      	beq.n	8004f1c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0201 	orr.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2222      	movs	r2, #34	; 0x22
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2240      	movs	r2, #64	; 0x40
 8004f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4a5b      	ldr	r2, [pc, #364]	; (80050c8 <HAL_I2C_Mem_Read+0x228>)
 8004f5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f5e:	88f8      	ldrh	r0, [r7, #6]
 8004f60:	893a      	ldrh	r2, [r7, #8]
 8004f62:	8979      	ldrh	r1, [r7, #10]
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	9301      	str	r3, [sp, #4]
 8004f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 fa52 	bl	8005418 <I2C_RequestMemoryRead>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e1b0      	b.n	80052e0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d113      	bne.n	8004fae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f86:	2300      	movs	r3, #0
 8004f88:	623b      	str	r3, [r7, #32]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	623b      	str	r3, [r7, #32]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	623b      	str	r3, [r7, #32]
 8004f9a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	e184      	b.n	80052b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d11b      	bne.n	8004fee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61fb      	str	r3, [r7, #28]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	61fb      	str	r3, [r7, #28]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	61fb      	str	r3, [r7, #28]
 8004fda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	e164      	b.n	80052b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d11b      	bne.n	800502e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005004:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005014:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005016:	2300      	movs	r3, #0
 8005018:	61bb      	str	r3, [r7, #24]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	61bb      	str	r3, [r7, #24]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	61bb      	str	r3, [r7, #24]
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	e144      	b.n	80052b8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800502e:	2300      	movs	r3, #0
 8005030:	617b      	str	r3, [r7, #20]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005044:	e138      	b.n	80052b8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504a:	2b03      	cmp	r3, #3
 800504c:	f200 80f1 	bhi.w	8005232 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005054:	2b01      	cmp	r3, #1
 8005056:	d123      	bne.n	80050a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800505a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 fc1b 	bl	8005898 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e139      	b.n	80052e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691a      	ldr	r2, [r3, #16]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	b2d2      	uxtb	r2, r2
 8005078:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005088:	3b01      	subs	r3, #1
 800508a:	b29a      	uxth	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005094:	b29b      	uxth	r3, r3
 8005096:	3b01      	subs	r3, #1
 8005098:	b29a      	uxth	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800509e:	e10b      	b.n	80052b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d14e      	bne.n	8005146 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ae:	2200      	movs	r2, #0
 80050b0:	4906      	ldr	r1, [pc, #24]	; (80050cc <HAL_I2C_Mem_Read+0x22c>)
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 fa98 	bl	80055e8 <I2C_WaitOnFlagUntilTimeout>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d008      	beq.n	80050d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e10e      	b.n	80052e0 <HAL_I2C_Mem_Read+0x440>
 80050c2:	bf00      	nop
 80050c4:	00100002 	.word	0x00100002
 80050c8:	ffff0000 	.word	0xffff0000
 80050cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	691a      	ldr	r2, [r3, #16]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fc:	3b01      	subs	r3, #1
 80050fe:	b29a      	uxth	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005108:	b29b      	uxth	r3, r3
 800510a:	3b01      	subs	r3, #1
 800510c:	b29a      	uxth	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	691a      	ldr	r2, [r3, #16]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	b2d2      	uxtb	r2, r2
 800511e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	1c5a      	adds	r2, r3, #1
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800512e:	3b01      	subs	r3, #1
 8005130:	b29a      	uxth	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513a:	b29b      	uxth	r3, r3
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005144:	e0b8      	b.n	80052b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514c:	2200      	movs	r2, #0
 800514e:	4966      	ldr	r1, [pc, #408]	; (80052e8 <HAL_I2C_Mem_Read+0x448>)
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 fa49 	bl	80055e8 <I2C_WaitOnFlagUntilTimeout>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e0bf      	b.n	80052e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800516e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691a      	ldr	r2, [r3, #16]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	1c5a      	adds	r2, r3, #1
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518c:	3b01      	subs	r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005198:	b29b      	uxth	r3, r3
 800519a:	3b01      	subs	r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a8:	2200      	movs	r2, #0
 80051aa:	494f      	ldr	r1, [pc, #316]	; (80052e8 <HAL_I2C_Mem_Read+0x448>)
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 fa1b 	bl	80055e8 <I2C_WaitOnFlagUntilTimeout>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e091      	b.n	80052e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691a      	ldr	r2, [r3, #16]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	3b01      	subs	r3, #1
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005230:	e042      	b.n	80052b8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005234:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 fb2e 	bl	8005898 <I2C_WaitOnRXNEFlagUntilTimeout>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e04c      	b.n	80052e0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	691a      	ldr	r2, [r3, #16]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	b2d2      	uxtb	r2, r2
 8005252:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526e:	b29b      	uxth	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	f003 0304 	and.w	r3, r3, #4
 8005282:	2b04      	cmp	r3, #4
 8005284:	d118      	bne.n	80052b8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	691a      	ldr	r2, [r3, #16]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f47f aec2 	bne.w	8005046 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	e000      	b.n	80052e0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80052de:	2302      	movs	r3, #2
  }
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3728      	adds	r7, #40	; 0x28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	00010004 	.word	0x00010004

080052ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af02      	add	r7, sp, #8
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	4608      	mov	r0, r1
 80052f6:	4611      	mov	r1, r2
 80052f8:	461a      	mov	r2, r3
 80052fa:	4603      	mov	r3, r0
 80052fc:	817b      	strh	r3, [r7, #10]
 80052fe:	460b      	mov	r3, r1
 8005300:	813b      	strh	r3, [r7, #8]
 8005302:	4613      	mov	r3, r2
 8005304:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005314:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	2200      	movs	r2, #0
 800531e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 f960 	bl	80055e8 <I2C_WaitOnFlagUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00d      	beq.n	800534a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800533c:	d103      	bne.n	8005346 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005344:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e05f      	b.n	800540a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800534a:	897b      	ldrh	r3, [r7, #10]
 800534c:	b2db      	uxtb	r3, r3
 800534e:	461a      	mov	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005358:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	6a3a      	ldr	r2, [r7, #32]
 800535e:	492d      	ldr	r1, [pc, #180]	; (8005414 <I2C_RequestMemoryWrite+0x128>)
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 f998 	bl	8005696 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e04c      	b.n	800540a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005370:	2300      	movs	r3, #0
 8005372:	617b      	str	r3, [r7, #20]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005388:	6a39      	ldr	r1, [r7, #32]
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 fa02 	bl	8005794 <I2C_WaitOnTXEFlagUntilTimeout>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00d      	beq.n	80053b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	2b04      	cmp	r3, #4
 800539c:	d107      	bne.n	80053ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e02b      	b.n	800540a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d105      	bne.n	80053c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053b8:	893b      	ldrh	r3, [r7, #8]
 80053ba:	b2da      	uxtb	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	611a      	str	r2, [r3, #16]
 80053c2:	e021      	b.n	8005408 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053c4:	893b      	ldrh	r3, [r7, #8]
 80053c6:	0a1b      	lsrs	r3, r3, #8
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d4:	6a39      	ldr	r1, [r7, #32]
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f000 f9dc 	bl	8005794 <I2C_WaitOnTXEFlagUntilTimeout>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00d      	beq.n	80053fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d107      	bne.n	80053fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e005      	b.n	800540a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053fe:	893b      	ldrh	r3, [r7, #8]
 8005400:	b2da      	uxtb	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	00010002 	.word	0x00010002

08005418 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b088      	sub	sp, #32
 800541c:	af02      	add	r7, sp, #8
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	4608      	mov	r0, r1
 8005422:	4611      	mov	r1, r2
 8005424:	461a      	mov	r2, r3
 8005426:	4603      	mov	r3, r0
 8005428:	817b      	strh	r3, [r7, #10]
 800542a:	460b      	mov	r3, r1
 800542c:	813b      	strh	r3, [r7, #8]
 800542e:	4613      	mov	r3, r2
 8005430:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005440:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005450:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	2200      	movs	r2, #0
 800545a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 f8c2 	bl	80055e8 <I2C_WaitOnFlagUntilTimeout>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00d      	beq.n	8005486 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005478:	d103      	bne.n	8005482 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005480:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e0aa      	b.n	80055dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005486:	897b      	ldrh	r3, [r7, #10]
 8005488:	b2db      	uxtb	r3, r3
 800548a:	461a      	mov	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005494:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	6a3a      	ldr	r2, [r7, #32]
 800549a:	4952      	ldr	r1, [pc, #328]	; (80055e4 <I2C_RequestMemoryRead+0x1cc>)
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 f8fa 	bl	8005696 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e097      	b.n	80055dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ac:	2300      	movs	r3, #0
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c4:	6a39      	ldr	r1, [r7, #32]
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 f964 	bl	8005794 <I2C_WaitOnTXEFlagUntilTimeout>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00d      	beq.n	80054ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	2b04      	cmp	r3, #4
 80054d8:	d107      	bne.n	80054ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e076      	b.n	80055dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054ee:	88fb      	ldrh	r3, [r7, #6]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d105      	bne.n	8005500 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054f4:	893b      	ldrh	r3, [r7, #8]
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	611a      	str	r2, [r3, #16]
 80054fe:	e021      	b.n	8005544 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005500:	893b      	ldrh	r3, [r7, #8]
 8005502:	0a1b      	lsrs	r3, r3, #8
 8005504:	b29b      	uxth	r3, r3
 8005506:	b2da      	uxtb	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800550e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005510:	6a39      	ldr	r1, [r7, #32]
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 f93e 	bl	8005794 <I2C_WaitOnTXEFlagUntilTimeout>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00d      	beq.n	800553a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	2b04      	cmp	r3, #4
 8005524:	d107      	bne.n	8005536 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005534:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e050      	b.n	80055dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800553a:	893b      	ldrh	r3, [r7, #8]
 800553c:	b2da      	uxtb	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005546:	6a39      	ldr	r1, [r7, #32]
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 f923 	bl	8005794 <I2C_WaitOnTXEFlagUntilTimeout>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00d      	beq.n	8005570 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005558:	2b04      	cmp	r3, #4
 800555a:	d107      	bne.n	800556c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800556a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e035      	b.n	80055dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800557e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	2200      	movs	r2, #0
 8005588:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 f82b 	bl	80055e8 <I2C_WaitOnFlagUntilTimeout>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00d      	beq.n	80055b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055a6:	d103      	bne.n	80055b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e013      	b.n	80055dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80055b4:	897b      	ldrh	r3, [r7, #10]
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	f043 0301 	orr.w	r3, r3, #1
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	6a3a      	ldr	r2, [r7, #32]
 80055c8:	4906      	ldr	r1, [pc, #24]	; (80055e4 <I2C_RequestMemoryRead+0x1cc>)
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 f863 	bl	8005696 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e000      	b.n	80055dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	00010002 	.word	0x00010002

080055e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	603b      	str	r3, [r7, #0]
 80055f4:	4613      	mov	r3, r2
 80055f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055f8:	e025      	b.n	8005646 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005600:	d021      	beq.n	8005646 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005602:	f7fe fba7 	bl	8003d54 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	429a      	cmp	r2, r3
 8005610:	d302      	bcc.n	8005618 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d116      	bne.n	8005646 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2220      	movs	r2, #32
 8005622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	f043 0220 	orr.w	r2, r3, #32
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e023      	b.n	800568e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	0c1b      	lsrs	r3, r3, #16
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b01      	cmp	r3, #1
 800564e:	d10d      	bne.n	800566c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	43da      	mvns	r2, r3
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	4013      	ands	r3, r2
 800565c:	b29b      	uxth	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	bf0c      	ite	eq
 8005662:	2301      	moveq	r3, #1
 8005664:	2300      	movne	r3, #0
 8005666:	b2db      	uxtb	r3, r3
 8005668:	461a      	mov	r2, r3
 800566a:	e00c      	b.n	8005686 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	43da      	mvns	r2, r3
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	4013      	ands	r3, r2
 8005678:	b29b      	uxth	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	bf0c      	ite	eq
 800567e:	2301      	moveq	r3, #1
 8005680:	2300      	movne	r3, #0
 8005682:	b2db      	uxtb	r3, r3
 8005684:	461a      	mov	r2, r3
 8005686:	79fb      	ldrb	r3, [r7, #7]
 8005688:	429a      	cmp	r2, r3
 800568a:	d0b6      	beq.n	80055fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b084      	sub	sp, #16
 800569a:	af00      	add	r7, sp, #0
 800569c:	60f8      	str	r0, [r7, #12]
 800569e:	60b9      	str	r1, [r7, #8]
 80056a0:	607a      	str	r2, [r7, #4]
 80056a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056a4:	e051      	b.n	800574a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b4:	d123      	bne.n	80056fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2220      	movs	r2, #32
 80056da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	f043 0204 	orr.w	r2, r3, #4
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e046      	b.n	800578c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005704:	d021      	beq.n	800574a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005706:	f7fe fb25 	bl	8003d54 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	429a      	cmp	r2, r3
 8005714:	d302      	bcc.n	800571c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d116      	bne.n	800574a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2220      	movs	r2, #32
 8005726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	f043 0220 	orr.w	r2, r3, #32
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e020      	b.n	800578c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	0c1b      	lsrs	r3, r3, #16
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b01      	cmp	r3, #1
 8005752:	d10c      	bne.n	800576e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	43da      	mvns	r2, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	4013      	ands	r3, r2
 8005760:	b29b      	uxth	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	bf14      	ite	ne
 8005766:	2301      	movne	r3, #1
 8005768:	2300      	moveq	r3, #0
 800576a:	b2db      	uxtb	r3, r3
 800576c:	e00b      	b.n	8005786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	43da      	mvns	r2, r3
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	4013      	ands	r3, r2
 800577a:	b29b      	uxth	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	bf14      	ite	ne
 8005780:	2301      	movne	r3, #1
 8005782:	2300      	moveq	r3, #0
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d18d      	bne.n	80056a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057a0:	e02d      	b.n	80057fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f000 f8ce 	bl	8005944 <I2C_IsAcknowledgeFailed>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e02d      	b.n	800580e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b8:	d021      	beq.n	80057fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ba:	f7fe facb 	bl	8003d54 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d302      	bcc.n	80057d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d116      	bne.n	80057fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2220      	movs	r2, #32
 80057da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	f043 0220 	orr.w	r2, r3, #32
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e007      	b.n	800580e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005808:	2b80      	cmp	r3, #128	; 0x80
 800580a:	d1ca      	bne.n	80057a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b084      	sub	sp, #16
 800581a:	af00      	add	r7, sp, #0
 800581c:	60f8      	str	r0, [r7, #12]
 800581e:	60b9      	str	r1, [r7, #8]
 8005820:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005822:	e02d      	b.n	8005880 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f000 f88d 	bl	8005944 <I2C_IsAcknowledgeFailed>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e02d      	b.n	8005890 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583a:	d021      	beq.n	8005880 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800583c:	f7fe fa8a 	bl	8003d54 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	429a      	cmp	r2, r3
 800584a:	d302      	bcc.n	8005852 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d116      	bne.n	8005880 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586c:	f043 0220 	orr.w	r2, r3, #32
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e007      	b.n	8005890 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	f003 0304 	and.w	r3, r3, #4
 800588a:	2b04      	cmp	r3, #4
 800588c:	d1ca      	bne.n	8005824 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058a4:	e042      	b.n	800592c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	2b10      	cmp	r3, #16
 80058b2:	d119      	bne.n	80058e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f06f 0210 	mvn.w	r2, #16
 80058bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e029      	b.n	800593c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058e8:	f7fe fa34 	bl	8003d54 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d302      	bcc.n	80058fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d116      	bne.n	800592c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2220      	movs	r2, #32
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005918:	f043 0220 	orr.w	r2, r3, #32
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e007      	b.n	800593c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005936:	2b40      	cmp	r3, #64	; 0x40
 8005938:	d1b5      	bne.n	80058a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800595a:	d11b      	bne.n	8005994 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005964:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2220      	movs	r2, #32
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005980:	f043 0204 	orr.w	r2, r3, #4
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e000      	b.n	8005996 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
	...

080059a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e267      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d075      	beq.n	8005aae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059c2:	4b88      	ldr	r3, [pc, #544]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f003 030c 	and.w	r3, r3, #12
 80059ca:	2b04      	cmp	r3, #4
 80059cc:	d00c      	beq.n	80059e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059ce:	4b85      	ldr	r3, [pc, #532]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059d6:	2b08      	cmp	r3, #8
 80059d8:	d112      	bne.n	8005a00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059da:	4b82      	ldr	r3, [pc, #520]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059e6:	d10b      	bne.n	8005a00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059e8:	4b7e      	ldr	r3, [pc, #504]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d05b      	beq.n	8005aac <HAL_RCC_OscConfig+0x108>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d157      	bne.n	8005aac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e242      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a08:	d106      	bne.n	8005a18 <HAL_RCC_OscConfig+0x74>
 8005a0a:	4b76      	ldr	r3, [pc, #472]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a75      	ldr	r2, [pc, #468]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a14:	6013      	str	r3, [r2, #0]
 8005a16:	e01d      	b.n	8005a54 <HAL_RCC_OscConfig+0xb0>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a20:	d10c      	bne.n	8005a3c <HAL_RCC_OscConfig+0x98>
 8005a22:	4b70      	ldr	r3, [pc, #448]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a6f      	ldr	r2, [pc, #444]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	4b6d      	ldr	r3, [pc, #436]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a6c      	ldr	r2, [pc, #432]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a38:	6013      	str	r3, [r2, #0]
 8005a3a:	e00b      	b.n	8005a54 <HAL_RCC_OscConfig+0xb0>
 8005a3c:	4b69      	ldr	r3, [pc, #420]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a68      	ldr	r2, [pc, #416]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a46:	6013      	str	r3, [r2, #0]
 8005a48:	4b66      	ldr	r3, [pc, #408]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a65      	ldr	r2, [pc, #404]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d013      	beq.n	8005a84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a5c:	f7fe f97a 	bl	8003d54 <HAL_GetTick>
 8005a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a62:	e008      	b.n	8005a76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a64:	f7fe f976 	bl	8003d54 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b64      	cmp	r3, #100	; 0x64
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e207      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a76:	4b5b      	ldr	r3, [pc, #364]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d0f0      	beq.n	8005a64 <HAL_RCC_OscConfig+0xc0>
 8005a82:	e014      	b.n	8005aae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a84:	f7fe f966 	bl	8003d54 <HAL_GetTick>
 8005a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a8a:	e008      	b.n	8005a9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a8c:	f7fe f962 	bl	8003d54 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b64      	cmp	r3, #100	; 0x64
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e1f3      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a9e:	4b51      	ldr	r3, [pc, #324]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1f0      	bne.n	8005a8c <HAL_RCC_OscConfig+0xe8>
 8005aaa:	e000      	b.n	8005aae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d063      	beq.n	8005b82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005aba:	4b4a      	ldr	r3, [pc, #296]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f003 030c 	and.w	r3, r3, #12
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00b      	beq.n	8005ade <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ac6:	4b47      	ldr	r3, [pc, #284]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ace:	2b08      	cmp	r3, #8
 8005ad0:	d11c      	bne.n	8005b0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ad2:	4b44      	ldr	r3, [pc, #272]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d116      	bne.n	8005b0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ade:	4b41      	ldr	r3, [pc, #260]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d005      	beq.n	8005af6 <HAL_RCC_OscConfig+0x152>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d001      	beq.n	8005af6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e1c7      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005af6:	4b3b      	ldr	r3, [pc, #236]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	4937      	ldr	r1, [pc, #220]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b0a:	e03a      	b.n	8005b82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d020      	beq.n	8005b56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b14:	4b34      	ldr	r3, [pc, #208]	; (8005be8 <HAL_RCC_OscConfig+0x244>)
 8005b16:	2201      	movs	r2, #1
 8005b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b1a:	f7fe f91b 	bl	8003d54 <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b20:	e008      	b.n	8005b34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b22:	f7fe f917 	bl	8003d54 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e1a8      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b34:	4b2b      	ldr	r3, [pc, #172]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0f0      	beq.n	8005b22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b40:	4b28      	ldr	r3, [pc, #160]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	00db      	lsls	r3, r3, #3
 8005b4e:	4925      	ldr	r1, [pc, #148]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	600b      	str	r3, [r1, #0]
 8005b54:	e015      	b.n	8005b82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b56:	4b24      	ldr	r3, [pc, #144]	; (8005be8 <HAL_RCC_OscConfig+0x244>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b5c:	f7fe f8fa 	bl	8003d54 <HAL_GetTick>
 8005b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b62:	e008      	b.n	8005b76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b64:	f7fe f8f6 	bl	8003d54 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e187      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b76:	4b1b      	ldr	r3, [pc, #108]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1f0      	bne.n	8005b64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0308 	and.w	r3, r3, #8
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d036      	beq.n	8005bfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d016      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b96:	4b15      	ldr	r3, [pc, #84]	; (8005bec <HAL_RCC_OscConfig+0x248>)
 8005b98:	2201      	movs	r2, #1
 8005b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b9c:	f7fe f8da 	bl	8003d54 <HAL_GetTick>
 8005ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ba4:	f7fe f8d6 	bl	8003d54 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e167      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bb6:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0f0      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x200>
 8005bc2:	e01b      	b.n	8005bfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bc4:	4b09      	ldr	r3, [pc, #36]	; (8005bec <HAL_RCC_OscConfig+0x248>)
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bca:	f7fe f8c3 	bl	8003d54 <HAL_GetTick>
 8005bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bd0:	e00e      	b.n	8005bf0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bd2:	f7fe f8bf 	bl	8003d54 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d907      	bls.n	8005bf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e150      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
 8005be4:	40023800 	.word	0x40023800
 8005be8:	42470000 	.word	0x42470000
 8005bec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bf0:	4b88      	ldr	r3, [pc, #544]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1ea      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0304 	and.w	r3, r3, #4
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 8097 	beq.w	8005d38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c0e:	4b81      	ldr	r3, [pc, #516]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10f      	bne.n	8005c3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60bb      	str	r3, [r7, #8]
 8005c1e:	4b7d      	ldr	r3, [pc, #500]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	4a7c      	ldr	r2, [pc, #496]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c28:	6413      	str	r3, [r2, #64]	; 0x40
 8005c2a:	4b7a      	ldr	r3, [pc, #488]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c32:	60bb      	str	r3, [r7, #8]
 8005c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c36:	2301      	movs	r3, #1
 8005c38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c3a:	4b77      	ldr	r3, [pc, #476]	; (8005e18 <HAL_RCC_OscConfig+0x474>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d118      	bne.n	8005c78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c46:	4b74      	ldr	r3, [pc, #464]	; (8005e18 <HAL_RCC_OscConfig+0x474>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a73      	ldr	r2, [pc, #460]	; (8005e18 <HAL_RCC_OscConfig+0x474>)
 8005c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c52:	f7fe f87f 	bl	8003d54 <HAL_GetTick>
 8005c56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c58:	e008      	b.n	8005c6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c5a:	f7fe f87b 	bl	8003d54 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d901      	bls.n	8005c6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e10c      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c6c:	4b6a      	ldr	r3, [pc, #424]	; (8005e18 <HAL_RCC_OscConfig+0x474>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d0f0      	beq.n	8005c5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d106      	bne.n	8005c8e <HAL_RCC_OscConfig+0x2ea>
 8005c80:	4b64      	ldr	r3, [pc, #400]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c84:	4a63      	ldr	r2, [pc, #396]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005c86:	f043 0301 	orr.w	r3, r3, #1
 8005c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c8c:	e01c      	b.n	8005cc8 <HAL_RCC_OscConfig+0x324>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	2b05      	cmp	r3, #5
 8005c94:	d10c      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x30c>
 8005c96:	4b5f      	ldr	r3, [pc, #380]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9a:	4a5e      	ldr	r2, [pc, #376]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005c9c:	f043 0304 	orr.w	r3, r3, #4
 8005ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ca2:	4b5c      	ldr	r3, [pc, #368]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca6:	4a5b      	ldr	r2, [pc, #364]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005ca8:	f043 0301 	orr.w	r3, r3, #1
 8005cac:	6713      	str	r3, [r2, #112]	; 0x70
 8005cae:	e00b      	b.n	8005cc8 <HAL_RCC_OscConfig+0x324>
 8005cb0:	4b58      	ldr	r3, [pc, #352]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb4:	4a57      	ldr	r2, [pc, #348]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005cb6:	f023 0301 	bic.w	r3, r3, #1
 8005cba:	6713      	str	r3, [r2, #112]	; 0x70
 8005cbc:	4b55      	ldr	r3, [pc, #340]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc0:	4a54      	ldr	r2, [pc, #336]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005cc2:	f023 0304 	bic.w	r3, r3, #4
 8005cc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d015      	beq.n	8005cfc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cd0:	f7fe f840 	bl	8003d54 <HAL_GetTick>
 8005cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cd6:	e00a      	b.n	8005cee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cd8:	f7fe f83c 	bl	8003d54 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e0cb      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cee:	4b49      	ldr	r3, [pc, #292]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0ee      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x334>
 8005cfa:	e014      	b.n	8005d26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cfc:	f7fe f82a 	bl	8003d54 <HAL_GetTick>
 8005d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d02:	e00a      	b.n	8005d1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d04:	f7fe f826 	bl	8003d54 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e0b5      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d1a:	4b3e      	ldr	r3, [pc, #248]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1ee      	bne.n	8005d04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d26:	7dfb      	ldrb	r3, [r7, #23]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d105      	bne.n	8005d38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d2c:	4b39      	ldr	r3, [pc, #228]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d30:	4a38      	ldr	r2, [pc, #224]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 80a1 	beq.w	8005e84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d42:	4b34      	ldr	r3, [pc, #208]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 030c 	and.w	r3, r3, #12
 8005d4a:	2b08      	cmp	r3, #8
 8005d4c:	d05c      	beq.n	8005e08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d141      	bne.n	8005dda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d56:	4b31      	ldr	r3, [pc, #196]	; (8005e1c <HAL_RCC_OscConfig+0x478>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d5c:	f7fd fffa 	bl	8003d54 <HAL_GetTick>
 8005d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d62:	e008      	b.n	8005d76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d64:	f7fd fff6 	bl	8003d54 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e087      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d76:	4b27      	ldr	r3, [pc, #156]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1f0      	bne.n	8005d64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69da      	ldr	r2, [r3, #28]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	019b      	lsls	r3, r3, #6
 8005d92:	431a      	orrs	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d98:	085b      	lsrs	r3, r3, #1
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	041b      	lsls	r3, r3, #16
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da4:	061b      	lsls	r3, r3, #24
 8005da6:	491b      	ldr	r1, [pc, #108]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dac:	4b1b      	ldr	r3, [pc, #108]	; (8005e1c <HAL_RCC_OscConfig+0x478>)
 8005dae:	2201      	movs	r2, #1
 8005db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005db2:	f7fd ffcf 	bl	8003d54 <HAL_GetTick>
 8005db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005db8:	e008      	b.n	8005dcc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dba:	f7fd ffcb 	bl	8003d54 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d901      	bls.n	8005dcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e05c      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dcc:	4b11      	ldr	r3, [pc, #68]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0f0      	beq.n	8005dba <HAL_RCC_OscConfig+0x416>
 8005dd8:	e054      	b.n	8005e84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dda:	4b10      	ldr	r3, [pc, #64]	; (8005e1c <HAL_RCC_OscConfig+0x478>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de0:	f7fd ffb8 	bl	8003d54 <HAL_GetTick>
 8005de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005de6:	e008      	b.n	8005dfa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005de8:	f7fd ffb4 	bl	8003d54 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d901      	bls.n	8005dfa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e045      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dfa:	4b06      	ldr	r3, [pc, #24]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1f0      	bne.n	8005de8 <HAL_RCC_OscConfig+0x444>
 8005e06:	e03d      	b.n	8005e84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d107      	bne.n	8005e20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e038      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
 8005e14:	40023800 	.word	0x40023800
 8005e18:	40007000 	.word	0x40007000
 8005e1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e20:	4b1b      	ldr	r3, [pc, #108]	; (8005e90 <HAL_RCC_OscConfig+0x4ec>)
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d028      	beq.n	8005e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d121      	bne.n	8005e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d11a      	bne.n	8005e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e50:	4013      	ands	r3, r2
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d111      	bne.n	8005e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e66:	085b      	lsrs	r3, r3, #1
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d107      	bne.n	8005e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d001      	beq.n	8005e84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e000      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3718      	adds	r7, #24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	40023800 	.word	0x40023800

08005e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e0cc      	b.n	8006042 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ea8:	4b68      	ldr	r3, [pc, #416]	; (800604c <HAL_RCC_ClockConfig+0x1b8>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0307 	and.w	r3, r3, #7
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d90c      	bls.n	8005ed0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eb6:	4b65      	ldr	r3, [pc, #404]	; (800604c <HAL_RCC_ClockConfig+0x1b8>)
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ebe:	4b63      	ldr	r3, [pc, #396]	; (800604c <HAL_RCC_ClockConfig+0x1b8>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d001      	beq.n	8005ed0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e0b8      	b.n	8006042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d020      	beq.n	8005f1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d005      	beq.n	8005ef4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ee8:	4b59      	ldr	r3, [pc, #356]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	4a58      	ldr	r2, [pc, #352]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005eee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ef2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0308 	and.w	r3, r3, #8
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d005      	beq.n	8005f0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f00:	4b53      	ldr	r3, [pc, #332]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	4a52      	ldr	r2, [pc, #328]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005f06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f0c:	4b50      	ldr	r3, [pc, #320]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	494d      	ldr	r1, [pc, #308]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d044      	beq.n	8005fb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d107      	bne.n	8005f42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f32:	4b47      	ldr	r3, [pc, #284]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d119      	bne.n	8005f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e07f      	b.n	8006042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d003      	beq.n	8005f52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d107      	bne.n	8005f62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f52:	4b3f      	ldr	r3, [pc, #252]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d109      	bne.n	8005f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e06f      	b.n	8006042 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f62:	4b3b      	ldr	r3, [pc, #236]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e067      	b.n	8006042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f72:	4b37      	ldr	r3, [pc, #220]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f023 0203 	bic.w	r2, r3, #3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	4934      	ldr	r1, [pc, #208]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f84:	f7fd fee6 	bl	8003d54 <HAL_GetTick>
 8005f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f8a:	e00a      	b.n	8005fa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f8c:	f7fd fee2 	bl	8003d54 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e04f      	b.n	8006042 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fa2:	4b2b      	ldr	r3, [pc, #172]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f003 020c 	and.w	r2, r3, #12
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d1eb      	bne.n	8005f8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fb4:	4b25      	ldr	r3, [pc, #148]	; (800604c <HAL_RCC_ClockConfig+0x1b8>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0307 	and.w	r3, r3, #7
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d20c      	bcs.n	8005fdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fc2:	4b22      	ldr	r3, [pc, #136]	; (800604c <HAL_RCC_ClockConfig+0x1b8>)
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	b2d2      	uxtb	r2, r2
 8005fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fca:	4b20      	ldr	r3, [pc, #128]	; (800604c <HAL_RCC_ClockConfig+0x1b8>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0307 	and.w	r3, r3, #7
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d001      	beq.n	8005fdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e032      	b.n	8006042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0304 	and.w	r3, r3, #4
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d008      	beq.n	8005ffa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fe8:	4b19      	ldr	r3, [pc, #100]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	4916      	ldr	r1, [pc, #88]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0308 	and.w	r3, r3, #8
 8006002:	2b00      	cmp	r3, #0
 8006004:	d009      	beq.n	800601a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006006:	4b12      	ldr	r3, [pc, #72]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	00db      	lsls	r3, r3, #3
 8006014:	490e      	ldr	r1, [pc, #56]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8006016:	4313      	orrs	r3, r2
 8006018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800601a:	f000 f821 	bl	8006060 <HAL_RCC_GetSysClockFreq>
 800601e:	4602      	mov	r2, r0
 8006020:	4b0b      	ldr	r3, [pc, #44]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	091b      	lsrs	r3, r3, #4
 8006026:	f003 030f 	and.w	r3, r3, #15
 800602a:	490a      	ldr	r1, [pc, #40]	; (8006054 <HAL_RCC_ClockConfig+0x1c0>)
 800602c:	5ccb      	ldrb	r3, [r1, r3]
 800602e:	fa22 f303 	lsr.w	r3, r2, r3
 8006032:	4a09      	ldr	r2, [pc, #36]	; (8006058 <HAL_RCC_ClockConfig+0x1c4>)
 8006034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006036:	4b09      	ldr	r3, [pc, #36]	; (800605c <HAL_RCC_ClockConfig+0x1c8>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4618      	mov	r0, r3
 800603c:	f7fd fe46 	bl	8003ccc <HAL_InitTick>

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	40023c00 	.word	0x40023c00
 8006050:	40023800 	.word	0x40023800
 8006054:	08009bd8 	.word	0x08009bd8
 8006058:	2000000c 	.word	0x2000000c
 800605c:	20000010 	.word	0x20000010

08006060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006064:	b090      	sub	sp, #64	; 0x40
 8006066:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006068:	2300      	movs	r3, #0
 800606a:	637b      	str	r3, [r7, #52]	; 0x34
 800606c:	2300      	movs	r3, #0
 800606e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006070:	2300      	movs	r3, #0
 8006072:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006078:	4b59      	ldr	r3, [pc, #356]	; (80061e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f003 030c 	and.w	r3, r3, #12
 8006080:	2b08      	cmp	r3, #8
 8006082:	d00d      	beq.n	80060a0 <HAL_RCC_GetSysClockFreq+0x40>
 8006084:	2b08      	cmp	r3, #8
 8006086:	f200 80a1 	bhi.w	80061cc <HAL_RCC_GetSysClockFreq+0x16c>
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <HAL_RCC_GetSysClockFreq+0x34>
 800608e:	2b04      	cmp	r3, #4
 8006090:	d003      	beq.n	800609a <HAL_RCC_GetSysClockFreq+0x3a>
 8006092:	e09b      	b.n	80061cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006094:	4b53      	ldr	r3, [pc, #332]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006096:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006098:	e09b      	b.n	80061d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800609a:	4b53      	ldr	r3, [pc, #332]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800609c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800609e:	e098      	b.n	80061d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060a0:	4b4f      	ldr	r3, [pc, #316]	; (80061e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060aa:	4b4d      	ldr	r3, [pc, #308]	; (80061e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d028      	beq.n	8006108 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060b6:	4b4a      	ldr	r3, [pc, #296]	; (80061e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	099b      	lsrs	r3, r3, #6
 80060bc:	2200      	movs	r2, #0
 80060be:	623b      	str	r3, [r7, #32]
 80060c0:	627a      	str	r2, [r7, #36]	; 0x24
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80060c8:	2100      	movs	r1, #0
 80060ca:	4b47      	ldr	r3, [pc, #284]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80060cc:	fb03 f201 	mul.w	r2, r3, r1
 80060d0:	2300      	movs	r3, #0
 80060d2:	fb00 f303 	mul.w	r3, r0, r3
 80060d6:	4413      	add	r3, r2
 80060d8:	4a43      	ldr	r2, [pc, #268]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80060da:	fba0 1202 	umull	r1, r2, r0, r2
 80060de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060e0:	460a      	mov	r2, r1
 80060e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80060e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060e6:	4413      	add	r3, r2
 80060e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ec:	2200      	movs	r2, #0
 80060ee:	61bb      	str	r3, [r7, #24]
 80060f0:	61fa      	str	r2, [r7, #28]
 80060f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80060fa:	f7fa fd3f 	bl	8000b7c <__aeabi_uldivmod>
 80060fe:	4602      	mov	r2, r0
 8006100:	460b      	mov	r3, r1
 8006102:	4613      	mov	r3, r2
 8006104:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006106:	e053      	b.n	80061b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006108:	4b35      	ldr	r3, [pc, #212]	; (80061e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	099b      	lsrs	r3, r3, #6
 800610e:	2200      	movs	r2, #0
 8006110:	613b      	str	r3, [r7, #16]
 8006112:	617a      	str	r2, [r7, #20]
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800611a:	f04f 0b00 	mov.w	fp, #0
 800611e:	4652      	mov	r2, sl
 8006120:	465b      	mov	r3, fp
 8006122:	f04f 0000 	mov.w	r0, #0
 8006126:	f04f 0100 	mov.w	r1, #0
 800612a:	0159      	lsls	r1, r3, #5
 800612c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006130:	0150      	lsls	r0, r2, #5
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	ebb2 080a 	subs.w	r8, r2, sl
 800613a:	eb63 090b 	sbc.w	r9, r3, fp
 800613e:	f04f 0200 	mov.w	r2, #0
 8006142:	f04f 0300 	mov.w	r3, #0
 8006146:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800614a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800614e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006152:	ebb2 0408 	subs.w	r4, r2, r8
 8006156:	eb63 0509 	sbc.w	r5, r3, r9
 800615a:	f04f 0200 	mov.w	r2, #0
 800615e:	f04f 0300 	mov.w	r3, #0
 8006162:	00eb      	lsls	r3, r5, #3
 8006164:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006168:	00e2      	lsls	r2, r4, #3
 800616a:	4614      	mov	r4, r2
 800616c:	461d      	mov	r5, r3
 800616e:	eb14 030a 	adds.w	r3, r4, sl
 8006172:	603b      	str	r3, [r7, #0]
 8006174:	eb45 030b 	adc.w	r3, r5, fp
 8006178:	607b      	str	r3, [r7, #4]
 800617a:	f04f 0200 	mov.w	r2, #0
 800617e:	f04f 0300 	mov.w	r3, #0
 8006182:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006186:	4629      	mov	r1, r5
 8006188:	028b      	lsls	r3, r1, #10
 800618a:	4621      	mov	r1, r4
 800618c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006190:	4621      	mov	r1, r4
 8006192:	028a      	lsls	r2, r1, #10
 8006194:	4610      	mov	r0, r2
 8006196:	4619      	mov	r1, r3
 8006198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800619a:	2200      	movs	r2, #0
 800619c:	60bb      	str	r3, [r7, #8]
 800619e:	60fa      	str	r2, [r7, #12]
 80061a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061a4:	f7fa fcea 	bl	8000b7c <__aeabi_uldivmod>
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	4613      	mov	r3, r2
 80061ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061b0:	4b0b      	ldr	r3, [pc, #44]	; (80061e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	0c1b      	lsrs	r3, r3, #16
 80061b6:	f003 0303 	and.w	r3, r3, #3
 80061ba:	3301      	adds	r3, #1
 80061bc:	005b      	lsls	r3, r3, #1
 80061be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80061c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80061ca:	e002      	b.n	80061d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061cc:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80061ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80061d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3740      	adds	r7, #64	; 0x40
 80061d8:	46bd      	mov	sp, r7
 80061da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061de:	bf00      	nop
 80061e0:	40023800 	.word	0x40023800
 80061e4:	00f42400 	.word	0x00f42400
 80061e8:	017d7840 	.word	0x017d7840

080061ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061f0:	4b03      	ldr	r3, [pc, #12]	; (8006200 <HAL_RCC_GetHCLKFreq+0x14>)
 80061f2:	681b      	ldr	r3, [r3, #0]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	2000000c 	.word	0x2000000c

08006204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006208:	f7ff fff0 	bl	80061ec <HAL_RCC_GetHCLKFreq>
 800620c:	4602      	mov	r2, r0
 800620e:	4b05      	ldr	r3, [pc, #20]	; (8006224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	0a9b      	lsrs	r3, r3, #10
 8006214:	f003 0307 	and.w	r3, r3, #7
 8006218:	4903      	ldr	r1, [pc, #12]	; (8006228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800621a:	5ccb      	ldrb	r3, [r1, r3]
 800621c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006220:	4618      	mov	r0, r3
 8006222:	bd80      	pop	{r7, pc}
 8006224:	40023800 	.word	0x40023800
 8006228:	08009be8 	.word	0x08009be8

0800622c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006230:	f7ff ffdc 	bl	80061ec <HAL_RCC_GetHCLKFreq>
 8006234:	4602      	mov	r2, r0
 8006236:	4b05      	ldr	r3, [pc, #20]	; (800624c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	0b5b      	lsrs	r3, r3, #13
 800623c:	f003 0307 	and.w	r3, r3, #7
 8006240:	4903      	ldr	r1, [pc, #12]	; (8006250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006242:	5ccb      	ldrb	r3, [r1, r3]
 8006244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006248:	4618      	mov	r0, r3
 800624a:	bd80      	pop	{r7, pc}
 800624c:	40023800 	.word	0x40023800
 8006250:	08009be8 	.word	0x08009be8

08006254 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e07b      	b.n	800635e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626a:	2b00      	cmp	r3, #0
 800626c:	d108      	bne.n	8006280 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006276:	d009      	beq.n	800628c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	61da      	str	r2, [r3, #28]
 800627e:	e005      	b.n	800628c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d106      	bne.n	80062ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7fd f8a2 	bl	80033f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80062d4:	431a      	orrs	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062de:	431a      	orrs	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	431a      	orrs	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	431a      	orrs	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062fc:	431a      	orrs	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006306:	431a      	orrs	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006310:	ea42 0103 	orr.w	r1, r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006318:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	0c1b      	lsrs	r3, r3, #16
 800632a:	f003 0104 	and.w	r1, r3, #4
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006332:	f003 0210 	and.w	r2, r3, #16
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	430a      	orrs	r2, r1
 800633c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	69da      	ldr	r2, [r3, #28]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800634c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b088      	sub	sp, #32
 800636a:	af00      	add	r7, sp, #0
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	603b      	str	r3, [r7, #0]
 8006372:	4613      	mov	r3, r2
 8006374:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006380:	2b01      	cmp	r3, #1
 8006382:	d101      	bne.n	8006388 <HAL_SPI_Transmit+0x22>
 8006384:	2302      	movs	r3, #2
 8006386:	e126      	b.n	80065d6 <HAL_SPI_Transmit+0x270>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006390:	f7fd fce0 	bl	8003d54 <HAL_GetTick>
 8006394:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006396:	88fb      	ldrh	r3, [r7, #6]
 8006398:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d002      	beq.n	80063ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063a6:	2302      	movs	r3, #2
 80063a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063aa:	e10b      	b.n	80065c4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <HAL_SPI_Transmit+0x52>
 80063b2:	88fb      	ldrh	r3, [r7, #6]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d102      	bne.n	80063be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063bc:	e102      	b.n	80065c4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2203      	movs	r2, #3
 80063c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	88fa      	ldrh	r2, [r7, #6]
 80063d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	88fa      	ldrh	r2, [r7, #6]
 80063dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006404:	d10f      	bne.n	8006426 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006414:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006424:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006430:	2b40      	cmp	r3, #64	; 0x40
 8006432:	d007      	beq.n	8006444 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006442:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800644c:	d14b      	bne.n	80064e6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <HAL_SPI_Transmit+0xf6>
 8006456:	8afb      	ldrh	r3, [r7, #22]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d13e      	bne.n	80064da <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006460:	881a      	ldrh	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646c:	1c9a      	adds	r2, r3, #2
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006476:	b29b      	uxth	r3, r3
 8006478:	3b01      	subs	r3, #1
 800647a:	b29a      	uxth	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006480:	e02b      	b.n	80064da <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	2b02      	cmp	r3, #2
 800648e:	d112      	bne.n	80064b6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006494:	881a      	ldrh	r2, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a0:	1c9a      	adds	r2, r3, #2
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	3b01      	subs	r3, #1
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80064b4:	e011      	b.n	80064da <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064b6:	f7fd fc4d 	bl	8003d54 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	683a      	ldr	r2, [r7, #0]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d803      	bhi.n	80064ce <HAL_SPI_Transmit+0x168>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064cc:	d102      	bne.n	80064d4 <HAL_SPI_Transmit+0x16e>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d102      	bne.n	80064da <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80064d8:	e074      	b.n	80065c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064de:	b29b      	uxth	r3, r3
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1ce      	bne.n	8006482 <HAL_SPI_Transmit+0x11c>
 80064e4:	e04c      	b.n	8006580 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d002      	beq.n	80064f4 <HAL_SPI_Transmit+0x18e>
 80064ee:	8afb      	ldrh	r3, [r7, #22]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d140      	bne.n	8006576 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	330c      	adds	r3, #12
 80064fe:	7812      	ldrb	r2, [r2, #0]
 8006500:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006510:	b29b      	uxth	r3, r3
 8006512:	3b01      	subs	r3, #1
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800651a:	e02c      	b.n	8006576 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b02      	cmp	r3, #2
 8006528:	d113      	bne.n	8006552 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	330c      	adds	r3, #12
 8006534:	7812      	ldrb	r2, [r2, #0]
 8006536:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653c:	1c5a      	adds	r2, r3, #1
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006546:	b29b      	uxth	r3, r3
 8006548:	3b01      	subs	r3, #1
 800654a:	b29a      	uxth	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006550:	e011      	b.n	8006576 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006552:	f7fd fbff 	bl	8003d54 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	429a      	cmp	r2, r3
 8006560:	d803      	bhi.n	800656a <HAL_SPI_Transmit+0x204>
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006568:	d102      	bne.n	8006570 <HAL_SPI_Transmit+0x20a>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d102      	bne.n	8006576 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006574:	e026      	b.n	80065c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800657a:	b29b      	uxth	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1cd      	bne.n	800651c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	6839      	ldr	r1, [r7, #0]
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 fa55 	bl	8006a34 <SPI_EndRxTxTransaction>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2220      	movs	r2, #32
 8006594:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10a      	bne.n	80065b4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800659e:	2300      	movs	r3, #0
 80065a0:	613b      	str	r3, [r7, #16]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	613b      	str	r3, [r7, #16]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	613b      	str	r3, [r7, #16]
 80065b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d002      	beq.n	80065c2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	77fb      	strb	r3, [r7, #31]
 80065c0:	e000      	b.n	80065c4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80065c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3720      	adds	r7, #32
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b08c      	sub	sp, #48	; 0x30
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	60f8      	str	r0, [r7, #12]
 80065e6:	60b9      	str	r1, [r7, #8]
 80065e8:	607a      	str	r2, [r7, #4]
 80065ea:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80065ec:	2301      	movs	r3, #1
 80065ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d101      	bne.n	8006604 <HAL_SPI_TransmitReceive+0x26>
 8006600:	2302      	movs	r3, #2
 8006602:	e18a      	b.n	800691a <HAL_SPI_TransmitReceive+0x33c>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800660c:	f7fd fba2 	bl	8003d54 <HAL_GetTick>
 8006610:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006618:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006622:	887b      	ldrh	r3, [r7, #2]
 8006624:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006626:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800662a:	2b01      	cmp	r3, #1
 800662c:	d00f      	beq.n	800664e <HAL_SPI_TransmitReceive+0x70>
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006634:	d107      	bne.n	8006646 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d103      	bne.n	8006646 <HAL_SPI_TransmitReceive+0x68>
 800663e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006642:	2b04      	cmp	r3, #4
 8006644:	d003      	beq.n	800664e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006646:	2302      	movs	r3, #2
 8006648:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800664c:	e15b      	b.n	8006906 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d005      	beq.n	8006660 <HAL_SPI_TransmitReceive+0x82>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <HAL_SPI_TransmitReceive+0x82>
 800665a:	887b      	ldrh	r3, [r7, #2]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d103      	bne.n	8006668 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006666:	e14e      	b.n	8006906 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b04      	cmp	r3, #4
 8006672:	d003      	beq.n	800667c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2205      	movs	r2, #5
 8006678:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	887a      	ldrh	r2, [r7, #2]
 800668c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	887a      	ldrh	r2, [r7, #2]
 8006692:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	887a      	ldrh	r2, [r7, #2]
 800669e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	887a      	ldrh	r2, [r7, #2]
 80066a4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066bc:	2b40      	cmp	r3, #64	; 0x40
 80066be:	d007      	beq.n	80066d0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066d8:	d178      	bne.n	80067cc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d002      	beq.n	80066e8 <HAL_SPI_TransmitReceive+0x10a>
 80066e2:	8b7b      	ldrh	r3, [r7, #26]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d166      	bne.n	80067b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ec:	881a      	ldrh	r2, [r3, #0]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f8:	1c9a      	adds	r2, r3, #2
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006702:	b29b      	uxth	r3, r3
 8006704:	3b01      	subs	r3, #1
 8006706:	b29a      	uxth	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800670c:	e053      	b.n	80067b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b02      	cmp	r3, #2
 800671a:	d11b      	bne.n	8006754 <HAL_SPI_TransmitReceive+0x176>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006720:	b29b      	uxth	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d016      	beq.n	8006754 <HAL_SPI_TransmitReceive+0x176>
 8006726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006728:	2b01      	cmp	r3, #1
 800672a:	d113      	bne.n	8006754 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006730:	881a      	ldrh	r2, [r3, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673c:	1c9a      	adds	r2, r3, #2
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006746:	b29b      	uxth	r3, r3
 8006748:	3b01      	subs	r3, #1
 800674a:	b29a      	uxth	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006750:	2300      	movs	r3, #0
 8006752:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b01      	cmp	r3, #1
 8006760:	d119      	bne.n	8006796 <HAL_SPI_TransmitReceive+0x1b8>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006766:	b29b      	uxth	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	d014      	beq.n	8006796 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68da      	ldr	r2, [r3, #12]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006776:	b292      	uxth	r2, r2
 8006778:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677e:	1c9a      	adds	r2, r3, #2
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006788:	b29b      	uxth	r3, r3
 800678a:	3b01      	subs	r3, #1
 800678c:	b29a      	uxth	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006792:	2301      	movs	r3, #1
 8006794:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006796:	f7fd fadd 	bl	8003d54 <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d807      	bhi.n	80067b6 <HAL_SPI_TransmitReceive+0x1d8>
 80067a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ac:	d003      	beq.n	80067b6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80067b4:	e0a7      	b.n	8006906 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1a6      	bne.n	800670e <HAL_SPI_TransmitReceive+0x130>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1a1      	bne.n	800670e <HAL_SPI_TransmitReceive+0x130>
 80067ca:	e07c      	b.n	80068c6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <HAL_SPI_TransmitReceive+0x1fc>
 80067d4:	8b7b      	ldrh	r3, [r7, #26]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d16b      	bne.n	80068b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	330c      	adds	r3, #12
 80067e4:	7812      	ldrb	r2, [r2, #0]
 80067e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	3b01      	subs	r3, #1
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006800:	e057      	b.n	80068b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	2b02      	cmp	r3, #2
 800680e:	d11c      	bne.n	800684a <HAL_SPI_TransmitReceive+0x26c>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006814:	b29b      	uxth	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d017      	beq.n	800684a <HAL_SPI_TransmitReceive+0x26c>
 800681a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681c:	2b01      	cmp	r3, #1
 800681e:	d114      	bne.n	800684a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	330c      	adds	r3, #12
 800682a:	7812      	ldrb	r2, [r2, #0]
 800682c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006832:	1c5a      	adds	r2, r3, #1
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800683c:	b29b      	uxth	r3, r3
 800683e:	3b01      	subs	r3, #1
 8006840:	b29a      	uxth	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006846:	2300      	movs	r3, #0
 8006848:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b01      	cmp	r3, #1
 8006856:	d119      	bne.n	800688c <HAL_SPI_TransmitReceive+0x2ae>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800685c:	b29b      	uxth	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d014      	beq.n	800688c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68da      	ldr	r2, [r3, #12]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686c:	b2d2      	uxtb	r2, r2
 800686e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800687e:	b29b      	uxth	r3, r3
 8006880:	3b01      	subs	r3, #1
 8006882:	b29a      	uxth	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006888:	2301      	movs	r3, #1
 800688a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800688c:	f7fd fa62 	bl	8003d54 <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006898:	429a      	cmp	r2, r3
 800689a:	d803      	bhi.n	80068a4 <HAL_SPI_TransmitReceive+0x2c6>
 800689c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a2:	d102      	bne.n	80068aa <HAL_SPI_TransmitReceive+0x2cc>
 80068a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d103      	bne.n	80068b2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80068b0:	e029      	b.n	8006906 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1a2      	bne.n	8006802 <HAL_SPI_TransmitReceive+0x224>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d19d      	bne.n	8006802 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 f8b2 	bl	8006a34 <SPI_EndRxTxTransaction>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d006      	beq.n	80068e4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2220      	movs	r2, #32
 80068e0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80068e2:	e010      	b.n	8006906 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10b      	bne.n	8006904 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068ec:	2300      	movs	r3, #0
 80068ee:	617b      	str	r3, [r7, #20]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	617b      	str	r3, [r7, #20]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	617b      	str	r3, [r7, #20]
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	e000      	b.n	8006906 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006904:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006916:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800691a:	4618      	mov	r0, r3
 800691c:	3730      	adds	r7, #48	; 0x30
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
	...

08006924 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b088      	sub	sp, #32
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	603b      	str	r3, [r7, #0]
 8006930:	4613      	mov	r3, r2
 8006932:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006934:	f7fd fa0e 	bl	8003d54 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693c:	1a9b      	subs	r3, r3, r2
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	4413      	add	r3, r2
 8006942:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006944:	f7fd fa06 	bl	8003d54 <HAL_GetTick>
 8006948:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800694a:	4b39      	ldr	r3, [pc, #228]	; (8006a30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	015b      	lsls	r3, r3, #5
 8006950:	0d1b      	lsrs	r3, r3, #20
 8006952:	69fa      	ldr	r2, [r7, #28]
 8006954:	fb02 f303 	mul.w	r3, r2, r3
 8006958:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800695a:	e054      	b.n	8006a06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006962:	d050      	beq.n	8006a06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006964:	f7fd f9f6 	bl	8003d54 <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	69fa      	ldr	r2, [r7, #28]
 8006970:	429a      	cmp	r2, r3
 8006972:	d902      	bls.n	800697a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d13d      	bne.n	80069f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006988:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006992:	d111      	bne.n	80069b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800699c:	d004      	beq.n	80069a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069a6:	d107      	bne.n	80069b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069c0:	d10f      	bne.n	80069e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e017      	b.n	8006a26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d101      	bne.n	8006a00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	3b01      	subs	r3, #1
 8006a04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	689a      	ldr	r2, [r3, #8]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	4013      	ands	r3, r2
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	bf0c      	ite	eq
 8006a16:	2301      	moveq	r3, #1
 8006a18:	2300      	movne	r3, #0
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	79fb      	ldrb	r3, [r7, #7]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d19b      	bne.n	800695c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3720      	adds	r7, #32
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	2000000c 	.word	0x2000000c

08006a34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b088      	sub	sp, #32
 8006a38:	af02      	add	r7, sp, #8
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a40:	4b1b      	ldr	r3, [pc, #108]	; (8006ab0 <SPI_EndRxTxTransaction+0x7c>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a1b      	ldr	r2, [pc, #108]	; (8006ab4 <SPI_EndRxTxTransaction+0x80>)
 8006a46:	fba2 2303 	umull	r2, r3, r2, r3
 8006a4a:	0d5b      	lsrs	r3, r3, #21
 8006a4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a50:	fb02 f303 	mul.w	r3, r2, r3
 8006a54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a5e:	d112      	bne.n	8006a86 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	2200      	movs	r2, #0
 8006a68:	2180      	movs	r1, #128	; 0x80
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f7ff ff5a 	bl	8006924 <SPI_WaitFlagStateUntilTimeout>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d016      	beq.n	8006aa4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7a:	f043 0220 	orr.w	r2, r3, #32
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e00f      	b.n	8006aa6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00a      	beq.n	8006aa2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9c:	2b80      	cmp	r3, #128	; 0x80
 8006a9e:	d0f2      	beq.n	8006a86 <SPI_EndRxTxTransaction+0x52>
 8006aa0:	e000      	b.n	8006aa4 <SPI_EndRxTxTransaction+0x70>
        break;
 8006aa2:	bf00      	nop
  }

  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	2000000c 	.word	0x2000000c
 8006ab4:	165e9f81 	.word	0x165e9f81

08006ab8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e041      	b.n	8006b4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d106      	bne.n	8006ae4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7fc fd04 	bl	80034ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	3304      	adds	r3, #4
 8006af4:	4619      	mov	r1, r3
 8006af6:	4610      	mov	r0, r2
 8006af8:	f000 ff4c 	bl	8007994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
	...

08006b58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d001      	beq.n	8006b70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e044      	b.n	8006bfa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2202      	movs	r2, #2
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68da      	ldr	r2, [r3, #12]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f042 0201 	orr.w	r2, r2, #1
 8006b86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a1e      	ldr	r2, [pc, #120]	; (8006c08 <HAL_TIM_Base_Start_IT+0xb0>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d018      	beq.n	8006bc4 <HAL_TIM_Base_Start_IT+0x6c>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b9a:	d013      	beq.n	8006bc4 <HAL_TIM_Base_Start_IT+0x6c>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a1a      	ldr	r2, [pc, #104]	; (8006c0c <HAL_TIM_Base_Start_IT+0xb4>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d00e      	beq.n	8006bc4 <HAL_TIM_Base_Start_IT+0x6c>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a19      	ldr	r2, [pc, #100]	; (8006c10 <HAL_TIM_Base_Start_IT+0xb8>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d009      	beq.n	8006bc4 <HAL_TIM_Base_Start_IT+0x6c>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a17      	ldr	r2, [pc, #92]	; (8006c14 <HAL_TIM_Base_Start_IT+0xbc>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d004      	beq.n	8006bc4 <HAL_TIM_Base_Start_IT+0x6c>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a16      	ldr	r2, [pc, #88]	; (8006c18 <HAL_TIM_Base_Start_IT+0xc0>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d111      	bne.n	8006be8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f003 0307 	and.w	r3, r3, #7
 8006bce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2b06      	cmp	r3, #6
 8006bd4:	d010      	beq.n	8006bf8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f042 0201 	orr.w	r2, r2, #1
 8006be4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006be6:	e007      	b.n	8006bf8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f042 0201 	orr.w	r2, r2, #1
 8006bf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	40010000 	.word	0x40010000
 8006c0c:	40000400 	.word	0x40000400
 8006c10:	40000800 	.word	0x40000800
 8006c14:	40000c00 	.word	0x40000c00
 8006c18:	40014000 	.word	0x40014000

08006c1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d101      	bne.n	8006c2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e041      	b.n	8006cb2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d106      	bne.n	8006c48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f839 	bl	8006cba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	3304      	adds	r3, #4
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4610      	mov	r0, r2
 8006c5c:	f000 fe9a 	bl	8007994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b083      	sub	sp, #12
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006cc2:	bf00      	nop
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
	...

08006cd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d109      	bne.n	8006cf4 <HAL_TIM_PWM_Start+0x24>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	bf14      	ite	ne
 8006cec:	2301      	movne	r3, #1
 8006cee:	2300      	moveq	r3, #0
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	e022      	b.n	8006d3a <HAL_TIM_PWM_Start+0x6a>
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	2b04      	cmp	r3, #4
 8006cf8:	d109      	bne.n	8006d0e <HAL_TIM_PWM_Start+0x3e>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	bf14      	ite	ne
 8006d06:	2301      	movne	r3, #1
 8006d08:	2300      	moveq	r3, #0
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	e015      	b.n	8006d3a <HAL_TIM_PWM_Start+0x6a>
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2b08      	cmp	r3, #8
 8006d12:	d109      	bne.n	8006d28 <HAL_TIM_PWM_Start+0x58>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	bf14      	ite	ne
 8006d20:	2301      	movne	r3, #1
 8006d22:	2300      	moveq	r3, #0
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	e008      	b.n	8006d3a <HAL_TIM_PWM_Start+0x6a>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	bf14      	ite	ne
 8006d34:	2301      	movne	r3, #1
 8006d36:	2300      	moveq	r3, #0
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e068      	b.n	8006e14 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d104      	bne.n	8006d52 <HAL_TIM_PWM_Start+0x82>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d50:	e013      	b.n	8006d7a <HAL_TIM_PWM_Start+0xaa>
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2b04      	cmp	r3, #4
 8006d56:	d104      	bne.n	8006d62 <HAL_TIM_PWM_Start+0x92>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d60:	e00b      	b.n	8006d7a <HAL_TIM_PWM_Start+0xaa>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b08      	cmp	r3, #8
 8006d66:	d104      	bne.n	8006d72 <HAL_TIM_PWM_Start+0xa2>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d70:	e003      	b.n	8006d7a <HAL_TIM_PWM_Start+0xaa>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2202      	movs	r2, #2
 8006d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	4618      	mov	r0, r3
 8006d84:	f001 f8ac 	bl	8007ee0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a23      	ldr	r2, [pc, #140]	; (8006e1c <HAL_TIM_PWM_Start+0x14c>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d107      	bne.n	8006da2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006da0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a1d      	ldr	r2, [pc, #116]	; (8006e1c <HAL_TIM_PWM_Start+0x14c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d018      	beq.n	8006dde <HAL_TIM_PWM_Start+0x10e>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db4:	d013      	beq.n	8006dde <HAL_TIM_PWM_Start+0x10e>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a19      	ldr	r2, [pc, #100]	; (8006e20 <HAL_TIM_PWM_Start+0x150>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d00e      	beq.n	8006dde <HAL_TIM_PWM_Start+0x10e>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a17      	ldr	r2, [pc, #92]	; (8006e24 <HAL_TIM_PWM_Start+0x154>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d009      	beq.n	8006dde <HAL_TIM_PWM_Start+0x10e>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a16      	ldr	r2, [pc, #88]	; (8006e28 <HAL_TIM_PWM_Start+0x158>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d004      	beq.n	8006dde <HAL_TIM_PWM_Start+0x10e>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a14      	ldr	r2, [pc, #80]	; (8006e2c <HAL_TIM_PWM_Start+0x15c>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d111      	bne.n	8006e02 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f003 0307 	and.w	r3, r3, #7
 8006de8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b06      	cmp	r3, #6
 8006dee:	d010      	beq.n	8006e12 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f042 0201 	orr.w	r2, r2, #1
 8006dfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e00:	e007      	b.n	8006e12 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f042 0201 	orr.w	r2, r2, #1
 8006e10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	40010000 	.word	0x40010000
 8006e20:	40000400 	.word	0x40000400
 8006e24:	40000800 	.word	0x40000800
 8006e28:	40000c00 	.word	0x40000c00
 8006e2c:	40014000 	.word	0x40014000

08006e30 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	6839      	ldr	r1, [r7, #0]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f001 f84c 	bl	8007ee0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a29      	ldr	r2, [pc, #164]	; (8006ef4 <HAL_TIM_PWM_Stop+0xc4>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d117      	bne.n	8006e82 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6a1a      	ldr	r2, [r3, #32]
 8006e58:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10f      	bne.n	8006e82 <HAL_TIM_PWM_Stop+0x52>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6a1a      	ldr	r2, [r3, #32]
 8006e68:	f240 4344 	movw	r3, #1092	; 0x444
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d107      	bne.n	8006e82 <HAL_TIM_PWM_Stop+0x52>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6a1a      	ldr	r2, [r3, #32]
 8006e88:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10f      	bne.n	8006eb2 <HAL_TIM_PWM_Stop+0x82>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6a1a      	ldr	r2, [r3, #32]
 8006e98:	f240 4344 	movw	r3, #1092	; 0x444
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d107      	bne.n	8006eb2 <HAL_TIM_PWM_Stop+0x82>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0201 	bic.w	r2, r2, #1
 8006eb0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d104      	bne.n	8006ec2 <HAL_TIM_PWM_Stop+0x92>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ec0:	e013      	b.n	8006eea <HAL_TIM_PWM_Stop+0xba>
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	2b04      	cmp	r3, #4
 8006ec6:	d104      	bne.n	8006ed2 <HAL_TIM_PWM_Stop+0xa2>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ed0:	e00b      	b.n	8006eea <HAL_TIM_PWM_Stop+0xba>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	2b08      	cmp	r3, #8
 8006ed6:	d104      	bne.n	8006ee2 <HAL_TIM_PWM_Stop+0xb2>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ee0:	e003      	b.n	8006eea <HAL_TIM_PWM_Stop+0xba>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3708      	adds	r7, #8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	40010000 	.word	0x40010000

08006ef8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
 8006f04:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006f06:	2300      	movs	r3, #0
 8006f08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d109      	bne.n	8006f24 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	bf0c      	ite	eq
 8006f1c:	2301      	moveq	r3, #1
 8006f1e:	2300      	movne	r3, #0
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	e022      	b.n	8006f6a <HAL_TIM_PWM_Start_DMA+0x72>
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d109      	bne.n	8006f3e <HAL_TIM_PWM_Start_DMA+0x46>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	bf0c      	ite	eq
 8006f36:	2301      	moveq	r3, #1
 8006f38:	2300      	movne	r3, #0
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	e015      	b.n	8006f6a <HAL_TIM_PWM_Start_DMA+0x72>
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	2b08      	cmp	r3, #8
 8006f42:	d109      	bne.n	8006f58 <HAL_TIM_PWM_Start_DMA+0x60>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	bf0c      	ite	eq
 8006f50:	2301      	moveq	r3, #1
 8006f52:	2300      	movne	r3, #0
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	e008      	b.n	8006f6a <HAL_TIM_PWM_Start_DMA+0x72>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	bf0c      	ite	eq
 8006f64:	2301      	moveq	r3, #1
 8006f66:	2300      	movne	r3, #0
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8006f6e:	2302      	movs	r3, #2
 8006f70:	e15d      	b.n	800722e <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d109      	bne.n	8006f8c <HAL_TIM_PWM_Start_DMA+0x94>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	bf0c      	ite	eq
 8006f84:	2301      	moveq	r3, #1
 8006f86:	2300      	movne	r3, #0
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	e022      	b.n	8006fd2 <HAL_TIM_PWM_Start_DMA+0xda>
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2b04      	cmp	r3, #4
 8006f90:	d109      	bne.n	8006fa6 <HAL_TIM_PWM_Start_DMA+0xae>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	bf0c      	ite	eq
 8006f9e:	2301      	moveq	r3, #1
 8006fa0:	2300      	movne	r3, #0
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	e015      	b.n	8006fd2 <HAL_TIM_PWM_Start_DMA+0xda>
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	2b08      	cmp	r3, #8
 8006faa:	d109      	bne.n	8006fc0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	bf0c      	ite	eq
 8006fb8:	2301      	moveq	r3, #1
 8006fba:	2300      	movne	r3, #0
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	e008      	b.n	8006fd2 <HAL_TIM_PWM_Start_DMA+0xda>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	bf0c      	ite	eq
 8006fcc:	2301      	moveq	r3, #1
 8006fce:	2300      	movne	r3, #0
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d024      	beq.n	8007020 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d104      	bne.n	8006fe6 <HAL_TIM_PWM_Start_DMA+0xee>
 8006fdc:	887b      	ldrh	r3, [r7, #2]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e123      	b.n	800722e <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d104      	bne.n	8006ff6 <HAL_TIM_PWM_Start_DMA+0xfe>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ff4:	e016      	b.n	8007024 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2b04      	cmp	r3, #4
 8006ffa:	d104      	bne.n	8007006 <HAL_TIM_PWM_Start_DMA+0x10e>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2202      	movs	r2, #2
 8007000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007004:	e00e      	b.n	8007024 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2b08      	cmp	r3, #8
 800700a:	d104      	bne.n	8007016 <HAL_TIM_PWM_Start_DMA+0x11e>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2202      	movs	r2, #2
 8007010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007014:	e006      	b.n	8007024 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2202      	movs	r2, #2
 800701a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800701e:	e001      	b.n	8007024 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e104      	b.n	800722e <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2b0c      	cmp	r3, #12
 8007028:	f200 80ae 	bhi.w	8007188 <HAL_TIM_PWM_Start_DMA+0x290>
 800702c:	a201      	add	r2, pc, #4	; (adr r2, 8007034 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800702e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007032:	bf00      	nop
 8007034:	08007069 	.word	0x08007069
 8007038:	08007189 	.word	0x08007189
 800703c:	08007189 	.word	0x08007189
 8007040:	08007189 	.word	0x08007189
 8007044:	080070b1 	.word	0x080070b1
 8007048:	08007189 	.word	0x08007189
 800704c:	08007189 	.word	0x08007189
 8007050:	08007189 	.word	0x08007189
 8007054:	080070f9 	.word	0x080070f9
 8007058:	08007189 	.word	0x08007189
 800705c:	08007189 	.word	0x08007189
 8007060:	08007189 	.word	0x08007189
 8007064:	08007141 	.word	0x08007141
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	4a72      	ldr	r2, [pc, #456]	; (8007238 <HAL_TIM_PWM_Start_DMA+0x340>)
 800706e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007074:	4a71      	ldr	r2, [pc, #452]	; (800723c <HAL_TIM_PWM_Start_DMA+0x344>)
 8007076:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707c:	4a70      	ldr	r2, [pc, #448]	; (8007240 <HAL_TIM_PWM_Start_DMA+0x348>)
 800707e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007084:	6879      	ldr	r1, [r7, #4]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3334      	adds	r3, #52	; 0x34
 800708c:	461a      	mov	r2, r3
 800708e:	887b      	ldrh	r3, [r7, #2]
 8007090:	f7fd f850 	bl	8004134 <HAL_DMA_Start_IT>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e0c7      	b.n	800722e <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68da      	ldr	r2, [r3, #12]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070ac:	60da      	str	r2, [r3, #12]
      break;
 80070ae:	e06e      	b.n	800718e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b4:	4a60      	ldr	r2, [pc, #384]	; (8007238 <HAL_TIM_PWM_Start_DMA+0x340>)
 80070b6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070bc:	4a5f      	ldr	r2, [pc, #380]	; (800723c <HAL_TIM_PWM_Start_DMA+0x344>)
 80070be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c4:	4a5e      	ldr	r2, [pc, #376]	; (8007240 <HAL_TIM_PWM_Start_DMA+0x348>)
 80070c6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80070cc:	6879      	ldr	r1, [r7, #4]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	3338      	adds	r3, #56	; 0x38
 80070d4:	461a      	mov	r2, r3
 80070d6:	887b      	ldrh	r3, [r7, #2]
 80070d8:	f7fd f82c 	bl	8004134 <HAL_DMA_Start_IT>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e0a3      	b.n	800722e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68da      	ldr	r2, [r3, #12]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070f4:	60da      	str	r2, [r3, #12]
      break;
 80070f6:	e04a      	b.n	800718e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fc:	4a4e      	ldr	r2, [pc, #312]	; (8007238 <HAL_TIM_PWM_Start_DMA+0x340>)
 80070fe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007104:	4a4d      	ldr	r2, [pc, #308]	; (800723c <HAL_TIM_PWM_Start_DMA+0x344>)
 8007106:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710c:	4a4c      	ldr	r2, [pc, #304]	; (8007240 <HAL_TIM_PWM_Start_DMA+0x348>)
 800710e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007114:	6879      	ldr	r1, [r7, #4]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	333c      	adds	r3, #60	; 0x3c
 800711c:	461a      	mov	r2, r3
 800711e:	887b      	ldrh	r3, [r7, #2]
 8007120:	f7fd f808 	bl	8004134 <HAL_DMA_Start_IT>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d001      	beq.n	800712e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e07f      	b.n	800722e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68da      	ldr	r2, [r3, #12]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800713c:	60da      	str	r2, [r3, #12]
      break;
 800713e:	e026      	b.n	800718e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007144:	4a3c      	ldr	r2, [pc, #240]	; (8007238 <HAL_TIM_PWM_Start_DMA+0x340>)
 8007146:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714c:	4a3b      	ldr	r2, [pc, #236]	; (800723c <HAL_TIM_PWM_Start_DMA+0x344>)
 800714e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007154:	4a3a      	ldr	r2, [pc, #232]	; (8007240 <HAL_TIM_PWM_Start_DMA+0x348>)
 8007156:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800715c:	6879      	ldr	r1, [r7, #4]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	3340      	adds	r3, #64	; 0x40
 8007164:	461a      	mov	r2, r3
 8007166:	887b      	ldrh	r3, [r7, #2]
 8007168:	f7fc ffe4 	bl	8004134 <HAL_DMA_Start_IT>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e05b      	b.n	800722e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68da      	ldr	r2, [r3, #12]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007184:	60da      	str	r2, [r3, #12]
      break;
 8007186:	e002      	b.n	800718e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	75fb      	strb	r3, [r7, #23]
      break;
 800718c:	bf00      	nop
  }

  if (status == HAL_OK)
 800718e:	7dfb      	ldrb	r3, [r7, #23]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d14b      	bne.n	800722c <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2201      	movs	r2, #1
 800719a:	68b9      	ldr	r1, [r7, #8]
 800719c:	4618      	mov	r0, r3
 800719e:	f000 fe9f 	bl	8007ee0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a27      	ldr	r2, [pc, #156]	; (8007244 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d107      	bne.n	80071bc <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071ba:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a20      	ldr	r2, [pc, #128]	; (8007244 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d018      	beq.n	80071f8 <HAL_TIM_PWM_Start_DMA+0x300>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ce:	d013      	beq.n	80071f8 <HAL_TIM_PWM_Start_DMA+0x300>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a1c      	ldr	r2, [pc, #112]	; (8007248 <HAL_TIM_PWM_Start_DMA+0x350>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d00e      	beq.n	80071f8 <HAL_TIM_PWM_Start_DMA+0x300>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a1b      	ldr	r2, [pc, #108]	; (800724c <HAL_TIM_PWM_Start_DMA+0x354>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d009      	beq.n	80071f8 <HAL_TIM_PWM_Start_DMA+0x300>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a19      	ldr	r2, [pc, #100]	; (8007250 <HAL_TIM_PWM_Start_DMA+0x358>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d004      	beq.n	80071f8 <HAL_TIM_PWM_Start_DMA+0x300>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a18      	ldr	r2, [pc, #96]	; (8007254 <HAL_TIM_PWM_Start_DMA+0x35c>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d111      	bne.n	800721c <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f003 0307 	and.w	r3, r3, #7
 8007202:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	2b06      	cmp	r3, #6
 8007208:	d010      	beq.n	800722c <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f042 0201 	orr.w	r2, r2, #1
 8007218:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800721a:	e007      	b.n	800722c <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f042 0201 	orr.w	r2, r2, #1
 800722a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800722c:	7dfb      	ldrb	r3, [r7, #23]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	08007885 	.word	0x08007885
 800723c:	0800792d 	.word	0x0800792d
 8007240:	080077f3 	.word	0x080077f3
 8007244:	40010000 	.word	0x40010000
 8007248:	40000400 	.word	0x40000400
 800724c:	40000800 	.word	0x40000800
 8007250:	40000c00 	.word	0x40000c00
 8007254:	40014000 	.word	0x40014000

08007258 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	f003 0302 	and.w	r3, r3, #2
 800726a:	2b02      	cmp	r3, #2
 800726c:	d122      	bne.n	80072b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f003 0302 	and.w	r3, r3, #2
 8007278:	2b02      	cmp	r3, #2
 800727a:	d11b      	bne.n	80072b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f06f 0202 	mvn.w	r2, #2
 8007284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d003      	beq.n	80072a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fa77 	bl	800778e <HAL_TIM_IC_CaptureCallback>
 80072a0:	e005      	b.n	80072ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fa69 	bl	800777a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fa7a 	bl	80077a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	f003 0304 	and.w	r3, r3, #4
 80072be:	2b04      	cmp	r3, #4
 80072c0:	d122      	bne.n	8007308 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	f003 0304 	and.w	r3, r3, #4
 80072cc:	2b04      	cmp	r3, #4
 80072ce:	d11b      	bne.n	8007308 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f06f 0204 	mvn.w	r2, #4
 80072d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2202      	movs	r2, #2
 80072de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d003      	beq.n	80072f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fa4d 	bl	800778e <HAL_TIM_IC_CaptureCallback>
 80072f4:	e005      	b.n	8007302 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fa3f 	bl	800777a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fa50 	bl	80077a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	f003 0308 	and.w	r3, r3, #8
 8007312:	2b08      	cmp	r3, #8
 8007314:	d122      	bne.n	800735c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	f003 0308 	and.w	r3, r3, #8
 8007320:	2b08      	cmp	r3, #8
 8007322:	d11b      	bne.n	800735c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f06f 0208 	mvn.w	r2, #8
 800732c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2204      	movs	r2, #4
 8007332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	f003 0303 	and.w	r3, r3, #3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d003      	beq.n	800734a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fa23 	bl	800778e <HAL_TIM_IC_CaptureCallback>
 8007348:	e005      	b.n	8007356 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fa15 	bl	800777a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fa26 	bl	80077a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	f003 0310 	and.w	r3, r3, #16
 8007366:	2b10      	cmp	r3, #16
 8007368:	d122      	bne.n	80073b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	f003 0310 	and.w	r3, r3, #16
 8007374:	2b10      	cmp	r3, #16
 8007376:	d11b      	bne.n	80073b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f06f 0210 	mvn.w	r2, #16
 8007380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2208      	movs	r2, #8
 8007386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007392:	2b00      	cmp	r3, #0
 8007394:	d003      	beq.n	800739e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f9f9 	bl	800778e <HAL_TIM_IC_CaptureCallback>
 800739c:	e005      	b.n	80073aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f9eb 	bl	800777a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f9fc 	bl	80077a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	f003 0301 	and.w	r3, r3, #1
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d10e      	bne.n	80073dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d107      	bne.n	80073dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f06f 0201 	mvn.w	r2, #1
 80073d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7fa fe6e 	bl	80020b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e6:	2b80      	cmp	r3, #128	; 0x80
 80073e8:	d10e      	bne.n	8007408 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f4:	2b80      	cmp	r3, #128	; 0x80
 80073f6:	d107      	bne.n	8007408 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fe5c 	bl	80080c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007412:	2b40      	cmp	r3, #64	; 0x40
 8007414:	d10e      	bne.n	8007434 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007420:	2b40      	cmp	r3, #64	; 0x40
 8007422:	d107      	bne.n	8007434 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800742c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f9cb 	bl	80077ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	f003 0320 	and.w	r3, r3, #32
 800743e:	2b20      	cmp	r3, #32
 8007440:	d10e      	bne.n	8007460 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	f003 0320 	and.w	r3, r3, #32
 800744c:	2b20      	cmp	r3, #32
 800744e:	d107      	bne.n	8007460 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f06f 0220 	mvn.w	r2, #32
 8007458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fe26 	bl	80080ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007460:	bf00      	nop
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007474:	2300      	movs	r3, #0
 8007476:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800747e:	2b01      	cmp	r3, #1
 8007480:	d101      	bne.n	8007486 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007482:	2302      	movs	r3, #2
 8007484:	e0ae      	b.n	80075e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2b0c      	cmp	r3, #12
 8007492:	f200 809f 	bhi.w	80075d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007496:	a201      	add	r2, pc, #4	; (adr r2, 800749c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800749c:	080074d1 	.word	0x080074d1
 80074a0:	080075d5 	.word	0x080075d5
 80074a4:	080075d5 	.word	0x080075d5
 80074a8:	080075d5 	.word	0x080075d5
 80074ac:	08007511 	.word	0x08007511
 80074b0:	080075d5 	.word	0x080075d5
 80074b4:	080075d5 	.word	0x080075d5
 80074b8:	080075d5 	.word	0x080075d5
 80074bc:	08007553 	.word	0x08007553
 80074c0:	080075d5 	.word	0x080075d5
 80074c4:	080075d5 	.word	0x080075d5
 80074c8:	080075d5 	.word	0x080075d5
 80074cc:	08007593 	.word	0x08007593
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68b9      	ldr	r1, [r7, #8]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 fadc 	bl	8007a94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	699a      	ldr	r2, [r3, #24]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f042 0208 	orr.w	r2, r2, #8
 80074ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	699a      	ldr	r2, [r3, #24]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f022 0204 	bic.w	r2, r2, #4
 80074fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6999      	ldr	r1, [r3, #24]
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	691a      	ldr	r2, [r3, #16]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	430a      	orrs	r2, r1
 800750c:	619a      	str	r2, [r3, #24]
      break;
 800750e:	e064      	b.n	80075da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68b9      	ldr	r1, [r7, #8]
 8007516:	4618      	mov	r0, r3
 8007518:	f000 fb22 	bl	8007b60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	699a      	ldr	r2, [r3, #24]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800752a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	699a      	ldr	r2, [r3, #24]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800753a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6999      	ldr	r1, [r3, #24]
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	021a      	lsls	r2, r3, #8
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	430a      	orrs	r2, r1
 800754e:	619a      	str	r2, [r3, #24]
      break;
 8007550:	e043      	b.n	80075da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68b9      	ldr	r1, [r7, #8]
 8007558:	4618      	mov	r0, r3
 800755a:	f000 fb6d 	bl	8007c38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	69da      	ldr	r2, [r3, #28]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f042 0208 	orr.w	r2, r2, #8
 800756c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	69da      	ldr	r2, [r3, #28]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f022 0204 	bic.w	r2, r2, #4
 800757c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	69d9      	ldr	r1, [r3, #28]
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	691a      	ldr	r2, [r3, #16]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	430a      	orrs	r2, r1
 800758e:	61da      	str	r2, [r3, #28]
      break;
 8007590:	e023      	b.n	80075da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68b9      	ldr	r1, [r7, #8]
 8007598:	4618      	mov	r0, r3
 800759a:	f000 fbb7 	bl	8007d0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	69da      	ldr	r2, [r3, #28]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	69da      	ldr	r2, [r3, #28]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	69d9      	ldr	r1, [r3, #28]
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	021a      	lsls	r2, r3, #8
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	430a      	orrs	r2, r1
 80075d0:	61da      	str	r2, [r3, #28]
      break;
 80075d2:	e002      	b.n	80075da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	75fb      	strb	r3, [r7, #23]
      break;
 80075d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3718      	adds	r7, #24
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007600:	2b01      	cmp	r3, #1
 8007602:	d101      	bne.n	8007608 <HAL_TIM_ConfigClockSource+0x1c>
 8007604:	2302      	movs	r3, #2
 8007606:	e0b4      	b.n	8007772 <HAL_TIM_ConfigClockSource+0x186>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2202      	movs	r2, #2
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800762e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007640:	d03e      	beq.n	80076c0 <HAL_TIM_ConfigClockSource+0xd4>
 8007642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007646:	f200 8087 	bhi.w	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 800764a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800764e:	f000 8086 	beq.w	800775e <HAL_TIM_ConfigClockSource+0x172>
 8007652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007656:	d87f      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007658:	2b70      	cmp	r3, #112	; 0x70
 800765a:	d01a      	beq.n	8007692 <HAL_TIM_ConfigClockSource+0xa6>
 800765c:	2b70      	cmp	r3, #112	; 0x70
 800765e:	d87b      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007660:	2b60      	cmp	r3, #96	; 0x60
 8007662:	d050      	beq.n	8007706 <HAL_TIM_ConfigClockSource+0x11a>
 8007664:	2b60      	cmp	r3, #96	; 0x60
 8007666:	d877      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007668:	2b50      	cmp	r3, #80	; 0x50
 800766a:	d03c      	beq.n	80076e6 <HAL_TIM_ConfigClockSource+0xfa>
 800766c:	2b50      	cmp	r3, #80	; 0x50
 800766e:	d873      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007670:	2b40      	cmp	r3, #64	; 0x40
 8007672:	d058      	beq.n	8007726 <HAL_TIM_ConfigClockSource+0x13a>
 8007674:	2b40      	cmp	r3, #64	; 0x40
 8007676:	d86f      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007678:	2b30      	cmp	r3, #48	; 0x30
 800767a:	d064      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0x15a>
 800767c:	2b30      	cmp	r3, #48	; 0x30
 800767e:	d86b      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007680:	2b20      	cmp	r3, #32
 8007682:	d060      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0x15a>
 8007684:	2b20      	cmp	r3, #32
 8007686:	d867      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007688:	2b00      	cmp	r3, #0
 800768a:	d05c      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0x15a>
 800768c:	2b10      	cmp	r3, #16
 800768e:	d05a      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0x15a>
 8007690:	e062      	b.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6818      	ldr	r0, [r3, #0]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	6899      	ldr	r1, [r3, #8]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	f000 fbfd 	bl	8007ea0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	609a      	str	r2, [r3, #8]
      break;
 80076be:	e04f      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6818      	ldr	r0, [r3, #0]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	6899      	ldr	r1, [r3, #8]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f000 fbe6 	bl	8007ea0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	689a      	ldr	r2, [r3, #8]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076e2:	609a      	str	r2, [r3, #8]
      break;
 80076e4:	e03c      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	6859      	ldr	r1, [r3, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	461a      	mov	r2, r3
 80076f4:	f000 fb5a 	bl	8007dac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2150      	movs	r1, #80	; 0x50
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 fbb3 	bl	8007e6a <TIM_ITRx_SetConfig>
      break;
 8007704:	e02c      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6818      	ldr	r0, [r3, #0]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	6859      	ldr	r1, [r3, #4]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	461a      	mov	r2, r3
 8007714:	f000 fb79 	bl	8007e0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2160      	movs	r1, #96	; 0x60
 800771e:	4618      	mov	r0, r3
 8007720:	f000 fba3 	bl	8007e6a <TIM_ITRx_SetConfig>
      break;
 8007724:	e01c      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6818      	ldr	r0, [r3, #0]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	6859      	ldr	r1, [r3, #4]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	461a      	mov	r2, r3
 8007734:	f000 fb3a 	bl	8007dac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2140      	movs	r1, #64	; 0x40
 800773e:	4618      	mov	r0, r3
 8007740:	f000 fb93 	bl	8007e6a <TIM_ITRx_SetConfig>
      break;
 8007744:	e00c      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4619      	mov	r1, r3
 8007750:	4610      	mov	r0, r2
 8007752:	f000 fb8a 	bl	8007e6a <TIM_ITRx_SetConfig>
      break;
 8007756:	e003      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	73fb      	strb	r3, [r7, #15]
      break;
 800775c:	e000      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800775e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007770:	7bfb      	ldrb	r3, [r7, #15]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800777a:	b480      	push	{r7}
 800777c:	b083      	sub	sp, #12
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007782:	bf00      	nop
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800778e:	b480      	push	{r7}
 8007790:	b083      	sub	sp, #12
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007796:	bf00      	nop
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b083      	sub	sp, #12
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077aa:	bf00      	nop
 80077ac:	370c      	adds	r7, #12
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b083      	sub	sp, #12
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80077be:	bf00      	nop
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b083      	sub	sp, #12
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077d2:	bf00      	nop
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80077de:	b480      	push	{r7}
 80077e0:	b083      	sub	sp, #12
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80077e6:	bf00      	nop
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b084      	sub	sp, #16
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	429a      	cmp	r2, r3
 8007808:	d107      	bne.n	800781a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2201      	movs	r2, #1
 800780e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007818:	e02a      	b.n	8007870 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	429a      	cmp	r2, r3
 8007822:	d107      	bne.n	8007834 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2202      	movs	r2, #2
 8007828:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2201      	movs	r2, #1
 800782e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007832:	e01d      	b.n	8007870 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	429a      	cmp	r2, r3
 800783c:	d107      	bne.n	800784e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2204      	movs	r2, #4
 8007842:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800784c:	e010      	b.n	8007870 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	429a      	cmp	r2, r3
 8007856:	d107      	bne.n	8007868 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2208      	movs	r2, #8
 800785c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2201      	movs	r2, #1
 8007862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007866:	e003      	b.n	8007870 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f7ff ffb4 	bl	80077de <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	771a      	strb	r2, [r3, #28]
}
 800787c:	bf00      	nop
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007890:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	429a      	cmp	r2, r3
 800789a:	d10b      	bne.n	80078b4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2201      	movs	r2, #1
 80078a0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d136      	bne.n	8007918 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078b2:	e031      	b.n	8007918 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d10b      	bne.n	80078d6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2202      	movs	r2, #2
 80078c2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	69db      	ldr	r3, [r3, #28]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d125      	bne.n	8007918 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078d4:	e020      	b.n	8007918 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d10b      	bne.n	80078f8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2204      	movs	r2, #4
 80078e4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	69db      	ldr	r3, [r3, #28]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d114      	bne.n	8007918 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078f6:	e00f      	b.n	8007918 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d10a      	bne.n	8007918 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2208      	movs	r2, #8
 8007906:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	69db      	ldr	r3, [r3, #28]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d103      	bne.n	8007918 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f7ff ff42 	bl	80077a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	771a      	strb	r2, [r3, #28]
}
 8007924:	bf00      	nop
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007938:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	429a      	cmp	r2, r3
 8007942:	d103      	bne.n	800794c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2201      	movs	r2, #1
 8007948:	771a      	strb	r2, [r3, #28]
 800794a:	e019      	b.n	8007980 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	429a      	cmp	r2, r3
 8007954:	d103      	bne.n	800795e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2202      	movs	r2, #2
 800795a:	771a      	strb	r2, [r3, #28]
 800795c:	e010      	b.n	8007980 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	429a      	cmp	r2, r3
 8007966:	d103      	bne.n	8007970 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2204      	movs	r2, #4
 800796c:	771a      	strb	r2, [r3, #28]
 800796e:	e007      	b.n	8007980 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	429a      	cmp	r2, r3
 8007978:	d102      	bne.n	8007980 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2208      	movs	r2, #8
 800797e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f7ff ff18 	bl	80077b6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	771a      	strb	r2, [r3, #28]
}
 800798c:	bf00      	nop
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a34      	ldr	r2, [pc, #208]	; (8007a78 <TIM_Base_SetConfig+0xe4>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d00f      	beq.n	80079cc <TIM_Base_SetConfig+0x38>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b2:	d00b      	beq.n	80079cc <TIM_Base_SetConfig+0x38>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a31      	ldr	r2, [pc, #196]	; (8007a7c <TIM_Base_SetConfig+0xe8>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d007      	beq.n	80079cc <TIM_Base_SetConfig+0x38>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a30      	ldr	r2, [pc, #192]	; (8007a80 <TIM_Base_SetConfig+0xec>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d003      	beq.n	80079cc <TIM_Base_SetConfig+0x38>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a2f      	ldr	r2, [pc, #188]	; (8007a84 <TIM_Base_SetConfig+0xf0>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d108      	bne.n	80079de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	4313      	orrs	r3, r2
 80079dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a25      	ldr	r2, [pc, #148]	; (8007a78 <TIM_Base_SetConfig+0xe4>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d01b      	beq.n	8007a1e <TIM_Base_SetConfig+0x8a>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ec:	d017      	beq.n	8007a1e <TIM_Base_SetConfig+0x8a>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a22      	ldr	r2, [pc, #136]	; (8007a7c <TIM_Base_SetConfig+0xe8>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d013      	beq.n	8007a1e <TIM_Base_SetConfig+0x8a>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a21      	ldr	r2, [pc, #132]	; (8007a80 <TIM_Base_SetConfig+0xec>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d00f      	beq.n	8007a1e <TIM_Base_SetConfig+0x8a>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a20      	ldr	r2, [pc, #128]	; (8007a84 <TIM_Base_SetConfig+0xf0>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d00b      	beq.n	8007a1e <TIM_Base_SetConfig+0x8a>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a1f      	ldr	r2, [pc, #124]	; (8007a88 <TIM_Base_SetConfig+0xf4>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d007      	beq.n	8007a1e <TIM_Base_SetConfig+0x8a>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a1e      	ldr	r2, [pc, #120]	; (8007a8c <TIM_Base_SetConfig+0xf8>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d003      	beq.n	8007a1e <TIM_Base_SetConfig+0x8a>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a1d      	ldr	r2, [pc, #116]	; (8007a90 <TIM_Base_SetConfig+0xfc>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d108      	bne.n	8007a30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	689a      	ldr	r2, [r3, #8]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a08      	ldr	r2, [pc, #32]	; (8007a78 <TIM_Base_SetConfig+0xe4>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d103      	bne.n	8007a64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	691a      	ldr	r2, [r3, #16]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	615a      	str	r2, [r3, #20]
}
 8007a6a:	bf00      	nop
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	40010000 	.word	0x40010000
 8007a7c:	40000400 	.word	0x40000400
 8007a80:	40000800 	.word	0x40000800
 8007a84:	40000c00 	.word	0x40000c00
 8007a88:	40014000 	.word	0x40014000
 8007a8c:	40014400 	.word	0x40014400
 8007a90:	40014800 	.word	0x40014800

08007a94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b087      	sub	sp, #28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
 8007aa2:	f023 0201 	bic.w	r2, r3, #1
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	699b      	ldr	r3, [r3, #24]
 8007aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f023 0303 	bic.w	r3, r3, #3
 8007aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	f023 0302 	bic.w	r3, r3, #2
 8007adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	697a      	ldr	r2, [r7, #20]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a1c      	ldr	r2, [pc, #112]	; (8007b5c <TIM_OC1_SetConfig+0xc8>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d10c      	bne.n	8007b0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	f023 0308 	bic.w	r3, r3, #8
 8007af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f023 0304 	bic.w	r3, r3, #4
 8007b08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a13      	ldr	r2, [pc, #76]	; (8007b5c <TIM_OC1_SetConfig+0xc8>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d111      	bne.n	8007b36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	693a      	ldr	r2, [r7, #16]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	693a      	ldr	r2, [r7, #16]
 8007b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	685a      	ldr	r2, [r3, #4]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	697a      	ldr	r2, [r7, #20]
 8007b4e:	621a      	str	r2, [r3, #32]
}
 8007b50:	bf00      	nop
 8007b52:	371c      	adds	r7, #28
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr
 8007b5c:	40010000 	.word	0x40010000

08007b60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b087      	sub	sp, #28
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	f023 0210 	bic.w	r2, r3, #16
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	021b      	lsls	r3, r3, #8
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	f023 0320 	bic.w	r3, r3, #32
 8007baa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	011b      	lsls	r3, r3, #4
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a1e      	ldr	r2, [pc, #120]	; (8007c34 <TIM_OC2_SetConfig+0xd4>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d10d      	bne.n	8007bdc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	011b      	lsls	r3, r3, #4
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a15      	ldr	r2, [pc, #84]	; (8007c34 <TIM_OC2_SetConfig+0xd4>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d113      	bne.n	8007c0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	695b      	ldr	r3, [r3, #20]
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	693a      	ldr	r2, [r7, #16]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	685a      	ldr	r2, [r3, #4]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	621a      	str	r2, [r3, #32]
}
 8007c26:	bf00      	nop
 8007c28:	371c      	adds	r7, #28
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	40010000 	.word	0x40010000

08007c38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b087      	sub	sp, #28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f023 0303 	bic.w	r3, r3, #3
 8007c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	021b      	lsls	r3, r3, #8
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a1d      	ldr	r2, [pc, #116]	; (8007d08 <TIM_OC3_SetConfig+0xd0>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d10d      	bne.n	8007cb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	021b      	lsls	r3, r3, #8
 8007ca4:	697a      	ldr	r2, [r7, #20]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a14      	ldr	r2, [pc, #80]	; (8007d08 <TIM_OC3_SetConfig+0xd0>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d113      	bne.n	8007ce2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	695b      	ldr	r3, [r3, #20]
 8007cce:	011b      	lsls	r3, r3, #4
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	699b      	ldr	r3, [r3, #24]
 8007cda:	011b      	lsls	r3, r3, #4
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	685a      	ldr	r2, [r3, #4]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	621a      	str	r2, [r3, #32]
}
 8007cfc:	bf00      	nop
 8007cfe:	371c      	adds	r7, #28
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr
 8007d08:	40010000 	.word	0x40010000

08007d0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b087      	sub	sp, #28
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	021b      	lsls	r3, r3, #8
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	031b      	lsls	r3, r3, #12
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a10      	ldr	r2, [pc, #64]	; (8007da8 <TIM_OC4_SetConfig+0x9c>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d109      	bne.n	8007d80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	695b      	ldr	r3, [r3, #20]
 8007d78:	019b      	lsls	r3, r3, #6
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	685a      	ldr	r2, [r3, #4]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	693a      	ldr	r2, [r7, #16]
 8007d98:	621a      	str	r2, [r3, #32]
}
 8007d9a:	bf00      	nop
 8007d9c:	371c      	adds	r7, #28
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	40010000 	.word	0x40010000

08007dac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b087      	sub	sp, #28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6a1b      	ldr	r3, [r3, #32]
 8007dbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	f023 0201 	bic.w	r2, r3, #1
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	011b      	lsls	r3, r3, #4
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f023 030a 	bic.w	r3, r3, #10
 8007de8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	693a      	ldr	r2, [r7, #16]
 8007df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	621a      	str	r2, [r3, #32]
}
 8007dfe:	bf00      	nop
 8007e00:	371c      	adds	r7, #28
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b087      	sub	sp, #28
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	60f8      	str	r0, [r7, #12]
 8007e12:	60b9      	str	r1, [r7, #8]
 8007e14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6a1b      	ldr	r3, [r3, #32]
 8007e1a:	f023 0210 	bic.w	r2, r3, #16
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6a1b      	ldr	r3, [r3, #32]
 8007e2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	031b      	lsls	r3, r3, #12
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	011b      	lsls	r3, r3, #4
 8007e4c:	693a      	ldr	r2, [r7, #16]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	621a      	str	r2, [r3, #32]
}
 8007e5e:	bf00      	nop
 8007e60:	371c      	adds	r7, #28
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b085      	sub	sp, #20
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e82:	683a      	ldr	r2, [r7, #0]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	f043 0307 	orr.w	r3, r3, #7
 8007e8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	609a      	str	r2, [r3, #8]
}
 8007e94:	bf00      	nop
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
 8007eac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007eba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	021a      	lsls	r2, r3, #8
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	697a      	ldr	r2, [r7, #20]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	697a      	ldr	r2, [r7, #20]
 8007ed2:	609a      	str	r2, [r3, #8]
}
 8007ed4:	bf00      	nop
 8007ed6:	371c      	adds	r7, #28
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b087      	sub	sp, #28
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	f003 031f 	and.w	r3, r3, #31
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6a1a      	ldr	r2, [r3, #32]
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	43db      	mvns	r3, r3
 8007f02:	401a      	ands	r2, r3
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6a1a      	ldr	r2, [r3, #32]
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	f003 031f 	and.w	r3, r3, #31
 8007f12:	6879      	ldr	r1, [r7, #4]
 8007f14:	fa01 f303 	lsl.w	r3, r1, r3
 8007f18:	431a      	orrs	r2, r3
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	621a      	str	r2, [r3, #32]
}
 8007f1e:	bf00      	nop
 8007f20:	371c      	adds	r7, #28
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr
	...

08007f2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d101      	bne.n	8007f44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f40:	2302      	movs	r3, #2
 8007f42:	e050      	b.n	8007fe6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a1c      	ldr	r2, [pc, #112]	; (8007ff4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d018      	beq.n	8007fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f90:	d013      	beq.n	8007fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a18      	ldr	r2, [pc, #96]	; (8007ff8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d00e      	beq.n	8007fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a16      	ldr	r2, [pc, #88]	; (8007ffc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d009      	beq.n	8007fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a15      	ldr	r2, [pc, #84]	; (8008000 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d004      	beq.n	8007fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a13      	ldr	r2, [pc, #76]	; (8008004 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d10c      	bne.n	8007fd4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	40010000 	.word	0x40010000
 8007ff8:	40000400 	.word	0x40000400
 8007ffc:	40000800 	.word	0x40000800
 8008000:	40000c00 	.word	0x40000c00
 8008004:	40014000 	.word	0x40014000

08008008 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008012:	2300      	movs	r3, #0
 8008014:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800801c:	2b01      	cmp	r3, #1
 800801e:	d101      	bne.n	8008024 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008020:	2302      	movs	r3, #2
 8008022:	e03d      	b.n	80080a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	4313      	orrs	r3, r2
 8008038:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	4313      	orrs	r3, r2
 8008046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	4313      	orrs	r3, r2
 8008054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4313      	orrs	r3, r2
 8008062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	4313      	orrs	r3, r2
 8008070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	695b      	ldr	r3, [r3, #20]
 800807c:	4313      	orrs	r3, r2
 800807e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	4313      	orrs	r3, r2
 800808c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d101      	bne.n	80080e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e03f      	b.n	8008166 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d106      	bne.n	8008100 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7fb faf2 	bl	80036e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2224      	movs	r2, #36	; 0x24
 8008104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68da      	ldr	r2, [r3, #12]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008116:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f929 	bl	8008370 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	691a      	ldr	r2, [r3, #16]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800812c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	695a      	ldr	r2, [r3, #20]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800813c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68da      	ldr	r2, [r3, #12]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800814c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2220      	movs	r2, #32
 8008158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2220      	movs	r2, #32
 8008160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b08a      	sub	sp, #40	; 0x28
 8008172:	af02      	add	r7, sp, #8
 8008174:	60f8      	str	r0, [r7, #12]
 8008176:	60b9      	str	r1, [r7, #8]
 8008178:	603b      	str	r3, [r7, #0]
 800817a:	4613      	mov	r3, r2
 800817c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800817e:	2300      	movs	r3, #0
 8008180:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b20      	cmp	r3, #32
 800818c:	d17c      	bne.n	8008288 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d002      	beq.n	800819a <HAL_UART_Transmit+0x2c>
 8008194:	88fb      	ldrh	r3, [r7, #6]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d101      	bne.n	800819e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e075      	b.n	800828a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d101      	bne.n	80081ac <HAL_UART_Transmit+0x3e>
 80081a8:	2302      	movs	r3, #2
 80081aa:	e06e      	b.n	800828a <HAL_UART_Transmit+0x11c>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2221      	movs	r2, #33	; 0x21
 80081be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80081c2:	f7fb fdc7 	bl	8003d54 <HAL_GetTick>
 80081c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	88fa      	ldrh	r2, [r7, #6]
 80081cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	88fa      	ldrh	r2, [r7, #6]
 80081d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081dc:	d108      	bne.n	80081f0 <HAL_UART_Transmit+0x82>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d104      	bne.n	80081f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80081e6:	2300      	movs	r3, #0
 80081e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	61bb      	str	r3, [r7, #24]
 80081ee:	e003      	b.n	80081f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081f4:	2300      	movs	r3, #0
 80081f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008200:	e02a      	b.n	8008258 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	2200      	movs	r2, #0
 800820a:	2180      	movs	r1, #128	; 0x80
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f000 f840 	bl	8008292 <UART_WaitOnFlagUntilTimeout>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d001      	beq.n	800821c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008218:	2303      	movs	r3, #3
 800821a:	e036      	b.n	800828a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10b      	bne.n	800823a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	881b      	ldrh	r3, [r3, #0]
 8008226:	461a      	mov	r2, r3
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008230:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	3302      	adds	r3, #2
 8008236:	61bb      	str	r3, [r7, #24]
 8008238:	e007      	b.n	800824a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	781a      	ldrb	r2, [r3, #0]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	3301      	adds	r3, #1
 8008248:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800824e:	b29b      	uxth	r3, r3
 8008250:	3b01      	subs	r3, #1
 8008252:	b29a      	uxth	r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800825c:	b29b      	uxth	r3, r3
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1cf      	bne.n	8008202 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	2200      	movs	r2, #0
 800826a:	2140      	movs	r1, #64	; 0x40
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f000 f810 	bl	8008292 <UART_WaitOnFlagUntilTimeout>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008278:	2303      	movs	r3, #3
 800827a:	e006      	b.n	800828a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2220      	movs	r2, #32
 8008280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	e000      	b.n	800828a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008288:	2302      	movs	r3, #2
  }
}
 800828a:	4618      	mov	r0, r3
 800828c:	3720      	adds	r7, #32
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b090      	sub	sp, #64	; 0x40
 8008296:	af00      	add	r7, sp, #0
 8008298:	60f8      	str	r0, [r7, #12]
 800829a:	60b9      	str	r1, [r7, #8]
 800829c:	603b      	str	r3, [r7, #0]
 800829e:	4613      	mov	r3, r2
 80082a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082a2:	e050      	b.n	8008346 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082aa:	d04c      	beq.n	8008346 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80082ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d007      	beq.n	80082c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80082b2:	f7fb fd4f 	bl	8003d54 <HAL_GetTick>
 80082b6:	4602      	mov	r2, r0
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082be:	429a      	cmp	r2, r3
 80082c0:	d241      	bcs.n	8008346 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	330c      	adds	r3, #12
 80082c8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082cc:	e853 3f00 	ldrex	r3, [r3]
 80082d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	330c      	adds	r3, #12
 80082e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80082e2:	637a      	str	r2, [r7, #52]	; 0x34
 80082e4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082ea:	e841 2300 	strex	r3, r2, [r1]
 80082ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1e5      	bne.n	80082c2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	3314      	adds	r3, #20
 80082fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	e853 3f00 	ldrex	r3, [r3]
 8008304:	613b      	str	r3, [r7, #16]
   return(result);
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	f023 0301 	bic.w	r3, r3, #1
 800830c:	63bb      	str	r3, [r7, #56]	; 0x38
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	3314      	adds	r3, #20
 8008314:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008316:	623a      	str	r2, [r7, #32]
 8008318:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831a:	69f9      	ldr	r1, [r7, #28]
 800831c:	6a3a      	ldr	r2, [r7, #32]
 800831e:	e841 2300 	strex	r3, r2, [r1]
 8008322:	61bb      	str	r3, [r7, #24]
   return(result);
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1e5      	bne.n	80082f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2220      	movs	r2, #32
 800832e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2220      	movs	r2, #32
 8008336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008342:	2303      	movs	r3, #3
 8008344:	e00f      	b.n	8008366 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	4013      	ands	r3, r2
 8008350:	68ba      	ldr	r2, [r7, #8]
 8008352:	429a      	cmp	r2, r3
 8008354:	bf0c      	ite	eq
 8008356:	2301      	moveq	r3, #1
 8008358:	2300      	movne	r3, #0
 800835a:	b2db      	uxtb	r3, r3
 800835c:	461a      	mov	r2, r3
 800835e:	79fb      	ldrb	r3, [r7, #7]
 8008360:	429a      	cmp	r2, r3
 8008362:	d09f      	beq.n	80082a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3740      	adds	r7, #64	; 0x40
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
	...

08008370 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008374:	b0c0      	sub	sp, #256	; 0x100
 8008376:	af00      	add	r7, sp, #0
 8008378:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800837c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800838c:	68d9      	ldr	r1, [r3, #12]
 800838e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	ea40 0301 	orr.w	r3, r0, r1
 8008398:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800839a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800839e:	689a      	ldr	r2, [r3, #8]
 80083a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	431a      	orrs	r2, r3
 80083a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ac:	695b      	ldr	r3, [r3, #20]
 80083ae:	431a      	orrs	r2, r3
 80083b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083b4:	69db      	ldr	r3, [r3, #28]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80083bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80083c8:	f021 010c 	bic.w	r1, r1, #12
 80083cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80083d6:	430b      	orrs	r3, r1
 80083d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80083da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	695b      	ldr	r3, [r3, #20]
 80083e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80083e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ea:	6999      	ldr	r1, [r3, #24]
 80083ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	ea40 0301 	orr.w	r3, r0, r1
 80083f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80083f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	4b8f      	ldr	r3, [pc, #572]	; (800863c <UART_SetConfig+0x2cc>)
 8008400:	429a      	cmp	r2, r3
 8008402:	d005      	beq.n	8008410 <UART_SetConfig+0xa0>
 8008404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	4b8d      	ldr	r3, [pc, #564]	; (8008640 <UART_SetConfig+0x2d0>)
 800840c:	429a      	cmp	r2, r3
 800840e:	d104      	bne.n	800841a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008410:	f7fd ff0c 	bl	800622c <HAL_RCC_GetPCLK2Freq>
 8008414:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008418:	e003      	b.n	8008422 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800841a:	f7fd fef3 	bl	8006204 <HAL_RCC_GetPCLK1Freq>
 800841e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008426:	69db      	ldr	r3, [r3, #28]
 8008428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800842c:	f040 810c 	bne.w	8008648 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008434:	2200      	movs	r2, #0
 8008436:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800843a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800843e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008442:	4622      	mov	r2, r4
 8008444:	462b      	mov	r3, r5
 8008446:	1891      	adds	r1, r2, r2
 8008448:	65b9      	str	r1, [r7, #88]	; 0x58
 800844a:	415b      	adcs	r3, r3
 800844c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800844e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008452:	4621      	mov	r1, r4
 8008454:	eb12 0801 	adds.w	r8, r2, r1
 8008458:	4629      	mov	r1, r5
 800845a:	eb43 0901 	adc.w	r9, r3, r1
 800845e:	f04f 0200 	mov.w	r2, #0
 8008462:	f04f 0300 	mov.w	r3, #0
 8008466:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800846a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800846e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008472:	4690      	mov	r8, r2
 8008474:	4699      	mov	r9, r3
 8008476:	4623      	mov	r3, r4
 8008478:	eb18 0303 	adds.w	r3, r8, r3
 800847c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008480:	462b      	mov	r3, r5
 8008482:	eb49 0303 	adc.w	r3, r9, r3
 8008486:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800848a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008496:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800849a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800849e:	460b      	mov	r3, r1
 80084a0:	18db      	adds	r3, r3, r3
 80084a2:	653b      	str	r3, [r7, #80]	; 0x50
 80084a4:	4613      	mov	r3, r2
 80084a6:	eb42 0303 	adc.w	r3, r2, r3
 80084aa:	657b      	str	r3, [r7, #84]	; 0x54
 80084ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80084b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80084b4:	f7f8 fb62 	bl	8000b7c <__aeabi_uldivmod>
 80084b8:	4602      	mov	r2, r0
 80084ba:	460b      	mov	r3, r1
 80084bc:	4b61      	ldr	r3, [pc, #388]	; (8008644 <UART_SetConfig+0x2d4>)
 80084be:	fba3 2302 	umull	r2, r3, r3, r2
 80084c2:	095b      	lsrs	r3, r3, #5
 80084c4:	011c      	lsls	r4, r3, #4
 80084c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084ca:	2200      	movs	r2, #0
 80084cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80084d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80084d8:	4642      	mov	r2, r8
 80084da:	464b      	mov	r3, r9
 80084dc:	1891      	adds	r1, r2, r2
 80084de:	64b9      	str	r1, [r7, #72]	; 0x48
 80084e0:	415b      	adcs	r3, r3
 80084e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80084e8:	4641      	mov	r1, r8
 80084ea:	eb12 0a01 	adds.w	sl, r2, r1
 80084ee:	4649      	mov	r1, r9
 80084f0:	eb43 0b01 	adc.w	fp, r3, r1
 80084f4:	f04f 0200 	mov.w	r2, #0
 80084f8:	f04f 0300 	mov.w	r3, #0
 80084fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008500:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008504:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008508:	4692      	mov	sl, r2
 800850a:	469b      	mov	fp, r3
 800850c:	4643      	mov	r3, r8
 800850e:	eb1a 0303 	adds.w	r3, sl, r3
 8008512:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008516:	464b      	mov	r3, r9
 8008518:	eb4b 0303 	adc.w	r3, fp, r3
 800851c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800852c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008530:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008534:	460b      	mov	r3, r1
 8008536:	18db      	adds	r3, r3, r3
 8008538:	643b      	str	r3, [r7, #64]	; 0x40
 800853a:	4613      	mov	r3, r2
 800853c:	eb42 0303 	adc.w	r3, r2, r3
 8008540:	647b      	str	r3, [r7, #68]	; 0x44
 8008542:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008546:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800854a:	f7f8 fb17 	bl	8000b7c <__aeabi_uldivmod>
 800854e:	4602      	mov	r2, r0
 8008550:	460b      	mov	r3, r1
 8008552:	4611      	mov	r1, r2
 8008554:	4b3b      	ldr	r3, [pc, #236]	; (8008644 <UART_SetConfig+0x2d4>)
 8008556:	fba3 2301 	umull	r2, r3, r3, r1
 800855a:	095b      	lsrs	r3, r3, #5
 800855c:	2264      	movs	r2, #100	; 0x64
 800855e:	fb02 f303 	mul.w	r3, r2, r3
 8008562:	1acb      	subs	r3, r1, r3
 8008564:	00db      	lsls	r3, r3, #3
 8008566:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800856a:	4b36      	ldr	r3, [pc, #216]	; (8008644 <UART_SetConfig+0x2d4>)
 800856c:	fba3 2302 	umull	r2, r3, r3, r2
 8008570:	095b      	lsrs	r3, r3, #5
 8008572:	005b      	lsls	r3, r3, #1
 8008574:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008578:	441c      	add	r4, r3
 800857a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800857e:	2200      	movs	r2, #0
 8008580:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008584:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008588:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800858c:	4642      	mov	r2, r8
 800858e:	464b      	mov	r3, r9
 8008590:	1891      	adds	r1, r2, r2
 8008592:	63b9      	str	r1, [r7, #56]	; 0x38
 8008594:	415b      	adcs	r3, r3
 8008596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008598:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800859c:	4641      	mov	r1, r8
 800859e:	1851      	adds	r1, r2, r1
 80085a0:	6339      	str	r1, [r7, #48]	; 0x30
 80085a2:	4649      	mov	r1, r9
 80085a4:	414b      	adcs	r3, r1
 80085a6:	637b      	str	r3, [r7, #52]	; 0x34
 80085a8:	f04f 0200 	mov.w	r2, #0
 80085ac:	f04f 0300 	mov.w	r3, #0
 80085b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80085b4:	4659      	mov	r1, fp
 80085b6:	00cb      	lsls	r3, r1, #3
 80085b8:	4651      	mov	r1, sl
 80085ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085be:	4651      	mov	r1, sl
 80085c0:	00ca      	lsls	r2, r1, #3
 80085c2:	4610      	mov	r0, r2
 80085c4:	4619      	mov	r1, r3
 80085c6:	4603      	mov	r3, r0
 80085c8:	4642      	mov	r2, r8
 80085ca:	189b      	adds	r3, r3, r2
 80085cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80085d0:	464b      	mov	r3, r9
 80085d2:	460a      	mov	r2, r1
 80085d4:	eb42 0303 	adc.w	r3, r2, r3
 80085d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80085dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80085e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80085ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80085f0:	460b      	mov	r3, r1
 80085f2:	18db      	adds	r3, r3, r3
 80085f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80085f6:	4613      	mov	r3, r2
 80085f8:	eb42 0303 	adc.w	r3, r2, r3
 80085fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008602:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008606:	f7f8 fab9 	bl	8000b7c <__aeabi_uldivmod>
 800860a:	4602      	mov	r2, r0
 800860c:	460b      	mov	r3, r1
 800860e:	4b0d      	ldr	r3, [pc, #52]	; (8008644 <UART_SetConfig+0x2d4>)
 8008610:	fba3 1302 	umull	r1, r3, r3, r2
 8008614:	095b      	lsrs	r3, r3, #5
 8008616:	2164      	movs	r1, #100	; 0x64
 8008618:	fb01 f303 	mul.w	r3, r1, r3
 800861c:	1ad3      	subs	r3, r2, r3
 800861e:	00db      	lsls	r3, r3, #3
 8008620:	3332      	adds	r3, #50	; 0x32
 8008622:	4a08      	ldr	r2, [pc, #32]	; (8008644 <UART_SetConfig+0x2d4>)
 8008624:	fba2 2303 	umull	r2, r3, r2, r3
 8008628:	095b      	lsrs	r3, r3, #5
 800862a:	f003 0207 	and.w	r2, r3, #7
 800862e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4422      	add	r2, r4
 8008636:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008638:	e106      	b.n	8008848 <UART_SetConfig+0x4d8>
 800863a:	bf00      	nop
 800863c:	40011000 	.word	0x40011000
 8008640:	40011400 	.word	0x40011400
 8008644:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800864c:	2200      	movs	r2, #0
 800864e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008652:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008656:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800865a:	4642      	mov	r2, r8
 800865c:	464b      	mov	r3, r9
 800865e:	1891      	adds	r1, r2, r2
 8008660:	6239      	str	r1, [r7, #32]
 8008662:	415b      	adcs	r3, r3
 8008664:	627b      	str	r3, [r7, #36]	; 0x24
 8008666:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800866a:	4641      	mov	r1, r8
 800866c:	1854      	adds	r4, r2, r1
 800866e:	4649      	mov	r1, r9
 8008670:	eb43 0501 	adc.w	r5, r3, r1
 8008674:	f04f 0200 	mov.w	r2, #0
 8008678:	f04f 0300 	mov.w	r3, #0
 800867c:	00eb      	lsls	r3, r5, #3
 800867e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008682:	00e2      	lsls	r2, r4, #3
 8008684:	4614      	mov	r4, r2
 8008686:	461d      	mov	r5, r3
 8008688:	4643      	mov	r3, r8
 800868a:	18e3      	adds	r3, r4, r3
 800868c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008690:	464b      	mov	r3, r9
 8008692:	eb45 0303 	adc.w	r3, r5, r3
 8008696:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800869a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80086a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80086aa:	f04f 0200 	mov.w	r2, #0
 80086ae:	f04f 0300 	mov.w	r3, #0
 80086b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80086b6:	4629      	mov	r1, r5
 80086b8:	008b      	lsls	r3, r1, #2
 80086ba:	4621      	mov	r1, r4
 80086bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086c0:	4621      	mov	r1, r4
 80086c2:	008a      	lsls	r2, r1, #2
 80086c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80086c8:	f7f8 fa58 	bl	8000b7c <__aeabi_uldivmod>
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	4b60      	ldr	r3, [pc, #384]	; (8008854 <UART_SetConfig+0x4e4>)
 80086d2:	fba3 2302 	umull	r2, r3, r3, r2
 80086d6:	095b      	lsrs	r3, r3, #5
 80086d8:	011c      	lsls	r4, r3, #4
 80086da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086de:	2200      	movs	r2, #0
 80086e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80086e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80086e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80086ec:	4642      	mov	r2, r8
 80086ee:	464b      	mov	r3, r9
 80086f0:	1891      	adds	r1, r2, r2
 80086f2:	61b9      	str	r1, [r7, #24]
 80086f4:	415b      	adcs	r3, r3
 80086f6:	61fb      	str	r3, [r7, #28]
 80086f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086fc:	4641      	mov	r1, r8
 80086fe:	1851      	adds	r1, r2, r1
 8008700:	6139      	str	r1, [r7, #16]
 8008702:	4649      	mov	r1, r9
 8008704:	414b      	adcs	r3, r1
 8008706:	617b      	str	r3, [r7, #20]
 8008708:	f04f 0200 	mov.w	r2, #0
 800870c:	f04f 0300 	mov.w	r3, #0
 8008710:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008714:	4659      	mov	r1, fp
 8008716:	00cb      	lsls	r3, r1, #3
 8008718:	4651      	mov	r1, sl
 800871a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800871e:	4651      	mov	r1, sl
 8008720:	00ca      	lsls	r2, r1, #3
 8008722:	4610      	mov	r0, r2
 8008724:	4619      	mov	r1, r3
 8008726:	4603      	mov	r3, r0
 8008728:	4642      	mov	r2, r8
 800872a:	189b      	adds	r3, r3, r2
 800872c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008730:	464b      	mov	r3, r9
 8008732:	460a      	mov	r2, r1
 8008734:	eb42 0303 	adc.w	r3, r2, r3
 8008738:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800873c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	67bb      	str	r3, [r7, #120]	; 0x78
 8008746:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008748:	f04f 0200 	mov.w	r2, #0
 800874c:	f04f 0300 	mov.w	r3, #0
 8008750:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008754:	4649      	mov	r1, r9
 8008756:	008b      	lsls	r3, r1, #2
 8008758:	4641      	mov	r1, r8
 800875a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800875e:	4641      	mov	r1, r8
 8008760:	008a      	lsls	r2, r1, #2
 8008762:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008766:	f7f8 fa09 	bl	8000b7c <__aeabi_uldivmod>
 800876a:	4602      	mov	r2, r0
 800876c:	460b      	mov	r3, r1
 800876e:	4611      	mov	r1, r2
 8008770:	4b38      	ldr	r3, [pc, #224]	; (8008854 <UART_SetConfig+0x4e4>)
 8008772:	fba3 2301 	umull	r2, r3, r3, r1
 8008776:	095b      	lsrs	r3, r3, #5
 8008778:	2264      	movs	r2, #100	; 0x64
 800877a:	fb02 f303 	mul.w	r3, r2, r3
 800877e:	1acb      	subs	r3, r1, r3
 8008780:	011b      	lsls	r3, r3, #4
 8008782:	3332      	adds	r3, #50	; 0x32
 8008784:	4a33      	ldr	r2, [pc, #204]	; (8008854 <UART_SetConfig+0x4e4>)
 8008786:	fba2 2303 	umull	r2, r3, r2, r3
 800878a:	095b      	lsrs	r3, r3, #5
 800878c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008790:	441c      	add	r4, r3
 8008792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008796:	2200      	movs	r2, #0
 8008798:	673b      	str	r3, [r7, #112]	; 0x70
 800879a:	677a      	str	r2, [r7, #116]	; 0x74
 800879c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80087a0:	4642      	mov	r2, r8
 80087a2:	464b      	mov	r3, r9
 80087a4:	1891      	adds	r1, r2, r2
 80087a6:	60b9      	str	r1, [r7, #8]
 80087a8:	415b      	adcs	r3, r3
 80087aa:	60fb      	str	r3, [r7, #12]
 80087ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80087b0:	4641      	mov	r1, r8
 80087b2:	1851      	adds	r1, r2, r1
 80087b4:	6039      	str	r1, [r7, #0]
 80087b6:	4649      	mov	r1, r9
 80087b8:	414b      	adcs	r3, r1
 80087ba:	607b      	str	r3, [r7, #4]
 80087bc:	f04f 0200 	mov.w	r2, #0
 80087c0:	f04f 0300 	mov.w	r3, #0
 80087c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80087c8:	4659      	mov	r1, fp
 80087ca:	00cb      	lsls	r3, r1, #3
 80087cc:	4651      	mov	r1, sl
 80087ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087d2:	4651      	mov	r1, sl
 80087d4:	00ca      	lsls	r2, r1, #3
 80087d6:	4610      	mov	r0, r2
 80087d8:	4619      	mov	r1, r3
 80087da:	4603      	mov	r3, r0
 80087dc:	4642      	mov	r2, r8
 80087de:	189b      	adds	r3, r3, r2
 80087e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80087e2:	464b      	mov	r3, r9
 80087e4:	460a      	mov	r2, r1
 80087e6:	eb42 0303 	adc.w	r3, r2, r3
 80087ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	663b      	str	r3, [r7, #96]	; 0x60
 80087f6:	667a      	str	r2, [r7, #100]	; 0x64
 80087f8:	f04f 0200 	mov.w	r2, #0
 80087fc:	f04f 0300 	mov.w	r3, #0
 8008800:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008804:	4649      	mov	r1, r9
 8008806:	008b      	lsls	r3, r1, #2
 8008808:	4641      	mov	r1, r8
 800880a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800880e:	4641      	mov	r1, r8
 8008810:	008a      	lsls	r2, r1, #2
 8008812:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008816:	f7f8 f9b1 	bl	8000b7c <__aeabi_uldivmod>
 800881a:	4602      	mov	r2, r0
 800881c:	460b      	mov	r3, r1
 800881e:	4b0d      	ldr	r3, [pc, #52]	; (8008854 <UART_SetConfig+0x4e4>)
 8008820:	fba3 1302 	umull	r1, r3, r3, r2
 8008824:	095b      	lsrs	r3, r3, #5
 8008826:	2164      	movs	r1, #100	; 0x64
 8008828:	fb01 f303 	mul.w	r3, r1, r3
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	011b      	lsls	r3, r3, #4
 8008830:	3332      	adds	r3, #50	; 0x32
 8008832:	4a08      	ldr	r2, [pc, #32]	; (8008854 <UART_SetConfig+0x4e4>)
 8008834:	fba2 2303 	umull	r2, r3, r2, r3
 8008838:	095b      	lsrs	r3, r3, #5
 800883a:	f003 020f 	and.w	r2, r3, #15
 800883e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4422      	add	r2, r4
 8008846:	609a      	str	r2, [r3, #8]
}
 8008848:	bf00      	nop
 800884a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800884e:	46bd      	mov	sp, r7
 8008850:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008854:	51eb851f 	.word	0x51eb851f

08008858 <sniprintf>:
 8008858:	b40c      	push	{r2, r3}
 800885a:	b530      	push	{r4, r5, lr}
 800885c:	4b17      	ldr	r3, [pc, #92]	; (80088bc <sniprintf+0x64>)
 800885e:	1e0c      	subs	r4, r1, #0
 8008860:	681d      	ldr	r5, [r3, #0]
 8008862:	b09d      	sub	sp, #116	; 0x74
 8008864:	da08      	bge.n	8008878 <sniprintf+0x20>
 8008866:	238b      	movs	r3, #139	; 0x8b
 8008868:	602b      	str	r3, [r5, #0]
 800886a:	f04f 30ff 	mov.w	r0, #4294967295
 800886e:	b01d      	add	sp, #116	; 0x74
 8008870:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008874:	b002      	add	sp, #8
 8008876:	4770      	bx	lr
 8008878:	f44f 7302 	mov.w	r3, #520	; 0x208
 800887c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008880:	bf14      	ite	ne
 8008882:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008886:	4623      	moveq	r3, r4
 8008888:	9304      	str	r3, [sp, #16]
 800888a:	9307      	str	r3, [sp, #28]
 800888c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008890:	9002      	str	r0, [sp, #8]
 8008892:	9006      	str	r0, [sp, #24]
 8008894:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008898:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800889a:	ab21      	add	r3, sp, #132	; 0x84
 800889c:	a902      	add	r1, sp, #8
 800889e:	4628      	mov	r0, r5
 80088a0:	9301      	str	r3, [sp, #4]
 80088a2:	f000 f9a1 	bl	8008be8 <_svfiprintf_r>
 80088a6:	1c43      	adds	r3, r0, #1
 80088a8:	bfbc      	itt	lt
 80088aa:	238b      	movlt	r3, #139	; 0x8b
 80088ac:	602b      	strlt	r3, [r5, #0]
 80088ae:	2c00      	cmp	r4, #0
 80088b0:	d0dd      	beq.n	800886e <sniprintf+0x16>
 80088b2:	9b02      	ldr	r3, [sp, #8]
 80088b4:	2200      	movs	r2, #0
 80088b6:	701a      	strb	r2, [r3, #0]
 80088b8:	e7d9      	b.n	800886e <sniprintf+0x16>
 80088ba:	bf00      	nop
 80088bc:	20000064 	.word	0x20000064

080088c0 <memset>:
 80088c0:	4402      	add	r2, r0
 80088c2:	4603      	mov	r3, r0
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d100      	bne.n	80088ca <memset+0xa>
 80088c8:	4770      	bx	lr
 80088ca:	f803 1b01 	strb.w	r1, [r3], #1
 80088ce:	e7f9      	b.n	80088c4 <memset+0x4>

080088d0 <__errno>:
 80088d0:	4b01      	ldr	r3, [pc, #4]	; (80088d8 <__errno+0x8>)
 80088d2:	6818      	ldr	r0, [r3, #0]
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	20000064 	.word	0x20000064

080088dc <__libc_init_array>:
 80088dc:	b570      	push	{r4, r5, r6, lr}
 80088de:	4d0d      	ldr	r5, [pc, #52]	; (8008914 <__libc_init_array+0x38>)
 80088e0:	4c0d      	ldr	r4, [pc, #52]	; (8008918 <__libc_init_array+0x3c>)
 80088e2:	1b64      	subs	r4, r4, r5
 80088e4:	10a4      	asrs	r4, r4, #2
 80088e6:	2600      	movs	r6, #0
 80088e8:	42a6      	cmp	r6, r4
 80088ea:	d109      	bne.n	8008900 <__libc_init_array+0x24>
 80088ec:	4d0b      	ldr	r5, [pc, #44]	; (800891c <__libc_init_array+0x40>)
 80088ee:	4c0c      	ldr	r4, [pc, #48]	; (8008920 <__libc_init_array+0x44>)
 80088f0:	f000 fca4 	bl	800923c <_init>
 80088f4:	1b64      	subs	r4, r4, r5
 80088f6:	10a4      	asrs	r4, r4, #2
 80088f8:	2600      	movs	r6, #0
 80088fa:	42a6      	cmp	r6, r4
 80088fc:	d105      	bne.n	800890a <__libc_init_array+0x2e>
 80088fe:	bd70      	pop	{r4, r5, r6, pc}
 8008900:	f855 3b04 	ldr.w	r3, [r5], #4
 8008904:	4798      	blx	r3
 8008906:	3601      	adds	r6, #1
 8008908:	e7ee      	b.n	80088e8 <__libc_init_array+0xc>
 800890a:	f855 3b04 	ldr.w	r3, [r5], #4
 800890e:	4798      	blx	r3
 8008910:	3601      	adds	r6, #1
 8008912:	e7f2      	b.n	80088fa <__libc_init_array+0x1e>
 8008914:	08009c34 	.word	0x08009c34
 8008918:	08009c34 	.word	0x08009c34
 800891c:	08009c34 	.word	0x08009c34
 8008920:	08009c38 	.word	0x08009c38

08008924 <__retarget_lock_acquire_recursive>:
 8008924:	4770      	bx	lr

08008926 <__retarget_lock_release_recursive>:
 8008926:	4770      	bx	lr

08008928 <memcpy>:
 8008928:	440a      	add	r2, r1
 800892a:	4291      	cmp	r1, r2
 800892c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008930:	d100      	bne.n	8008934 <memcpy+0xc>
 8008932:	4770      	bx	lr
 8008934:	b510      	push	{r4, lr}
 8008936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800893a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800893e:	4291      	cmp	r1, r2
 8008940:	d1f9      	bne.n	8008936 <memcpy+0xe>
 8008942:	bd10      	pop	{r4, pc}

08008944 <_free_r>:
 8008944:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008946:	2900      	cmp	r1, #0
 8008948:	d044      	beq.n	80089d4 <_free_r+0x90>
 800894a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800894e:	9001      	str	r0, [sp, #4]
 8008950:	2b00      	cmp	r3, #0
 8008952:	f1a1 0404 	sub.w	r4, r1, #4
 8008956:	bfb8      	it	lt
 8008958:	18e4      	addlt	r4, r4, r3
 800895a:	f000 f8df 	bl	8008b1c <__malloc_lock>
 800895e:	4a1e      	ldr	r2, [pc, #120]	; (80089d8 <_free_r+0x94>)
 8008960:	9801      	ldr	r0, [sp, #4]
 8008962:	6813      	ldr	r3, [r2, #0]
 8008964:	b933      	cbnz	r3, 8008974 <_free_r+0x30>
 8008966:	6063      	str	r3, [r4, #4]
 8008968:	6014      	str	r4, [r2, #0]
 800896a:	b003      	add	sp, #12
 800896c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008970:	f000 b8da 	b.w	8008b28 <__malloc_unlock>
 8008974:	42a3      	cmp	r3, r4
 8008976:	d908      	bls.n	800898a <_free_r+0x46>
 8008978:	6825      	ldr	r5, [r4, #0]
 800897a:	1961      	adds	r1, r4, r5
 800897c:	428b      	cmp	r3, r1
 800897e:	bf01      	itttt	eq
 8008980:	6819      	ldreq	r1, [r3, #0]
 8008982:	685b      	ldreq	r3, [r3, #4]
 8008984:	1949      	addeq	r1, r1, r5
 8008986:	6021      	streq	r1, [r4, #0]
 8008988:	e7ed      	b.n	8008966 <_free_r+0x22>
 800898a:	461a      	mov	r2, r3
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	b10b      	cbz	r3, 8008994 <_free_r+0x50>
 8008990:	42a3      	cmp	r3, r4
 8008992:	d9fa      	bls.n	800898a <_free_r+0x46>
 8008994:	6811      	ldr	r1, [r2, #0]
 8008996:	1855      	adds	r5, r2, r1
 8008998:	42a5      	cmp	r5, r4
 800899a:	d10b      	bne.n	80089b4 <_free_r+0x70>
 800899c:	6824      	ldr	r4, [r4, #0]
 800899e:	4421      	add	r1, r4
 80089a0:	1854      	adds	r4, r2, r1
 80089a2:	42a3      	cmp	r3, r4
 80089a4:	6011      	str	r1, [r2, #0]
 80089a6:	d1e0      	bne.n	800896a <_free_r+0x26>
 80089a8:	681c      	ldr	r4, [r3, #0]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	6053      	str	r3, [r2, #4]
 80089ae:	440c      	add	r4, r1
 80089b0:	6014      	str	r4, [r2, #0]
 80089b2:	e7da      	b.n	800896a <_free_r+0x26>
 80089b4:	d902      	bls.n	80089bc <_free_r+0x78>
 80089b6:	230c      	movs	r3, #12
 80089b8:	6003      	str	r3, [r0, #0]
 80089ba:	e7d6      	b.n	800896a <_free_r+0x26>
 80089bc:	6825      	ldr	r5, [r4, #0]
 80089be:	1961      	adds	r1, r4, r5
 80089c0:	428b      	cmp	r3, r1
 80089c2:	bf04      	itt	eq
 80089c4:	6819      	ldreq	r1, [r3, #0]
 80089c6:	685b      	ldreq	r3, [r3, #4]
 80089c8:	6063      	str	r3, [r4, #4]
 80089ca:	bf04      	itt	eq
 80089cc:	1949      	addeq	r1, r1, r5
 80089ce:	6021      	streq	r1, [r4, #0]
 80089d0:	6054      	str	r4, [r2, #4]
 80089d2:	e7ca      	b.n	800896a <_free_r+0x26>
 80089d4:	b003      	add	sp, #12
 80089d6:	bd30      	pop	{r4, r5, pc}
 80089d8:	20007ba4 	.word	0x20007ba4

080089dc <sbrk_aligned>:
 80089dc:	b570      	push	{r4, r5, r6, lr}
 80089de:	4e0e      	ldr	r6, [pc, #56]	; (8008a18 <sbrk_aligned+0x3c>)
 80089e0:	460c      	mov	r4, r1
 80089e2:	6831      	ldr	r1, [r6, #0]
 80089e4:	4605      	mov	r5, r0
 80089e6:	b911      	cbnz	r1, 80089ee <sbrk_aligned+0x12>
 80089e8:	f000 fba6 	bl	8009138 <_sbrk_r>
 80089ec:	6030      	str	r0, [r6, #0]
 80089ee:	4621      	mov	r1, r4
 80089f0:	4628      	mov	r0, r5
 80089f2:	f000 fba1 	bl	8009138 <_sbrk_r>
 80089f6:	1c43      	adds	r3, r0, #1
 80089f8:	d00a      	beq.n	8008a10 <sbrk_aligned+0x34>
 80089fa:	1cc4      	adds	r4, r0, #3
 80089fc:	f024 0403 	bic.w	r4, r4, #3
 8008a00:	42a0      	cmp	r0, r4
 8008a02:	d007      	beq.n	8008a14 <sbrk_aligned+0x38>
 8008a04:	1a21      	subs	r1, r4, r0
 8008a06:	4628      	mov	r0, r5
 8008a08:	f000 fb96 	bl	8009138 <_sbrk_r>
 8008a0c:	3001      	adds	r0, #1
 8008a0e:	d101      	bne.n	8008a14 <sbrk_aligned+0x38>
 8008a10:	f04f 34ff 	mov.w	r4, #4294967295
 8008a14:	4620      	mov	r0, r4
 8008a16:	bd70      	pop	{r4, r5, r6, pc}
 8008a18:	20007ba8 	.word	0x20007ba8

08008a1c <_malloc_r>:
 8008a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a20:	1ccd      	adds	r5, r1, #3
 8008a22:	f025 0503 	bic.w	r5, r5, #3
 8008a26:	3508      	adds	r5, #8
 8008a28:	2d0c      	cmp	r5, #12
 8008a2a:	bf38      	it	cc
 8008a2c:	250c      	movcc	r5, #12
 8008a2e:	2d00      	cmp	r5, #0
 8008a30:	4607      	mov	r7, r0
 8008a32:	db01      	blt.n	8008a38 <_malloc_r+0x1c>
 8008a34:	42a9      	cmp	r1, r5
 8008a36:	d905      	bls.n	8008a44 <_malloc_r+0x28>
 8008a38:	230c      	movs	r3, #12
 8008a3a:	603b      	str	r3, [r7, #0]
 8008a3c:	2600      	movs	r6, #0
 8008a3e:	4630      	mov	r0, r6
 8008a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008b18 <_malloc_r+0xfc>
 8008a48:	f000 f868 	bl	8008b1c <__malloc_lock>
 8008a4c:	f8d8 3000 	ldr.w	r3, [r8]
 8008a50:	461c      	mov	r4, r3
 8008a52:	bb5c      	cbnz	r4, 8008aac <_malloc_r+0x90>
 8008a54:	4629      	mov	r1, r5
 8008a56:	4638      	mov	r0, r7
 8008a58:	f7ff ffc0 	bl	80089dc <sbrk_aligned>
 8008a5c:	1c43      	adds	r3, r0, #1
 8008a5e:	4604      	mov	r4, r0
 8008a60:	d155      	bne.n	8008b0e <_malloc_r+0xf2>
 8008a62:	f8d8 4000 	ldr.w	r4, [r8]
 8008a66:	4626      	mov	r6, r4
 8008a68:	2e00      	cmp	r6, #0
 8008a6a:	d145      	bne.n	8008af8 <_malloc_r+0xdc>
 8008a6c:	2c00      	cmp	r4, #0
 8008a6e:	d048      	beq.n	8008b02 <_malloc_r+0xe6>
 8008a70:	6823      	ldr	r3, [r4, #0]
 8008a72:	4631      	mov	r1, r6
 8008a74:	4638      	mov	r0, r7
 8008a76:	eb04 0903 	add.w	r9, r4, r3
 8008a7a:	f000 fb5d 	bl	8009138 <_sbrk_r>
 8008a7e:	4581      	cmp	r9, r0
 8008a80:	d13f      	bne.n	8008b02 <_malloc_r+0xe6>
 8008a82:	6821      	ldr	r1, [r4, #0]
 8008a84:	1a6d      	subs	r5, r5, r1
 8008a86:	4629      	mov	r1, r5
 8008a88:	4638      	mov	r0, r7
 8008a8a:	f7ff ffa7 	bl	80089dc <sbrk_aligned>
 8008a8e:	3001      	adds	r0, #1
 8008a90:	d037      	beq.n	8008b02 <_malloc_r+0xe6>
 8008a92:	6823      	ldr	r3, [r4, #0]
 8008a94:	442b      	add	r3, r5
 8008a96:	6023      	str	r3, [r4, #0]
 8008a98:	f8d8 3000 	ldr.w	r3, [r8]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d038      	beq.n	8008b12 <_malloc_r+0xf6>
 8008aa0:	685a      	ldr	r2, [r3, #4]
 8008aa2:	42a2      	cmp	r2, r4
 8008aa4:	d12b      	bne.n	8008afe <_malloc_r+0xe2>
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	605a      	str	r2, [r3, #4]
 8008aaa:	e00f      	b.n	8008acc <_malloc_r+0xb0>
 8008aac:	6822      	ldr	r2, [r4, #0]
 8008aae:	1b52      	subs	r2, r2, r5
 8008ab0:	d41f      	bmi.n	8008af2 <_malloc_r+0xd6>
 8008ab2:	2a0b      	cmp	r2, #11
 8008ab4:	d917      	bls.n	8008ae6 <_malloc_r+0xca>
 8008ab6:	1961      	adds	r1, r4, r5
 8008ab8:	42a3      	cmp	r3, r4
 8008aba:	6025      	str	r5, [r4, #0]
 8008abc:	bf18      	it	ne
 8008abe:	6059      	strne	r1, [r3, #4]
 8008ac0:	6863      	ldr	r3, [r4, #4]
 8008ac2:	bf08      	it	eq
 8008ac4:	f8c8 1000 	streq.w	r1, [r8]
 8008ac8:	5162      	str	r2, [r4, r5]
 8008aca:	604b      	str	r3, [r1, #4]
 8008acc:	4638      	mov	r0, r7
 8008ace:	f104 060b 	add.w	r6, r4, #11
 8008ad2:	f000 f829 	bl	8008b28 <__malloc_unlock>
 8008ad6:	f026 0607 	bic.w	r6, r6, #7
 8008ada:	1d23      	adds	r3, r4, #4
 8008adc:	1af2      	subs	r2, r6, r3
 8008ade:	d0ae      	beq.n	8008a3e <_malloc_r+0x22>
 8008ae0:	1b9b      	subs	r3, r3, r6
 8008ae2:	50a3      	str	r3, [r4, r2]
 8008ae4:	e7ab      	b.n	8008a3e <_malloc_r+0x22>
 8008ae6:	42a3      	cmp	r3, r4
 8008ae8:	6862      	ldr	r2, [r4, #4]
 8008aea:	d1dd      	bne.n	8008aa8 <_malloc_r+0x8c>
 8008aec:	f8c8 2000 	str.w	r2, [r8]
 8008af0:	e7ec      	b.n	8008acc <_malloc_r+0xb0>
 8008af2:	4623      	mov	r3, r4
 8008af4:	6864      	ldr	r4, [r4, #4]
 8008af6:	e7ac      	b.n	8008a52 <_malloc_r+0x36>
 8008af8:	4634      	mov	r4, r6
 8008afa:	6876      	ldr	r6, [r6, #4]
 8008afc:	e7b4      	b.n	8008a68 <_malloc_r+0x4c>
 8008afe:	4613      	mov	r3, r2
 8008b00:	e7cc      	b.n	8008a9c <_malloc_r+0x80>
 8008b02:	230c      	movs	r3, #12
 8008b04:	603b      	str	r3, [r7, #0]
 8008b06:	4638      	mov	r0, r7
 8008b08:	f000 f80e 	bl	8008b28 <__malloc_unlock>
 8008b0c:	e797      	b.n	8008a3e <_malloc_r+0x22>
 8008b0e:	6025      	str	r5, [r4, #0]
 8008b10:	e7dc      	b.n	8008acc <_malloc_r+0xb0>
 8008b12:	605b      	str	r3, [r3, #4]
 8008b14:	deff      	udf	#255	; 0xff
 8008b16:	bf00      	nop
 8008b18:	20007ba4 	.word	0x20007ba4

08008b1c <__malloc_lock>:
 8008b1c:	4801      	ldr	r0, [pc, #4]	; (8008b24 <__malloc_lock+0x8>)
 8008b1e:	f7ff bf01 	b.w	8008924 <__retarget_lock_acquire_recursive>
 8008b22:	bf00      	nop
 8008b24:	20007ba0 	.word	0x20007ba0

08008b28 <__malloc_unlock>:
 8008b28:	4801      	ldr	r0, [pc, #4]	; (8008b30 <__malloc_unlock+0x8>)
 8008b2a:	f7ff befc 	b.w	8008926 <__retarget_lock_release_recursive>
 8008b2e:	bf00      	nop
 8008b30:	20007ba0 	.word	0x20007ba0

08008b34 <__ssputs_r>:
 8008b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b38:	688e      	ldr	r6, [r1, #8]
 8008b3a:	461f      	mov	r7, r3
 8008b3c:	42be      	cmp	r6, r7
 8008b3e:	680b      	ldr	r3, [r1, #0]
 8008b40:	4682      	mov	sl, r0
 8008b42:	460c      	mov	r4, r1
 8008b44:	4690      	mov	r8, r2
 8008b46:	d82c      	bhi.n	8008ba2 <__ssputs_r+0x6e>
 8008b48:	898a      	ldrh	r2, [r1, #12]
 8008b4a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b4e:	d026      	beq.n	8008b9e <__ssputs_r+0x6a>
 8008b50:	6965      	ldr	r5, [r4, #20]
 8008b52:	6909      	ldr	r1, [r1, #16]
 8008b54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b58:	eba3 0901 	sub.w	r9, r3, r1
 8008b5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b60:	1c7b      	adds	r3, r7, #1
 8008b62:	444b      	add	r3, r9
 8008b64:	106d      	asrs	r5, r5, #1
 8008b66:	429d      	cmp	r5, r3
 8008b68:	bf38      	it	cc
 8008b6a:	461d      	movcc	r5, r3
 8008b6c:	0553      	lsls	r3, r2, #21
 8008b6e:	d527      	bpl.n	8008bc0 <__ssputs_r+0x8c>
 8008b70:	4629      	mov	r1, r5
 8008b72:	f7ff ff53 	bl	8008a1c <_malloc_r>
 8008b76:	4606      	mov	r6, r0
 8008b78:	b360      	cbz	r0, 8008bd4 <__ssputs_r+0xa0>
 8008b7a:	6921      	ldr	r1, [r4, #16]
 8008b7c:	464a      	mov	r2, r9
 8008b7e:	f7ff fed3 	bl	8008928 <memcpy>
 8008b82:	89a3      	ldrh	r3, [r4, #12]
 8008b84:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b8c:	81a3      	strh	r3, [r4, #12]
 8008b8e:	6126      	str	r6, [r4, #16]
 8008b90:	6165      	str	r5, [r4, #20]
 8008b92:	444e      	add	r6, r9
 8008b94:	eba5 0509 	sub.w	r5, r5, r9
 8008b98:	6026      	str	r6, [r4, #0]
 8008b9a:	60a5      	str	r5, [r4, #8]
 8008b9c:	463e      	mov	r6, r7
 8008b9e:	42be      	cmp	r6, r7
 8008ba0:	d900      	bls.n	8008ba4 <__ssputs_r+0x70>
 8008ba2:	463e      	mov	r6, r7
 8008ba4:	6820      	ldr	r0, [r4, #0]
 8008ba6:	4632      	mov	r2, r6
 8008ba8:	4641      	mov	r1, r8
 8008baa:	f000 faab 	bl	8009104 <memmove>
 8008bae:	68a3      	ldr	r3, [r4, #8]
 8008bb0:	1b9b      	subs	r3, r3, r6
 8008bb2:	60a3      	str	r3, [r4, #8]
 8008bb4:	6823      	ldr	r3, [r4, #0]
 8008bb6:	4433      	add	r3, r6
 8008bb8:	6023      	str	r3, [r4, #0]
 8008bba:	2000      	movs	r0, #0
 8008bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc0:	462a      	mov	r2, r5
 8008bc2:	f000 fac9 	bl	8009158 <_realloc_r>
 8008bc6:	4606      	mov	r6, r0
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	d1e0      	bne.n	8008b8e <__ssputs_r+0x5a>
 8008bcc:	6921      	ldr	r1, [r4, #16]
 8008bce:	4650      	mov	r0, sl
 8008bd0:	f7ff feb8 	bl	8008944 <_free_r>
 8008bd4:	230c      	movs	r3, #12
 8008bd6:	f8ca 3000 	str.w	r3, [sl]
 8008bda:	89a3      	ldrh	r3, [r4, #12]
 8008bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008be0:	81a3      	strh	r3, [r4, #12]
 8008be2:	f04f 30ff 	mov.w	r0, #4294967295
 8008be6:	e7e9      	b.n	8008bbc <__ssputs_r+0x88>

08008be8 <_svfiprintf_r>:
 8008be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bec:	4698      	mov	r8, r3
 8008bee:	898b      	ldrh	r3, [r1, #12]
 8008bf0:	061b      	lsls	r3, r3, #24
 8008bf2:	b09d      	sub	sp, #116	; 0x74
 8008bf4:	4607      	mov	r7, r0
 8008bf6:	460d      	mov	r5, r1
 8008bf8:	4614      	mov	r4, r2
 8008bfa:	d50e      	bpl.n	8008c1a <_svfiprintf_r+0x32>
 8008bfc:	690b      	ldr	r3, [r1, #16]
 8008bfe:	b963      	cbnz	r3, 8008c1a <_svfiprintf_r+0x32>
 8008c00:	2140      	movs	r1, #64	; 0x40
 8008c02:	f7ff ff0b 	bl	8008a1c <_malloc_r>
 8008c06:	6028      	str	r0, [r5, #0]
 8008c08:	6128      	str	r0, [r5, #16]
 8008c0a:	b920      	cbnz	r0, 8008c16 <_svfiprintf_r+0x2e>
 8008c0c:	230c      	movs	r3, #12
 8008c0e:	603b      	str	r3, [r7, #0]
 8008c10:	f04f 30ff 	mov.w	r0, #4294967295
 8008c14:	e0d0      	b.n	8008db8 <_svfiprintf_r+0x1d0>
 8008c16:	2340      	movs	r3, #64	; 0x40
 8008c18:	616b      	str	r3, [r5, #20]
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c1e:	2320      	movs	r3, #32
 8008c20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c24:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c28:	2330      	movs	r3, #48	; 0x30
 8008c2a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008dd0 <_svfiprintf_r+0x1e8>
 8008c2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c32:	f04f 0901 	mov.w	r9, #1
 8008c36:	4623      	mov	r3, r4
 8008c38:	469a      	mov	sl, r3
 8008c3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c3e:	b10a      	cbz	r2, 8008c44 <_svfiprintf_r+0x5c>
 8008c40:	2a25      	cmp	r2, #37	; 0x25
 8008c42:	d1f9      	bne.n	8008c38 <_svfiprintf_r+0x50>
 8008c44:	ebba 0b04 	subs.w	fp, sl, r4
 8008c48:	d00b      	beq.n	8008c62 <_svfiprintf_r+0x7a>
 8008c4a:	465b      	mov	r3, fp
 8008c4c:	4622      	mov	r2, r4
 8008c4e:	4629      	mov	r1, r5
 8008c50:	4638      	mov	r0, r7
 8008c52:	f7ff ff6f 	bl	8008b34 <__ssputs_r>
 8008c56:	3001      	adds	r0, #1
 8008c58:	f000 80a9 	beq.w	8008dae <_svfiprintf_r+0x1c6>
 8008c5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c5e:	445a      	add	r2, fp
 8008c60:	9209      	str	r2, [sp, #36]	; 0x24
 8008c62:	f89a 3000 	ldrb.w	r3, [sl]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	f000 80a1 	beq.w	8008dae <_svfiprintf_r+0x1c6>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c76:	f10a 0a01 	add.w	sl, sl, #1
 8008c7a:	9304      	str	r3, [sp, #16]
 8008c7c:	9307      	str	r3, [sp, #28]
 8008c7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c82:	931a      	str	r3, [sp, #104]	; 0x68
 8008c84:	4654      	mov	r4, sl
 8008c86:	2205      	movs	r2, #5
 8008c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c8c:	4850      	ldr	r0, [pc, #320]	; (8008dd0 <_svfiprintf_r+0x1e8>)
 8008c8e:	f7f7 faaf 	bl	80001f0 <memchr>
 8008c92:	9a04      	ldr	r2, [sp, #16]
 8008c94:	b9d8      	cbnz	r0, 8008cce <_svfiprintf_r+0xe6>
 8008c96:	06d0      	lsls	r0, r2, #27
 8008c98:	bf44      	itt	mi
 8008c9a:	2320      	movmi	r3, #32
 8008c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ca0:	0711      	lsls	r1, r2, #28
 8008ca2:	bf44      	itt	mi
 8008ca4:	232b      	movmi	r3, #43	; 0x2b
 8008ca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008caa:	f89a 3000 	ldrb.w	r3, [sl]
 8008cae:	2b2a      	cmp	r3, #42	; 0x2a
 8008cb0:	d015      	beq.n	8008cde <_svfiprintf_r+0xf6>
 8008cb2:	9a07      	ldr	r2, [sp, #28]
 8008cb4:	4654      	mov	r4, sl
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	f04f 0c0a 	mov.w	ip, #10
 8008cbc:	4621      	mov	r1, r4
 8008cbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cc2:	3b30      	subs	r3, #48	; 0x30
 8008cc4:	2b09      	cmp	r3, #9
 8008cc6:	d94d      	bls.n	8008d64 <_svfiprintf_r+0x17c>
 8008cc8:	b1b0      	cbz	r0, 8008cf8 <_svfiprintf_r+0x110>
 8008cca:	9207      	str	r2, [sp, #28]
 8008ccc:	e014      	b.n	8008cf8 <_svfiprintf_r+0x110>
 8008cce:	eba0 0308 	sub.w	r3, r0, r8
 8008cd2:	fa09 f303 	lsl.w	r3, r9, r3
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	9304      	str	r3, [sp, #16]
 8008cda:	46a2      	mov	sl, r4
 8008cdc:	e7d2      	b.n	8008c84 <_svfiprintf_r+0x9c>
 8008cde:	9b03      	ldr	r3, [sp, #12]
 8008ce0:	1d19      	adds	r1, r3, #4
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	9103      	str	r1, [sp, #12]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	bfbb      	ittet	lt
 8008cea:	425b      	neglt	r3, r3
 8008cec:	f042 0202 	orrlt.w	r2, r2, #2
 8008cf0:	9307      	strge	r3, [sp, #28]
 8008cf2:	9307      	strlt	r3, [sp, #28]
 8008cf4:	bfb8      	it	lt
 8008cf6:	9204      	strlt	r2, [sp, #16]
 8008cf8:	7823      	ldrb	r3, [r4, #0]
 8008cfa:	2b2e      	cmp	r3, #46	; 0x2e
 8008cfc:	d10c      	bne.n	8008d18 <_svfiprintf_r+0x130>
 8008cfe:	7863      	ldrb	r3, [r4, #1]
 8008d00:	2b2a      	cmp	r3, #42	; 0x2a
 8008d02:	d134      	bne.n	8008d6e <_svfiprintf_r+0x186>
 8008d04:	9b03      	ldr	r3, [sp, #12]
 8008d06:	1d1a      	adds	r2, r3, #4
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	9203      	str	r2, [sp, #12]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	bfb8      	it	lt
 8008d10:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d14:	3402      	adds	r4, #2
 8008d16:	9305      	str	r3, [sp, #20]
 8008d18:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008de0 <_svfiprintf_r+0x1f8>
 8008d1c:	7821      	ldrb	r1, [r4, #0]
 8008d1e:	2203      	movs	r2, #3
 8008d20:	4650      	mov	r0, sl
 8008d22:	f7f7 fa65 	bl	80001f0 <memchr>
 8008d26:	b138      	cbz	r0, 8008d38 <_svfiprintf_r+0x150>
 8008d28:	9b04      	ldr	r3, [sp, #16]
 8008d2a:	eba0 000a 	sub.w	r0, r0, sl
 8008d2e:	2240      	movs	r2, #64	; 0x40
 8008d30:	4082      	lsls	r2, r0
 8008d32:	4313      	orrs	r3, r2
 8008d34:	3401      	adds	r4, #1
 8008d36:	9304      	str	r3, [sp, #16]
 8008d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d3c:	4825      	ldr	r0, [pc, #148]	; (8008dd4 <_svfiprintf_r+0x1ec>)
 8008d3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d42:	2206      	movs	r2, #6
 8008d44:	f7f7 fa54 	bl	80001f0 <memchr>
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	d038      	beq.n	8008dbe <_svfiprintf_r+0x1d6>
 8008d4c:	4b22      	ldr	r3, [pc, #136]	; (8008dd8 <_svfiprintf_r+0x1f0>)
 8008d4e:	bb1b      	cbnz	r3, 8008d98 <_svfiprintf_r+0x1b0>
 8008d50:	9b03      	ldr	r3, [sp, #12]
 8008d52:	3307      	adds	r3, #7
 8008d54:	f023 0307 	bic.w	r3, r3, #7
 8008d58:	3308      	adds	r3, #8
 8008d5a:	9303      	str	r3, [sp, #12]
 8008d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d5e:	4433      	add	r3, r6
 8008d60:	9309      	str	r3, [sp, #36]	; 0x24
 8008d62:	e768      	b.n	8008c36 <_svfiprintf_r+0x4e>
 8008d64:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d68:	460c      	mov	r4, r1
 8008d6a:	2001      	movs	r0, #1
 8008d6c:	e7a6      	b.n	8008cbc <_svfiprintf_r+0xd4>
 8008d6e:	2300      	movs	r3, #0
 8008d70:	3401      	adds	r4, #1
 8008d72:	9305      	str	r3, [sp, #20]
 8008d74:	4619      	mov	r1, r3
 8008d76:	f04f 0c0a 	mov.w	ip, #10
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d80:	3a30      	subs	r2, #48	; 0x30
 8008d82:	2a09      	cmp	r2, #9
 8008d84:	d903      	bls.n	8008d8e <_svfiprintf_r+0x1a6>
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d0c6      	beq.n	8008d18 <_svfiprintf_r+0x130>
 8008d8a:	9105      	str	r1, [sp, #20]
 8008d8c:	e7c4      	b.n	8008d18 <_svfiprintf_r+0x130>
 8008d8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d92:	4604      	mov	r4, r0
 8008d94:	2301      	movs	r3, #1
 8008d96:	e7f0      	b.n	8008d7a <_svfiprintf_r+0x192>
 8008d98:	ab03      	add	r3, sp, #12
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	462a      	mov	r2, r5
 8008d9e:	4b0f      	ldr	r3, [pc, #60]	; (8008ddc <_svfiprintf_r+0x1f4>)
 8008da0:	a904      	add	r1, sp, #16
 8008da2:	4638      	mov	r0, r7
 8008da4:	f3af 8000 	nop.w
 8008da8:	1c42      	adds	r2, r0, #1
 8008daa:	4606      	mov	r6, r0
 8008dac:	d1d6      	bne.n	8008d5c <_svfiprintf_r+0x174>
 8008dae:	89ab      	ldrh	r3, [r5, #12]
 8008db0:	065b      	lsls	r3, r3, #25
 8008db2:	f53f af2d 	bmi.w	8008c10 <_svfiprintf_r+0x28>
 8008db6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008db8:	b01d      	add	sp, #116	; 0x74
 8008dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dbe:	ab03      	add	r3, sp, #12
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	462a      	mov	r2, r5
 8008dc4:	4b05      	ldr	r3, [pc, #20]	; (8008ddc <_svfiprintf_r+0x1f4>)
 8008dc6:	a904      	add	r1, sp, #16
 8008dc8:	4638      	mov	r0, r7
 8008dca:	f000 f879 	bl	8008ec0 <_printf_i>
 8008dce:	e7eb      	b.n	8008da8 <_svfiprintf_r+0x1c0>
 8008dd0:	08009bf8 	.word	0x08009bf8
 8008dd4:	08009c02 	.word	0x08009c02
 8008dd8:	00000000 	.word	0x00000000
 8008ddc:	08008b35 	.word	0x08008b35
 8008de0:	08009bfe 	.word	0x08009bfe

08008de4 <_printf_common>:
 8008de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008de8:	4616      	mov	r6, r2
 8008dea:	4699      	mov	r9, r3
 8008dec:	688a      	ldr	r2, [r1, #8]
 8008dee:	690b      	ldr	r3, [r1, #16]
 8008df0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008df4:	4293      	cmp	r3, r2
 8008df6:	bfb8      	it	lt
 8008df8:	4613      	movlt	r3, r2
 8008dfa:	6033      	str	r3, [r6, #0]
 8008dfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e00:	4607      	mov	r7, r0
 8008e02:	460c      	mov	r4, r1
 8008e04:	b10a      	cbz	r2, 8008e0a <_printf_common+0x26>
 8008e06:	3301      	adds	r3, #1
 8008e08:	6033      	str	r3, [r6, #0]
 8008e0a:	6823      	ldr	r3, [r4, #0]
 8008e0c:	0699      	lsls	r1, r3, #26
 8008e0e:	bf42      	ittt	mi
 8008e10:	6833      	ldrmi	r3, [r6, #0]
 8008e12:	3302      	addmi	r3, #2
 8008e14:	6033      	strmi	r3, [r6, #0]
 8008e16:	6825      	ldr	r5, [r4, #0]
 8008e18:	f015 0506 	ands.w	r5, r5, #6
 8008e1c:	d106      	bne.n	8008e2c <_printf_common+0x48>
 8008e1e:	f104 0a19 	add.w	sl, r4, #25
 8008e22:	68e3      	ldr	r3, [r4, #12]
 8008e24:	6832      	ldr	r2, [r6, #0]
 8008e26:	1a9b      	subs	r3, r3, r2
 8008e28:	42ab      	cmp	r3, r5
 8008e2a:	dc26      	bgt.n	8008e7a <_printf_common+0x96>
 8008e2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e30:	1e13      	subs	r3, r2, #0
 8008e32:	6822      	ldr	r2, [r4, #0]
 8008e34:	bf18      	it	ne
 8008e36:	2301      	movne	r3, #1
 8008e38:	0692      	lsls	r2, r2, #26
 8008e3a:	d42b      	bmi.n	8008e94 <_printf_common+0xb0>
 8008e3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e40:	4649      	mov	r1, r9
 8008e42:	4638      	mov	r0, r7
 8008e44:	47c0      	blx	r8
 8008e46:	3001      	adds	r0, #1
 8008e48:	d01e      	beq.n	8008e88 <_printf_common+0xa4>
 8008e4a:	6823      	ldr	r3, [r4, #0]
 8008e4c:	6922      	ldr	r2, [r4, #16]
 8008e4e:	f003 0306 	and.w	r3, r3, #6
 8008e52:	2b04      	cmp	r3, #4
 8008e54:	bf02      	ittt	eq
 8008e56:	68e5      	ldreq	r5, [r4, #12]
 8008e58:	6833      	ldreq	r3, [r6, #0]
 8008e5a:	1aed      	subeq	r5, r5, r3
 8008e5c:	68a3      	ldr	r3, [r4, #8]
 8008e5e:	bf0c      	ite	eq
 8008e60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e64:	2500      	movne	r5, #0
 8008e66:	4293      	cmp	r3, r2
 8008e68:	bfc4      	itt	gt
 8008e6a:	1a9b      	subgt	r3, r3, r2
 8008e6c:	18ed      	addgt	r5, r5, r3
 8008e6e:	2600      	movs	r6, #0
 8008e70:	341a      	adds	r4, #26
 8008e72:	42b5      	cmp	r5, r6
 8008e74:	d11a      	bne.n	8008eac <_printf_common+0xc8>
 8008e76:	2000      	movs	r0, #0
 8008e78:	e008      	b.n	8008e8c <_printf_common+0xa8>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	4652      	mov	r2, sl
 8008e7e:	4649      	mov	r1, r9
 8008e80:	4638      	mov	r0, r7
 8008e82:	47c0      	blx	r8
 8008e84:	3001      	adds	r0, #1
 8008e86:	d103      	bne.n	8008e90 <_printf_common+0xac>
 8008e88:	f04f 30ff 	mov.w	r0, #4294967295
 8008e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e90:	3501      	adds	r5, #1
 8008e92:	e7c6      	b.n	8008e22 <_printf_common+0x3e>
 8008e94:	18e1      	adds	r1, r4, r3
 8008e96:	1c5a      	adds	r2, r3, #1
 8008e98:	2030      	movs	r0, #48	; 0x30
 8008e9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e9e:	4422      	add	r2, r4
 8008ea0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ea4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ea8:	3302      	adds	r3, #2
 8008eaa:	e7c7      	b.n	8008e3c <_printf_common+0x58>
 8008eac:	2301      	movs	r3, #1
 8008eae:	4622      	mov	r2, r4
 8008eb0:	4649      	mov	r1, r9
 8008eb2:	4638      	mov	r0, r7
 8008eb4:	47c0      	blx	r8
 8008eb6:	3001      	adds	r0, #1
 8008eb8:	d0e6      	beq.n	8008e88 <_printf_common+0xa4>
 8008eba:	3601      	adds	r6, #1
 8008ebc:	e7d9      	b.n	8008e72 <_printf_common+0x8e>
	...

08008ec0 <_printf_i>:
 8008ec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec4:	7e0f      	ldrb	r7, [r1, #24]
 8008ec6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ec8:	2f78      	cmp	r7, #120	; 0x78
 8008eca:	4691      	mov	r9, r2
 8008ecc:	4680      	mov	r8, r0
 8008ece:	460c      	mov	r4, r1
 8008ed0:	469a      	mov	sl, r3
 8008ed2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ed6:	d807      	bhi.n	8008ee8 <_printf_i+0x28>
 8008ed8:	2f62      	cmp	r7, #98	; 0x62
 8008eda:	d80a      	bhi.n	8008ef2 <_printf_i+0x32>
 8008edc:	2f00      	cmp	r7, #0
 8008ede:	f000 80d4 	beq.w	800908a <_printf_i+0x1ca>
 8008ee2:	2f58      	cmp	r7, #88	; 0x58
 8008ee4:	f000 80c0 	beq.w	8009068 <_printf_i+0x1a8>
 8008ee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008eec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ef0:	e03a      	b.n	8008f68 <_printf_i+0xa8>
 8008ef2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ef6:	2b15      	cmp	r3, #21
 8008ef8:	d8f6      	bhi.n	8008ee8 <_printf_i+0x28>
 8008efa:	a101      	add	r1, pc, #4	; (adr r1, 8008f00 <_printf_i+0x40>)
 8008efc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f00:	08008f59 	.word	0x08008f59
 8008f04:	08008f6d 	.word	0x08008f6d
 8008f08:	08008ee9 	.word	0x08008ee9
 8008f0c:	08008ee9 	.word	0x08008ee9
 8008f10:	08008ee9 	.word	0x08008ee9
 8008f14:	08008ee9 	.word	0x08008ee9
 8008f18:	08008f6d 	.word	0x08008f6d
 8008f1c:	08008ee9 	.word	0x08008ee9
 8008f20:	08008ee9 	.word	0x08008ee9
 8008f24:	08008ee9 	.word	0x08008ee9
 8008f28:	08008ee9 	.word	0x08008ee9
 8008f2c:	08009071 	.word	0x08009071
 8008f30:	08008f99 	.word	0x08008f99
 8008f34:	0800902b 	.word	0x0800902b
 8008f38:	08008ee9 	.word	0x08008ee9
 8008f3c:	08008ee9 	.word	0x08008ee9
 8008f40:	08009093 	.word	0x08009093
 8008f44:	08008ee9 	.word	0x08008ee9
 8008f48:	08008f99 	.word	0x08008f99
 8008f4c:	08008ee9 	.word	0x08008ee9
 8008f50:	08008ee9 	.word	0x08008ee9
 8008f54:	08009033 	.word	0x08009033
 8008f58:	682b      	ldr	r3, [r5, #0]
 8008f5a:	1d1a      	adds	r2, r3, #4
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	602a      	str	r2, [r5, #0]
 8008f60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e09f      	b.n	80090ac <_printf_i+0x1ec>
 8008f6c:	6820      	ldr	r0, [r4, #0]
 8008f6e:	682b      	ldr	r3, [r5, #0]
 8008f70:	0607      	lsls	r7, r0, #24
 8008f72:	f103 0104 	add.w	r1, r3, #4
 8008f76:	6029      	str	r1, [r5, #0]
 8008f78:	d501      	bpl.n	8008f7e <_printf_i+0xbe>
 8008f7a:	681e      	ldr	r6, [r3, #0]
 8008f7c:	e003      	b.n	8008f86 <_printf_i+0xc6>
 8008f7e:	0646      	lsls	r6, r0, #25
 8008f80:	d5fb      	bpl.n	8008f7a <_printf_i+0xba>
 8008f82:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008f86:	2e00      	cmp	r6, #0
 8008f88:	da03      	bge.n	8008f92 <_printf_i+0xd2>
 8008f8a:	232d      	movs	r3, #45	; 0x2d
 8008f8c:	4276      	negs	r6, r6
 8008f8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f92:	485a      	ldr	r0, [pc, #360]	; (80090fc <_printf_i+0x23c>)
 8008f94:	230a      	movs	r3, #10
 8008f96:	e012      	b.n	8008fbe <_printf_i+0xfe>
 8008f98:	682b      	ldr	r3, [r5, #0]
 8008f9a:	6820      	ldr	r0, [r4, #0]
 8008f9c:	1d19      	adds	r1, r3, #4
 8008f9e:	6029      	str	r1, [r5, #0]
 8008fa0:	0605      	lsls	r5, r0, #24
 8008fa2:	d501      	bpl.n	8008fa8 <_printf_i+0xe8>
 8008fa4:	681e      	ldr	r6, [r3, #0]
 8008fa6:	e002      	b.n	8008fae <_printf_i+0xee>
 8008fa8:	0641      	lsls	r1, r0, #25
 8008faa:	d5fb      	bpl.n	8008fa4 <_printf_i+0xe4>
 8008fac:	881e      	ldrh	r6, [r3, #0]
 8008fae:	4853      	ldr	r0, [pc, #332]	; (80090fc <_printf_i+0x23c>)
 8008fb0:	2f6f      	cmp	r7, #111	; 0x6f
 8008fb2:	bf0c      	ite	eq
 8008fb4:	2308      	moveq	r3, #8
 8008fb6:	230a      	movne	r3, #10
 8008fb8:	2100      	movs	r1, #0
 8008fba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008fbe:	6865      	ldr	r5, [r4, #4]
 8008fc0:	60a5      	str	r5, [r4, #8]
 8008fc2:	2d00      	cmp	r5, #0
 8008fc4:	bfa2      	ittt	ge
 8008fc6:	6821      	ldrge	r1, [r4, #0]
 8008fc8:	f021 0104 	bicge.w	r1, r1, #4
 8008fcc:	6021      	strge	r1, [r4, #0]
 8008fce:	b90e      	cbnz	r6, 8008fd4 <_printf_i+0x114>
 8008fd0:	2d00      	cmp	r5, #0
 8008fd2:	d04b      	beq.n	800906c <_printf_i+0x1ac>
 8008fd4:	4615      	mov	r5, r2
 8008fd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8008fda:	fb03 6711 	mls	r7, r3, r1, r6
 8008fde:	5dc7      	ldrb	r7, [r0, r7]
 8008fe0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008fe4:	4637      	mov	r7, r6
 8008fe6:	42bb      	cmp	r3, r7
 8008fe8:	460e      	mov	r6, r1
 8008fea:	d9f4      	bls.n	8008fd6 <_printf_i+0x116>
 8008fec:	2b08      	cmp	r3, #8
 8008fee:	d10b      	bne.n	8009008 <_printf_i+0x148>
 8008ff0:	6823      	ldr	r3, [r4, #0]
 8008ff2:	07de      	lsls	r6, r3, #31
 8008ff4:	d508      	bpl.n	8009008 <_printf_i+0x148>
 8008ff6:	6923      	ldr	r3, [r4, #16]
 8008ff8:	6861      	ldr	r1, [r4, #4]
 8008ffa:	4299      	cmp	r1, r3
 8008ffc:	bfde      	ittt	le
 8008ffe:	2330      	movle	r3, #48	; 0x30
 8009000:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009004:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009008:	1b52      	subs	r2, r2, r5
 800900a:	6122      	str	r2, [r4, #16]
 800900c:	f8cd a000 	str.w	sl, [sp]
 8009010:	464b      	mov	r3, r9
 8009012:	aa03      	add	r2, sp, #12
 8009014:	4621      	mov	r1, r4
 8009016:	4640      	mov	r0, r8
 8009018:	f7ff fee4 	bl	8008de4 <_printf_common>
 800901c:	3001      	adds	r0, #1
 800901e:	d14a      	bne.n	80090b6 <_printf_i+0x1f6>
 8009020:	f04f 30ff 	mov.w	r0, #4294967295
 8009024:	b004      	add	sp, #16
 8009026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800902a:	6823      	ldr	r3, [r4, #0]
 800902c:	f043 0320 	orr.w	r3, r3, #32
 8009030:	6023      	str	r3, [r4, #0]
 8009032:	4833      	ldr	r0, [pc, #204]	; (8009100 <_printf_i+0x240>)
 8009034:	2778      	movs	r7, #120	; 0x78
 8009036:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	6829      	ldr	r1, [r5, #0]
 800903e:	061f      	lsls	r7, r3, #24
 8009040:	f851 6b04 	ldr.w	r6, [r1], #4
 8009044:	d402      	bmi.n	800904c <_printf_i+0x18c>
 8009046:	065f      	lsls	r7, r3, #25
 8009048:	bf48      	it	mi
 800904a:	b2b6      	uxthmi	r6, r6
 800904c:	07df      	lsls	r7, r3, #31
 800904e:	bf48      	it	mi
 8009050:	f043 0320 	orrmi.w	r3, r3, #32
 8009054:	6029      	str	r1, [r5, #0]
 8009056:	bf48      	it	mi
 8009058:	6023      	strmi	r3, [r4, #0]
 800905a:	b91e      	cbnz	r6, 8009064 <_printf_i+0x1a4>
 800905c:	6823      	ldr	r3, [r4, #0]
 800905e:	f023 0320 	bic.w	r3, r3, #32
 8009062:	6023      	str	r3, [r4, #0]
 8009064:	2310      	movs	r3, #16
 8009066:	e7a7      	b.n	8008fb8 <_printf_i+0xf8>
 8009068:	4824      	ldr	r0, [pc, #144]	; (80090fc <_printf_i+0x23c>)
 800906a:	e7e4      	b.n	8009036 <_printf_i+0x176>
 800906c:	4615      	mov	r5, r2
 800906e:	e7bd      	b.n	8008fec <_printf_i+0x12c>
 8009070:	682b      	ldr	r3, [r5, #0]
 8009072:	6826      	ldr	r6, [r4, #0]
 8009074:	6961      	ldr	r1, [r4, #20]
 8009076:	1d18      	adds	r0, r3, #4
 8009078:	6028      	str	r0, [r5, #0]
 800907a:	0635      	lsls	r5, r6, #24
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	d501      	bpl.n	8009084 <_printf_i+0x1c4>
 8009080:	6019      	str	r1, [r3, #0]
 8009082:	e002      	b.n	800908a <_printf_i+0x1ca>
 8009084:	0670      	lsls	r0, r6, #25
 8009086:	d5fb      	bpl.n	8009080 <_printf_i+0x1c0>
 8009088:	8019      	strh	r1, [r3, #0]
 800908a:	2300      	movs	r3, #0
 800908c:	6123      	str	r3, [r4, #16]
 800908e:	4615      	mov	r5, r2
 8009090:	e7bc      	b.n	800900c <_printf_i+0x14c>
 8009092:	682b      	ldr	r3, [r5, #0]
 8009094:	1d1a      	adds	r2, r3, #4
 8009096:	602a      	str	r2, [r5, #0]
 8009098:	681d      	ldr	r5, [r3, #0]
 800909a:	6862      	ldr	r2, [r4, #4]
 800909c:	2100      	movs	r1, #0
 800909e:	4628      	mov	r0, r5
 80090a0:	f7f7 f8a6 	bl	80001f0 <memchr>
 80090a4:	b108      	cbz	r0, 80090aa <_printf_i+0x1ea>
 80090a6:	1b40      	subs	r0, r0, r5
 80090a8:	6060      	str	r0, [r4, #4]
 80090aa:	6863      	ldr	r3, [r4, #4]
 80090ac:	6123      	str	r3, [r4, #16]
 80090ae:	2300      	movs	r3, #0
 80090b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090b4:	e7aa      	b.n	800900c <_printf_i+0x14c>
 80090b6:	6923      	ldr	r3, [r4, #16]
 80090b8:	462a      	mov	r2, r5
 80090ba:	4649      	mov	r1, r9
 80090bc:	4640      	mov	r0, r8
 80090be:	47d0      	blx	sl
 80090c0:	3001      	adds	r0, #1
 80090c2:	d0ad      	beq.n	8009020 <_printf_i+0x160>
 80090c4:	6823      	ldr	r3, [r4, #0]
 80090c6:	079b      	lsls	r3, r3, #30
 80090c8:	d413      	bmi.n	80090f2 <_printf_i+0x232>
 80090ca:	68e0      	ldr	r0, [r4, #12]
 80090cc:	9b03      	ldr	r3, [sp, #12]
 80090ce:	4298      	cmp	r0, r3
 80090d0:	bfb8      	it	lt
 80090d2:	4618      	movlt	r0, r3
 80090d4:	e7a6      	b.n	8009024 <_printf_i+0x164>
 80090d6:	2301      	movs	r3, #1
 80090d8:	4632      	mov	r2, r6
 80090da:	4649      	mov	r1, r9
 80090dc:	4640      	mov	r0, r8
 80090de:	47d0      	blx	sl
 80090e0:	3001      	adds	r0, #1
 80090e2:	d09d      	beq.n	8009020 <_printf_i+0x160>
 80090e4:	3501      	adds	r5, #1
 80090e6:	68e3      	ldr	r3, [r4, #12]
 80090e8:	9903      	ldr	r1, [sp, #12]
 80090ea:	1a5b      	subs	r3, r3, r1
 80090ec:	42ab      	cmp	r3, r5
 80090ee:	dcf2      	bgt.n	80090d6 <_printf_i+0x216>
 80090f0:	e7eb      	b.n	80090ca <_printf_i+0x20a>
 80090f2:	2500      	movs	r5, #0
 80090f4:	f104 0619 	add.w	r6, r4, #25
 80090f8:	e7f5      	b.n	80090e6 <_printf_i+0x226>
 80090fa:	bf00      	nop
 80090fc:	08009c09 	.word	0x08009c09
 8009100:	08009c1a 	.word	0x08009c1a

08009104 <memmove>:
 8009104:	4288      	cmp	r0, r1
 8009106:	b510      	push	{r4, lr}
 8009108:	eb01 0402 	add.w	r4, r1, r2
 800910c:	d902      	bls.n	8009114 <memmove+0x10>
 800910e:	4284      	cmp	r4, r0
 8009110:	4623      	mov	r3, r4
 8009112:	d807      	bhi.n	8009124 <memmove+0x20>
 8009114:	1e43      	subs	r3, r0, #1
 8009116:	42a1      	cmp	r1, r4
 8009118:	d008      	beq.n	800912c <memmove+0x28>
 800911a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800911e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009122:	e7f8      	b.n	8009116 <memmove+0x12>
 8009124:	4402      	add	r2, r0
 8009126:	4601      	mov	r1, r0
 8009128:	428a      	cmp	r2, r1
 800912a:	d100      	bne.n	800912e <memmove+0x2a>
 800912c:	bd10      	pop	{r4, pc}
 800912e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009132:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009136:	e7f7      	b.n	8009128 <memmove+0x24>

08009138 <_sbrk_r>:
 8009138:	b538      	push	{r3, r4, r5, lr}
 800913a:	4d06      	ldr	r5, [pc, #24]	; (8009154 <_sbrk_r+0x1c>)
 800913c:	2300      	movs	r3, #0
 800913e:	4604      	mov	r4, r0
 8009140:	4608      	mov	r0, r1
 8009142:	602b      	str	r3, [r5, #0]
 8009144:	f7fa fb62 	bl	800380c <_sbrk>
 8009148:	1c43      	adds	r3, r0, #1
 800914a:	d102      	bne.n	8009152 <_sbrk_r+0x1a>
 800914c:	682b      	ldr	r3, [r5, #0]
 800914e:	b103      	cbz	r3, 8009152 <_sbrk_r+0x1a>
 8009150:	6023      	str	r3, [r4, #0]
 8009152:	bd38      	pop	{r3, r4, r5, pc}
 8009154:	20007b9c 	.word	0x20007b9c

08009158 <_realloc_r>:
 8009158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800915c:	4680      	mov	r8, r0
 800915e:	4614      	mov	r4, r2
 8009160:	460e      	mov	r6, r1
 8009162:	b921      	cbnz	r1, 800916e <_realloc_r+0x16>
 8009164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009168:	4611      	mov	r1, r2
 800916a:	f7ff bc57 	b.w	8008a1c <_malloc_r>
 800916e:	b92a      	cbnz	r2, 800917c <_realloc_r+0x24>
 8009170:	f7ff fbe8 	bl	8008944 <_free_r>
 8009174:	4625      	mov	r5, r4
 8009176:	4628      	mov	r0, r5
 8009178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800917c:	f000 f81b 	bl	80091b6 <_malloc_usable_size_r>
 8009180:	4284      	cmp	r4, r0
 8009182:	4607      	mov	r7, r0
 8009184:	d802      	bhi.n	800918c <_realloc_r+0x34>
 8009186:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800918a:	d812      	bhi.n	80091b2 <_realloc_r+0x5a>
 800918c:	4621      	mov	r1, r4
 800918e:	4640      	mov	r0, r8
 8009190:	f7ff fc44 	bl	8008a1c <_malloc_r>
 8009194:	4605      	mov	r5, r0
 8009196:	2800      	cmp	r0, #0
 8009198:	d0ed      	beq.n	8009176 <_realloc_r+0x1e>
 800919a:	42bc      	cmp	r4, r7
 800919c:	4622      	mov	r2, r4
 800919e:	4631      	mov	r1, r6
 80091a0:	bf28      	it	cs
 80091a2:	463a      	movcs	r2, r7
 80091a4:	f7ff fbc0 	bl	8008928 <memcpy>
 80091a8:	4631      	mov	r1, r6
 80091aa:	4640      	mov	r0, r8
 80091ac:	f7ff fbca 	bl	8008944 <_free_r>
 80091b0:	e7e1      	b.n	8009176 <_realloc_r+0x1e>
 80091b2:	4635      	mov	r5, r6
 80091b4:	e7df      	b.n	8009176 <_realloc_r+0x1e>

080091b6 <_malloc_usable_size_r>:
 80091b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091ba:	1f18      	subs	r0, r3, #4
 80091bc:	2b00      	cmp	r3, #0
 80091be:	bfbc      	itt	lt
 80091c0:	580b      	ldrlt	r3, [r1, r0]
 80091c2:	18c0      	addlt	r0, r0, r3
 80091c4:	4770      	bx	lr
	...

080091c8 <trunc>:
 80091c8:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 80091cc:	ec5c bb10 	vmov	fp, ip, d0
 80091d0:	f3cc 500a 	ubfx	r0, ip, #20, #11
 80091d4:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 80091d8:	2913      	cmp	r1, #19
 80091da:	4664      	mov	r4, ip
 80091dc:	dc11      	bgt.n	8009202 <trunc+0x3a>
 80091de:	2900      	cmp	r1, #0
 80091e0:	bfa7      	ittee	ge
 80091e2:	4b15      	ldrge	r3, [pc, #84]	; (8009238 <trunc+0x70>)
 80091e4:	fa43 f101 	asrge.w	r1, r3, r1
 80091e8:	2200      	movlt	r2, #0
 80091ea:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 80091ee:	bfa4      	itt	ge
 80091f0:	2200      	movge	r2, #0
 80091f2:	ea01 030c 	andge.w	r3, r1, ip
 80091f6:	4693      	mov	fp, r2
 80091f8:	469c      	mov	ip, r3
 80091fa:	ec4c bb10 	vmov	d0, fp, ip
 80091fe:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8009202:	2933      	cmp	r1, #51	; 0x33
 8009204:	dd0d      	ble.n	8009222 <trunc+0x5a>
 8009206:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800920a:	d1f6      	bne.n	80091fa <trunc+0x32>
 800920c:	4663      	mov	r3, ip
 800920e:	ee10 2a10 	vmov	r2, s0
 8009212:	ee10 0a10 	vmov	r0, s0
 8009216:	4621      	mov	r1, r4
 8009218:	f7f7 f840 	bl	800029c <__adddf3>
 800921c:	4683      	mov	fp, r0
 800921e:	468c      	mov	ip, r1
 8009220:	e7eb      	b.n	80091fa <trunc+0x32>
 8009222:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 8009226:	f04f 33ff 	mov.w	r3, #4294967295
 800922a:	40c3      	lsrs	r3, r0
 800922c:	ea2b 0603 	bic.w	r6, fp, r3
 8009230:	46b3      	mov	fp, r6
 8009232:	46a4      	mov	ip, r4
 8009234:	e7e1      	b.n	80091fa <trunc+0x32>
 8009236:	bf00      	nop
 8009238:	fff00000 	.word	0xfff00000

0800923c <_init>:
 800923c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923e:	bf00      	nop
 8009240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009242:	bc08      	pop	{r3}
 8009244:	469e      	mov	lr, r3
 8009246:	4770      	bx	lr

08009248 <_fini>:
 8009248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800924a:	bf00      	nop
 800924c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800924e:	bc08      	pop	{r3}
 8009250:	469e      	mov	lr, r3
 8009252:	4770      	bx	lr
