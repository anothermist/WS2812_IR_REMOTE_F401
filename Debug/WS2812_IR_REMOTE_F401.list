
WS2812_IR_REMOTE_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a50  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005bf0  08005bf0  00015bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c6c  08005c6c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08005c6c  08005c6c  00015c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c74  08005c74  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c74  08005c74  00015c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c78  08005c78  00015c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005c7c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000078b0  20000088  08005d00  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007938  08005d00  00027938  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f138  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002222  00000000  00000000  0002f1ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00031410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  000320f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171bf  00000000  00000000  00032cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb43  00000000  00000000  00049eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e306  00000000  00000000  000599fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7d00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b80  00000000  00000000  000e7d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005bd8 	.word	0x08005bd8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08005bd8 	.word	0x08005bd8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b974 	b.w	8000e7c <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	468e      	mov	lr, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d14d      	bne.n	8000c56 <__udivmoddi4+0xaa>
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	4694      	mov	ip, r2
 8000bbe:	d969      	bls.n	8000c94 <__udivmoddi4+0xe8>
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	b152      	cbz	r2, 8000bdc <__udivmoddi4+0x30>
 8000bc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bca:	f1c2 0120 	rsb	r1, r2, #32
 8000bce:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bda:	4094      	lsls	r4, r2
 8000bdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be0:	0c21      	lsrs	r1, r4, #16
 8000be2:	fbbe f6f8 	udiv	r6, lr, r8
 8000be6:	fa1f f78c 	uxth.w	r7, ip
 8000bea:	fb08 e316 	mls	r3, r8, r6, lr
 8000bee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf2:	fb06 f107 	mul.w	r1, r6, r7
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x64>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c02:	f080 811f 	bcs.w	8000e44 <__udivmoddi4+0x298>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 811c 	bls.w	8000e44 <__udivmoddi4+0x298>
 8000c0c:	3e02      	subs	r6, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c18:	fb08 3310 	mls	r3, r8, r0, r3
 8000c1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c20:	fb00 f707 	mul.w	r7, r0, r7
 8000c24:	42a7      	cmp	r7, r4
 8000c26:	d90a      	bls.n	8000c3e <__udivmoddi4+0x92>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c30:	f080 810a 	bcs.w	8000e48 <__udivmoddi4+0x29c>
 8000c34:	42a7      	cmp	r7, r4
 8000c36:	f240 8107 	bls.w	8000e48 <__udivmoddi4+0x29c>
 8000c3a:	4464      	add	r4, ip
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c42:	1be4      	subs	r4, r4, r7
 8000c44:	2600      	movs	r6, #0
 8000c46:	b11d      	cbz	r5, 8000c50 <__udivmoddi4+0xa4>
 8000c48:	40d4      	lsrs	r4, r2
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d909      	bls.n	8000c6e <__udivmoddi4+0xc2>
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	f000 80ef 	beq.w	8000e3e <__udivmoddi4+0x292>
 8000c60:	2600      	movs	r6, #0
 8000c62:	e9c5 0100 	strd	r0, r1, [r5]
 8000c66:	4630      	mov	r0, r6
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	fab3 f683 	clz	r6, r3
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d14a      	bne.n	8000d0c <__udivmoddi4+0x160>
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d302      	bcc.n	8000c80 <__udivmoddi4+0xd4>
 8000c7a:	4282      	cmp	r2, r0
 8000c7c:	f200 80f9 	bhi.w	8000e72 <__udivmoddi4+0x2c6>
 8000c80:	1a84      	subs	r4, r0, r2
 8000c82:	eb61 0303 	sbc.w	r3, r1, r3
 8000c86:	2001      	movs	r0, #1
 8000c88:	469e      	mov	lr, r3
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	d0e0      	beq.n	8000c50 <__udivmoddi4+0xa4>
 8000c8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c92:	e7dd      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000c94:	b902      	cbnz	r2, 8000c98 <__udivmoddi4+0xec>
 8000c96:	deff      	udf	#255	; 0xff
 8000c98:	fab2 f282 	clz	r2, r2
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	f040 8092 	bne.w	8000dc6 <__udivmoddi4+0x21a>
 8000ca2:	eba1 010c 	sub.w	r1, r1, ip
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f fe8c 	uxth.w	lr, ip
 8000cae:	2601      	movs	r6, #1
 8000cb0:	0c20      	lsrs	r0, r4, #16
 8000cb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cbe:	fb0e f003 	mul.w	r0, lr, r3
 8000cc2:	4288      	cmp	r0, r1
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x12c>
 8000cc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x12a>
 8000cd0:	4288      	cmp	r0, r1
 8000cd2:	f200 80cb 	bhi.w	8000e6c <__udivmoddi4+0x2c0>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	1a09      	subs	r1, r1, r0
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x156>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf8:	d202      	bcs.n	8000d00 <__udivmoddi4+0x154>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f200 80bb 	bhi.w	8000e76 <__udivmoddi4+0x2ca>
 8000d00:	4608      	mov	r0, r1
 8000d02:	eba4 040e 	sub.w	r4, r4, lr
 8000d06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0a:	e79c      	b.n	8000c46 <__udivmoddi4+0x9a>
 8000d0c:	f1c6 0720 	rsb	r7, r6, #32
 8000d10:	40b3      	lsls	r3, r6
 8000d12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d22:	431c      	orrs	r4, r3
 8000d24:	40f9      	lsrs	r1, r7
 8000d26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d32:	0c20      	lsrs	r0, r4, #16
 8000d34:	fa1f fe8c 	uxth.w	lr, ip
 8000d38:	fb09 1118 	mls	r1, r9, r8, r1
 8000d3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d40:	fb08 f00e 	mul.w	r0, r8, lr
 8000d44:	4288      	cmp	r0, r1
 8000d46:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4a:	d90b      	bls.n	8000d64 <__udivmoddi4+0x1b8>
 8000d4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d54:	f080 8088 	bcs.w	8000e68 <__udivmoddi4+0x2bc>
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	f240 8085 	bls.w	8000e68 <__udivmoddi4+0x2bc>
 8000d5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d62:	4461      	add	r1, ip
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d78:	458e      	cmp	lr, r1
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x1e2>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d84:	d26c      	bcs.n	8000e60 <__udivmoddi4+0x2b4>
 8000d86:	458e      	cmp	lr, r1
 8000d88:	d96a      	bls.n	8000e60 <__udivmoddi4+0x2b4>
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	4461      	add	r1, ip
 8000d8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d92:	fba0 9402 	umull	r9, r4, r0, r2
 8000d96:	eba1 010e 	sub.w	r1, r1, lr
 8000d9a:	42a1      	cmp	r1, r4
 8000d9c:	46c8      	mov	r8, r9
 8000d9e:	46a6      	mov	lr, r4
 8000da0:	d356      	bcc.n	8000e50 <__udivmoddi4+0x2a4>
 8000da2:	d053      	beq.n	8000e4c <__udivmoddi4+0x2a0>
 8000da4:	b15d      	cbz	r5, 8000dbe <__udivmoddi4+0x212>
 8000da6:	ebb3 0208 	subs.w	r2, r3, r8
 8000daa:	eb61 010e 	sbc.w	r1, r1, lr
 8000dae:	fa01 f707 	lsl.w	r7, r1, r7
 8000db2:	fa22 f306 	lsr.w	r3, r2, r6
 8000db6:	40f1      	lsrs	r1, r6
 8000db8:	431f      	orrs	r7, r3
 8000dba:	e9c5 7100 	strd	r7, r1, [r5]
 8000dbe:	2600      	movs	r6, #0
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	f1c2 0320 	rsb	r3, r2, #32
 8000dca:	40d8      	lsrs	r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd4:	4091      	lsls	r1, r2
 8000dd6:	4301      	orrs	r1, r0
 8000dd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ddc:	fa1f fe8c 	uxth.w	lr, ip
 8000de0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de4:	fb07 3610 	mls	r6, r7, r0, r3
 8000de8:	0c0b      	lsrs	r3, r1, #16
 8000dea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dee:	fb00 f60e 	mul.w	r6, r0, lr
 8000df2:	429e      	cmp	r6, r3
 8000df4:	fa04 f402 	lsl.w	r4, r4, r2
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x260>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e02:	d22f      	bcs.n	8000e64 <__udivmoddi4+0x2b8>
 8000e04:	429e      	cmp	r6, r3
 8000e06:	d92d      	bls.n	8000e64 <__udivmoddi4+0x2b8>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1b9b      	subs	r3, r3, r6
 8000e0e:	b289      	uxth	r1, r1
 8000e10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e14:	fb07 3316 	mls	r3, r7, r6, r3
 8000e18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e20:	428b      	cmp	r3, r1
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x28a>
 8000e24:	eb1c 0101 	adds.w	r1, ip, r1
 8000e28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e2c:	d216      	bcs.n	8000e5c <__udivmoddi4+0x2b0>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d914      	bls.n	8000e5c <__udivmoddi4+0x2b0>
 8000e32:	3e02      	subs	r6, #2
 8000e34:	4461      	add	r1, ip
 8000e36:	1ac9      	subs	r1, r1, r3
 8000e38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e3c:	e738      	b.n	8000cb0 <__udivmoddi4+0x104>
 8000e3e:	462e      	mov	r6, r5
 8000e40:	4628      	mov	r0, r5
 8000e42:	e705      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000e44:	4606      	mov	r6, r0
 8000e46:	e6e3      	b.n	8000c10 <__udivmoddi4+0x64>
 8000e48:	4618      	mov	r0, r3
 8000e4a:	e6f8      	b.n	8000c3e <__udivmoddi4+0x92>
 8000e4c:	454b      	cmp	r3, r9
 8000e4e:	d2a9      	bcs.n	8000da4 <__udivmoddi4+0x1f8>
 8000e50:	ebb9 0802 	subs.w	r8, r9, r2
 8000e54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e58:	3801      	subs	r0, #1
 8000e5a:	e7a3      	b.n	8000da4 <__udivmoddi4+0x1f8>
 8000e5c:	4646      	mov	r6, r8
 8000e5e:	e7ea      	b.n	8000e36 <__udivmoddi4+0x28a>
 8000e60:	4620      	mov	r0, r4
 8000e62:	e794      	b.n	8000d8e <__udivmoddi4+0x1e2>
 8000e64:	4640      	mov	r0, r8
 8000e66:	e7d1      	b.n	8000e0c <__udivmoddi4+0x260>
 8000e68:	46d0      	mov	r8, sl
 8000e6a:	e77b      	b.n	8000d64 <__udivmoddi4+0x1b8>
 8000e6c:	3b02      	subs	r3, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	e732      	b.n	8000cd8 <__udivmoddi4+0x12c>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e709      	b.n	8000c8a <__udivmoddi4+0xde>
 8000e76:	4464      	add	r4, ip
 8000e78:	3802      	subs	r0, #2
 8000e7a:	e742      	b.n	8000d02 <__udivmoddi4+0x156>

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <HAL_TIM_PeriodElapsedCallback>:
#include "ir_remote.h"

volatile irparams_t irparams;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	if(htim == &TIMER_IR)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a56      	ldr	r2, [pc, #344]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	f040 809b 	bne.w	8000fc8 <HAL_TIM_PeriodElapsedCallback+0x148>
	{
		uint8_t irdata = RECIV_PIN;
 8000e92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e96:	4854      	ldr	r0, [pc, #336]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000e98:	f001 ff8c 	bl	8002db4 <HAL_GPIO_ReadPin>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	73fb      	strb	r3, [r7, #15]

		irparams.timer++;  // One more 50uS tick
 8000ea0:	4b52      	ldr	r3, [pc, #328]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000ea2:	885b      	ldrh	r3, [r3, #2]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	4b50      	ldr	r3, [pc, #320]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000eac:	805a      	strh	r2, [r3, #2]
		if(irparams.rawlen >= RAWBUF) irparams.rcvstate = STATE_OVERFLOW;  // Buffer overflow
 8000eae:	4b4f      	ldr	r3, [pc, #316]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000eb0:	785b      	ldrb	r3, [r3, #1]

		switch(irparams.rcvstate)
 8000eb2:	4b4e      	ldr	r3, [pc, #312]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	f200 808d 	bhi.w	8000fda <HAL_TIM_PeriodElapsedCallback+0x15a>
 8000ec0:	a201      	add	r2, pc, #4	; (adr r2, 8000ec8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec6:	bf00      	nop
 8000ec8:	08000edd 	.word	0x08000edd
 8000ecc:	08000f31 	.word	0x08000f31
 8000ed0:	08000f65 	.word	0x08000f65
 8000ed4:	08000fab 	.word	0x08000fab
 8000ed8:	08000fb9 	.word	0x08000fb9
		{
			case STATE_IDLE: // In the middle of a gap
				if(irdata == MARK)
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d174      	bne.n	8000fcc <HAL_TIM_PeriodElapsedCallback+0x14c>
				{
					if(irparams.timer < GAP_TICKS)  // Not big enough to be a gap.
 8000ee2:	4b42      	ldr	r3, [pc, #264]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000ee4:	885b      	ldrh	r3, [r3, #2]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	2b63      	cmp	r3, #99	; 0x63
 8000eea:	d803      	bhi.n	8000ef4 <HAL_TIM_PeriodElapsedCallback+0x74>
					{
						irparams.timer = 0;
 8000eec:	4b3f      	ldr	r3, [pc, #252]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	805a      	strh	r2, [r3, #2]
						irparams.timer = 0;
						irparams.rcvstate = STATE_MARK;
					}
				}

			break;
 8000ef2:	e06b      	b.n	8000fcc <HAL_TIM_PeriodElapsedCallback+0x14c>
						irparams.overflow = 0;
 8000ef4:	4b3d      	ldr	r3, [pc, #244]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						irparams.rawlen  = 0;
 8000efc:	4b3b      	ldr	r3, [pc, #236]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	705a      	strb	r2, [r3, #1]
						irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8000f02:	4b3a      	ldr	r3, [pc, #232]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000f04:	785b      	ldrb	r3, [r3, #1]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	b2d1      	uxtb	r1, r2
 8000f0c:	4a37      	ldr	r2, [pc, #220]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000f0e:	7051      	strb	r1, [r2, #1]
 8000f10:	4618      	mov	r0, r3
 8000f12:	4b36      	ldr	r3, [pc, #216]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000f14:	885b      	ldrh	r3, [r3, #2]
 8000f16:	b299      	uxth	r1, r3
 8000f18:	4a34      	ldr	r2, [pc, #208]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000f1a:	0043      	lsls	r3, r0, #1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	460a      	mov	r2, r1
 8000f20:	809a      	strh	r2, [r3, #4]
						irparams.timer = 0;
 8000f22:	4b32      	ldr	r3, [pc, #200]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	805a      	strh	r2, [r3, #2]
						irparams.rcvstate = STATE_MARK;
 8000f28:	4b30      	ldr	r3, [pc, #192]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	701a      	strb	r2, [r3, #0]
			break;
 8000f2e:	e04d      	b.n	8000fcc <HAL_TIM_PeriodElapsedCallback+0x14c>

			case STATE_MARK:  // Timing Mark
				if(irdata == SPACE) // Mark ended; Record time
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d14c      	bne.n	8000fd0 <HAL_TIM_PeriodElapsedCallback+0x150>
				{
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8000f36:	4b2d      	ldr	r3, [pc, #180]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000f38:	785b      	ldrb	r3, [r3, #1]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	1c5a      	adds	r2, r3, #1
 8000f3e:	b2d1      	uxtb	r1, r2
 8000f40:	4a2a      	ldr	r2, [pc, #168]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000f42:	7051      	strb	r1, [r2, #1]
 8000f44:	4618      	mov	r0, r3
 8000f46:	4b29      	ldr	r3, [pc, #164]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000f48:	885b      	ldrh	r3, [r3, #2]
 8000f4a:	b299      	uxth	r1, r3
 8000f4c:	4a27      	ldr	r2, [pc, #156]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000f4e:	0043      	lsls	r3, r0, #1
 8000f50:	4413      	add	r3, r2
 8000f52:	460a      	mov	r2, r1
 8000f54:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 8000f56:	4b25      	ldr	r3, [pc, #148]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_SPACE;
 8000f5c:	4b23      	ldr	r3, [pc, #140]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000f5e:	2204      	movs	r2, #4
 8000f60:	701a      	strb	r2, [r3, #0]
				}

			break;
 8000f62:	e035      	b.n	8000fd0 <HAL_TIM_PeriodElapsedCallback+0x150>

			case STATE_SPACE:  // Timing Space
				if(irdata == MARK) // Space just ended; Record time
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d116      	bne.n	8000f98 <HAL_TIM_PeriodElapsedCallback+0x118>
				{
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8000f6a:	4b20      	ldr	r3, [pc, #128]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000f6c:	785b      	ldrb	r3, [r3, #1]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	1c5a      	adds	r2, r3, #1
 8000f72:	b2d1      	uxtb	r1, r2
 8000f74:	4a1d      	ldr	r2, [pc, #116]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000f76:	7051      	strb	r1, [r2, #1]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000f7c:	885b      	ldrh	r3, [r3, #2]
 8000f7e:	b299      	uxth	r1, r3
 8000f80:	4a1a      	ldr	r2, [pc, #104]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000f82:	0043      	lsls	r3, r0, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	460a      	mov	r2, r1
 8000f88:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_MARK;
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000f92:	2203      	movs	r2, #3
 8000f94:	701a      	strb	r2, [r3, #0]
				else if(irparams.timer > GAP_TICKS) // Space
				{
					irparams.rcvstate = STATE_STOP;
				}

			break;
 8000f96:	e01d      	b.n	8000fd4 <HAL_TIM_PeriodElapsedCallback+0x154>
				else if(irparams.timer > GAP_TICKS) // Space
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000f9a:	885b      	ldrh	r3, [r3, #2]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	2b64      	cmp	r3, #100	; 0x64
 8000fa0:	d918      	bls.n	8000fd4 <HAL_TIM_PeriodElapsedCallback+0x154>
					irparams.rcvstate = STATE_STOP;
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000fa4:	2205      	movs	r2, #5
 8000fa6:	701a      	strb	r2, [r3, #0]
			break;
 8000fa8:	e014      	b.n	8000fd4 <HAL_TIM_PeriodElapsedCallback+0x154>

			case STATE_STOP:  // Waiting; Measuring Gap
			 	if(irdata == MARK) irparams.timer = 0;  // Reset gap timer
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d113      	bne.n	8000fd8 <HAL_TIM_PeriodElapsedCallback+0x158>
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	805a      	strh	r2, [r3, #2]
			break;
 8000fb6:	e00f      	b.n	8000fd8 <HAL_TIM_PeriodElapsedCallback+0x158>

			case STATE_OVERFLOW:  // Flag up a read overflow; Stop the State Machine
				irparams.overflow = 1;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				irparams.rcvstate = STATE_STOP;
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000fc2:	2205      	movs	r2, #5
 8000fc4:	701a      	strb	r2, [r3, #0]
			break;
 8000fc6:	e008      	b.n	8000fda <HAL_TIM_PeriodElapsedCallback+0x15a>
		}
	}
 8000fc8:	bf00      	nop
 8000fca:	e006      	b.n	8000fda <HAL_TIM_PeriodElapsedCallback+0x15a>
			break;
 8000fcc:	bf00      	nop
 8000fce:	e004      	b.n	8000fda <HAL_TIM_PeriodElapsedCallback+0x15a>
			break;
 8000fd0:	bf00      	nop
 8000fd2:	e002      	b.n	8000fda <HAL_TIM_PeriodElapsedCallback+0x15a>
			break;
 8000fd4:	bf00      	nop
 8000fd6:	e000      	b.n	8000fda <HAL_TIM_PeriodElapsedCallback+0x15a>
			break;
 8000fd8:	bf00      	nop
}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000734 	.word	0x20000734
 8000fe8:	40020800 	.word	0x40020800
 8000fec:	200000a4 	.word	0x200000a4

08000ff0 <ir_decode>:

int16_t ir_decode(decode_results *results)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	if(irparams.rcvstate != STATE_STOP) return 0;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <ir_decode+0x54>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b05      	cmp	r3, #5
 8001000:	d001      	beq.n	8001006 <ir_decode+0x16>
 8001002:	2300      	movs	r3, #0
 8001004:	e01a      	b.n	800103c <ir_decode+0x4c>

	results->rawbuf = irparams.rawbuf;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a0f      	ldr	r2, [pc, #60]	; (8001048 <ir_decode+0x58>)
 800100a:	609a      	str	r2, [r3, #8]
	results->rawlen = irparams.rawlen;
 800100c:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <ir_decode+0x54>)
 800100e:	785b      	ldrb	r3, [r3, #1]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	b21a      	sxth	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	819a      	strh	r2, [r3, #12]
	results->overflow = irparams.overflow;
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <ir_decode+0x54>)
 800101a:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800101e:	b2db      	uxtb	r3, r3
 8001020:	b21a      	sxth	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	81da      	strh	r2, [r3, #14]

	if(decodeHash(results)) return 1;
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f87e 	bl	8001128 <decodeHash>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <ir_decode+0x46>
 8001032:	2301      	movs	r3, #1
 8001034:	e002      	b.n	800103c <ir_decode+0x4c>
	ir_enableIRIn();
 8001036:	f000 f809 	bl	800104c <ir_enableIRIn>
	return 0;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200000a4 	.word	0x200000a4
 8001048:	200000a8 	.word	0x200000a8

0800104c <ir_enableIRIn>:

void ir_enableIRIn()
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 8001050:	4b07      	ldr	r3, [pc, #28]	; (8001070 <ir_enableIRIn+0x24>)
 8001052:	2202      	movs	r2, #2
 8001054:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <ir_enableIRIn+0x24>)
 8001058:	2200      	movs	r2, #0
 800105a:	705a      	strb	r2, [r3, #1]

	__HAL_TIM_SET_COUNTER(&TIMER_IR, 0x0000);
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <ir_enableIRIn+0x28>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2200      	movs	r2, #0
 8001062:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&TIMER_IR);
 8001064:	4803      	ldr	r0, [pc, #12]	; (8001074 <ir_enableIRIn+0x28>)
 8001066:	f002 fb65 	bl	8003734 <HAL_TIM_Base_Start_IT>
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200000a4 	.word	0x200000a4
 8001074:	20000734 	.word	0x20000734

08001078 <ir_resume>:

void ir_resume() // Restart the ISR state machine
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <ir_resume+0x1c>)
 800107e:	2202      	movs	r2, #2
 8001080:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 8001082:	4b04      	ldr	r3, [pc, #16]	; (8001094 <ir_resume+0x1c>)
 8001084:	2200      	movs	r2, #0
 8001086:	705a      	strb	r2, [r3, #1]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	200000a4 	.word	0x200000a4

08001098 <compare>:

int16_t compare(uint16_t oldval, uint16_t newval)
{
 8001098:	b5b0      	push	{r4, r5, r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	460a      	mov	r2, r1
 80010a2:	80fb      	strh	r3, [r7, #6]
 80010a4:	4613      	mov	r3, r2
 80010a6:	80bb      	strh	r3, [r7, #4]
	if(newval < oldval * .8) return 0;
 80010a8:	88bb      	ldrh	r3, [r7, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fa42 	bl	8000534 <__aeabi_i2d>
 80010b0:	4604      	mov	r4, r0
 80010b2:	460d      	mov	r5, r1
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fa3c 	bl	8000534 <__aeabi_i2d>
 80010bc:	a318      	add	r3, pc, #96	; (adr r3, 8001120 <compare+0x88>)
 80010be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c2:	f7ff faa1 	bl	8000608 <__aeabi_dmul>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4620      	mov	r0, r4
 80010cc:	4629      	mov	r1, r5
 80010ce:	f7ff fd0d 	bl	8000aec <__aeabi_dcmplt>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <compare+0x44>
 80010d8:	2300      	movs	r3, #0
 80010da:	e01a      	b.n	8001112 <compare+0x7a>
	else if(oldval < newval * .8) return 2;
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fa28 	bl	8000534 <__aeabi_i2d>
 80010e4:	4604      	mov	r4, r0
 80010e6:	460d      	mov	r5, r1
 80010e8:	88bb      	ldrh	r3, [r7, #4]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fa22 	bl	8000534 <__aeabi_i2d>
 80010f0:	a30b      	add	r3, pc, #44	; (adr r3, 8001120 <compare+0x88>)
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	f7ff fa87 	bl	8000608 <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4620      	mov	r0, r4
 8001100:	4629      	mov	r1, r5
 8001102:	f7ff fcf3 	bl	8000aec <__aeabi_dcmplt>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <compare+0x78>
 800110c:	2302      	movs	r3, #2
 800110e:	e000      	b.n	8001112 <compare+0x7a>
	else return 1;
 8001110:	2301      	movs	r3, #1
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bdb0      	pop	{r4, r5, r7, pc}
 800111a:	bf00      	nop
 800111c:	f3af 8000 	nop.w
 8001120:	9999999a 	.word	0x9999999a
 8001124:	3fe99999 	.word	0x3fe99999

08001128 <decodeHash>:

#define FNV_PRIME_32 16777619
#define FNV_BASIS_32 2166136261

int32_t decodeHash(decode_results *results)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	int32_t hash = FNV_BASIS_32;
 8001130:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <decodeHash+0x90>)
 8001132:	60fb      	str	r3, [r7, #12]

	if(results->rawlen < 6) return 0;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800113a:	2b05      	cmp	r3, #5
 800113c:	dc01      	bgt.n	8001142 <decodeHash+0x1a>
 800113e:	2300      	movs	r3, #0
 8001140:	e035      	b.n	80011ae <decodeHash+0x86>

	for(int16_t i = 1; (i + 2) < results->rawlen; i++)
 8001142:	2301      	movs	r3, #1
 8001144:	817b      	strh	r3, [r7, #10]
 8001146:	e023      	b.n	8001190 <decodeHash+0x68>
	{
		int16_t value = compare(results->rawbuf[i], results->rawbuf[i+2]);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	4413      	add	r3, r2
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	b298      	uxth	r0, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001160:	3302      	adds	r3, #2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	b29b      	uxth	r3, r3
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff ff94 	bl	8001098 <compare>
 8001170:	4603      	mov	r3, r0
 8001172:	813b      	strh	r3, [r7, #8]
		hash = (hash * FNV_PRIME_32) ^ value;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4a11      	ldr	r2, [pc, #68]	; (80011bc <decodeHash+0x94>)
 8001178:	fb03 f202 	mul.w	r2, r3, r2
 800117c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001180:	4053      	eors	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]
	for(int16_t i = 1; (i + 2) < results->rawlen; i++)
 8001184:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001188:	b29b      	uxth	r3, r3
 800118a:	3301      	adds	r3, #1
 800118c:	b29b      	uxth	r3, r3
 800118e:	817b      	strh	r3, [r7, #10]
 8001190:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001194:	3302      	adds	r3, #2
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800119c:	4293      	cmp	r3, r2
 800119e:	dbd3      	blt.n	8001148 <decodeHash+0x20>
	}

	results->value = hash;
 80011a0:	68fa      	ldr	r2, [r7, #12]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	601a      	str	r2, [r3, #0]
	results->bits = 32;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2220      	movs	r2, #32
 80011aa:	809a      	strh	r2, [r3, #4]
	return 1;
 80011ac:	2301      	movs	r3, #1
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	811c9dc5 	.word	0x811c9dc5
 80011bc:	01000193 	.word	0x01000193

080011c0 <hsv_rgb>:
	uint8_t b;
} RGB;

RGB rgb;

RGB hsv_rgb(double H, double S, double V) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b098      	sub	sp, #96	; 0x60
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	ed87 0b04 	vstr	d0, [r7, #16]
 80011ca:	ed87 1b02 	vstr	d1, [r7, #8]
 80011ce:	ed87 2b00 	vstr	d2, [r7]
	double r = 0, g = 0, b = 0;
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	f04f 0300 	mov.w	r3, #0
 80011da:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	f04f 0300 	mov.w	r3, #0
 80011e6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 80011ea:	f04f 0200 	mov.w	r2, #0
 80011ee:	f04f 0300 	mov.w	r3, #0
 80011f2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if (S == 0) {
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	f04f 0300 	mov.w	r3, #0
 80011fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001202:	f7ff fc69 	bl	8000ad8 <__aeabi_dcmpeq>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00c      	beq.n	8001226 <hsv_rgb+0x66>
		r = V;
 800120c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001210:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		g = V;
 8001214:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001218:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		b = V;
 800121c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001220:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001224:	e0de      	b.n	80013e4 <hsv_rgb+0x224>
	} else {
		uint16_t i;
		double f, p, q, t;

		if (H == 360)
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	4b95      	ldr	r3, [pc, #596]	; (8001480 <hsv_rgb+0x2c0>)
 800122c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001230:	f7ff fc52 	bl	8000ad8 <__aeabi_dcmpeq>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d006      	beq.n	8001248 <hsv_rgb+0x88>
			H = 0;
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	f04f 0300 	mov.w	r3, #0
 8001242:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001246:	e00a      	b.n	800125e <hsv_rgb+0x9e>
		else
			H = H / 60;
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	4b8d      	ldr	r3, [pc, #564]	; (8001484 <hsv_rgb+0x2c4>)
 800124e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001252:	f7ff fb03 	bl	800085c <__aeabi_ddiv>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	e9c7 2304 	strd	r2, r3, [r7, #16]

		i = (uint16_t) trunc(H);
 800125e:	ed97 0b04 	vldr	d0, [r7, #16]
 8001262:	f004 fc87 	bl	8005b74 <trunc>
 8001266:	ec53 2b10 	vmov	r2, r3, d0
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	f7ff fc65 	bl	8000b3c <__aeabi_d2uiz>
 8001272:	4603      	mov	r3, r0
 8001274:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		f = H - i;
 8001278:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f959 	bl	8000534 <__aeabi_i2d>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800128a:	f7ff f805 	bl	8000298 <__aeabi_dsub>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

		p = V * (1.0 - S);
 8001296:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800129a:	f04f 0000 	mov.w	r0, #0
 800129e:	497a      	ldr	r1, [pc, #488]	; (8001488 <hsv_rgb+0x2c8>)
 80012a0:	f7fe fffa 	bl	8000298 <__aeabi_dsub>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012ac:	f7ff f9ac 	bl	8000608 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		q = V * (1.0 - (S * f));
 80012b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80012bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012c0:	f7ff f9a2 	bl	8000608 <__aeabi_dmul>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	f04f 0000 	mov.w	r0, #0
 80012cc:	496e      	ldr	r1, [pc, #440]	; (8001488 <hsv_rgb+0x2c8>)
 80012ce:	f7fe ffe3 	bl	8000298 <__aeabi_dsub>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012da:	f7ff f995 	bl	8000608 <__aeabi_dmul>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		t = V * (1.0 - (S * (1.0 - f)));
 80012e6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80012ea:	f04f 0000 	mov.w	r0, #0
 80012ee:	4966      	ldr	r1, [pc, #408]	; (8001488 <hsv_rgb+0x2c8>)
 80012f0:	f7fe ffd2 	bl	8000298 <__aeabi_dsub>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001300:	f7ff f982 	bl	8000608 <__aeabi_dmul>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	f04f 0000 	mov.w	r0, #0
 800130c:	495e      	ldr	r1, [pc, #376]	; (8001488 <hsv_rgb+0x2c8>)
 800130e:	f7fe ffc3 	bl	8000298 <__aeabi_dsub>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	e9d7 0100 	ldrd	r0, r1, [r7]
 800131a:	f7ff f975 	bl	8000608 <__aeabi_dmul>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	e9c7 2308 	strd	r2, r3, [r7, #32]

		switch (i) {
 8001326:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800132a:	2b04      	cmp	r3, #4
 800132c:	d84d      	bhi.n	80013ca <hsv_rgb+0x20a>
 800132e:	a201      	add	r2, pc, #4	; (adr r2, 8001334 <hsv_rgb+0x174>)
 8001330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001334:	08001349 	.word	0x08001349
 8001338:	08001363 	.word	0x08001363
 800133c:	0800137d 	.word	0x0800137d
 8001340:	08001397 	.word	0x08001397
 8001344:	080013b1 	.word	0x080013b1
		case 0:
			r = V;
 8001348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800134c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			g = t;
 8001350:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001354:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			b = p;
 8001358:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800135c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			break;
 8001360:	e040      	b.n	80013e4 <hsv_rgb+0x224>
		case 1:
			r = q;
 8001362:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001366:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			g = V;
 800136a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800136e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			b = p;
 8001372:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001376:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			break;
 800137a:	e033      	b.n	80013e4 <hsv_rgb+0x224>
		case 2:
			r = p;
 800137c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001380:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			g = V;
 8001384:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001388:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			b = t;
 800138c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001390:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			break;
 8001394:	e026      	b.n	80013e4 <hsv_rgb+0x224>
		case 3:
			r = p;
 8001396:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800139a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			g = q;
 800139e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80013a2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			b = V;
 80013a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013aa:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			break;
 80013ae:	e019      	b.n	80013e4 <hsv_rgb+0x224>
		case 4:
			r = t;
 80013b0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013b4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			g = p;
 80013b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013bc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			b = V;
 80013c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013c4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			break;
 80013c8:	e00c      	b.n	80013e4 <hsv_rgb+0x224>
		default:
			r = V;
 80013ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013ce:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			g = p;
 80013d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013d6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			b = q;
 80013da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80013de:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			break;
 80013e2:	bf00      	nop
		}

	}
	rgb.r = r * 255;
 80013e4:	a324      	add	r3, pc, #144	; (adr r3, 8001478 <hsv_rgb+0x2b8>)
 80013e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80013ee:	f7ff f90b 	bl	8000608 <__aeabi_dmul>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	f7ff fb9f 	bl	8000b3c <__aeabi_d2uiz>
 80013fe:	4603      	mov	r3, r0
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b22      	ldr	r3, [pc, #136]	; (800148c <hsv_rgb+0x2cc>)
 8001404:	701a      	strb	r2, [r3, #0]
	rgb.g = g * 255;
 8001406:	a31c      	add	r3, pc, #112	; (adr r3, 8001478 <hsv_rgb+0x2b8>)
 8001408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001410:	f7ff f8fa 	bl	8000608 <__aeabi_dmul>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4610      	mov	r0, r2
 800141a:	4619      	mov	r1, r3
 800141c:	f7ff fb8e 	bl	8000b3c <__aeabi_d2uiz>
 8001420:	4603      	mov	r3, r0
 8001422:	b2da      	uxtb	r2, r3
 8001424:	4b19      	ldr	r3, [pc, #100]	; (800148c <hsv_rgb+0x2cc>)
 8001426:	705a      	strb	r2, [r3, #1]
	rgb.b = b * 255;
 8001428:	a313      	add	r3, pc, #76	; (adr r3, 8001478 <hsv_rgb+0x2b8>)
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001432:	f7ff f8e9 	bl	8000608 <__aeabi_dmul>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f7ff fb7d 	bl	8000b3c <__aeabi_d2uiz>
 8001442:	4603      	mov	r3, r0
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4b11      	ldr	r3, [pc, #68]	; (800148c <hsv_rgb+0x2cc>)
 8001448:	709a      	strb	r2, [r3, #2]
	return rgb;
 800144a:	4a10      	ldr	r2, [pc, #64]	; (800148c <hsv_rgb+0x2cc>)
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	6812      	ldr	r2, [r2, #0]
 8001452:	4611      	mov	r1, r2
 8001454:	8019      	strh	r1, [r3, #0]
 8001456:	3302      	adds	r3, #2
 8001458:	0c12      	lsrs	r2, r2, #16
 800145a:	701a      	strb	r2, [r3, #0]
 800145c:	2300      	movs	r3, #0
 800145e:	7f3a      	ldrb	r2, [r7, #28]
 8001460:	f362 0307 	bfi	r3, r2, #0, #8
 8001464:	7f7a      	ldrb	r2, [r7, #29]
 8001466:	f362 230f 	bfi	r3, r2, #8, #8
 800146a:	7fba      	ldrb	r2, [r7, #30]
 800146c:	f362 4317 	bfi	r3, r2, #16, #8
}
 8001470:	4618      	mov	r0, r3
 8001472:	3760      	adds	r7, #96	; 0x60
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	00000000 	.word	0x00000000
 800147c:	406fe000 	.word	0x406fe000
 8001480:	40768000 	.word	0x40768000
 8001484:	404e0000 	.word	0x404e0000
 8001488:	3ff00000 	.word	0x3ff00000
 800148c:	200002ac 	.word	0x200002ac

08001490 <remake_palette>:

uint8_t palette[3][360];

void remake_palette(double brightness, double saturation) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	ed87 0b02 	vstr	d0, [r7, #8]
 800149a:	ed87 1b00 	vstr	d1, [r7]
	for (uint16_t i = 0; i < 360; i++) {
 800149e:	2300      	movs	r3, #0
 80014a0:	82fb      	strh	r3, [r7, #22]
 80014a2:	e02f      	b.n	8001504 <remake_palette+0x74>
		rgb = hsv_rgb(i, saturation, brightness);
 80014a4:	8afb      	ldrh	r3, [r7, #22]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff f834 	bl	8000514 <__aeabi_ui2d>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	ed97 2b02 	vldr	d2, [r7, #8]
 80014b4:	ed97 1b00 	vldr	d1, [r7]
 80014b8:	ec43 2b10 	vmov	d0, r2, r3
 80014bc:	f7ff fe80 	bl	80011c0 <hsv_rgb>
 80014c0:	4602      	mov	r2, r0
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <remake_palette+0x88>)
 80014c4:	4611      	mov	r1, r2
 80014c6:	7019      	strb	r1, [r3, #0]
 80014c8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80014cc:	7059      	strb	r1, [r3, #1]
 80014ce:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80014d2:	709a      	strb	r2, [r3, #2]
		palette[0][i] = rgb.r;
 80014d4:	8afb      	ldrh	r3, [r7, #22]
 80014d6:	4a10      	ldr	r2, [pc, #64]	; (8001518 <remake_palette+0x88>)
 80014d8:	7811      	ldrb	r1, [r2, #0]
 80014da:	4a10      	ldr	r2, [pc, #64]	; (800151c <remake_palette+0x8c>)
 80014dc:	54d1      	strb	r1, [r2, r3]
		palette[1][i] = rgb.g;
 80014de:	8afb      	ldrh	r3, [r7, #22]
 80014e0:	4a0d      	ldr	r2, [pc, #52]	; (8001518 <remake_palette+0x88>)
 80014e2:	7851      	ldrb	r1, [r2, #1]
 80014e4:	4a0d      	ldr	r2, [pc, #52]	; (800151c <remake_palette+0x8c>)
 80014e6:	4413      	add	r3, r2
 80014e8:	460a      	mov	r2, r1
 80014ea:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
		palette[2][i] = rgb.b;
 80014ee:	8afb      	ldrh	r3, [r7, #22]
 80014f0:	4a09      	ldr	r2, [pc, #36]	; (8001518 <remake_palette+0x88>)
 80014f2:	7891      	ldrb	r1, [r2, #2]
 80014f4:	4a09      	ldr	r2, [pc, #36]	; (800151c <remake_palette+0x8c>)
 80014f6:	4413      	add	r3, r2
 80014f8:	460a      	mov	r2, r1
 80014fa:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
	for (uint16_t i = 0; i < 360; i++) {
 80014fe:	8afb      	ldrh	r3, [r7, #22]
 8001500:	3301      	adds	r3, #1
 8001502:	82fb      	strh	r3, [r7, #22]
 8001504:	8afb      	ldrh	r3, [r7, #22]
 8001506:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800150a:	d3cb      	bcc.n	80014a4 <remake_palette+0x14>
	}

}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200002ac 	.word	0x200002ac
 800151c:	200002b0 	.word	0x200002b0

08001520 <rainbow>:

uint16_t offset = 0;

void rainbow(uint8_t reverse, uint16_t chain, uint16_t segment) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
 800152a:	460b      	mov	r3, r1
 800152c:	80bb      	strh	r3, [r7, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	807b      	strh	r3, [r7, #2]

	if (reverse) {
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d03e      	beq.n	80015b6 <rainbow+0x96>
		for (uint16_t i = 0; i < chain; i++) {
 8001538:	2300      	movs	r3, #0
 800153a:	81fb      	strh	r3, [r7, #14]
 800153c:	e027      	b.n	800158e <rainbow+0x6e>
			uint16_t paletteIndex = ((360 / segment)
 800153e:	887b      	ldrh	r3, [r7, #2]
 8001540:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001544:	fb92 f3f3 	sdiv	r3, r2, r3
 8001548:	b299      	uxth	r1, r3
					* ((i + offset - 1) % segment));
 800154a:	89fb      	ldrh	r3, [r7, #14]
 800154c:	4a3d      	ldr	r2, [pc, #244]	; (8001644 <rainbow+0x124>)
 800154e:	8812      	ldrh	r2, [r2, #0]
 8001550:	4413      	add	r3, r2
 8001552:	3b01      	subs	r3, #1
 8001554:	887a      	ldrh	r2, [r7, #2]
 8001556:	fb93 f0f2 	sdiv	r0, r3, r2
 800155a:	fb00 f202 	mul.w	r2, r0, r2
 800155e:	1a9b      	subs	r3, r3, r2
			uint16_t paletteIndex = ((360 / segment)
 8001560:	b29b      	uxth	r3, r3
 8001562:	fb11 f303 	smulbb	r3, r1, r3
 8001566:	813b      	strh	r3, [r7, #8]
			led_rgb_to_buf_dma(palette[0][paletteIndex],
 8001568:	893b      	ldrh	r3, [r7, #8]
 800156a:	4a37      	ldr	r2, [pc, #220]	; (8001648 <rainbow+0x128>)
 800156c:	5cd0      	ldrb	r0, [r2, r3]
 800156e:	893b      	ldrh	r3, [r7, #8]
 8001570:	4a35      	ldr	r2, [pc, #212]	; (8001648 <rainbow+0x128>)
 8001572:	4413      	add	r3, r2
 8001574:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8001578:	893b      	ldrh	r3, [r7, #8]
 800157a:	4a33      	ldr	r2, [pc, #204]	; (8001648 <rainbow+0x128>)
 800157c:	4413      	add	r3, r2
 800157e:	f893 22d0 	ldrb.w	r2, [r3, #720]	; 0x2d0
 8001582:	89fb      	ldrh	r3, [r7, #14]
 8001584:	f000 fca6 	bl	8001ed4 <led_rgb_to_buf_dma>
		for (uint16_t i = 0; i < chain; i++) {
 8001588:	89fb      	ldrh	r3, [r7, #14]
 800158a:	3301      	adds	r3, #1
 800158c:	81fb      	strh	r3, [r7, #14]
 800158e:	89fa      	ldrh	r2, [r7, #14]
 8001590:	88bb      	ldrh	r3, [r7, #4]
 8001592:	429a      	cmp	r2, r3
 8001594:	d3d3      	bcc.n	800153e <rainbow+0x1e>
					palette[1][paletteIndex], palette[2][paletteIndex], i);
		}
		led_light();
 8001596:	f000 fd37 	bl	8002008 <led_light>
		offset--;
 800159a:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <rainbow+0x124>)
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	3b01      	subs	r3, #1
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	4b28      	ldr	r3, [pc, #160]	; (8001644 <rainbow+0x124>)
 80015a4:	801a      	strh	r2, [r3, #0]
		if (offset == 0)
 80015a6:	4b27      	ldr	r3, [pc, #156]	; (8001644 <rainbow+0x124>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d145      	bne.n	800163a <rainbow+0x11a>
			offset = segment;
 80015ae:	4a25      	ldr	r2, [pc, #148]	; (8001644 <rainbow+0x124>)
 80015b0:	887b      	ldrh	r3, [r7, #2]
 80015b2:	8013      	strh	r3, [r2, #0]
		led_light();
		offset++;
		if (offset == segment)
			offset = 0;
	}
}
 80015b4:	e041      	b.n	800163a <rainbow+0x11a>
		for (uint16_t i = 0; i < chain; i++) {
 80015b6:	2300      	movs	r3, #0
 80015b8:	81bb      	strh	r3, [r7, #12]
 80015ba:	e02a      	b.n	8001612 <rainbow+0xf2>
					- ((360 / segment) * ((i + offset) % segment));
 80015bc:	887b      	ldrh	r3, [r7, #2]
 80015be:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80015c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80015c6:	b299      	uxth	r1, r3
 80015c8:	89bb      	ldrh	r3, [r7, #12]
 80015ca:	4a1e      	ldr	r2, [pc, #120]	; (8001644 <rainbow+0x124>)
 80015cc:	8812      	ldrh	r2, [r2, #0]
 80015ce:	4413      	add	r3, r2
 80015d0:	887a      	ldrh	r2, [r7, #2]
 80015d2:	fb93 f0f2 	sdiv	r0, r3, r2
 80015d6:	fb00 f202 	mul.w	r2, r0, r2
 80015da:	1a9b      	subs	r3, r3, r2
 80015dc:	b29b      	uxth	r3, r3
 80015de:	fb11 f303 	smulbb	r3, r1, r3
 80015e2:	b29b      	uxth	r3, r3
			uint16_t paletteIndex = 359
 80015e4:	f5c3 73b3 	rsb	r3, r3, #358	; 0x166
 80015e8:	3301      	adds	r3, #1
 80015ea:	817b      	strh	r3, [r7, #10]
			led_rgb_to_buf_dma(palette[0][paletteIndex],
 80015ec:	897b      	ldrh	r3, [r7, #10]
 80015ee:	4a16      	ldr	r2, [pc, #88]	; (8001648 <rainbow+0x128>)
 80015f0:	5cd0      	ldrb	r0, [r2, r3]
 80015f2:	897b      	ldrh	r3, [r7, #10]
 80015f4:	4a14      	ldr	r2, [pc, #80]	; (8001648 <rainbow+0x128>)
 80015f6:	4413      	add	r3, r2
 80015f8:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 80015fc:	897b      	ldrh	r3, [r7, #10]
 80015fe:	4a12      	ldr	r2, [pc, #72]	; (8001648 <rainbow+0x128>)
 8001600:	4413      	add	r3, r2
 8001602:	f893 22d0 	ldrb.w	r2, [r3, #720]	; 0x2d0
 8001606:	89bb      	ldrh	r3, [r7, #12]
 8001608:	f000 fc64 	bl	8001ed4 <led_rgb_to_buf_dma>
		for (uint16_t i = 0; i < chain; i++) {
 800160c:	89bb      	ldrh	r3, [r7, #12]
 800160e:	3301      	adds	r3, #1
 8001610:	81bb      	strh	r3, [r7, #12]
 8001612:	89ba      	ldrh	r2, [r7, #12]
 8001614:	88bb      	ldrh	r3, [r7, #4]
 8001616:	429a      	cmp	r2, r3
 8001618:	d3d0      	bcc.n	80015bc <rainbow+0x9c>
		led_light();
 800161a:	f000 fcf5 	bl	8002008 <led_light>
		offset++;
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <rainbow+0x124>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	3301      	adds	r3, #1
 8001624:	b29a      	uxth	r2, r3
 8001626:	4b07      	ldr	r3, [pc, #28]	; (8001644 <rainbow+0x124>)
 8001628:	801a      	strh	r2, [r3, #0]
		if (offset == segment)
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <rainbow+0x124>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	887a      	ldrh	r2, [r7, #2]
 8001630:	429a      	cmp	r2, r3
 8001632:	d102      	bne.n	800163a <rainbow+0x11a>
			offset = 0;
 8001634:	4b03      	ldr	r3, [pc, #12]	; (8001644 <rainbow+0x124>)
 8001636:	2200      	movs	r2, #0
 8001638:	801a      	strh	r2, [r3, #0]
}
 800163a:	bf00      	nop
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200006e8 	.word	0x200006e8
 8001648:	200002b0 	.word	0x200002b0

0800164c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800164c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001650:	b094      	sub	sp, #80	; 0x50
 8001652:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001654:	f000 fd12 	bl	800207c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001658:	f000 f8aa 	bl	80017b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800165c:	f000 fa48 	bl	8001af0 <MX_GPIO_Init>
	MX_DMA_Init();
 8001660:	f000 fa26 	bl	8001ab0 <MX_DMA_Init>
	MX_TIM1_Init();
 8001664:	f000 f90e 	bl	8001884 <MX_TIM1_Init>
	MX_TIM4_Init();
 8001668:	f000 f9ac 	bl	80019c4 <MX_TIM4_Init>
	MX_USART1_UART_Init();
 800166c:	f000 f9f6 	bl	8001a5c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	ir_enableIRIn();
 8001670:	f7ff fcec 	bl	800104c <ir_enableIRIn>
	char trans_str[64] = { 0, };
 8001674:	2300      	movs	r3, #0
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	f107 0308 	add.w	r3, r7, #8
 800167c:	223c      	movs	r2, #60	; 0x3c
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f003 fded 	bl	8005260 <memset>
	snprintf(trans_str, 64, "IR-receiver\r\n");
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	4a40      	ldr	r2, [pc, #256]	; (800178c <main+0x140>)
 800168a:	2140      	movs	r1, #64	; 0x40
 800168c:	4618      	mov	r0, r3
 800168e:	f003 fdef 	bl	8005270 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) trans_str, strlen(trans_str), 100);
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe fda3 	bl	80001e0 <strlen>
 800169a:	4603      	mov	r3, r0
 800169c:	b29a      	uxth	r2, r3
 800169e:	1d39      	adds	r1, r7, #4
 80016a0:	2364      	movs	r3, #100	; 0x64
 80016a2:	483b      	ldr	r0, [pc, #236]	; (8001790 <main+0x144>)
 80016a4:	f003 fa3d 	bl	8004b22 <HAL_UART_Transmit>

	for (uint16_t i = 0; i < 40; i++) {
 80016a8:	2300      	movs	r3, #0
 80016aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80016ae:	e00b      	b.n	80016c8 <main+0x7c>
		led_rgb_to_buf_dma(1, 1, 1, i);
 80016b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80016b4:	2201      	movs	r2, #1
 80016b6:	2101      	movs	r1, #1
 80016b8:	2001      	movs	r0, #1
 80016ba:	f000 fc0b 	bl	8001ed4 <led_rgb_to_buf_dma>
	for (uint16_t i = 0; i < 40; i++) {
 80016be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80016c2:	3301      	adds	r3, #1
 80016c4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80016c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80016cc:	2b27      	cmp	r3, #39	; 0x27
 80016ce:	d9ef      	bls.n	80016b0 <main+0x64>
	}
	led_light();
 80016d0:	f000 fc9a 	bl	8002008 <led_light>

	remake_palette(brigh, satur);
 80016d4:	4b2f      	ldr	r3, [pc, #188]	; (8001794 <main+0x148>)
 80016d6:	ed93 7b00 	vldr	d7, [r3]
 80016da:	4b2f      	ldr	r3, [pc, #188]	; (8001798 <main+0x14c>)
 80016dc:	ed93 6b00 	vldr	d6, [r3]
 80016e0:	eeb0 1a46 	vmov.f32	s2, s12
 80016e4:	eef0 1a66 	vmov.f32	s3, s13
 80016e8:	eeb0 0a47 	vmov.f32	s0, s14
 80016ec:	eef0 0a67 	vmov.f32	s1, s15
 80016f0:	f7ff fece 	bl	8001490 <remake_palette>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		millis = HAL_GetTick();
 80016f4:	f000 fd28 	bl	8002148 <HAL_GetTick>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2200      	movs	r2, #0
 80016fc:	469a      	mov	sl, r3
 80016fe:	4693      	mov	fp, r2
 8001700:	4b26      	ldr	r3, [pc, #152]	; (800179c <main+0x150>)
 8001702:	e9c3 ab00 	strd	sl, fp, [r3]
		if (millis_last + delay < millis) {
 8001706:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <main+0x154>)
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	b29b      	uxth	r3, r3
 800170c:	2200      	movs	r2, #0
 800170e:	4698      	mov	r8, r3
 8001710:	4691      	mov	r9, r2
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <main+0x158>)
 8001714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001718:	eb18 0402 	adds.w	r4, r8, r2
 800171c:	eb49 0503 	adc.w	r5, r9, r3
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <main+0x150>)
 8001722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001726:	4294      	cmp	r4, r2
 8001728:	eb75 0303 	sbcs.w	r3, r5, r3
 800172c:	da0b      	bge.n	8001746 <main+0xfa>
			millis_last = millis;
 800172e:	4b1b      	ldr	r3, [pc, #108]	; (800179c <main+0x150>)
 8001730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001734:	491b      	ldr	r1, [pc, #108]	; (80017a4 <main+0x158>)
 8001736:	e9c1 2300 	strd	r2, r3, [r1]
			rainbow(1, 600, 8);
 800173a:	2208      	movs	r2, #8
 800173c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001740:	2001      	movs	r0, #1
 8001742:	f7ff feed 	bl	8001520 <rainbow>
		}

		if (ir_decode(&results)) {
 8001746:	4818      	ldr	r0, [pc, #96]	; (80017a8 <main+0x15c>)
 8001748:	f7ff fc52 	bl	8000ff0 <ir_decode>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0d0      	beq.n	80016f4 <main+0xa8>
			snprintf(trans_str, 64, "Code: HEX %p DEC %lu\r\n",
					(void*) results.value, results.value);
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <main+0x15c>)
 8001754:	681b      	ldr	r3, [r3, #0]
			snprintf(trans_str, 64, "Code: HEX %p DEC %lu\r\n",
 8001756:	461a      	mov	r2, r3
 8001758:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <main+0x15c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	1d38      	adds	r0, r7, #4
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	4613      	mov	r3, r2
 8001762:	4a12      	ldr	r2, [pc, #72]	; (80017ac <main+0x160>)
 8001764:	2140      	movs	r1, #64	; 0x40
 8001766:	f003 fd83 	bl	8005270 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) trans_str, strlen(trans_str), 100);
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe fd37 	bl	80001e0 <strlen>
 8001772:	4603      	mov	r3, r0
 8001774:	b29a      	uxth	r2, r3
 8001776:	1d39      	adds	r1, r7, #4
 8001778:	2364      	movs	r3, #100	; 0x64
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <main+0x144>)
 800177c:	f003 f9d1 	bl	8004b22 <HAL_UART_Transmit>
			HAL_Delay(50);
 8001780:	2032      	movs	r0, #50	; 0x32
 8001782:	f000 fced 	bl	8002160 <HAL_Delay>
			ir_resume();
 8001786:	f7ff fc77 	bl	8001078 <ir_resume>
		millis = HAL_GetTick();
 800178a:	e7b3      	b.n	80016f4 <main+0xa8>
 800178c:	08005bf0 	.word	0x08005bf0
 8001790:	200007dc 	.word	0x200007dc
 8001794:	20000008 	.word	0x20000008
 8001798:	20000000 	.word	0x20000000
 800179c:	20000830 	.word	0x20000830
 80017a0:	20000010 	.word	0x20000010
 80017a4:	20000838 	.word	0x20000838
 80017a8:	20000820 	.word	0x20000820
 80017ac:	08005c00 	.word	0x08005c00

080017b0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b094      	sub	sp, #80	; 0x50
 80017b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80017b6:	f107 0320 	add.w	r3, r7, #32
 80017ba:	2230      	movs	r2, #48	; 0x30
 80017bc:	2100      	movs	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f003 fd4e 	bl	8005260 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	4b28      	ldr	r3, [pc, #160]	; (800187c <SystemClock_Config+0xcc>)
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	4a27      	ldr	r2, [pc, #156]	; (800187c <SystemClock_Config+0xcc>)
 80017de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e2:	6413      	str	r3, [r2, #64]	; 0x40
 80017e4:	4b25      	ldr	r3, [pc, #148]	; (800187c <SystemClock_Config+0xcc>)
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017f0:	2300      	movs	r3, #0
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	4b22      	ldr	r3, [pc, #136]	; (8001880 <SystemClock_Config+0xd0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017fc:	4a20      	ldr	r2, [pc, #128]	; (8001880 <SystemClock_Config+0xd0>)
 80017fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	4b1e      	ldr	r3, [pc, #120]	; (8001880 <SystemClock_Config+0xd0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001810:	2302      	movs	r3, #2
 8001812:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001814:	2301      	movs	r3, #1
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001818:	2310      	movs	r3, #16
 800181a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800181c:	2302      	movs	r3, #2
 800181e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001820:	2300      	movs	r3, #0
 8001822:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001824:	2308      	movs	r3, #8
 8001826:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 8001828:	2354      	movs	r3, #84	; 0x54
 800182a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800182c:	2302      	movs	r3, #2
 800182e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001830:	2304      	movs	r3, #4
 8001832:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001834:	f107 0320 	add.w	r3, r7, #32
 8001838:	4618      	mov	r0, r3
 800183a:	f001 fad3 	bl	8002de4 <HAL_RCC_OscConfig>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <SystemClock_Config+0x98>
		Error_Handler();
 8001844:	f000 f99e 	bl	8001b84 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001848:	230f      	movs	r3, #15
 800184a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800184c:	2302      	movs	r3, #2
 800184e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001858:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800185e:	f107 030c 	add.w	r3, r7, #12
 8001862:	2102      	movs	r1, #2
 8001864:	4618      	mov	r0, r3
 8001866:	f001 fd35 	bl	80032d4 <HAL_RCC_ClockConfig>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <SystemClock_Config+0xc4>
		Error_Handler();
 8001870:	f000 f988 	bl	8001b84 <Error_Handler>
	}
}
 8001874:	bf00      	nop
 8001876:	3750      	adds	r7, #80	; 0x50
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40023800 	.word	0x40023800
 8001880:	40007000 	.word	0x40007000

08001884 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b096      	sub	sp, #88	; 0x58
 8001888:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800188a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001898:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80018a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
 80018b0:	611a      	str	r2, [r3, #16]
 80018b2:	615a      	str	r2, [r3, #20]
 80018b4:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	2220      	movs	r2, #32
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f003 fccf 	bl	8005260 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80018c2:	4b3e      	ldr	r3, [pc, #248]	; (80019bc <MX_TIM1_Init+0x138>)
 80018c4:	4a3e      	ldr	r2, [pc, #248]	; (80019c0 <MX_TIM1_Init+0x13c>)
 80018c6:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80018c8:	4b3c      	ldr	r3, [pc, #240]	; (80019bc <MX_TIM1_Init+0x138>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ce:	4b3b      	ldr	r3, [pc, #236]	; (80019bc <MX_TIM1_Init+0x138>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 104;
 80018d4:	4b39      	ldr	r3, [pc, #228]	; (80019bc <MX_TIM1_Init+0x138>)
 80018d6:	2268      	movs	r2, #104	; 0x68
 80018d8:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018da:	4b38      	ldr	r3, [pc, #224]	; (80019bc <MX_TIM1_Init+0x138>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80018e0:	4b36      	ldr	r3, [pc, #216]	; (80019bc <MX_TIM1_Init+0x138>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e6:	4b35      	ldr	r3, [pc, #212]	; (80019bc <MX_TIM1_Init+0x138>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80018ec:	4833      	ldr	r0, [pc, #204]	; (80019bc <MX_TIM1_Init+0x138>)
 80018ee:	f001 fed1 	bl	8003694 <HAL_TIM_Base_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM1_Init+0x78>
		Error_Handler();
 80018f8:	f000 f944 	bl	8001b84 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001900:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001902:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001906:	4619      	mov	r1, r3
 8001908:	482c      	ldr	r0, [pc, #176]	; (80019bc <MX_TIM1_Init+0x138>)
 800190a:	f002 fb49 	bl	8003fa0 <HAL_TIM_ConfigClockSource>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM1_Init+0x94>
		Error_Handler();
 8001914:	f000 f936 	bl	8001b84 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001918:	4828      	ldr	r0, [pc, #160]	; (80019bc <MX_TIM1_Init+0x138>)
 800191a:	f001 ff6d 	bl	80037f8 <HAL_TIM_PWM_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM1_Init+0xa4>
		Error_Handler();
 8001924:	f000 f92e 	bl	8001b84 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001928:	2300      	movs	r3, #0
 800192a:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001930:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001934:	4619      	mov	r1, r3
 8001936:	4821      	ldr	r0, [pc, #132]	; (80019bc <MX_TIM1_Init+0x138>)
 8001938:	f002 ffd2 	bl	80048e0 <HAL_TIMEx_MasterConfigSynchronization>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM1_Init+0xc2>
			!= HAL_OK) {
		Error_Handler();
 8001942:	f000 f91f 	bl	8001b84 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001946:	2360      	movs	r3, #96	; 0x60
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800194e:	2300      	movs	r3, #0
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001952:	2300      	movs	r3, #0
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001956:	2300      	movs	r3, #0
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001966:	2200      	movs	r2, #0
 8001968:	4619      	mov	r1, r3
 800196a:	4814      	ldr	r0, [pc, #80]	; (80019bc <MX_TIM1_Init+0x138>)
 800196c:	f002 fa56 	bl	8003e1c <HAL_TIM_PWM_ConfigChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM1_Init+0xf6>
			!= HAL_OK) {
		Error_Handler();
 8001976:	f000 f905 	bl	8001b84 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800198e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001992:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	4619      	mov	r1, r3
 800199c:	4807      	ldr	r0, [pc, #28]	; (80019bc <MX_TIM1_Init+0x138>)
 800199e:	f003 f80d 	bl	80049bc <HAL_TIMEx_ConfigBreakDeadTime>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM1_Init+0x128>
			!= HAL_OK) {
		Error_Handler();
 80019a8:	f000 f8ec 	bl	8001b84 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80019ac:	4803      	ldr	r0, [pc, #12]	; (80019bc <MX_TIM1_Init+0x138>)
 80019ae:	f000 f989 	bl	8001cc4 <HAL_TIM_MspPostInit>

}
 80019b2:	bf00      	nop
 80019b4:	3758      	adds	r7, #88	; 0x58
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200006ec 	.word	0x200006ec
 80019c0:	40010000 	.word	0x40010000

080019c4 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80019ca:	f107 0308 	add.w	r3, r7, #8
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80019d8:	463b      	mov	r3, r7
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80019e0:	4b1c      	ldr	r3, [pc, #112]	; (8001a54 <MX_TIM4_Init+0x90>)
 80019e2:	4a1d      	ldr	r2, [pc, #116]	; (8001a58 <MX_TIM4_Init+0x94>)
 80019e4:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 83;
 80019e6:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <MX_TIM4_Init+0x90>)
 80019e8:	2253      	movs	r2, #83	; 0x53
 80019ea:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ec:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <MX_TIM4_Init+0x90>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 49;
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <MX_TIM4_Init+0x90>)
 80019f4:	2231      	movs	r2, #49	; 0x31
 80019f6:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f8:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <MX_TIM4_Init+0x90>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <MX_TIM4_Init+0x90>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001a04:	4813      	ldr	r0, [pc, #76]	; (8001a54 <MX_TIM4_Init+0x90>)
 8001a06:	f001 fe45 	bl	8003694 <HAL_TIM_Base_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM4_Init+0x50>
		Error_Handler();
 8001a10:	f000 f8b8 	bl	8001b84 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a18:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001a1a:	f107 0308 	add.w	r3, r7, #8
 8001a1e:	4619      	mov	r1, r3
 8001a20:	480c      	ldr	r0, [pc, #48]	; (8001a54 <MX_TIM4_Init+0x90>)
 8001a22:	f002 fabd 	bl	8003fa0 <HAL_TIM_ConfigClockSource>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM4_Init+0x6c>
		Error_Handler();
 8001a2c:	f000 f8aa 	bl	8001b84 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a30:	2300      	movs	r3, #0
 8001a32:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001a38:	463b      	mov	r3, r7
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4805      	ldr	r0, [pc, #20]	; (8001a54 <MX_TIM4_Init+0x90>)
 8001a3e:	f002 ff4f 	bl	80048e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_TIM4_Init+0x88>
			!= HAL_OK) {
		Error_Handler();
 8001a48:	f000 f89c 	bl	8001b84 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001a4c:	bf00      	nop
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000734 	.word	0x20000734
 8001a58:	40000800 	.word	0x40000800

08001a5c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	; (8001aac <MX_USART1_UART_Init+0x50>)
 8001a64:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a6c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a82:	220c      	movs	r2, #12
 8001a84:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a94:	f002 fff8 	bl	8004a88 <HAL_UART_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001a9e:	f000 f871 	bl	8001b84 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200007dc 	.word	0x200007dc
 8001aac:	40011000 	.word	0x40011000

08001ab0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <MX_DMA_Init+0x3c>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <MX_DMA_Init+0x3c>)
 8001ac0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <MX_DMA_Init+0x3c>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	2039      	movs	r0, #57	; 0x39
 8001ad8:	f000 fc41 	bl	800235e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001adc:	2039      	movs	r0, #57	; 0x39
 8001ade:	f000 fc5a 	bl	8002396 <HAL_NVIC_EnableIRQ>

}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800

08001af0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001af6:	f107 030c 	add.w	r3, r7, #12
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	60da      	str	r2, [r3, #12]
 8001b04:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <MX_GPIO_Init+0x8c>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a1b      	ldr	r2, [pc, #108]	; (8001b7c <MX_GPIO_Init+0x8c>)
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <MX_GPIO_Init+0x8c>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <MX_GPIO_Init+0x8c>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <MX_GPIO_Init+0x8c>)
 8001b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <MX_GPIO_Init+0x8c>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <MX_GPIO_Init+0x8c>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a0d      	ldr	r2, [pc, #52]	; (8001b7c <MX_GPIO_Init+0x8c>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <MX_GPIO_Init+0x8c>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : IR_REC_Pin */
	GPIO_InitStruct.Pin = IR_REC_Pin;
 8001b5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b5e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b60:	2300      	movs	r3, #0
 8001b62:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(IR_REC_GPIO_Port, &GPIO_InitStruct);
 8001b68:	f107 030c 	add.w	r3, r7, #12
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4804      	ldr	r0, [pc, #16]	; (8001b80 <MX_GPIO_Init+0x90>)
 8001b70:	f000 ff9c 	bl	8002aac <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001b74:	bf00      	nop
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40020800 	.word	0x40020800

08001b84 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b88:	b672      	cpsid	i
}
 8001b8a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b8c:	e7fe      	b.n	8001b8c <Error_Handler+0x8>
	...

08001b90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <HAL_MspInit+0x4c>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	4a0f      	ldr	r2, [pc, #60]	; (8001bdc <HAL_MspInit+0x4c>)
 8001ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <HAL_MspInit+0x4c>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_MspInit+0x4c>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	4a08      	ldr	r2, [pc, #32]	; (8001bdc <HAL_MspInit+0x4c>)
 8001bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_MspInit+0x4c>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800

08001be0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a30      	ldr	r2, [pc, #192]	; (8001cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d13f      	bne.n	8001c72 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b2f      	ldr	r3, [pc, #188]	; (8001cb4 <HAL_TIM_Base_MspInit+0xd4>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	4a2e      	ldr	r2, [pc, #184]	; (8001cb4 <HAL_TIM_Base_MspInit+0xd4>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6453      	str	r3, [r2, #68]	; 0x44
 8001c02:	4b2c      	ldr	r3, [pc, #176]	; (8001cb4 <HAL_TIM_Base_MspInit+0xd4>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001c0e:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <HAL_TIM_Base_MspInit+0xd8>)
 8001c10:	4a2a      	ldr	r2, [pc, #168]	; (8001cbc <HAL_TIM_Base_MspInit+0xdc>)
 8001c12:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001c14:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <HAL_TIM_Base_MspInit+0xd8>)
 8001c16:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001c1a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c1c:	4b26      	ldr	r3, [pc, #152]	; (8001cb8 <HAL_TIM_Base_MspInit+0xd8>)
 8001c1e:	2240      	movs	r2, #64	; 0x40
 8001c20:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c22:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <HAL_TIM_Base_MspInit+0xd8>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001c28:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <HAL_TIM_Base_MspInit+0xd8>)
 8001c2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c2e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c30:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <HAL_TIM_Base_MspInit+0xd8>)
 8001c32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c36:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c38:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <HAL_TIM_Base_MspInit+0xd8>)
 8001c3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c3e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001c40:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <HAL_TIM_Base_MspInit+0xd8>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c46:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <HAL_TIM_Base_MspInit+0xd8>)
 8001c48:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001c4c:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <HAL_TIM_Base_MspInit+0xd8>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001c54:	4818      	ldr	r0, [pc, #96]	; (8001cb8 <HAL_TIM_Base_MspInit+0xd8>)
 8001c56:	f000 fbb9 	bl	80023cc <HAL_DMA_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8001c60:	f7ff ff90 	bl	8001b84 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a14      	ldr	r2, [pc, #80]	; (8001cb8 <HAL_TIM_Base_MspInit+0xd8>)
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24
 8001c6a:	4a13      	ldr	r2, [pc, #76]	; (8001cb8 <HAL_TIM_Base_MspInit+0xd8>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c70:	e01a      	b.n	8001ca8 <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM4)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <HAL_TIM_Base_MspInit+0xe0>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d115      	bne.n	8001ca8 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <HAL_TIM_Base_MspInit+0xd4>)
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <HAL_TIM_Base_MspInit+0xd4>)
 8001c86:	f043 0304 	orr.w	r3, r3, #4
 8001c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8c:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <HAL_TIM_Base_MspInit+0xd4>)
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	201e      	movs	r0, #30
 8001c9e:	f000 fb5e 	bl	800235e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ca2:	201e      	movs	r0, #30
 8001ca4:	f000 fb77 	bl	8002396 <HAL_NVIC_EnableIRQ>
}
 8001ca8:	bf00      	nop
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40010000 	.word	0x40010000
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	2000077c 	.word	0x2000077c
 8001cbc:	40026428 	.word	0x40026428
 8001cc0:	40000800 	.word	0x40000800

08001cc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 030c 	add.w	r3, r7, #12
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a12      	ldr	r2, [pc, #72]	; (8001d2c <HAL_TIM_MspPostInit+0x68>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d11e      	bne.n	8001d24 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <HAL_TIM_MspPostInit+0x6c>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a10      	ldr	r2, [pc, #64]	; (8001d30 <HAL_TIM_MspPostInit+0x6c>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <HAL_TIM_MspPostInit+0x6c>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d14:	2301      	movs	r3, #1
 8001d16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d18:	f107 030c 	add.w	r3, r7, #12
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4805      	ldr	r0, [pc, #20]	; (8001d34 <HAL_TIM_MspPostInit+0x70>)
 8001d20:	f000 fec4 	bl	8002aac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d24:	bf00      	nop
 8001d26:	3720      	adds	r7, #32
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40010000 	.word	0x40010000
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40020000 	.word	0x40020000

08001d38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08a      	sub	sp, #40	; 0x28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a19      	ldr	r2, [pc, #100]	; (8001dbc <HAL_UART_MspInit+0x84>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d12c      	bne.n	8001db4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <HAL_UART_MspInit+0x88>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	4a17      	ldr	r2, [pc, #92]	; (8001dc0 <HAL_UART_MspInit+0x88>)
 8001d64:	f043 0310 	orr.w	r3, r3, #16
 8001d68:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <HAL_UART_MspInit+0x88>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <HAL_UART_MspInit+0x88>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a10      	ldr	r2, [pc, #64]	; (8001dc0 <HAL_UART_MspInit+0x88>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <HAL_UART_MspInit+0x88>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d92:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da0:	2303      	movs	r3, #3
 8001da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001da4:	2307      	movs	r3, #7
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	4619      	mov	r1, r3
 8001dae:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <HAL_UART_MspInit+0x8c>)
 8001db0:	f000 fe7c 	bl	8002aac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001db4:	bf00      	nop
 8001db6:	3728      	adds	r7, #40	; 0x28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40011000 	.word	0x40011000
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40020000 	.word	0x40020000

08001dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <NMI_Handler+0x4>

08001dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <HardFault_Handler+0x4>

08001dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <MemManage_Handler+0x4>

08001dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dde:	e7fe      	b.n	8001dde <BusFault_Handler+0x4>

08001de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <UsageFault_Handler+0x4>

08001de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e14:	f000 f984 	bl	8002120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <TIM4_IRQHandler+0x10>)
 8001e22:	f001 fef3 	bl	8003c0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000734 	.word	0x20000734

08001e30 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <DMA2_Stream1_IRQHandler+0x10>)
 8001e36:	f000 fbcf 	bl	80025d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	2000077c 	.word	0x2000077c

08001e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e4c:	4a14      	ldr	r2, [pc, #80]	; (8001ea0 <_sbrk+0x5c>)
 8001e4e:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <_sbrk+0x60>)
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e58:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <_sbrk+0x64>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d102      	bne.n	8001e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <_sbrk+0x64>)
 8001e62:	4a12      	ldr	r2, [pc, #72]	; (8001eac <_sbrk+0x68>)
 8001e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e66:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <_sbrk+0x64>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d207      	bcs.n	8001e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e74:	f003 f9ca 	bl	800520c <__errno>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e82:	e009      	b.n	8001e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <_sbrk+0x64>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <_sbrk+0x64>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <_sbrk+0x64>)
 8001e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e96:	68fb      	ldr	r3, [r7, #12]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20010000 	.word	0x20010000
 8001ea4:	00000400 	.word	0x00000400
 8001ea8:	20000840 	.word	0x20000840
 8001eac:	20007938 	.word	0x20007938

08001eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <SystemInit+0x20>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eba:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <SystemInit+0x20>)
 8001ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <led_rgb_to_buf_dma>:
//void led_init(void) {
//	uint16_t i;
//	for (i = DELAY_LEN; i < ARRAY_LEN; i++) BUF_DMA[i] = LO;
//}

void led_rgb_to_buf_dma(uint8_t pixR, uint8_t pixG, uint8_t pixB, uint16_t posX) {
 8001ed4:	b490      	push	{r4, r7}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4604      	mov	r4, r0
 8001edc:	4608      	mov	r0, r1
 8001ede:	4611      	mov	r1, r2
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4623      	mov	r3, r4
 8001ee4:	71fb      	strb	r3, [r7, #7]
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71bb      	strb	r3, [r7, #6]
 8001eea:	460b      	mov	r3, r1
 8001eec:	717b      	strb	r3, [r7, #5]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	807b      	strh	r3, [r7, #2]
	volatile uint16_t i;
	for (i = 0; i < 8; i++) {
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	81fb      	strh	r3, [r7, #14]
 8001ef6:	e07a      	b.n	8001fee <led_rgb_to_buf_dma+0x11a>
		if (BitIsSet(pixR,(7-i)) == 1) BUF_DMA[DELAY_LEN + posX * 24 + i + 8] = HI;
 8001ef8:	79fa      	ldrb	r2, [r7, #7]
 8001efa:	89fb      	ldrh	r3, [r7, #14]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	f1c3 0307 	rsb	r3, r3, #7
 8001f02:	fa42 f303 	asr.w	r3, r2, r3
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00e      	beq.n	8001f2c <led_rgb_to_buf_dma+0x58>
 8001f0e:	887a      	ldrh	r2, [r7, #2]
 8001f10:	4613      	mov	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	3330      	adds	r3, #48	; 0x30
 8001f1a:	89fa      	ldrh	r2, [r7, #14]
 8001f1c:	b292      	uxth	r2, r2
 8001f1e:	4413      	add	r3, r2
 8001f20:	3308      	adds	r3, #8
 8001f22:	4a38      	ldr	r2, [pc, #224]	; (8002004 <led_rgb_to_buf_dma+0x130>)
 8001f24:	2141      	movs	r1, #65	; 0x41
 8001f26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001f2a:	e00d      	b.n	8001f48 <led_rgb_to_buf_dma+0x74>
		else BUF_DMA[DELAY_LEN + posX * 24 + i + 8] = LO;
 8001f2c:	887a      	ldrh	r2, [r7, #2]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	3330      	adds	r3, #48	; 0x30
 8001f38:	89fa      	ldrh	r2, [r7, #14]
 8001f3a:	b292      	uxth	r2, r2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3308      	adds	r3, #8
 8001f40:	4a30      	ldr	r2, [pc, #192]	; (8002004 <led_rgb_to_buf_dma+0x130>)
 8001f42:	211a      	movs	r1, #26
 8001f44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		if (BitIsSet(pixG,(7-i)) == 1) BUF_DMA[DELAY_LEN + posX * 24 + i + 0] = HI;
 8001f48:	79ba      	ldrb	r2, [r7, #6]
 8001f4a:	89fb      	ldrh	r3, [r7, #14]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	f1c3 0307 	rsb	r3, r3, #7
 8001f52:	fa42 f303 	asr.w	r3, r2, r3
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00d      	beq.n	8001f7a <led_rgb_to_buf_dma+0xa6>
 8001f5e:	887a      	ldrh	r2, [r7, #2]
 8001f60:	4613      	mov	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4413      	add	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	3330      	adds	r3, #48	; 0x30
 8001f6a:	89fa      	ldrh	r2, [r7, #14]
 8001f6c:	b292      	uxth	r2, r2
 8001f6e:	4413      	add	r3, r2
 8001f70:	4a24      	ldr	r2, [pc, #144]	; (8002004 <led_rgb_to_buf_dma+0x130>)
 8001f72:	2141      	movs	r1, #65	; 0x41
 8001f74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001f78:	e00c      	b.n	8001f94 <led_rgb_to_buf_dma+0xc0>
		else BUF_DMA[DELAY_LEN + posX * 24 + i + 0] = LO;
 8001f7a:	887a      	ldrh	r2, [r7, #2]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4413      	add	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	3330      	adds	r3, #48	; 0x30
 8001f86:	89fa      	ldrh	r2, [r7, #14]
 8001f88:	b292      	uxth	r2, r2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	4a1d      	ldr	r2, [pc, #116]	; (8002004 <led_rgb_to_buf_dma+0x130>)
 8001f8e:	211a      	movs	r1, #26
 8001f90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		if (BitIsSet(pixB,(7-i)) == 1) BUF_DMA[DELAY_LEN + posX * 24 + i + 16] = HI;
 8001f94:	797a      	ldrb	r2, [r7, #5]
 8001f96:	89fb      	ldrh	r3, [r7, #14]
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	f1c3 0307 	rsb	r3, r3, #7
 8001f9e:	fa42 f303 	asr.w	r3, r2, r3
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00e      	beq.n	8001fc8 <led_rgb_to_buf_dma+0xf4>
 8001faa:	887a      	ldrh	r2, [r7, #2]
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	3330      	adds	r3, #48	; 0x30
 8001fb6:	89fa      	ldrh	r2, [r7, #14]
 8001fb8:	b292      	uxth	r2, r2
 8001fba:	4413      	add	r3, r2
 8001fbc:	3310      	adds	r3, #16
 8001fbe:	4a11      	ldr	r2, [pc, #68]	; (8002004 <led_rgb_to_buf_dma+0x130>)
 8001fc0:	2141      	movs	r1, #65	; 0x41
 8001fc2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001fc6:	e00d      	b.n	8001fe4 <led_rgb_to_buf_dma+0x110>
		else BUF_DMA[DELAY_LEN + posX * 24 + i + 16] = LO;
 8001fc8:	887a      	ldrh	r2, [r7, #2]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	3330      	adds	r3, #48	; 0x30
 8001fd4:	89fa      	ldrh	r2, [r7, #14]
 8001fd6:	b292      	uxth	r2, r2
 8001fd8:	4413      	add	r3, r2
 8001fda:	3310      	adds	r3, #16
 8001fdc:	4a09      	ldr	r2, [pc, #36]	; (8002004 <led_rgb_to_buf_dma+0x130>)
 8001fde:	211a      	movs	r1, #26
 8001fe0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < 8; i++) {
 8001fe4:	89fb      	ldrh	r3, [r7, #14]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	3301      	adds	r3, #1
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	81fb      	strh	r3, [r7, #14]
 8001fee:	89fb      	ldrh	r3, [r7, #14]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2b07      	cmp	r3, #7
 8001ff4:	d980      	bls.n	8001ef8 <led_rgb_to_buf_dma+0x24>
	}
}
 8001ff6:	bf00      	nop
 8001ff8:	bf00      	nop
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc90      	pop	{r4, r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000844 	.word	0x20000844

08002008 <led_light>:
		led_rgb_to_buf_dma(rgb_t[13][0], rgb_t[13][1], rgb_t[13][2], n * 15 + 13);
		led_rgb_to_buf_dma(rgb_t[14][0], rgb_t[14][1], rgb_t[14][2], n * 15 + 14);
	}
}

void led_light(void) {
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&TIM_LED, TIM_LED_CH, (uint32_t*) &BUF_DMA, ARRAY_LEN);
 800200c:	f643 0370 	movw	r3, #14448	; 0x3870
 8002010:	4a03      	ldr	r2, [pc, #12]	; (8002020 <led_light+0x18>)
 8002012:	2100      	movs	r1, #0
 8002014:	4803      	ldr	r0, [pc, #12]	; (8002024 <led_light+0x1c>)
 8002016:	f001 fc49 	bl	80038ac <HAL_TIM_PWM_Start_DMA>
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000844 	.word	0x20000844
 8002024:	200006ec 	.word	0x200006ec

08002028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002060 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800202c:	480d      	ldr	r0, [pc, #52]	; (8002064 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800202e:	490e      	ldr	r1, [pc, #56]	; (8002068 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002030:	4a0e      	ldr	r2, [pc, #56]	; (800206c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002034:	e002      	b.n	800203c <LoopCopyDataInit>

08002036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800203a:	3304      	adds	r3, #4

0800203c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800203c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800203e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002040:	d3f9      	bcc.n	8002036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002042:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002044:	4c0b      	ldr	r4, [pc, #44]	; (8002074 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002048:	e001      	b.n	800204e <LoopFillZerobss>

0800204a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800204a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800204c:	3204      	adds	r2, #4

0800204e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800204e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002050:	d3fb      	bcc.n	800204a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002052:	f7ff ff2d 	bl	8001eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002056:	f003 f8df 	bl	8005218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800205a:	f7ff faf7 	bl	800164c <main>
  bx  lr    
 800205e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002060:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002068:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800206c:	08005c7c 	.word	0x08005c7c
  ldr r2, =_sbss
 8002070:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002074:	20007938 	.word	0x20007938

08002078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002078:	e7fe      	b.n	8002078 <ADC_IRQHandler>
	...

0800207c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002080:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <HAL_Init+0x40>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a0d      	ldr	r2, [pc, #52]	; (80020bc <HAL_Init+0x40>)
 8002086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800208a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_Init+0x40>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <HAL_Init+0x40>)
 8002092:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002096:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <HAL_Init+0x40>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a07      	ldr	r2, [pc, #28]	; (80020bc <HAL_Init+0x40>)
 800209e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a4:	2003      	movs	r0, #3
 80020a6:	f000 f94f 	bl	8002348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020aa:	200f      	movs	r0, #15
 80020ac:	f000 f808 	bl	80020c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020b0:	f7ff fd6e 	bl	8001b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40023c00 	.word	0x40023c00

080020c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_InitTick+0x54>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b12      	ldr	r3, [pc, #72]	; (8002118 <HAL_InitTick+0x58>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	4619      	mov	r1, r3
 80020d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020da:	fbb2 f3f3 	udiv	r3, r2, r3
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 f967 	bl	80023b2 <HAL_SYSTICK_Config>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e00e      	b.n	800210c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b0f      	cmp	r3, #15
 80020f2:	d80a      	bhi.n	800210a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020f4:	2200      	movs	r2, #0
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	f000 f92f 	bl	800235e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002100:	4a06      	ldr	r2, [pc, #24]	; (800211c <HAL_InitTick+0x5c>)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	e000      	b.n	800210c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
}
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000014 	.word	0x20000014
 8002118:	2000001c 	.word	0x2000001c
 800211c:	20000018 	.word	0x20000018

08002120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_IncTick+0x20>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_IncTick+0x24>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4413      	add	r3, r2
 8002130:	4a04      	ldr	r2, [pc, #16]	; (8002144 <HAL_IncTick+0x24>)
 8002132:	6013      	str	r3, [r2, #0]
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	2000001c 	.word	0x2000001c
 8002144:	20007924 	.word	0x20007924

08002148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return uwTick;
 800214c:	4b03      	ldr	r3, [pc, #12]	; (800215c <HAL_GetTick+0x14>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	20007924 	.word	0x20007924

08002160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002168:	f7ff ffee 	bl	8002148 <HAL_GetTick>
 800216c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002178:	d005      	beq.n	8002186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800217a:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <HAL_Delay+0x44>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4413      	add	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002186:	bf00      	nop
 8002188:	f7ff ffde 	bl	8002148 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	429a      	cmp	r2, r3
 8002196:	d8f7      	bhi.n	8002188 <HAL_Delay+0x28>
  {
  }
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	2000001c 	.word	0x2000001c

080021a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <__NVIC_SetPriorityGrouping+0x44>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021c4:	4013      	ands	r3, r2
 80021c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021da:	4a04      	ldr	r2, [pc, #16]	; (80021ec <__NVIC_SetPriorityGrouping+0x44>)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	60d3      	str	r3, [r2, #12]
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f4:	4b04      	ldr	r3, [pc, #16]	; (8002208 <__NVIC_GetPriorityGrouping+0x18>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	0a1b      	lsrs	r3, r3, #8
 80021fa:	f003 0307 	and.w	r3, r3, #7
}
 80021fe:	4618      	mov	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221a:	2b00      	cmp	r3, #0
 800221c:	db0b      	blt.n	8002236 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	f003 021f 	and.w	r2, r3, #31
 8002224:	4907      	ldr	r1, [pc, #28]	; (8002244 <__NVIC_EnableIRQ+0x38>)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	095b      	lsrs	r3, r3, #5
 800222c:	2001      	movs	r0, #1
 800222e:	fa00 f202 	lsl.w	r2, r0, r2
 8002232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000e100 	.word	0xe000e100

08002248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	6039      	str	r1, [r7, #0]
 8002252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002258:	2b00      	cmp	r3, #0
 800225a:	db0a      	blt.n	8002272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	b2da      	uxtb	r2, r3
 8002260:	490c      	ldr	r1, [pc, #48]	; (8002294 <__NVIC_SetPriority+0x4c>)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	0112      	lsls	r2, r2, #4
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	440b      	add	r3, r1
 800226c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002270:	e00a      	b.n	8002288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	b2da      	uxtb	r2, r3
 8002276:	4908      	ldr	r1, [pc, #32]	; (8002298 <__NVIC_SetPriority+0x50>)
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	3b04      	subs	r3, #4
 8002280:	0112      	lsls	r2, r2, #4
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	440b      	add	r3, r1
 8002286:	761a      	strb	r2, [r3, #24]
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	e000e100 	.word	0xe000e100
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800229c:	b480      	push	{r7}
 800229e:	b089      	sub	sp, #36	; 0x24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f1c3 0307 	rsb	r3, r3, #7
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	bf28      	it	cs
 80022ba:	2304      	movcs	r3, #4
 80022bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3304      	adds	r3, #4
 80022c2:	2b06      	cmp	r3, #6
 80022c4:	d902      	bls.n	80022cc <NVIC_EncodePriority+0x30>
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3b03      	subs	r3, #3
 80022ca:	e000      	b.n	80022ce <NVIC_EncodePriority+0x32>
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d0:	f04f 32ff 	mov.w	r2, #4294967295
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43da      	mvns	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	401a      	ands	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e4:	f04f 31ff 	mov.w	r1, #4294967295
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	fa01 f303 	lsl.w	r3, r1, r3
 80022ee:	43d9      	mvns	r1, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f4:	4313      	orrs	r3, r2
         );
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3724      	adds	r7, #36	; 0x24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3b01      	subs	r3, #1
 8002310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002314:	d301      	bcc.n	800231a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002316:	2301      	movs	r3, #1
 8002318:	e00f      	b.n	800233a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800231a:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <SysTick_Config+0x40>)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3b01      	subs	r3, #1
 8002320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002322:	210f      	movs	r1, #15
 8002324:	f04f 30ff 	mov.w	r0, #4294967295
 8002328:	f7ff ff8e 	bl	8002248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <SysTick_Config+0x40>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002332:	4b04      	ldr	r3, [pc, #16]	; (8002344 <SysTick_Config+0x40>)
 8002334:	2207      	movs	r2, #7
 8002336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	e000e010 	.word	0xe000e010

08002348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7ff ff29 	bl	80021a8 <__NVIC_SetPriorityGrouping>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800235e:	b580      	push	{r7, lr}
 8002360:	b086      	sub	sp, #24
 8002362:	af00      	add	r7, sp, #0
 8002364:	4603      	mov	r3, r0
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
 800236a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002370:	f7ff ff3e 	bl	80021f0 <__NVIC_GetPriorityGrouping>
 8002374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68b9      	ldr	r1, [r7, #8]
 800237a:	6978      	ldr	r0, [r7, #20]
 800237c:	f7ff ff8e 	bl	800229c <NVIC_EncodePriority>
 8002380:	4602      	mov	r2, r0
 8002382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002386:	4611      	mov	r1, r2
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ff5d 	bl	8002248 <__NVIC_SetPriority>
}
 800238e:	bf00      	nop
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	4603      	mov	r3, r0
 800239e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff31 	bl	800220c <__NVIC_EnableIRQ>
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff ffa2 	bl	8002304 <SysTick_Config>
 80023c0:	4603      	mov	r3, r0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023d8:	f7ff feb6 	bl	8002148 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e099      	b.n	800251c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0201 	bic.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002408:	e00f      	b.n	800242a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800240a:	f7ff fe9d 	bl	8002148 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b05      	cmp	r3, #5
 8002416:	d908      	bls.n	800242a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2220      	movs	r2, #32
 800241c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2203      	movs	r2, #3
 8002422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e078      	b.n	800251c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1e8      	bne.n	800240a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	4b38      	ldr	r3, [pc, #224]	; (8002524 <HAL_DMA_Init+0x158>)
 8002444:	4013      	ands	r3, r2
 8002446:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002456:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002462:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800246e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4313      	orrs	r3, r2
 800247a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	2b04      	cmp	r3, #4
 8002482:	d107      	bne.n	8002494 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	4313      	orrs	r3, r2
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	4313      	orrs	r3, r2
 8002492:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f023 0307 	bic.w	r3, r3, #7
 80024aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d117      	bne.n	80024ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00e      	beq.n	80024ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 fa6f 	bl	80029b4 <DMA_CheckFifoParam>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2240      	movs	r2, #64	; 0x40
 80024e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024ea:	2301      	movs	r3, #1
 80024ec:	e016      	b.n	800251c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fa26 	bl	8002948 <DMA_CalcBaseAndBitshift>
 80024fc:	4603      	mov	r3, r0
 80024fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002504:	223f      	movs	r2, #63	; 0x3f
 8002506:	409a      	lsls	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	f010803f 	.word	0xf010803f

08002528 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_DMA_Start_IT+0x26>
 800254a:	2302      	movs	r3, #2
 800254c:	e040      	b.n	80025d0 <HAL_DMA_Start_IT+0xa8>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b01      	cmp	r3, #1
 8002560:	d12f      	bne.n	80025c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2202      	movs	r2, #2
 8002566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	68b9      	ldr	r1, [r7, #8]
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 f9b8 	bl	80028ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002580:	223f      	movs	r2, #63	; 0x3f
 8002582:	409a      	lsls	r2, r3
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0216 	orr.w	r2, r2, #22
 8002596:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	2b00      	cmp	r3, #0
 800259e:	d007      	beq.n	80025b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0208 	orr.w	r2, r2, #8
 80025ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0201 	orr.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	e005      	b.n	80025ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025ca:	2302      	movs	r3, #2
 80025cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025e4:	4b8e      	ldr	r3, [pc, #568]	; (8002820 <HAL_DMA_IRQHandler+0x248>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a8e      	ldr	r2, [pc, #568]	; (8002824 <HAL_DMA_IRQHandler+0x24c>)
 80025ea:	fba2 2303 	umull	r2, r3, r2, r3
 80025ee:	0a9b      	lsrs	r3, r3, #10
 80025f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002602:	2208      	movs	r2, #8
 8002604:	409a      	lsls	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4013      	ands	r3, r2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d01a      	beq.n	8002644 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d013      	beq.n	8002644 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0204 	bic.w	r2, r2, #4
 800262a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002630:	2208      	movs	r2, #8
 8002632:	409a      	lsls	r2, r3
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263c:	f043 0201 	orr.w	r2, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002648:	2201      	movs	r2, #1
 800264a:	409a      	lsls	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4013      	ands	r3, r2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d012      	beq.n	800267a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00b      	beq.n	800267a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002666:	2201      	movs	r2, #1
 8002668:	409a      	lsls	r2, r3
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002672:	f043 0202 	orr.w	r2, r3, #2
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267e:	2204      	movs	r2, #4
 8002680:	409a      	lsls	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4013      	ands	r3, r2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d012      	beq.n	80026b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00b      	beq.n	80026b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269c:	2204      	movs	r2, #4
 800269e:	409a      	lsls	r2, r3
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a8:	f043 0204 	orr.w	r2, r3, #4
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b4:	2210      	movs	r2, #16
 80026b6:	409a      	lsls	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d043      	beq.n	8002748 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d03c      	beq.n	8002748 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d2:	2210      	movs	r2, #16
 80026d4:	409a      	lsls	r2, r3
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d018      	beq.n	800271a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d108      	bne.n	8002708 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d024      	beq.n	8002748 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	4798      	blx	r3
 8002706:	e01f      	b.n	8002748 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800270c:	2b00      	cmp	r3, #0
 800270e:	d01b      	beq.n	8002748 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	4798      	blx	r3
 8002718:	e016      	b.n	8002748 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002724:	2b00      	cmp	r3, #0
 8002726:	d107      	bne.n	8002738 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0208 	bic.w	r2, r2, #8
 8002736:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274c:	2220      	movs	r2, #32
 800274e:	409a      	lsls	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4013      	ands	r3, r2
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 808f 	beq.w	8002878 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 8087 	beq.w	8002878 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276e:	2220      	movs	r2, #32
 8002770:	409a      	lsls	r2, r3
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b05      	cmp	r3, #5
 8002780:	d136      	bne.n	80027f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0216 	bic.w	r2, r2, #22
 8002790:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695a      	ldr	r2, [r3, #20]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d103      	bne.n	80027b2 <HAL_DMA_IRQHandler+0x1da>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d007      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0208 	bic.w	r2, r2, #8
 80027c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c6:	223f      	movs	r2, #63	; 0x3f
 80027c8:	409a      	lsls	r2, r3
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d07e      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	4798      	blx	r3
        }
        return;
 80027ee:	e079      	b.n	80028e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d01d      	beq.n	800283a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10d      	bne.n	8002828 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002810:	2b00      	cmp	r3, #0
 8002812:	d031      	beq.n	8002878 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	4798      	blx	r3
 800281c:	e02c      	b.n	8002878 <HAL_DMA_IRQHandler+0x2a0>
 800281e:	bf00      	nop
 8002820:	20000014 	.word	0x20000014
 8002824:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282c:	2b00      	cmp	r3, #0
 800282e:	d023      	beq.n	8002878 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	4798      	blx	r3
 8002838:	e01e      	b.n	8002878 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10f      	bne.n	8002868 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0210 	bic.w	r2, r2, #16
 8002856:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287c:	2b00      	cmp	r3, #0
 800287e:	d032      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d022      	beq.n	80028d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2205      	movs	r2, #5
 8002890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0201 	bic.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	3301      	adds	r3, #1
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d307      	bcc.n	80028c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f2      	bne.n	80028a4 <HAL_DMA_IRQHandler+0x2cc>
 80028be:	e000      	b.n	80028c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	4798      	blx	r3
 80028e2:	e000      	b.n	80028e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80028e4:	bf00      	nop
    }
  }
}
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002908:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b40      	cmp	r3, #64	; 0x40
 8002918:	d108      	bne.n	800292c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800292a:	e007      	b.n	800293c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	60da      	str	r2, [r3, #12]
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	3b10      	subs	r3, #16
 8002958:	4a14      	ldr	r2, [pc, #80]	; (80029ac <DMA_CalcBaseAndBitshift+0x64>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	091b      	lsrs	r3, r3, #4
 8002960:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002962:	4a13      	ldr	r2, [pc, #76]	; (80029b0 <DMA_CalcBaseAndBitshift+0x68>)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4413      	add	r3, r2
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2b03      	cmp	r3, #3
 8002974:	d909      	bls.n	800298a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800297e:	f023 0303 	bic.w	r3, r3, #3
 8002982:	1d1a      	adds	r2, r3, #4
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	659a      	str	r2, [r3, #88]	; 0x58
 8002988:	e007      	b.n	800299a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002992:	f023 0303 	bic.w	r3, r3, #3
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	aaaaaaab 	.word	0xaaaaaaab
 80029b0:	08005c30 	.word	0x08005c30

080029b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d11f      	bne.n	8002a0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d856      	bhi.n	8002a82 <DMA_CheckFifoParam+0xce>
 80029d4:	a201      	add	r2, pc, #4	; (adr r2, 80029dc <DMA_CheckFifoParam+0x28>)
 80029d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029da:	bf00      	nop
 80029dc:	080029ed 	.word	0x080029ed
 80029e0:	080029ff 	.word	0x080029ff
 80029e4:	080029ed 	.word	0x080029ed
 80029e8:	08002a83 	.word	0x08002a83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d046      	beq.n	8002a86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029fc:	e043      	b.n	8002a86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a06:	d140      	bne.n	8002a8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a0c:	e03d      	b.n	8002a8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a16:	d121      	bne.n	8002a5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d837      	bhi.n	8002a8e <DMA_CheckFifoParam+0xda>
 8002a1e:	a201      	add	r2, pc, #4	; (adr r2, 8002a24 <DMA_CheckFifoParam+0x70>)
 8002a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a24:	08002a35 	.word	0x08002a35
 8002a28:	08002a3b 	.word	0x08002a3b
 8002a2c:	08002a35 	.word	0x08002a35
 8002a30:	08002a4d 	.word	0x08002a4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
      break;
 8002a38:	e030      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d025      	beq.n	8002a92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a4a:	e022      	b.n	8002a92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a54:	d11f      	bne.n	8002a96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a5a:	e01c      	b.n	8002a96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d903      	bls.n	8002a6a <DMA_CheckFifoParam+0xb6>
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d003      	beq.n	8002a70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a68:	e018      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a6e:	e015      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00e      	beq.n	8002a9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a80:	e00b      	b.n	8002a9a <DMA_CheckFifoParam+0xe6>
      break;
 8002a82:	bf00      	nop
 8002a84:	e00a      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
      break;
 8002a86:	bf00      	nop
 8002a88:	e008      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
      break;
 8002a8a:	bf00      	nop
 8002a8c:	e006      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
      break;
 8002a8e:	bf00      	nop
 8002a90:	e004      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
      break;
 8002a92:	bf00      	nop
 8002a94:	e002      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
      break;   
 8002a96:	bf00      	nop
 8002a98:	e000      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
      break;
 8002a9a:	bf00      	nop
    }
  } 
  
  return status; 
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop

08002aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b089      	sub	sp, #36	; 0x24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
 8002ac6:	e159      	b.n	8002d7c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ac8:	2201      	movs	r2, #1
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	f040 8148 	bne.w	8002d76 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d005      	beq.n	8002afe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d130      	bne.n	8002b60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	2203      	movs	r2, #3
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4013      	ands	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b34:	2201      	movs	r2, #1
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f003 0201 	and.w	r2, r3, #1
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d017      	beq.n	8002b9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	2203      	movs	r2, #3
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d123      	bne.n	8002bf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	08da      	lsrs	r2, r3, #3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3208      	adds	r2, #8
 8002bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	220f      	movs	r2, #15
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	691a      	ldr	r2, [r3, #16]
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	08da      	lsrs	r2, r3, #3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3208      	adds	r2, #8
 8002bea:	69b9      	ldr	r1, [r7, #24]
 8002bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 0203 	and.w	r2, r3, #3
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80a2 	beq.w	8002d76 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	4b57      	ldr	r3, [pc, #348]	; (8002d94 <HAL_GPIO_Init+0x2e8>)
 8002c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3a:	4a56      	ldr	r2, [pc, #344]	; (8002d94 <HAL_GPIO_Init+0x2e8>)
 8002c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c40:	6453      	str	r3, [r2, #68]	; 0x44
 8002c42:	4b54      	ldr	r3, [pc, #336]	; (8002d94 <HAL_GPIO_Init+0x2e8>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c4e:	4a52      	ldr	r2, [pc, #328]	; (8002d98 <HAL_GPIO_Init+0x2ec>)
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	089b      	lsrs	r3, r3, #2
 8002c54:	3302      	adds	r3, #2
 8002c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	220f      	movs	r2, #15
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a49      	ldr	r2, [pc, #292]	; (8002d9c <HAL_GPIO_Init+0x2f0>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d019      	beq.n	8002cae <HAL_GPIO_Init+0x202>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a48      	ldr	r2, [pc, #288]	; (8002da0 <HAL_GPIO_Init+0x2f4>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d013      	beq.n	8002caa <HAL_GPIO_Init+0x1fe>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a47      	ldr	r2, [pc, #284]	; (8002da4 <HAL_GPIO_Init+0x2f8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d00d      	beq.n	8002ca6 <HAL_GPIO_Init+0x1fa>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a46      	ldr	r2, [pc, #280]	; (8002da8 <HAL_GPIO_Init+0x2fc>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d007      	beq.n	8002ca2 <HAL_GPIO_Init+0x1f6>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a45      	ldr	r2, [pc, #276]	; (8002dac <HAL_GPIO_Init+0x300>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d101      	bne.n	8002c9e <HAL_GPIO_Init+0x1f2>
 8002c9a:	2304      	movs	r3, #4
 8002c9c:	e008      	b.n	8002cb0 <HAL_GPIO_Init+0x204>
 8002c9e:	2307      	movs	r3, #7
 8002ca0:	e006      	b.n	8002cb0 <HAL_GPIO_Init+0x204>
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e004      	b.n	8002cb0 <HAL_GPIO_Init+0x204>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e002      	b.n	8002cb0 <HAL_GPIO_Init+0x204>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <HAL_GPIO_Init+0x204>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	69fa      	ldr	r2, [r7, #28]
 8002cb2:	f002 0203 	and.w	r2, r2, #3
 8002cb6:	0092      	lsls	r2, r2, #2
 8002cb8:	4093      	lsls	r3, r2
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cc0:	4935      	ldr	r1, [pc, #212]	; (8002d98 <HAL_GPIO_Init+0x2ec>)
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	089b      	lsrs	r3, r3, #2
 8002cc6:	3302      	adds	r3, #2
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cce:	4b38      	ldr	r3, [pc, #224]	; (8002db0 <HAL_GPIO_Init+0x304>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cf2:	4a2f      	ldr	r2, [pc, #188]	; (8002db0 <HAL_GPIO_Init+0x304>)
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cf8:	4b2d      	ldr	r3, [pc, #180]	; (8002db0 <HAL_GPIO_Init+0x304>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d1c:	4a24      	ldr	r2, [pc, #144]	; (8002db0 <HAL_GPIO_Init+0x304>)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d22:	4b23      	ldr	r3, [pc, #140]	; (8002db0 <HAL_GPIO_Init+0x304>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d46:	4a1a      	ldr	r2, [pc, #104]	; (8002db0 <HAL_GPIO_Init+0x304>)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d4c:	4b18      	ldr	r3, [pc, #96]	; (8002db0 <HAL_GPIO_Init+0x304>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d70:	4a0f      	ldr	r2, [pc, #60]	; (8002db0 <HAL_GPIO_Init+0x304>)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	61fb      	str	r3, [r7, #28]
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	2b0f      	cmp	r3, #15
 8002d80:	f67f aea2 	bls.w	8002ac8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d84:	bf00      	nop
 8002d86:	bf00      	nop
 8002d88:	3724      	adds	r7, #36	; 0x24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800
 8002d98:	40013800 	.word	0x40013800
 8002d9c:	40020000 	.word	0x40020000
 8002da0:	40020400 	.word	0x40020400
 8002da4:	40020800 	.word	0x40020800
 8002da8:	40020c00 	.word	0x40020c00
 8002dac:	40021000 	.word	0x40021000
 8002db0:	40013c00 	.word	0x40013c00

08002db4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	887b      	ldrh	r3, [r7, #2]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d002      	beq.n	8002dd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	73fb      	strb	r3, [r7, #15]
 8002dd0:	e001      	b.n	8002dd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e267      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d075      	beq.n	8002eee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e02:	4b88      	ldr	r3, [pc, #544]	; (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d00c      	beq.n	8002e28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e0e:	4b85      	ldr	r3, [pc, #532]	; (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d112      	bne.n	8002e40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e1a:	4b82      	ldr	r3, [pc, #520]	; (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e26:	d10b      	bne.n	8002e40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e28:	4b7e      	ldr	r3, [pc, #504]	; (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d05b      	beq.n	8002eec <HAL_RCC_OscConfig+0x108>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d157      	bne.n	8002eec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e242      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e48:	d106      	bne.n	8002e58 <HAL_RCC_OscConfig+0x74>
 8002e4a:	4b76      	ldr	r3, [pc, #472]	; (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a75      	ldr	r2, [pc, #468]	; (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	e01d      	b.n	8002e94 <HAL_RCC_OscConfig+0xb0>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e60:	d10c      	bne.n	8002e7c <HAL_RCC_OscConfig+0x98>
 8002e62:	4b70      	ldr	r3, [pc, #448]	; (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a6f      	ldr	r2, [pc, #444]	; (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	4b6d      	ldr	r3, [pc, #436]	; (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a6c      	ldr	r2, [pc, #432]	; (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	e00b      	b.n	8002e94 <HAL_RCC_OscConfig+0xb0>
 8002e7c:	4b69      	ldr	r3, [pc, #420]	; (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a68      	ldr	r2, [pc, #416]	; (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	4b66      	ldr	r3, [pc, #408]	; (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a65      	ldr	r2, [pc, #404]	; (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d013      	beq.n	8002ec4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9c:	f7ff f954 	bl	8002148 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ea4:	f7ff f950 	bl	8002148 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b64      	cmp	r3, #100	; 0x64
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e207      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb6:	4b5b      	ldr	r3, [pc, #364]	; (8003024 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0xc0>
 8002ec2:	e014      	b.n	8002eee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7ff f940 	bl	8002148 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ecc:	f7ff f93c 	bl	8002148 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	; 0x64
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e1f3      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ede:	4b51      	ldr	r3, [pc, #324]	; (8003024 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0xe8>
 8002eea:	e000      	b.n	8002eee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d063      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002efa:	4b4a      	ldr	r3, [pc, #296]	; (8003024 <HAL_RCC_OscConfig+0x240>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00b      	beq.n	8002f1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f06:	4b47      	ldr	r3, [pc, #284]	; (8003024 <HAL_RCC_OscConfig+0x240>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d11c      	bne.n	8002f4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f12:	4b44      	ldr	r3, [pc, #272]	; (8003024 <HAL_RCC_OscConfig+0x240>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d116      	bne.n	8002f4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f1e:	4b41      	ldr	r3, [pc, #260]	; (8003024 <HAL_RCC_OscConfig+0x240>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d005      	beq.n	8002f36 <HAL_RCC_OscConfig+0x152>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d001      	beq.n	8002f36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e1c7      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f36:	4b3b      	ldr	r3, [pc, #236]	; (8003024 <HAL_RCC_OscConfig+0x240>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4937      	ldr	r1, [pc, #220]	; (8003024 <HAL_RCC_OscConfig+0x240>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4a:	e03a      	b.n	8002fc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d020      	beq.n	8002f96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f54:	4b34      	ldr	r3, [pc, #208]	; (8003028 <HAL_RCC_OscConfig+0x244>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5a:	f7ff f8f5 	bl	8002148 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f62:	f7ff f8f1 	bl	8002148 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e1a8      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f74:	4b2b      	ldr	r3, [pc, #172]	; (8003024 <HAL_RCC_OscConfig+0x240>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f80:	4b28      	ldr	r3, [pc, #160]	; (8003024 <HAL_RCC_OscConfig+0x240>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	4925      	ldr	r1, [pc, #148]	; (8003024 <HAL_RCC_OscConfig+0x240>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	600b      	str	r3, [r1, #0]
 8002f94:	e015      	b.n	8002fc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f96:	4b24      	ldr	r3, [pc, #144]	; (8003028 <HAL_RCC_OscConfig+0x244>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9c:	f7ff f8d4 	bl	8002148 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fa4:	f7ff f8d0 	bl	8002148 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e187      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb6:	4b1b      	ldr	r3, [pc, #108]	; (8003024 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f0      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d036      	beq.n	800303c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d016      	beq.n	8003004 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fd6:	4b15      	ldr	r3, [pc, #84]	; (800302c <HAL_RCC_OscConfig+0x248>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fdc:	f7ff f8b4 	bl	8002148 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fe4:	f7ff f8b0 	bl	8002148 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e167      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff6:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x200>
 8003002:	e01b      	b.n	800303c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003004:	4b09      	ldr	r3, [pc, #36]	; (800302c <HAL_RCC_OscConfig+0x248>)
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300a:	f7ff f89d 	bl	8002148 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003010:	e00e      	b.n	8003030 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003012:	f7ff f899 	bl	8002148 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d907      	bls.n	8003030 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e150      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
 8003024:	40023800 	.word	0x40023800
 8003028:	42470000 	.word	0x42470000
 800302c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003030:	4b88      	ldr	r3, [pc, #544]	; (8003254 <HAL_RCC_OscConfig+0x470>)
 8003032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1ea      	bne.n	8003012 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 8097 	beq.w	8003178 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800304a:	2300      	movs	r3, #0
 800304c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800304e:	4b81      	ldr	r3, [pc, #516]	; (8003254 <HAL_RCC_OscConfig+0x470>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10f      	bne.n	800307a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	4b7d      	ldr	r3, [pc, #500]	; (8003254 <HAL_RCC_OscConfig+0x470>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	4a7c      	ldr	r2, [pc, #496]	; (8003254 <HAL_RCC_OscConfig+0x470>)
 8003064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003068:	6413      	str	r3, [r2, #64]	; 0x40
 800306a:	4b7a      	ldr	r3, [pc, #488]	; (8003254 <HAL_RCC_OscConfig+0x470>)
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003072:	60bb      	str	r3, [r7, #8]
 8003074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003076:	2301      	movs	r3, #1
 8003078:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307a:	4b77      	ldr	r3, [pc, #476]	; (8003258 <HAL_RCC_OscConfig+0x474>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003082:	2b00      	cmp	r3, #0
 8003084:	d118      	bne.n	80030b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003086:	4b74      	ldr	r3, [pc, #464]	; (8003258 <HAL_RCC_OscConfig+0x474>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a73      	ldr	r2, [pc, #460]	; (8003258 <HAL_RCC_OscConfig+0x474>)
 800308c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003092:	f7ff f859 	bl	8002148 <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800309a:	f7ff f855 	bl	8002148 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e10c      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ac:	4b6a      	ldr	r3, [pc, #424]	; (8003258 <HAL_RCC_OscConfig+0x474>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0f0      	beq.n	800309a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d106      	bne.n	80030ce <HAL_RCC_OscConfig+0x2ea>
 80030c0:	4b64      	ldr	r3, [pc, #400]	; (8003254 <HAL_RCC_OscConfig+0x470>)
 80030c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c4:	4a63      	ldr	r2, [pc, #396]	; (8003254 <HAL_RCC_OscConfig+0x470>)
 80030c6:	f043 0301 	orr.w	r3, r3, #1
 80030ca:	6713      	str	r3, [r2, #112]	; 0x70
 80030cc:	e01c      	b.n	8003108 <HAL_RCC_OscConfig+0x324>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2b05      	cmp	r3, #5
 80030d4:	d10c      	bne.n	80030f0 <HAL_RCC_OscConfig+0x30c>
 80030d6:	4b5f      	ldr	r3, [pc, #380]	; (8003254 <HAL_RCC_OscConfig+0x470>)
 80030d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030da:	4a5e      	ldr	r2, [pc, #376]	; (8003254 <HAL_RCC_OscConfig+0x470>)
 80030dc:	f043 0304 	orr.w	r3, r3, #4
 80030e0:	6713      	str	r3, [r2, #112]	; 0x70
 80030e2:	4b5c      	ldr	r3, [pc, #368]	; (8003254 <HAL_RCC_OscConfig+0x470>)
 80030e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e6:	4a5b      	ldr	r2, [pc, #364]	; (8003254 <HAL_RCC_OscConfig+0x470>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	6713      	str	r3, [r2, #112]	; 0x70
 80030ee:	e00b      	b.n	8003108 <HAL_RCC_OscConfig+0x324>
 80030f0:	4b58      	ldr	r3, [pc, #352]	; (8003254 <HAL_RCC_OscConfig+0x470>)
 80030f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f4:	4a57      	ldr	r2, [pc, #348]	; (8003254 <HAL_RCC_OscConfig+0x470>)
 80030f6:	f023 0301 	bic.w	r3, r3, #1
 80030fa:	6713      	str	r3, [r2, #112]	; 0x70
 80030fc:	4b55      	ldr	r3, [pc, #340]	; (8003254 <HAL_RCC_OscConfig+0x470>)
 80030fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003100:	4a54      	ldr	r2, [pc, #336]	; (8003254 <HAL_RCC_OscConfig+0x470>)
 8003102:	f023 0304 	bic.w	r3, r3, #4
 8003106:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d015      	beq.n	800313c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003110:	f7ff f81a 	bl	8002148 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003116:	e00a      	b.n	800312e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003118:	f7ff f816 	bl	8002148 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f241 3288 	movw	r2, #5000	; 0x1388
 8003126:	4293      	cmp	r3, r2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e0cb      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312e:	4b49      	ldr	r3, [pc, #292]	; (8003254 <HAL_RCC_OscConfig+0x470>)
 8003130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0ee      	beq.n	8003118 <HAL_RCC_OscConfig+0x334>
 800313a:	e014      	b.n	8003166 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313c:	f7ff f804 	bl	8002148 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003142:	e00a      	b.n	800315a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003144:	f7ff f800 	bl	8002148 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003152:	4293      	cmp	r3, r2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e0b5      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800315a:	4b3e      	ldr	r3, [pc, #248]	; (8003254 <HAL_RCC_OscConfig+0x470>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1ee      	bne.n	8003144 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003166:	7dfb      	ldrb	r3, [r7, #23]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d105      	bne.n	8003178 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800316c:	4b39      	ldr	r3, [pc, #228]	; (8003254 <HAL_RCC_OscConfig+0x470>)
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	4a38      	ldr	r2, [pc, #224]	; (8003254 <HAL_RCC_OscConfig+0x470>)
 8003172:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003176:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 80a1 	beq.w	80032c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003182:	4b34      	ldr	r3, [pc, #208]	; (8003254 <HAL_RCC_OscConfig+0x470>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
 800318a:	2b08      	cmp	r3, #8
 800318c:	d05c      	beq.n	8003248 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	2b02      	cmp	r3, #2
 8003194:	d141      	bne.n	800321a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003196:	4b31      	ldr	r3, [pc, #196]	; (800325c <HAL_RCC_OscConfig+0x478>)
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319c:	f7fe ffd4 	bl	8002148 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a4:	f7fe ffd0 	bl	8002148 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e087      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b6:	4b27      	ldr	r3, [pc, #156]	; (8003254 <HAL_RCC_OscConfig+0x470>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69da      	ldr	r2, [r3, #28]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	019b      	lsls	r3, r3, #6
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d8:	085b      	lsrs	r3, r3, #1
 80031da:	3b01      	subs	r3, #1
 80031dc:	041b      	lsls	r3, r3, #16
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	061b      	lsls	r3, r3, #24
 80031e6:	491b      	ldr	r1, [pc, #108]	; (8003254 <HAL_RCC_OscConfig+0x470>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031ec:	4b1b      	ldr	r3, [pc, #108]	; (800325c <HAL_RCC_OscConfig+0x478>)
 80031ee:	2201      	movs	r2, #1
 80031f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f2:	f7fe ffa9 	bl	8002148 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031fa:	f7fe ffa5 	bl	8002148 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e05c      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800320c:	4b11      	ldr	r3, [pc, #68]	; (8003254 <HAL_RCC_OscConfig+0x470>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0f0      	beq.n	80031fa <HAL_RCC_OscConfig+0x416>
 8003218:	e054      	b.n	80032c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800321a:	4b10      	ldr	r3, [pc, #64]	; (800325c <HAL_RCC_OscConfig+0x478>)
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003220:	f7fe ff92 	bl	8002148 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003228:	f7fe ff8e 	bl	8002148 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e045      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323a:	4b06      	ldr	r3, [pc, #24]	; (8003254 <HAL_RCC_OscConfig+0x470>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0x444>
 8003246:	e03d      	b.n	80032c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d107      	bne.n	8003260 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e038      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
 8003254:	40023800 	.word	0x40023800
 8003258:	40007000 	.word	0x40007000
 800325c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003260:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <HAL_RCC_OscConfig+0x4ec>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d028      	beq.n	80032c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003278:	429a      	cmp	r2, r3
 800327a:	d121      	bne.n	80032c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003286:	429a      	cmp	r2, r3
 8003288:	d11a      	bne.n	80032c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003290:	4013      	ands	r3, r2
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003296:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003298:	4293      	cmp	r3, r2
 800329a:	d111      	bne.n	80032c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a6:	085b      	lsrs	r3, r3, #1
 80032a8:	3b01      	subs	r3, #1
 80032aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d107      	bne.n	80032c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032bc:	429a      	cmp	r2, r3
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40023800 	.word	0x40023800

080032d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0cc      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032e8:	4b68      	ldr	r3, [pc, #416]	; (800348c <HAL_RCC_ClockConfig+0x1b8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d90c      	bls.n	8003310 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f6:	4b65      	ldr	r3, [pc, #404]	; (800348c <HAL_RCC_ClockConfig+0x1b8>)
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fe:	4b63      	ldr	r3, [pc, #396]	; (800348c <HAL_RCC_ClockConfig+0x1b8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d001      	beq.n	8003310 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e0b8      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d020      	beq.n	800335e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d005      	beq.n	8003334 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003328:	4b59      	ldr	r3, [pc, #356]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	4a58      	ldr	r2, [pc, #352]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003332:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003340:	4b53      	ldr	r3, [pc, #332]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	4a52      	ldr	r2, [pc, #328]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003346:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800334a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800334c:	4b50      	ldr	r3, [pc, #320]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	494d      	ldr	r1, [pc, #308]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	4313      	orrs	r3, r2
 800335c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d044      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d107      	bne.n	8003382 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003372:	4b47      	ldr	r3, [pc, #284]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d119      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e07f      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d003      	beq.n	8003392 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800338e:	2b03      	cmp	r3, #3
 8003390:	d107      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003392:	4b3f      	ldr	r3, [pc, #252]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d109      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e06f      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a2:	4b3b      	ldr	r3, [pc, #236]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e067      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033b2:	4b37      	ldr	r3, [pc, #220]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f023 0203 	bic.w	r2, r3, #3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	4934      	ldr	r1, [pc, #208]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033c4:	f7fe fec0 	bl	8002148 <HAL_GetTick>
 80033c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ca:	e00a      	b.n	80033e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033cc:	f7fe febc 	bl	8002148 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033da:	4293      	cmp	r3, r2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e04f      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e2:	4b2b      	ldr	r3, [pc, #172]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 020c 	and.w	r2, r3, #12
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d1eb      	bne.n	80033cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033f4:	4b25      	ldr	r3, [pc, #148]	; (800348c <HAL_RCC_ClockConfig+0x1b8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d20c      	bcs.n	800341c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003402:	4b22      	ldr	r3, [pc, #136]	; (800348c <HAL_RCC_ClockConfig+0x1b8>)
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800340a:	4b20      	ldr	r3, [pc, #128]	; (800348c <HAL_RCC_ClockConfig+0x1b8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d001      	beq.n	800341c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e032      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003428:	4b19      	ldr	r3, [pc, #100]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4916      	ldr	r1, [pc, #88]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	4313      	orrs	r3, r2
 8003438:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003446:	4b12      	ldr	r3, [pc, #72]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	490e      	ldr	r1, [pc, #56]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	4313      	orrs	r3, r2
 8003458:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800345a:	f000 f821 	bl	80034a0 <HAL_RCC_GetSysClockFreq>
 800345e:	4602      	mov	r2, r0
 8003460:	4b0b      	ldr	r3, [pc, #44]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	091b      	lsrs	r3, r3, #4
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	490a      	ldr	r1, [pc, #40]	; (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 800346c:	5ccb      	ldrb	r3, [r1, r3]
 800346e:	fa22 f303 	lsr.w	r3, r2, r3
 8003472:	4a09      	ldr	r2, [pc, #36]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003476:	4b09      	ldr	r3, [pc, #36]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7fe fe20 	bl	80020c0 <HAL_InitTick>

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40023c00 	.word	0x40023c00
 8003490:	40023800 	.word	0x40023800
 8003494:	08005c18 	.word	0x08005c18
 8003498:	20000014 	.word	0x20000014
 800349c:	20000018 	.word	0x20000018

080034a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034a4:	b090      	sub	sp, #64	; 0x40
 80034a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	637b      	str	r3, [r7, #52]	; 0x34
 80034ac:	2300      	movs	r3, #0
 80034ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034b0:	2300      	movs	r3, #0
 80034b2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034b8:	4b59      	ldr	r3, [pc, #356]	; (8003620 <HAL_RCC_GetSysClockFreq+0x180>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 030c 	and.w	r3, r3, #12
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d00d      	beq.n	80034e0 <HAL_RCC_GetSysClockFreq+0x40>
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	f200 80a1 	bhi.w	800360c <HAL_RCC_GetSysClockFreq+0x16c>
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0x34>
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d003      	beq.n	80034da <HAL_RCC_GetSysClockFreq+0x3a>
 80034d2:	e09b      	b.n	800360c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034d4:	4b53      	ldr	r3, [pc, #332]	; (8003624 <HAL_RCC_GetSysClockFreq+0x184>)
 80034d6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80034d8:	e09b      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034da:	4b53      	ldr	r3, [pc, #332]	; (8003628 <HAL_RCC_GetSysClockFreq+0x188>)
 80034dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034de:	e098      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034e0:	4b4f      	ldr	r3, [pc, #316]	; (8003620 <HAL_RCC_GetSysClockFreq+0x180>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034e8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034ea:	4b4d      	ldr	r3, [pc, #308]	; (8003620 <HAL_RCC_GetSysClockFreq+0x180>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d028      	beq.n	8003548 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034f6:	4b4a      	ldr	r3, [pc, #296]	; (8003620 <HAL_RCC_GetSysClockFreq+0x180>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	099b      	lsrs	r3, r3, #6
 80034fc:	2200      	movs	r2, #0
 80034fe:	623b      	str	r3, [r7, #32]
 8003500:	627a      	str	r2, [r7, #36]	; 0x24
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003508:	2100      	movs	r1, #0
 800350a:	4b47      	ldr	r3, [pc, #284]	; (8003628 <HAL_RCC_GetSysClockFreq+0x188>)
 800350c:	fb03 f201 	mul.w	r2, r3, r1
 8003510:	2300      	movs	r3, #0
 8003512:	fb00 f303 	mul.w	r3, r0, r3
 8003516:	4413      	add	r3, r2
 8003518:	4a43      	ldr	r2, [pc, #268]	; (8003628 <HAL_RCC_GetSysClockFreq+0x188>)
 800351a:	fba0 1202 	umull	r1, r2, r0, r2
 800351e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003520:	460a      	mov	r2, r1
 8003522:	62ba      	str	r2, [r7, #40]	; 0x28
 8003524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003526:	4413      	add	r3, r2
 8003528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800352a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800352c:	2200      	movs	r2, #0
 800352e:	61bb      	str	r3, [r7, #24]
 8003530:	61fa      	str	r2, [r7, #28]
 8003532:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003536:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800353a:	f7fd fb1f 	bl	8000b7c <__aeabi_uldivmod>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	4613      	mov	r3, r2
 8003544:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003546:	e053      	b.n	80035f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003548:	4b35      	ldr	r3, [pc, #212]	; (8003620 <HAL_RCC_GetSysClockFreq+0x180>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	099b      	lsrs	r3, r3, #6
 800354e:	2200      	movs	r2, #0
 8003550:	613b      	str	r3, [r7, #16]
 8003552:	617a      	str	r2, [r7, #20]
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800355a:	f04f 0b00 	mov.w	fp, #0
 800355e:	4652      	mov	r2, sl
 8003560:	465b      	mov	r3, fp
 8003562:	f04f 0000 	mov.w	r0, #0
 8003566:	f04f 0100 	mov.w	r1, #0
 800356a:	0159      	lsls	r1, r3, #5
 800356c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003570:	0150      	lsls	r0, r2, #5
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	ebb2 080a 	subs.w	r8, r2, sl
 800357a:	eb63 090b 	sbc.w	r9, r3, fp
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800358a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800358e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003592:	ebb2 0408 	subs.w	r4, r2, r8
 8003596:	eb63 0509 	sbc.w	r5, r3, r9
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	00eb      	lsls	r3, r5, #3
 80035a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035a8:	00e2      	lsls	r2, r4, #3
 80035aa:	4614      	mov	r4, r2
 80035ac:	461d      	mov	r5, r3
 80035ae:	eb14 030a 	adds.w	r3, r4, sl
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	eb45 030b 	adc.w	r3, r5, fp
 80035b8:	607b      	str	r3, [r7, #4]
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	f04f 0300 	mov.w	r3, #0
 80035c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035c6:	4629      	mov	r1, r5
 80035c8:	028b      	lsls	r3, r1, #10
 80035ca:	4621      	mov	r1, r4
 80035cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035d0:	4621      	mov	r1, r4
 80035d2:	028a      	lsls	r2, r1, #10
 80035d4:	4610      	mov	r0, r2
 80035d6:	4619      	mov	r1, r3
 80035d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035da:	2200      	movs	r2, #0
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	60fa      	str	r2, [r7, #12]
 80035e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035e4:	f7fd faca 	bl	8000b7c <__aeabi_uldivmod>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4613      	mov	r3, r2
 80035ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035f0:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <HAL_RCC_GetSysClockFreq+0x180>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	0c1b      	lsrs	r3, r3, #16
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	3301      	adds	r3, #1
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003600:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003604:	fbb2 f3f3 	udiv	r3, r2, r3
 8003608:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800360a:	e002      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800360c:	4b05      	ldr	r3, [pc, #20]	; (8003624 <HAL_RCC_GetSysClockFreq+0x184>)
 800360e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003610:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003614:	4618      	mov	r0, r3
 8003616:	3740      	adds	r7, #64	; 0x40
 8003618:	46bd      	mov	sp, r7
 800361a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800361e:	bf00      	nop
 8003620:	40023800 	.word	0x40023800
 8003624:	00f42400 	.word	0x00f42400
 8003628:	017d7840 	.word	0x017d7840

0800362c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003630:	4b03      	ldr	r3, [pc, #12]	; (8003640 <HAL_RCC_GetHCLKFreq+0x14>)
 8003632:	681b      	ldr	r3, [r3, #0]
}
 8003634:	4618      	mov	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	20000014 	.word	0x20000014

08003644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003648:	f7ff fff0 	bl	800362c <HAL_RCC_GetHCLKFreq>
 800364c:	4602      	mov	r2, r0
 800364e:	4b05      	ldr	r3, [pc, #20]	; (8003664 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	0a9b      	lsrs	r3, r3, #10
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	4903      	ldr	r1, [pc, #12]	; (8003668 <HAL_RCC_GetPCLK1Freq+0x24>)
 800365a:	5ccb      	ldrb	r3, [r1, r3]
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003660:	4618      	mov	r0, r3
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40023800 	.word	0x40023800
 8003668:	08005c28 	.word	0x08005c28

0800366c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003670:	f7ff ffdc 	bl	800362c <HAL_RCC_GetHCLKFreq>
 8003674:	4602      	mov	r2, r0
 8003676:	4b05      	ldr	r3, [pc, #20]	; (800368c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	0b5b      	lsrs	r3, r3, #13
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	4903      	ldr	r1, [pc, #12]	; (8003690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003682:	5ccb      	ldrb	r3, [r1, r3]
 8003684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003688:	4618      	mov	r0, r3
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40023800 	.word	0x40023800
 8003690:	08005c28 	.word	0x08005c28

08003694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e041      	b.n	800372a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d106      	bne.n	80036c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fe fa90 	bl	8001be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2202      	movs	r2, #2
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3304      	adds	r3, #4
 80036d0:	4619      	mov	r1, r3
 80036d2:	4610      	mov	r0, r2
 80036d4:	f000 fe38 	bl	8004348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
	...

08003734 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b01      	cmp	r3, #1
 8003746:	d001      	beq.n	800374c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e044      	b.n	80037d6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2202      	movs	r2, #2
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a1e      	ldr	r2, [pc, #120]	; (80037e4 <HAL_TIM_Base_Start_IT+0xb0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d018      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x6c>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003776:	d013      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x6c>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a1a      	ldr	r2, [pc, #104]	; (80037e8 <HAL_TIM_Base_Start_IT+0xb4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00e      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x6c>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a19      	ldr	r2, [pc, #100]	; (80037ec <HAL_TIM_Base_Start_IT+0xb8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d009      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x6c>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a17      	ldr	r2, [pc, #92]	; (80037f0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d004      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x6c>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a16      	ldr	r2, [pc, #88]	; (80037f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d111      	bne.n	80037c4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b06      	cmp	r3, #6
 80037b0:	d010      	beq.n	80037d4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f042 0201 	orr.w	r2, r2, #1
 80037c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c2:	e007      	b.n	80037d4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40010000 	.word	0x40010000
 80037e8:	40000400 	.word	0x40000400
 80037ec:	40000800 	.word	0x40000800
 80037f0:	40000c00 	.word	0x40000c00
 80037f4:	40014000 	.word	0x40014000

080037f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e041      	b.n	800388e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f839 	bl	8003896 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3304      	adds	r3, #4
 8003834:	4619      	mov	r1, r3
 8003836:	4610      	mov	r0, r2
 8003838:	f000 fd86 	bl	8004348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
	...

080038ac <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
 80038b8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d109      	bne.n	80038d8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	bf0c      	ite	eq
 80038d0:	2301      	moveq	r3, #1
 80038d2:	2300      	movne	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	e022      	b.n	800391e <HAL_TIM_PWM_Start_DMA+0x72>
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d109      	bne.n	80038f2 <HAL_TIM_PWM_Start_DMA+0x46>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	bf0c      	ite	eq
 80038ea:	2301      	moveq	r3, #1
 80038ec:	2300      	movne	r3, #0
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	e015      	b.n	800391e <HAL_TIM_PWM_Start_DMA+0x72>
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d109      	bne.n	800390c <HAL_TIM_PWM_Start_DMA+0x60>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	bf0c      	ite	eq
 8003904:	2301      	moveq	r3, #1
 8003906:	2300      	movne	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	e008      	b.n	800391e <HAL_TIM_PWM_Start_DMA+0x72>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	bf0c      	ite	eq
 8003918:	2301      	moveq	r3, #1
 800391a:	2300      	movne	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003922:	2302      	movs	r3, #2
 8003924:	e15d      	b.n	8003be2 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d109      	bne.n	8003940 <HAL_TIM_PWM_Start_DMA+0x94>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b01      	cmp	r3, #1
 8003936:	bf0c      	ite	eq
 8003938:	2301      	moveq	r3, #1
 800393a:	2300      	movne	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	e022      	b.n	8003986 <HAL_TIM_PWM_Start_DMA+0xda>
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2b04      	cmp	r3, #4
 8003944:	d109      	bne.n	800395a <HAL_TIM_PWM_Start_DMA+0xae>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b01      	cmp	r3, #1
 8003950:	bf0c      	ite	eq
 8003952:	2301      	moveq	r3, #1
 8003954:	2300      	movne	r3, #0
 8003956:	b2db      	uxtb	r3, r3
 8003958:	e015      	b.n	8003986 <HAL_TIM_PWM_Start_DMA+0xda>
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b08      	cmp	r3, #8
 800395e:	d109      	bne.n	8003974 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b01      	cmp	r3, #1
 800396a:	bf0c      	ite	eq
 800396c:	2301      	moveq	r3, #1
 800396e:	2300      	movne	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	e008      	b.n	8003986 <HAL_TIM_PWM_Start_DMA+0xda>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b01      	cmp	r3, #1
 800397e:	bf0c      	ite	eq
 8003980:	2301      	moveq	r3, #1
 8003982:	2300      	movne	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d024      	beq.n	80039d4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d104      	bne.n	800399a <HAL_TIM_PWM_Start_DMA+0xee>
 8003990:	887b      	ldrh	r3, [r7, #2]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e123      	b.n	8003be2 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d104      	bne.n	80039aa <HAL_TIM_PWM_Start_DMA+0xfe>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039a8:	e016      	b.n	80039d8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d104      	bne.n	80039ba <HAL_TIM_PWM_Start_DMA+0x10e>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b8:	e00e      	b.n	80039d8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d104      	bne.n	80039ca <HAL_TIM_PWM_Start_DMA+0x11e>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039c8:	e006      	b.n	80039d8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2202      	movs	r2, #2
 80039ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039d2:	e001      	b.n	80039d8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e104      	b.n	8003be2 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b0c      	cmp	r3, #12
 80039dc:	f200 80ae 	bhi.w	8003b3c <HAL_TIM_PWM_Start_DMA+0x290>
 80039e0:	a201      	add	r2, pc, #4	; (adr r2, 80039e8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80039e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e6:	bf00      	nop
 80039e8:	08003a1d 	.word	0x08003a1d
 80039ec:	08003b3d 	.word	0x08003b3d
 80039f0:	08003b3d 	.word	0x08003b3d
 80039f4:	08003b3d 	.word	0x08003b3d
 80039f8:	08003a65 	.word	0x08003a65
 80039fc:	08003b3d 	.word	0x08003b3d
 8003a00:	08003b3d 	.word	0x08003b3d
 8003a04:	08003b3d 	.word	0x08003b3d
 8003a08:	08003aad 	.word	0x08003aad
 8003a0c:	08003b3d 	.word	0x08003b3d
 8003a10:	08003b3d 	.word	0x08003b3d
 8003a14:	08003b3d 	.word	0x08003b3d
 8003a18:	08003af5 	.word	0x08003af5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	4a72      	ldr	r2, [pc, #456]	; (8003bec <HAL_TIM_PWM_Start_DMA+0x340>)
 8003a22:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	4a71      	ldr	r2, [pc, #452]	; (8003bf0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003a2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	4a70      	ldr	r2, [pc, #448]	; (8003bf4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003a32:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3334      	adds	r3, #52	; 0x34
 8003a40:	461a      	mov	r2, r3
 8003a42:	887b      	ldrh	r3, [r7, #2]
 8003a44:	f7fe fd70 	bl	8002528 <HAL_DMA_Start_IT>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e0c7      	b.n	8003be2 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a60:	60da      	str	r2, [r3, #12]
      break;
 8003a62:	e06e      	b.n	8003b42 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a68:	4a60      	ldr	r2, [pc, #384]	; (8003bec <HAL_TIM_PWM_Start_DMA+0x340>)
 8003a6a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a70:	4a5f      	ldr	r2, [pc, #380]	; (8003bf0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003a72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	4a5e      	ldr	r2, [pc, #376]	; (8003bf4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003a7a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	3338      	adds	r3, #56	; 0x38
 8003a88:	461a      	mov	r2, r3
 8003a8a:	887b      	ldrh	r3, [r7, #2]
 8003a8c:	f7fe fd4c 	bl	8002528 <HAL_DMA_Start_IT>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e0a3      	b.n	8003be2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68da      	ldr	r2, [r3, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003aa8:	60da      	str	r2, [r3, #12]
      break;
 8003aaa:	e04a      	b.n	8003b42 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	4a4e      	ldr	r2, [pc, #312]	; (8003bec <HAL_TIM_PWM_Start_DMA+0x340>)
 8003ab2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	4a4d      	ldr	r2, [pc, #308]	; (8003bf0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003aba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	4a4c      	ldr	r2, [pc, #304]	; (8003bf4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003ac2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	333c      	adds	r3, #60	; 0x3c
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	887b      	ldrh	r3, [r7, #2]
 8003ad4:	f7fe fd28 	bl	8002528 <HAL_DMA_Start_IT>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e07f      	b.n	8003be2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003af0:	60da      	str	r2, [r3, #12]
      break;
 8003af2:	e026      	b.n	8003b42 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af8:	4a3c      	ldr	r2, [pc, #240]	; (8003bec <HAL_TIM_PWM_Start_DMA+0x340>)
 8003afa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b00:	4a3b      	ldr	r2, [pc, #236]	; (8003bf0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003b02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	4a3a      	ldr	r2, [pc, #232]	; (8003bf4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003b0a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3340      	adds	r3, #64	; 0x40
 8003b18:	461a      	mov	r2, r3
 8003b1a:	887b      	ldrh	r3, [r7, #2]
 8003b1c:	f7fe fd04 	bl	8002528 <HAL_DMA_Start_IT>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e05b      	b.n	8003be2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b38:	60da      	str	r2, [r3, #12]
      break;
 8003b3a:	e002      	b.n	8003b42 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b40:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b42:	7dfb      	ldrb	r3, [r7, #23]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d14b      	bne.n	8003be0 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	68b9      	ldr	r1, [r7, #8]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fe9f 	bl	8004894 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a27      	ldr	r2, [pc, #156]	; (8003bf8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d107      	bne.n	8003b70 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b6e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a20      	ldr	r2, [pc, #128]	; (8003bf8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d018      	beq.n	8003bac <HAL_TIM_PWM_Start_DMA+0x300>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b82:	d013      	beq.n	8003bac <HAL_TIM_PWM_Start_DMA+0x300>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a1c      	ldr	r2, [pc, #112]	; (8003bfc <HAL_TIM_PWM_Start_DMA+0x350>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00e      	beq.n	8003bac <HAL_TIM_PWM_Start_DMA+0x300>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a1b      	ldr	r2, [pc, #108]	; (8003c00 <HAL_TIM_PWM_Start_DMA+0x354>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d009      	beq.n	8003bac <HAL_TIM_PWM_Start_DMA+0x300>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a19      	ldr	r2, [pc, #100]	; (8003c04 <HAL_TIM_PWM_Start_DMA+0x358>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d004      	beq.n	8003bac <HAL_TIM_PWM_Start_DMA+0x300>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a18      	ldr	r2, [pc, #96]	; (8003c08 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d111      	bne.n	8003bd0 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	2b06      	cmp	r3, #6
 8003bbc:	d010      	beq.n	8003be0 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f042 0201 	orr.w	r2, r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bce:	e007      	b.n	8003be0 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	08004239 	.word	0x08004239
 8003bf0:	080042e1 	.word	0x080042e1
 8003bf4:	080041a7 	.word	0x080041a7
 8003bf8:	40010000 	.word	0x40010000
 8003bfc:	40000400 	.word	0x40000400
 8003c00:	40000800 	.word	0x40000800
 8003c04:	40000c00 	.word	0x40000c00
 8003c08:	40014000 	.word	0x40014000

08003c0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d122      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d11b      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f06f 0202 	mvn.w	r2, #2
 8003c38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fa77 	bl	8004142 <HAL_TIM_IC_CaptureCallback>
 8003c54:	e005      	b.n	8003c62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fa69 	bl	800412e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 fa7a 	bl	8004156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d122      	bne.n	8003cbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d11b      	bne.n	8003cbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0204 	mvn.w	r2, #4
 8003c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2202      	movs	r2, #2
 8003c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 fa4d 	bl	8004142 <HAL_TIM_IC_CaptureCallback>
 8003ca8:	e005      	b.n	8003cb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 fa3f 	bl	800412e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 fa50 	bl	8004156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d122      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d11b      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0208 	mvn.w	r2, #8
 8003ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 fa23 	bl	8004142 <HAL_TIM_IC_CaptureCallback>
 8003cfc:	e005      	b.n	8003d0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fa15 	bl	800412e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 fa26 	bl	8004156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f003 0310 	and.w	r3, r3, #16
 8003d1a:	2b10      	cmp	r3, #16
 8003d1c:	d122      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	2b10      	cmp	r3, #16
 8003d2a:	d11b      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0210 	mvn.w	r2, #16
 8003d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2208      	movs	r2, #8
 8003d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f9f9 	bl	8004142 <HAL_TIM_IC_CaptureCallback>
 8003d50:	e005      	b.n	8003d5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f9eb 	bl	800412e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f9fc 	bl	8004156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d10e      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d107      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f06f 0201 	mvn.w	r2, #1
 8003d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7fd f878 	bl	8000e80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9a:	2b80      	cmp	r3, #128	; 0x80
 8003d9c:	d10e      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da8:	2b80      	cmp	r3, #128	; 0x80
 8003daa:	d107      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fe5c 	bl	8004a74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc6:	2b40      	cmp	r3, #64	; 0x40
 8003dc8:	d10e      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd4:	2b40      	cmp	r3, #64	; 0x40
 8003dd6:	d107      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f9cb 	bl	800417e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b20      	cmp	r3, #32
 8003df4:	d10e      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f003 0320 	and.w	r3, r3, #32
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	d107      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f06f 0220 	mvn.w	r2, #32
 8003e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fe26 	bl	8004a60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e14:	bf00      	nop
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e36:	2302      	movs	r3, #2
 8003e38:	e0ae      	b.n	8003f98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b0c      	cmp	r3, #12
 8003e46:	f200 809f 	bhi.w	8003f88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e4a:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e50:	08003e85 	.word	0x08003e85
 8003e54:	08003f89 	.word	0x08003f89
 8003e58:	08003f89 	.word	0x08003f89
 8003e5c:	08003f89 	.word	0x08003f89
 8003e60:	08003ec5 	.word	0x08003ec5
 8003e64:	08003f89 	.word	0x08003f89
 8003e68:	08003f89 	.word	0x08003f89
 8003e6c:	08003f89 	.word	0x08003f89
 8003e70:	08003f07 	.word	0x08003f07
 8003e74:	08003f89 	.word	0x08003f89
 8003e78:	08003f89 	.word	0x08003f89
 8003e7c:	08003f89 	.word	0x08003f89
 8003e80:	08003f47 	.word	0x08003f47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 fadc 	bl	8004448 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699a      	ldr	r2, [r3, #24]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0208 	orr.w	r2, r2, #8
 8003e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699a      	ldr	r2, [r3, #24]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0204 	bic.w	r2, r2, #4
 8003eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6999      	ldr	r1, [r3, #24]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	691a      	ldr	r2, [r3, #16]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	619a      	str	r2, [r3, #24]
      break;
 8003ec2:	e064      	b.n	8003f8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68b9      	ldr	r1, [r7, #8]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 fb22 	bl	8004514 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699a      	ldr	r2, [r3, #24]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	699a      	ldr	r2, [r3, #24]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6999      	ldr	r1, [r3, #24]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	021a      	lsls	r2, r3, #8
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	619a      	str	r2, [r3, #24]
      break;
 8003f04:	e043      	b.n	8003f8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 fb6d 	bl	80045ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	69da      	ldr	r2, [r3, #28]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0208 	orr.w	r2, r2, #8
 8003f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	69da      	ldr	r2, [r3, #28]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0204 	bic.w	r2, r2, #4
 8003f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69d9      	ldr	r1, [r3, #28]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	61da      	str	r2, [r3, #28]
      break;
 8003f44:	e023      	b.n	8003f8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68b9      	ldr	r1, [r7, #8]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 fbb7 	bl	80046c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69da      	ldr	r2, [r3, #28]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69da      	ldr	r2, [r3, #28]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	69d9      	ldr	r1, [r3, #28]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	021a      	lsls	r2, r3, #8
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	61da      	str	r2, [r3, #28]
      break;
 8003f86:	e002      	b.n	8003f8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_TIM_ConfigClockSource+0x1c>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e0b4      	b.n	8004126 <HAL_TIM_ConfigClockSource+0x186>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fe2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff4:	d03e      	beq.n	8004074 <HAL_TIM_ConfigClockSource+0xd4>
 8003ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ffa:	f200 8087 	bhi.w	800410c <HAL_TIM_ConfigClockSource+0x16c>
 8003ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004002:	f000 8086 	beq.w	8004112 <HAL_TIM_ConfigClockSource+0x172>
 8004006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800400a:	d87f      	bhi.n	800410c <HAL_TIM_ConfigClockSource+0x16c>
 800400c:	2b70      	cmp	r3, #112	; 0x70
 800400e:	d01a      	beq.n	8004046 <HAL_TIM_ConfigClockSource+0xa6>
 8004010:	2b70      	cmp	r3, #112	; 0x70
 8004012:	d87b      	bhi.n	800410c <HAL_TIM_ConfigClockSource+0x16c>
 8004014:	2b60      	cmp	r3, #96	; 0x60
 8004016:	d050      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x11a>
 8004018:	2b60      	cmp	r3, #96	; 0x60
 800401a:	d877      	bhi.n	800410c <HAL_TIM_ConfigClockSource+0x16c>
 800401c:	2b50      	cmp	r3, #80	; 0x50
 800401e:	d03c      	beq.n	800409a <HAL_TIM_ConfigClockSource+0xfa>
 8004020:	2b50      	cmp	r3, #80	; 0x50
 8004022:	d873      	bhi.n	800410c <HAL_TIM_ConfigClockSource+0x16c>
 8004024:	2b40      	cmp	r3, #64	; 0x40
 8004026:	d058      	beq.n	80040da <HAL_TIM_ConfigClockSource+0x13a>
 8004028:	2b40      	cmp	r3, #64	; 0x40
 800402a:	d86f      	bhi.n	800410c <HAL_TIM_ConfigClockSource+0x16c>
 800402c:	2b30      	cmp	r3, #48	; 0x30
 800402e:	d064      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0x15a>
 8004030:	2b30      	cmp	r3, #48	; 0x30
 8004032:	d86b      	bhi.n	800410c <HAL_TIM_ConfigClockSource+0x16c>
 8004034:	2b20      	cmp	r3, #32
 8004036:	d060      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0x15a>
 8004038:	2b20      	cmp	r3, #32
 800403a:	d867      	bhi.n	800410c <HAL_TIM_ConfigClockSource+0x16c>
 800403c:	2b00      	cmp	r3, #0
 800403e:	d05c      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0x15a>
 8004040:	2b10      	cmp	r3, #16
 8004042:	d05a      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0x15a>
 8004044:	e062      	b.n	800410c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6818      	ldr	r0, [r3, #0]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	6899      	ldr	r1, [r3, #8]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f000 fbfd 	bl	8004854 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004068:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	609a      	str	r2, [r3, #8]
      break;
 8004072:	e04f      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6818      	ldr	r0, [r3, #0]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	6899      	ldr	r1, [r3, #8]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f000 fbe6 	bl	8004854 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689a      	ldr	r2, [r3, #8]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004096:	609a      	str	r2, [r3, #8]
      break;
 8004098:	e03c      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	6859      	ldr	r1, [r3, #4]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	461a      	mov	r2, r3
 80040a8:	f000 fb5a 	bl	8004760 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2150      	movs	r1, #80	; 0x50
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fbb3 	bl	800481e <TIM_ITRx_SetConfig>
      break;
 80040b8:	e02c      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	6859      	ldr	r1, [r3, #4]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	461a      	mov	r2, r3
 80040c8:	f000 fb79 	bl	80047be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2160      	movs	r1, #96	; 0x60
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fba3 	bl	800481e <TIM_ITRx_SetConfig>
      break;
 80040d8:	e01c      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	6859      	ldr	r1, [r3, #4]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	461a      	mov	r2, r3
 80040e8:	f000 fb3a 	bl	8004760 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2140      	movs	r1, #64	; 0x40
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 fb93 	bl	800481e <TIM_ITRx_SetConfig>
      break;
 80040f8:	e00c      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4619      	mov	r1, r3
 8004104:	4610      	mov	r0, r2
 8004106:	f000 fb8a 	bl	800481e <TIM_ITRx_SetConfig>
      break;
 800410a:	e003      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	73fb      	strb	r3, [r7, #15]
      break;
 8004110:	e000      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004112:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004124:	7bfb      	ldrb	r3, [r7, #15]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b084      	sub	sp, #16
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d107      	bne.n	80041ce <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2201      	movs	r2, #1
 80041c2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041cc:	e02a      	b.n	8004224 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d107      	bne.n	80041e8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2202      	movs	r2, #2
 80041dc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041e6:	e01d      	b.n	8004224 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d107      	bne.n	8004202 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2204      	movs	r2, #4
 80041f6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004200:	e010      	b.n	8004224 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	429a      	cmp	r2, r3
 800420a:	d107      	bne.n	800421c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2208      	movs	r2, #8
 8004210:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800421a:	e003      	b.n	8004224 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f7ff ffb4 	bl	8004192 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	771a      	strb	r2, [r3, #28]
}
 8004230:	bf00      	nop
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004244:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	429a      	cmp	r2, r3
 800424e:	d10b      	bne.n	8004268 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2201      	movs	r2, #1
 8004254:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d136      	bne.n	80042cc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004266:	e031      	b.n	80042cc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	429a      	cmp	r2, r3
 8004270:	d10b      	bne.n	800428a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2202      	movs	r2, #2
 8004276:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d125      	bne.n	80042cc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004288:	e020      	b.n	80042cc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	429a      	cmp	r2, r3
 8004292:	d10b      	bne.n	80042ac <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2204      	movs	r2, #4
 8004298:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d114      	bne.n	80042cc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042aa:	e00f      	b.n	80042cc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d10a      	bne.n	80042cc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2208      	movs	r2, #8
 80042ba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d103      	bne.n	80042cc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f7ff ff42 	bl	8004156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	771a      	strb	r2, [r3, #28]
}
 80042d8:	bf00      	nop
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ec:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d103      	bne.n	8004300 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2201      	movs	r2, #1
 80042fc:	771a      	strb	r2, [r3, #28]
 80042fe:	e019      	b.n	8004334 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	429a      	cmp	r2, r3
 8004308:	d103      	bne.n	8004312 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2202      	movs	r2, #2
 800430e:	771a      	strb	r2, [r3, #28]
 8004310:	e010      	b.n	8004334 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	429a      	cmp	r2, r3
 800431a:	d103      	bne.n	8004324 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2204      	movs	r2, #4
 8004320:	771a      	strb	r2, [r3, #28]
 8004322:	e007      	b.n	8004334 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	429a      	cmp	r2, r3
 800432c:	d102      	bne.n	8004334 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2208      	movs	r2, #8
 8004332:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f7ff ff18 	bl	800416a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	771a      	strb	r2, [r3, #28]
}
 8004340:	bf00      	nop
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a34      	ldr	r2, [pc, #208]	; (800442c <TIM_Base_SetConfig+0xe4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d00f      	beq.n	8004380 <TIM_Base_SetConfig+0x38>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004366:	d00b      	beq.n	8004380 <TIM_Base_SetConfig+0x38>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a31      	ldr	r2, [pc, #196]	; (8004430 <TIM_Base_SetConfig+0xe8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d007      	beq.n	8004380 <TIM_Base_SetConfig+0x38>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a30      	ldr	r2, [pc, #192]	; (8004434 <TIM_Base_SetConfig+0xec>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d003      	beq.n	8004380 <TIM_Base_SetConfig+0x38>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a2f      	ldr	r2, [pc, #188]	; (8004438 <TIM_Base_SetConfig+0xf0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d108      	bne.n	8004392 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a25      	ldr	r2, [pc, #148]	; (800442c <TIM_Base_SetConfig+0xe4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d01b      	beq.n	80043d2 <TIM_Base_SetConfig+0x8a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a0:	d017      	beq.n	80043d2 <TIM_Base_SetConfig+0x8a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a22      	ldr	r2, [pc, #136]	; (8004430 <TIM_Base_SetConfig+0xe8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d013      	beq.n	80043d2 <TIM_Base_SetConfig+0x8a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a21      	ldr	r2, [pc, #132]	; (8004434 <TIM_Base_SetConfig+0xec>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00f      	beq.n	80043d2 <TIM_Base_SetConfig+0x8a>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a20      	ldr	r2, [pc, #128]	; (8004438 <TIM_Base_SetConfig+0xf0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00b      	beq.n	80043d2 <TIM_Base_SetConfig+0x8a>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a1f      	ldr	r2, [pc, #124]	; (800443c <TIM_Base_SetConfig+0xf4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d007      	beq.n	80043d2 <TIM_Base_SetConfig+0x8a>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a1e      	ldr	r2, [pc, #120]	; (8004440 <TIM_Base_SetConfig+0xf8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d003      	beq.n	80043d2 <TIM_Base_SetConfig+0x8a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a1d      	ldr	r2, [pc, #116]	; (8004444 <TIM_Base_SetConfig+0xfc>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d108      	bne.n	80043e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a08      	ldr	r2, [pc, #32]	; (800442c <TIM_Base_SetConfig+0xe4>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d103      	bne.n	8004418 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	615a      	str	r2, [r3, #20]
}
 800441e:	bf00      	nop
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	40010000 	.word	0x40010000
 8004430:	40000400 	.word	0x40000400
 8004434:	40000800 	.word	0x40000800
 8004438:	40000c00 	.word	0x40000c00
 800443c:	40014000 	.word	0x40014000
 8004440:	40014400 	.word	0x40014400
 8004444:	40014800 	.word	0x40014800

08004448 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	f023 0201 	bic.w	r2, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0303 	bic.w	r3, r3, #3
 800447e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f023 0302 	bic.w	r3, r3, #2
 8004490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a1c      	ldr	r2, [pc, #112]	; (8004510 <TIM_OC1_SetConfig+0xc8>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d10c      	bne.n	80044be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f023 0308 	bic.w	r3, r3, #8
 80044aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f023 0304 	bic.w	r3, r3, #4
 80044bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a13      	ldr	r2, [pc, #76]	; (8004510 <TIM_OC1_SetConfig+0xc8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d111      	bne.n	80044ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	621a      	str	r2, [r3, #32]
}
 8004504:	bf00      	nop
 8004506:	371c      	adds	r7, #28
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	40010000 	.word	0x40010000

08004514 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f023 0210 	bic.w	r2, r3, #16
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800454a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f023 0320 	bic.w	r3, r3, #32
 800455e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a1e      	ldr	r2, [pc, #120]	; (80045e8 <TIM_OC2_SetConfig+0xd4>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d10d      	bne.n	8004590 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800457a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4313      	orrs	r3, r2
 8004586:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800458e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a15      	ldr	r2, [pc, #84]	; (80045e8 <TIM_OC2_SetConfig+0xd4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d113      	bne.n	80045c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800459e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	621a      	str	r2, [r3, #32]
}
 80045da:	bf00      	nop
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40010000 	.word	0x40010000

080045ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f023 0303 	bic.w	r3, r3, #3
 8004622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	021b      	lsls	r3, r3, #8
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	4313      	orrs	r3, r2
 8004640:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a1d      	ldr	r2, [pc, #116]	; (80046bc <TIM_OC3_SetConfig+0xd0>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d10d      	bne.n	8004666 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004650:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	021b      	lsls	r3, r3, #8
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	4313      	orrs	r3, r2
 800465c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004664:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a14      	ldr	r2, [pc, #80]	; (80046bc <TIM_OC3_SetConfig+0xd0>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d113      	bne.n	8004696 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800467c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	4313      	orrs	r3, r2
 8004688:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	621a      	str	r2, [r3, #32]
}
 80046b0:	bf00      	nop
 80046b2:	371c      	adds	r7, #28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	40010000 	.word	0x40010000

080046c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	021b      	lsls	r3, r3, #8
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800470a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	031b      	lsls	r3, r3, #12
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a10      	ldr	r2, [pc, #64]	; (800475c <TIM_OC4_SetConfig+0x9c>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d109      	bne.n	8004734 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004726:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	019b      	lsls	r3, r3, #6
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	4313      	orrs	r3, r2
 8004732:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	621a      	str	r2, [r3, #32]
}
 800474e:	bf00      	nop
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40010000 	.word	0x40010000

08004760 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004760:	b480      	push	{r7}
 8004762:	b087      	sub	sp, #28
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	f023 0201 	bic.w	r2, r3, #1
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800478a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f023 030a 	bic.w	r3, r3, #10
 800479c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	621a      	str	r2, [r3, #32]
}
 80047b2:	bf00      	nop
 80047b4:	371c      	adds	r7, #28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047be:	b480      	push	{r7}
 80047c0:	b087      	sub	sp, #28
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	60f8      	str	r0, [r7, #12]
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	f023 0210 	bic.w	r2, r3, #16
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	031b      	lsls	r3, r3, #12
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	4313      	orrs	r3, r2
 8004804:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	621a      	str	r2, [r3, #32]
}
 8004812:	bf00      	nop
 8004814:	371c      	adds	r7, #28
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800481e:	b480      	push	{r7}
 8004820:	b085      	sub	sp, #20
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
 8004826:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004834:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	f043 0307 	orr.w	r3, r3, #7
 8004840:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	609a      	str	r2, [r3, #8]
}
 8004848:	bf00      	nop
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
 8004860:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800486e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	021a      	lsls	r2, r3, #8
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	431a      	orrs	r2, r3
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	4313      	orrs	r3, r2
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	4313      	orrs	r3, r2
 8004880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	609a      	str	r2, [r3, #8]
}
 8004888:	bf00      	nop
 800488a:	371c      	adds	r7, #28
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f003 031f 	and.w	r3, r3, #31
 80048a6:	2201      	movs	r2, #1
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a1a      	ldr	r2, [r3, #32]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	43db      	mvns	r3, r3
 80048b6:	401a      	ands	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a1a      	ldr	r2, [r3, #32]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f003 031f 	and.w	r3, r3, #31
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	fa01 f303 	lsl.w	r3, r1, r3
 80048cc:	431a      	orrs	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	621a      	str	r2, [r3, #32]
}
 80048d2:	bf00      	nop
 80048d4:	371c      	adds	r7, #28
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
	...

080048e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d101      	bne.n	80048f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048f4:	2302      	movs	r3, #2
 80048f6:	e050      	b.n	800499a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	4313      	orrs	r3, r2
 8004928:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a1c      	ldr	r2, [pc, #112]	; (80049a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d018      	beq.n	800496e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004944:	d013      	beq.n	800496e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a18      	ldr	r2, [pc, #96]	; (80049ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d00e      	beq.n	800496e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a16      	ldr	r2, [pc, #88]	; (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d009      	beq.n	800496e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a15      	ldr	r2, [pc, #84]	; (80049b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d004      	beq.n	800496e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a13      	ldr	r2, [pc, #76]	; (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d10c      	bne.n	8004988 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004974:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	4313      	orrs	r3, r2
 800497e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40010000 	.word	0x40010000
 80049ac:	40000400 	.word	0x40000400
 80049b0:	40000800 	.word	0x40000800
 80049b4:	40000c00 	.word	0x40000c00
 80049b8:	40014000 	.word	0x40014000

080049bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e03d      	b.n	8004a54 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e03f      	b.n	8004b1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d106      	bne.n	8004ab4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7fd f942 	bl	8001d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2224      	movs	r2, #36	; 0x24
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f929 	bl	8004d24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ae0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695a      	ldr	r2, [r3, #20]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004af0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b08a      	sub	sp, #40	; 0x28
 8004b26:	af02      	add	r7, sp, #8
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	603b      	str	r3, [r7, #0]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b20      	cmp	r3, #32
 8004b40:	d17c      	bne.n	8004c3c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d002      	beq.n	8004b4e <HAL_UART_Transmit+0x2c>
 8004b48:	88fb      	ldrh	r3, [r7, #6]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e075      	b.n	8004c3e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d101      	bne.n	8004b60 <HAL_UART_Transmit+0x3e>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	e06e      	b.n	8004c3e <HAL_UART_Transmit+0x11c>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2221      	movs	r2, #33	; 0x21
 8004b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b76:	f7fd fae7 	bl	8002148 <HAL_GetTick>
 8004b7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	88fa      	ldrh	r2, [r7, #6]
 8004b80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	88fa      	ldrh	r2, [r7, #6]
 8004b86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b90:	d108      	bne.n	8004ba4 <HAL_UART_Transmit+0x82>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d104      	bne.n	8004ba4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	61bb      	str	r3, [r7, #24]
 8004ba2:	e003      	b.n	8004bac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004bb4:	e02a      	b.n	8004c0c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	2180      	movs	r1, #128	; 0x80
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f840 	bl	8004c46 <UART_WaitOnFlagUntilTimeout>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e036      	b.n	8004c3e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10b      	bne.n	8004bee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004be4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	3302      	adds	r3, #2
 8004bea:	61bb      	str	r3, [r7, #24]
 8004bec:	e007      	b.n	8004bfe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	781a      	ldrb	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	3b01      	subs	r3, #1
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1cf      	bne.n	8004bb6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	2140      	movs	r1, #64	; 0x40
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 f810 	bl	8004c46 <UART_WaitOnFlagUntilTimeout>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e006      	b.n	8004c3e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	e000      	b.n	8004c3e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c3c:	2302      	movs	r3, #2
  }
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3720      	adds	r7, #32
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b090      	sub	sp, #64	; 0x40
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	603b      	str	r3, [r7, #0]
 8004c52:	4613      	mov	r3, r2
 8004c54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c56:	e050      	b.n	8004cfa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5e:	d04c      	beq.n	8004cfa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d007      	beq.n	8004c76 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c66:	f7fd fa6f 	bl	8002148 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d241      	bcs.n	8004cfa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	330c      	adds	r3, #12
 8004c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c80:	e853 3f00 	ldrex	r3, [r3]
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	330c      	adds	r3, #12
 8004c94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c96:	637a      	str	r2, [r7, #52]	; 0x34
 8004c98:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c9e:	e841 2300 	strex	r3, r2, [r1]
 8004ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1e5      	bne.n	8004c76 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3314      	adds	r3, #20
 8004cb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	e853 3f00 	ldrex	r3, [r3]
 8004cb8:	613b      	str	r3, [r7, #16]
   return(result);
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f023 0301 	bic.w	r3, r3, #1
 8004cc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3314      	adds	r3, #20
 8004cc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cca:	623a      	str	r2, [r7, #32]
 8004ccc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cce:	69f9      	ldr	r1, [r7, #28]
 8004cd0:	6a3a      	ldr	r2, [r7, #32]
 8004cd2:	e841 2300 	strex	r3, r2, [r1]
 8004cd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1e5      	bne.n	8004caa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e00f      	b.n	8004d1a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	4013      	ands	r3, r2
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	bf0c      	ite	eq
 8004d0a:	2301      	moveq	r3, #1
 8004d0c:	2300      	movne	r3, #0
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	461a      	mov	r2, r3
 8004d12:	79fb      	ldrb	r3, [r7, #7]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d09f      	beq.n	8004c58 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3740      	adds	r7, #64	; 0x40
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
	...

08004d24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d28:	b0c0      	sub	sp, #256	; 0x100
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d40:	68d9      	ldr	r1, [r3, #12]
 8004d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	ea40 0301 	orr.w	r3, r0, r1
 8004d4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	431a      	orrs	r2, r3
 8004d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d7c:	f021 010c 	bic.w	r1, r1, #12
 8004d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d8a:	430b      	orrs	r3, r1
 8004d8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9e:	6999      	ldr	r1, [r3, #24]
 8004da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	ea40 0301 	orr.w	r3, r0, r1
 8004daa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	4b8f      	ldr	r3, [pc, #572]	; (8004ff0 <UART_SetConfig+0x2cc>)
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d005      	beq.n	8004dc4 <UART_SetConfig+0xa0>
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	4b8d      	ldr	r3, [pc, #564]	; (8004ff4 <UART_SetConfig+0x2d0>)
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d104      	bne.n	8004dce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004dc4:	f7fe fc52 	bl	800366c <HAL_RCC_GetPCLK2Freq>
 8004dc8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004dcc:	e003      	b.n	8004dd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dce:	f7fe fc39 	bl	8003644 <HAL_RCC_GetPCLK1Freq>
 8004dd2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004de0:	f040 810c 	bne.w	8004ffc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004de8:	2200      	movs	r2, #0
 8004dea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004dee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004df2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004df6:	4622      	mov	r2, r4
 8004df8:	462b      	mov	r3, r5
 8004dfa:	1891      	adds	r1, r2, r2
 8004dfc:	65b9      	str	r1, [r7, #88]	; 0x58
 8004dfe:	415b      	adcs	r3, r3
 8004e00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e06:	4621      	mov	r1, r4
 8004e08:	eb12 0801 	adds.w	r8, r2, r1
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	eb43 0901 	adc.w	r9, r3, r1
 8004e12:	f04f 0200 	mov.w	r2, #0
 8004e16:	f04f 0300 	mov.w	r3, #0
 8004e1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e26:	4690      	mov	r8, r2
 8004e28:	4699      	mov	r9, r3
 8004e2a:	4623      	mov	r3, r4
 8004e2c:	eb18 0303 	adds.w	r3, r8, r3
 8004e30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e34:	462b      	mov	r3, r5
 8004e36:	eb49 0303 	adc.w	r3, r9, r3
 8004e3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e52:	460b      	mov	r3, r1
 8004e54:	18db      	adds	r3, r3, r3
 8004e56:	653b      	str	r3, [r7, #80]	; 0x50
 8004e58:	4613      	mov	r3, r2
 8004e5a:	eb42 0303 	adc.w	r3, r2, r3
 8004e5e:	657b      	str	r3, [r7, #84]	; 0x54
 8004e60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e68:	f7fb fe88 	bl	8000b7c <__aeabi_uldivmod>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4b61      	ldr	r3, [pc, #388]	; (8004ff8 <UART_SetConfig+0x2d4>)
 8004e72:	fba3 2302 	umull	r2, r3, r3, r2
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	011c      	lsls	r4, r3, #4
 8004e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e84:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e8c:	4642      	mov	r2, r8
 8004e8e:	464b      	mov	r3, r9
 8004e90:	1891      	adds	r1, r2, r2
 8004e92:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e94:	415b      	adcs	r3, r3
 8004e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e9c:	4641      	mov	r1, r8
 8004e9e:	eb12 0a01 	adds.w	sl, r2, r1
 8004ea2:	4649      	mov	r1, r9
 8004ea4:	eb43 0b01 	adc.w	fp, r3, r1
 8004ea8:	f04f 0200 	mov.w	r2, #0
 8004eac:	f04f 0300 	mov.w	r3, #0
 8004eb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004eb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004eb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ebc:	4692      	mov	sl, r2
 8004ebe:	469b      	mov	fp, r3
 8004ec0:	4643      	mov	r3, r8
 8004ec2:	eb1a 0303 	adds.w	r3, sl, r3
 8004ec6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004eca:	464b      	mov	r3, r9
 8004ecc:	eb4b 0303 	adc.w	r3, fp, r3
 8004ed0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ee0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ee4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	18db      	adds	r3, r3, r3
 8004eec:	643b      	str	r3, [r7, #64]	; 0x40
 8004eee:	4613      	mov	r3, r2
 8004ef0:	eb42 0303 	adc.w	r3, r2, r3
 8004ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ef6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004efa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004efe:	f7fb fe3d 	bl	8000b7c <__aeabi_uldivmod>
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	4611      	mov	r1, r2
 8004f08:	4b3b      	ldr	r3, [pc, #236]	; (8004ff8 <UART_SetConfig+0x2d4>)
 8004f0a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	2264      	movs	r2, #100	; 0x64
 8004f12:	fb02 f303 	mul.w	r3, r2, r3
 8004f16:	1acb      	subs	r3, r1, r3
 8004f18:	00db      	lsls	r3, r3, #3
 8004f1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f1e:	4b36      	ldr	r3, [pc, #216]	; (8004ff8 <UART_SetConfig+0x2d4>)
 8004f20:	fba3 2302 	umull	r2, r3, r3, r2
 8004f24:	095b      	lsrs	r3, r3, #5
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f2c:	441c      	add	r4, r3
 8004f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f32:	2200      	movs	r2, #0
 8004f34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004f40:	4642      	mov	r2, r8
 8004f42:	464b      	mov	r3, r9
 8004f44:	1891      	adds	r1, r2, r2
 8004f46:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f48:	415b      	adcs	r3, r3
 8004f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f50:	4641      	mov	r1, r8
 8004f52:	1851      	adds	r1, r2, r1
 8004f54:	6339      	str	r1, [r7, #48]	; 0x30
 8004f56:	4649      	mov	r1, r9
 8004f58:	414b      	adcs	r3, r1
 8004f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f68:	4659      	mov	r1, fp
 8004f6a:	00cb      	lsls	r3, r1, #3
 8004f6c:	4651      	mov	r1, sl
 8004f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f72:	4651      	mov	r1, sl
 8004f74:	00ca      	lsls	r2, r1, #3
 8004f76:	4610      	mov	r0, r2
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	4642      	mov	r2, r8
 8004f7e:	189b      	adds	r3, r3, r2
 8004f80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f84:	464b      	mov	r3, r9
 8004f86:	460a      	mov	r2, r1
 8004f88:	eb42 0303 	adc.w	r3, r2, r3
 8004f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004fa0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	18db      	adds	r3, r3, r3
 8004fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004faa:	4613      	mov	r3, r2
 8004fac:	eb42 0303 	adc.w	r3, r2, r3
 8004fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004fba:	f7fb fddf 	bl	8000b7c <__aeabi_uldivmod>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4b0d      	ldr	r3, [pc, #52]	; (8004ff8 <UART_SetConfig+0x2d4>)
 8004fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fc8:	095b      	lsrs	r3, r3, #5
 8004fca:	2164      	movs	r1, #100	; 0x64
 8004fcc:	fb01 f303 	mul.w	r3, r1, r3
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	3332      	adds	r3, #50	; 0x32
 8004fd6:	4a08      	ldr	r2, [pc, #32]	; (8004ff8 <UART_SetConfig+0x2d4>)
 8004fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fdc:	095b      	lsrs	r3, r3, #5
 8004fde:	f003 0207 	and.w	r2, r3, #7
 8004fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4422      	add	r2, r4
 8004fea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fec:	e105      	b.n	80051fa <UART_SetConfig+0x4d6>
 8004fee:	bf00      	nop
 8004ff0:	40011000 	.word	0x40011000
 8004ff4:	40011400 	.word	0x40011400
 8004ff8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005000:	2200      	movs	r2, #0
 8005002:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005006:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800500a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800500e:	4642      	mov	r2, r8
 8005010:	464b      	mov	r3, r9
 8005012:	1891      	adds	r1, r2, r2
 8005014:	6239      	str	r1, [r7, #32]
 8005016:	415b      	adcs	r3, r3
 8005018:	627b      	str	r3, [r7, #36]	; 0x24
 800501a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800501e:	4641      	mov	r1, r8
 8005020:	1854      	adds	r4, r2, r1
 8005022:	4649      	mov	r1, r9
 8005024:	eb43 0501 	adc.w	r5, r3, r1
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	f04f 0300 	mov.w	r3, #0
 8005030:	00eb      	lsls	r3, r5, #3
 8005032:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005036:	00e2      	lsls	r2, r4, #3
 8005038:	4614      	mov	r4, r2
 800503a:	461d      	mov	r5, r3
 800503c:	4643      	mov	r3, r8
 800503e:	18e3      	adds	r3, r4, r3
 8005040:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005044:	464b      	mov	r3, r9
 8005046:	eb45 0303 	adc.w	r3, r5, r3
 800504a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800504e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800505a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800505e:	f04f 0200 	mov.w	r2, #0
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800506a:	4629      	mov	r1, r5
 800506c:	008b      	lsls	r3, r1, #2
 800506e:	4621      	mov	r1, r4
 8005070:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005074:	4621      	mov	r1, r4
 8005076:	008a      	lsls	r2, r1, #2
 8005078:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800507c:	f7fb fd7e 	bl	8000b7c <__aeabi_uldivmod>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	4b60      	ldr	r3, [pc, #384]	; (8005208 <UART_SetConfig+0x4e4>)
 8005086:	fba3 2302 	umull	r2, r3, r3, r2
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	011c      	lsls	r4, r3, #4
 800508e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005092:	2200      	movs	r2, #0
 8005094:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005098:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800509c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80050a0:	4642      	mov	r2, r8
 80050a2:	464b      	mov	r3, r9
 80050a4:	1891      	adds	r1, r2, r2
 80050a6:	61b9      	str	r1, [r7, #24]
 80050a8:	415b      	adcs	r3, r3
 80050aa:	61fb      	str	r3, [r7, #28]
 80050ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050b0:	4641      	mov	r1, r8
 80050b2:	1851      	adds	r1, r2, r1
 80050b4:	6139      	str	r1, [r7, #16]
 80050b6:	4649      	mov	r1, r9
 80050b8:	414b      	adcs	r3, r1
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	f04f 0300 	mov.w	r3, #0
 80050c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050c8:	4659      	mov	r1, fp
 80050ca:	00cb      	lsls	r3, r1, #3
 80050cc:	4651      	mov	r1, sl
 80050ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050d2:	4651      	mov	r1, sl
 80050d4:	00ca      	lsls	r2, r1, #3
 80050d6:	4610      	mov	r0, r2
 80050d8:	4619      	mov	r1, r3
 80050da:	4603      	mov	r3, r0
 80050dc:	4642      	mov	r2, r8
 80050de:	189b      	adds	r3, r3, r2
 80050e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050e4:	464b      	mov	r3, r9
 80050e6:	460a      	mov	r2, r1
 80050e8:	eb42 0303 	adc.w	r3, r2, r3
 80050ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80050fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005108:	4649      	mov	r1, r9
 800510a:	008b      	lsls	r3, r1, #2
 800510c:	4641      	mov	r1, r8
 800510e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005112:	4641      	mov	r1, r8
 8005114:	008a      	lsls	r2, r1, #2
 8005116:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800511a:	f7fb fd2f 	bl	8000b7c <__aeabi_uldivmod>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	4b39      	ldr	r3, [pc, #228]	; (8005208 <UART_SetConfig+0x4e4>)
 8005124:	fba3 1302 	umull	r1, r3, r3, r2
 8005128:	095b      	lsrs	r3, r3, #5
 800512a:	2164      	movs	r1, #100	; 0x64
 800512c:	fb01 f303 	mul.w	r3, r1, r3
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	3332      	adds	r3, #50	; 0x32
 8005136:	4a34      	ldr	r2, [pc, #208]	; (8005208 <UART_SetConfig+0x4e4>)
 8005138:	fba2 2303 	umull	r2, r3, r2, r3
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005142:	441c      	add	r4, r3
 8005144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005148:	2200      	movs	r2, #0
 800514a:	673b      	str	r3, [r7, #112]	; 0x70
 800514c:	677a      	str	r2, [r7, #116]	; 0x74
 800514e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005152:	4642      	mov	r2, r8
 8005154:	464b      	mov	r3, r9
 8005156:	1891      	adds	r1, r2, r2
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	415b      	adcs	r3, r3
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005162:	4641      	mov	r1, r8
 8005164:	1851      	adds	r1, r2, r1
 8005166:	6039      	str	r1, [r7, #0]
 8005168:	4649      	mov	r1, r9
 800516a:	414b      	adcs	r3, r1
 800516c:	607b      	str	r3, [r7, #4]
 800516e:	f04f 0200 	mov.w	r2, #0
 8005172:	f04f 0300 	mov.w	r3, #0
 8005176:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800517a:	4659      	mov	r1, fp
 800517c:	00cb      	lsls	r3, r1, #3
 800517e:	4651      	mov	r1, sl
 8005180:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005184:	4651      	mov	r1, sl
 8005186:	00ca      	lsls	r2, r1, #3
 8005188:	4610      	mov	r0, r2
 800518a:	4619      	mov	r1, r3
 800518c:	4603      	mov	r3, r0
 800518e:	4642      	mov	r2, r8
 8005190:	189b      	adds	r3, r3, r2
 8005192:	66bb      	str	r3, [r7, #104]	; 0x68
 8005194:	464b      	mov	r3, r9
 8005196:	460a      	mov	r2, r1
 8005198:	eb42 0303 	adc.w	r3, r2, r3
 800519c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800519e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	663b      	str	r3, [r7, #96]	; 0x60
 80051a8:	667a      	str	r2, [r7, #100]	; 0x64
 80051aa:	f04f 0200 	mov.w	r2, #0
 80051ae:	f04f 0300 	mov.w	r3, #0
 80051b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80051b6:	4649      	mov	r1, r9
 80051b8:	008b      	lsls	r3, r1, #2
 80051ba:	4641      	mov	r1, r8
 80051bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051c0:	4641      	mov	r1, r8
 80051c2:	008a      	lsls	r2, r1, #2
 80051c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80051c8:	f7fb fcd8 	bl	8000b7c <__aeabi_uldivmod>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4b0d      	ldr	r3, [pc, #52]	; (8005208 <UART_SetConfig+0x4e4>)
 80051d2:	fba3 1302 	umull	r1, r3, r3, r2
 80051d6:	095b      	lsrs	r3, r3, #5
 80051d8:	2164      	movs	r1, #100	; 0x64
 80051da:	fb01 f303 	mul.w	r3, r1, r3
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	011b      	lsls	r3, r3, #4
 80051e2:	3332      	adds	r3, #50	; 0x32
 80051e4:	4a08      	ldr	r2, [pc, #32]	; (8005208 <UART_SetConfig+0x4e4>)
 80051e6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	f003 020f 	and.w	r2, r3, #15
 80051f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4422      	add	r2, r4
 80051f8:	609a      	str	r2, [r3, #8]
}
 80051fa:	bf00      	nop
 80051fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005200:	46bd      	mov	sp, r7
 8005202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005206:	bf00      	nop
 8005208:	51eb851f 	.word	0x51eb851f

0800520c <__errno>:
 800520c:	4b01      	ldr	r3, [pc, #4]	; (8005214 <__errno+0x8>)
 800520e:	6818      	ldr	r0, [r3, #0]
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	20000020 	.word	0x20000020

08005218 <__libc_init_array>:
 8005218:	b570      	push	{r4, r5, r6, lr}
 800521a:	4d0d      	ldr	r5, [pc, #52]	; (8005250 <__libc_init_array+0x38>)
 800521c:	4c0d      	ldr	r4, [pc, #52]	; (8005254 <__libc_init_array+0x3c>)
 800521e:	1b64      	subs	r4, r4, r5
 8005220:	10a4      	asrs	r4, r4, #2
 8005222:	2600      	movs	r6, #0
 8005224:	42a6      	cmp	r6, r4
 8005226:	d109      	bne.n	800523c <__libc_init_array+0x24>
 8005228:	4d0b      	ldr	r5, [pc, #44]	; (8005258 <__libc_init_array+0x40>)
 800522a:	4c0c      	ldr	r4, [pc, #48]	; (800525c <__libc_init_array+0x44>)
 800522c:	f000 fcd4 	bl	8005bd8 <_init>
 8005230:	1b64      	subs	r4, r4, r5
 8005232:	10a4      	asrs	r4, r4, #2
 8005234:	2600      	movs	r6, #0
 8005236:	42a6      	cmp	r6, r4
 8005238:	d105      	bne.n	8005246 <__libc_init_array+0x2e>
 800523a:	bd70      	pop	{r4, r5, r6, pc}
 800523c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005240:	4798      	blx	r3
 8005242:	3601      	adds	r6, #1
 8005244:	e7ee      	b.n	8005224 <__libc_init_array+0xc>
 8005246:	f855 3b04 	ldr.w	r3, [r5], #4
 800524a:	4798      	blx	r3
 800524c:	3601      	adds	r6, #1
 800524e:	e7f2      	b.n	8005236 <__libc_init_array+0x1e>
 8005250:	08005c74 	.word	0x08005c74
 8005254:	08005c74 	.word	0x08005c74
 8005258:	08005c74 	.word	0x08005c74
 800525c:	08005c78 	.word	0x08005c78

08005260 <memset>:
 8005260:	4402      	add	r2, r0
 8005262:	4603      	mov	r3, r0
 8005264:	4293      	cmp	r3, r2
 8005266:	d100      	bne.n	800526a <memset+0xa>
 8005268:	4770      	bx	lr
 800526a:	f803 1b01 	strb.w	r1, [r3], #1
 800526e:	e7f9      	b.n	8005264 <memset+0x4>

08005270 <sniprintf>:
 8005270:	b40c      	push	{r2, r3}
 8005272:	b530      	push	{r4, r5, lr}
 8005274:	4b17      	ldr	r3, [pc, #92]	; (80052d4 <sniprintf+0x64>)
 8005276:	1e0c      	subs	r4, r1, #0
 8005278:	681d      	ldr	r5, [r3, #0]
 800527a:	b09d      	sub	sp, #116	; 0x74
 800527c:	da08      	bge.n	8005290 <sniprintf+0x20>
 800527e:	238b      	movs	r3, #139	; 0x8b
 8005280:	602b      	str	r3, [r5, #0]
 8005282:	f04f 30ff 	mov.w	r0, #4294967295
 8005286:	b01d      	add	sp, #116	; 0x74
 8005288:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800528c:	b002      	add	sp, #8
 800528e:	4770      	bx	lr
 8005290:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005294:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005298:	bf14      	ite	ne
 800529a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800529e:	4623      	moveq	r3, r4
 80052a0:	9304      	str	r3, [sp, #16]
 80052a2:	9307      	str	r3, [sp, #28]
 80052a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052a8:	9002      	str	r0, [sp, #8]
 80052aa:	9006      	str	r0, [sp, #24]
 80052ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80052b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80052b2:	ab21      	add	r3, sp, #132	; 0x84
 80052b4:	a902      	add	r1, sp, #8
 80052b6:	4628      	mov	r0, r5
 80052b8:	9301      	str	r3, [sp, #4]
 80052ba:	f000 f869 	bl	8005390 <_svfiprintf_r>
 80052be:	1c43      	adds	r3, r0, #1
 80052c0:	bfbc      	itt	lt
 80052c2:	238b      	movlt	r3, #139	; 0x8b
 80052c4:	602b      	strlt	r3, [r5, #0]
 80052c6:	2c00      	cmp	r4, #0
 80052c8:	d0dd      	beq.n	8005286 <sniprintf+0x16>
 80052ca:	9b02      	ldr	r3, [sp, #8]
 80052cc:	2200      	movs	r2, #0
 80052ce:	701a      	strb	r2, [r3, #0]
 80052d0:	e7d9      	b.n	8005286 <sniprintf+0x16>
 80052d2:	bf00      	nop
 80052d4:	20000020 	.word	0x20000020

080052d8 <__ssputs_r>:
 80052d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052dc:	688e      	ldr	r6, [r1, #8]
 80052de:	429e      	cmp	r6, r3
 80052e0:	4682      	mov	sl, r0
 80052e2:	460c      	mov	r4, r1
 80052e4:	4690      	mov	r8, r2
 80052e6:	461f      	mov	r7, r3
 80052e8:	d838      	bhi.n	800535c <__ssputs_r+0x84>
 80052ea:	898a      	ldrh	r2, [r1, #12]
 80052ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80052f0:	d032      	beq.n	8005358 <__ssputs_r+0x80>
 80052f2:	6825      	ldr	r5, [r4, #0]
 80052f4:	6909      	ldr	r1, [r1, #16]
 80052f6:	eba5 0901 	sub.w	r9, r5, r1
 80052fa:	6965      	ldr	r5, [r4, #20]
 80052fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005300:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005304:	3301      	adds	r3, #1
 8005306:	444b      	add	r3, r9
 8005308:	106d      	asrs	r5, r5, #1
 800530a:	429d      	cmp	r5, r3
 800530c:	bf38      	it	cc
 800530e:	461d      	movcc	r5, r3
 8005310:	0553      	lsls	r3, r2, #21
 8005312:	d531      	bpl.n	8005378 <__ssputs_r+0xa0>
 8005314:	4629      	mov	r1, r5
 8005316:	f000 fb63 	bl	80059e0 <_malloc_r>
 800531a:	4606      	mov	r6, r0
 800531c:	b950      	cbnz	r0, 8005334 <__ssputs_r+0x5c>
 800531e:	230c      	movs	r3, #12
 8005320:	f8ca 3000 	str.w	r3, [sl]
 8005324:	89a3      	ldrh	r3, [r4, #12]
 8005326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800532a:	81a3      	strh	r3, [r4, #12]
 800532c:	f04f 30ff 	mov.w	r0, #4294967295
 8005330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005334:	6921      	ldr	r1, [r4, #16]
 8005336:	464a      	mov	r2, r9
 8005338:	f000 fabe 	bl	80058b8 <memcpy>
 800533c:	89a3      	ldrh	r3, [r4, #12]
 800533e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005346:	81a3      	strh	r3, [r4, #12]
 8005348:	6126      	str	r6, [r4, #16]
 800534a:	6165      	str	r5, [r4, #20]
 800534c:	444e      	add	r6, r9
 800534e:	eba5 0509 	sub.w	r5, r5, r9
 8005352:	6026      	str	r6, [r4, #0]
 8005354:	60a5      	str	r5, [r4, #8]
 8005356:	463e      	mov	r6, r7
 8005358:	42be      	cmp	r6, r7
 800535a:	d900      	bls.n	800535e <__ssputs_r+0x86>
 800535c:	463e      	mov	r6, r7
 800535e:	6820      	ldr	r0, [r4, #0]
 8005360:	4632      	mov	r2, r6
 8005362:	4641      	mov	r1, r8
 8005364:	f000 fab6 	bl	80058d4 <memmove>
 8005368:	68a3      	ldr	r3, [r4, #8]
 800536a:	1b9b      	subs	r3, r3, r6
 800536c:	60a3      	str	r3, [r4, #8]
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	4433      	add	r3, r6
 8005372:	6023      	str	r3, [r4, #0]
 8005374:	2000      	movs	r0, #0
 8005376:	e7db      	b.n	8005330 <__ssputs_r+0x58>
 8005378:	462a      	mov	r2, r5
 800537a:	f000 fba5 	bl	8005ac8 <_realloc_r>
 800537e:	4606      	mov	r6, r0
 8005380:	2800      	cmp	r0, #0
 8005382:	d1e1      	bne.n	8005348 <__ssputs_r+0x70>
 8005384:	6921      	ldr	r1, [r4, #16]
 8005386:	4650      	mov	r0, sl
 8005388:	f000 fabe 	bl	8005908 <_free_r>
 800538c:	e7c7      	b.n	800531e <__ssputs_r+0x46>
	...

08005390 <_svfiprintf_r>:
 8005390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005394:	4698      	mov	r8, r3
 8005396:	898b      	ldrh	r3, [r1, #12]
 8005398:	061b      	lsls	r3, r3, #24
 800539a:	b09d      	sub	sp, #116	; 0x74
 800539c:	4607      	mov	r7, r0
 800539e:	460d      	mov	r5, r1
 80053a0:	4614      	mov	r4, r2
 80053a2:	d50e      	bpl.n	80053c2 <_svfiprintf_r+0x32>
 80053a4:	690b      	ldr	r3, [r1, #16]
 80053a6:	b963      	cbnz	r3, 80053c2 <_svfiprintf_r+0x32>
 80053a8:	2140      	movs	r1, #64	; 0x40
 80053aa:	f000 fb19 	bl	80059e0 <_malloc_r>
 80053ae:	6028      	str	r0, [r5, #0]
 80053b0:	6128      	str	r0, [r5, #16]
 80053b2:	b920      	cbnz	r0, 80053be <_svfiprintf_r+0x2e>
 80053b4:	230c      	movs	r3, #12
 80053b6:	603b      	str	r3, [r7, #0]
 80053b8:	f04f 30ff 	mov.w	r0, #4294967295
 80053bc:	e0d1      	b.n	8005562 <_svfiprintf_r+0x1d2>
 80053be:	2340      	movs	r3, #64	; 0x40
 80053c0:	616b      	str	r3, [r5, #20]
 80053c2:	2300      	movs	r3, #0
 80053c4:	9309      	str	r3, [sp, #36]	; 0x24
 80053c6:	2320      	movs	r3, #32
 80053c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80053d0:	2330      	movs	r3, #48	; 0x30
 80053d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800557c <_svfiprintf_r+0x1ec>
 80053d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053da:	f04f 0901 	mov.w	r9, #1
 80053de:	4623      	mov	r3, r4
 80053e0:	469a      	mov	sl, r3
 80053e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053e6:	b10a      	cbz	r2, 80053ec <_svfiprintf_r+0x5c>
 80053e8:	2a25      	cmp	r2, #37	; 0x25
 80053ea:	d1f9      	bne.n	80053e0 <_svfiprintf_r+0x50>
 80053ec:	ebba 0b04 	subs.w	fp, sl, r4
 80053f0:	d00b      	beq.n	800540a <_svfiprintf_r+0x7a>
 80053f2:	465b      	mov	r3, fp
 80053f4:	4622      	mov	r2, r4
 80053f6:	4629      	mov	r1, r5
 80053f8:	4638      	mov	r0, r7
 80053fa:	f7ff ff6d 	bl	80052d8 <__ssputs_r>
 80053fe:	3001      	adds	r0, #1
 8005400:	f000 80aa 	beq.w	8005558 <_svfiprintf_r+0x1c8>
 8005404:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005406:	445a      	add	r2, fp
 8005408:	9209      	str	r2, [sp, #36]	; 0x24
 800540a:	f89a 3000 	ldrb.w	r3, [sl]
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 80a2 	beq.w	8005558 <_svfiprintf_r+0x1c8>
 8005414:	2300      	movs	r3, #0
 8005416:	f04f 32ff 	mov.w	r2, #4294967295
 800541a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800541e:	f10a 0a01 	add.w	sl, sl, #1
 8005422:	9304      	str	r3, [sp, #16]
 8005424:	9307      	str	r3, [sp, #28]
 8005426:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800542a:	931a      	str	r3, [sp, #104]	; 0x68
 800542c:	4654      	mov	r4, sl
 800542e:	2205      	movs	r2, #5
 8005430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005434:	4851      	ldr	r0, [pc, #324]	; (800557c <_svfiprintf_r+0x1ec>)
 8005436:	f7fa fedb 	bl	80001f0 <memchr>
 800543a:	9a04      	ldr	r2, [sp, #16]
 800543c:	b9d8      	cbnz	r0, 8005476 <_svfiprintf_r+0xe6>
 800543e:	06d0      	lsls	r0, r2, #27
 8005440:	bf44      	itt	mi
 8005442:	2320      	movmi	r3, #32
 8005444:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005448:	0711      	lsls	r1, r2, #28
 800544a:	bf44      	itt	mi
 800544c:	232b      	movmi	r3, #43	; 0x2b
 800544e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005452:	f89a 3000 	ldrb.w	r3, [sl]
 8005456:	2b2a      	cmp	r3, #42	; 0x2a
 8005458:	d015      	beq.n	8005486 <_svfiprintf_r+0xf6>
 800545a:	9a07      	ldr	r2, [sp, #28]
 800545c:	4654      	mov	r4, sl
 800545e:	2000      	movs	r0, #0
 8005460:	f04f 0c0a 	mov.w	ip, #10
 8005464:	4621      	mov	r1, r4
 8005466:	f811 3b01 	ldrb.w	r3, [r1], #1
 800546a:	3b30      	subs	r3, #48	; 0x30
 800546c:	2b09      	cmp	r3, #9
 800546e:	d94e      	bls.n	800550e <_svfiprintf_r+0x17e>
 8005470:	b1b0      	cbz	r0, 80054a0 <_svfiprintf_r+0x110>
 8005472:	9207      	str	r2, [sp, #28]
 8005474:	e014      	b.n	80054a0 <_svfiprintf_r+0x110>
 8005476:	eba0 0308 	sub.w	r3, r0, r8
 800547a:	fa09 f303 	lsl.w	r3, r9, r3
 800547e:	4313      	orrs	r3, r2
 8005480:	9304      	str	r3, [sp, #16]
 8005482:	46a2      	mov	sl, r4
 8005484:	e7d2      	b.n	800542c <_svfiprintf_r+0x9c>
 8005486:	9b03      	ldr	r3, [sp, #12]
 8005488:	1d19      	adds	r1, r3, #4
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	9103      	str	r1, [sp, #12]
 800548e:	2b00      	cmp	r3, #0
 8005490:	bfbb      	ittet	lt
 8005492:	425b      	neglt	r3, r3
 8005494:	f042 0202 	orrlt.w	r2, r2, #2
 8005498:	9307      	strge	r3, [sp, #28]
 800549a:	9307      	strlt	r3, [sp, #28]
 800549c:	bfb8      	it	lt
 800549e:	9204      	strlt	r2, [sp, #16]
 80054a0:	7823      	ldrb	r3, [r4, #0]
 80054a2:	2b2e      	cmp	r3, #46	; 0x2e
 80054a4:	d10c      	bne.n	80054c0 <_svfiprintf_r+0x130>
 80054a6:	7863      	ldrb	r3, [r4, #1]
 80054a8:	2b2a      	cmp	r3, #42	; 0x2a
 80054aa:	d135      	bne.n	8005518 <_svfiprintf_r+0x188>
 80054ac:	9b03      	ldr	r3, [sp, #12]
 80054ae:	1d1a      	adds	r2, r3, #4
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	9203      	str	r2, [sp, #12]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	bfb8      	it	lt
 80054b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80054bc:	3402      	adds	r4, #2
 80054be:	9305      	str	r3, [sp, #20]
 80054c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800558c <_svfiprintf_r+0x1fc>
 80054c4:	7821      	ldrb	r1, [r4, #0]
 80054c6:	2203      	movs	r2, #3
 80054c8:	4650      	mov	r0, sl
 80054ca:	f7fa fe91 	bl	80001f0 <memchr>
 80054ce:	b140      	cbz	r0, 80054e2 <_svfiprintf_r+0x152>
 80054d0:	2340      	movs	r3, #64	; 0x40
 80054d2:	eba0 000a 	sub.w	r0, r0, sl
 80054d6:	fa03 f000 	lsl.w	r0, r3, r0
 80054da:	9b04      	ldr	r3, [sp, #16]
 80054dc:	4303      	orrs	r3, r0
 80054de:	3401      	adds	r4, #1
 80054e0:	9304      	str	r3, [sp, #16]
 80054e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054e6:	4826      	ldr	r0, [pc, #152]	; (8005580 <_svfiprintf_r+0x1f0>)
 80054e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054ec:	2206      	movs	r2, #6
 80054ee:	f7fa fe7f 	bl	80001f0 <memchr>
 80054f2:	2800      	cmp	r0, #0
 80054f4:	d038      	beq.n	8005568 <_svfiprintf_r+0x1d8>
 80054f6:	4b23      	ldr	r3, [pc, #140]	; (8005584 <_svfiprintf_r+0x1f4>)
 80054f8:	bb1b      	cbnz	r3, 8005542 <_svfiprintf_r+0x1b2>
 80054fa:	9b03      	ldr	r3, [sp, #12]
 80054fc:	3307      	adds	r3, #7
 80054fe:	f023 0307 	bic.w	r3, r3, #7
 8005502:	3308      	adds	r3, #8
 8005504:	9303      	str	r3, [sp, #12]
 8005506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005508:	4433      	add	r3, r6
 800550a:	9309      	str	r3, [sp, #36]	; 0x24
 800550c:	e767      	b.n	80053de <_svfiprintf_r+0x4e>
 800550e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005512:	460c      	mov	r4, r1
 8005514:	2001      	movs	r0, #1
 8005516:	e7a5      	b.n	8005464 <_svfiprintf_r+0xd4>
 8005518:	2300      	movs	r3, #0
 800551a:	3401      	adds	r4, #1
 800551c:	9305      	str	r3, [sp, #20]
 800551e:	4619      	mov	r1, r3
 8005520:	f04f 0c0a 	mov.w	ip, #10
 8005524:	4620      	mov	r0, r4
 8005526:	f810 2b01 	ldrb.w	r2, [r0], #1
 800552a:	3a30      	subs	r2, #48	; 0x30
 800552c:	2a09      	cmp	r2, #9
 800552e:	d903      	bls.n	8005538 <_svfiprintf_r+0x1a8>
 8005530:	2b00      	cmp	r3, #0
 8005532:	d0c5      	beq.n	80054c0 <_svfiprintf_r+0x130>
 8005534:	9105      	str	r1, [sp, #20]
 8005536:	e7c3      	b.n	80054c0 <_svfiprintf_r+0x130>
 8005538:	fb0c 2101 	mla	r1, ip, r1, r2
 800553c:	4604      	mov	r4, r0
 800553e:	2301      	movs	r3, #1
 8005540:	e7f0      	b.n	8005524 <_svfiprintf_r+0x194>
 8005542:	ab03      	add	r3, sp, #12
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	462a      	mov	r2, r5
 8005548:	4b0f      	ldr	r3, [pc, #60]	; (8005588 <_svfiprintf_r+0x1f8>)
 800554a:	a904      	add	r1, sp, #16
 800554c:	4638      	mov	r0, r7
 800554e:	f3af 8000 	nop.w
 8005552:	1c42      	adds	r2, r0, #1
 8005554:	4606      	mov	r6, r0
 8005556:	d1d6      	bne.n	8005506 <_svfiprintf_r+0x176>
 8005558:	89ab      	ldrh	r3, [r5, #12]
 800555a:	065b      	lsls	r3, r3, #25
 800555c:	f53f af2c 	bmi.w	80053b8 <_svfiprintf_r+0x28>
 8005560:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005562:	b01d      	add	sp, #116	; 0x74
 8005564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005568:	ab03      	add	r3, sp, #12
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	462a      	mov	r2, r5
 800556e:	4b06      	ldr	r3, [pc, #24]	; (8005588 <_svfiprintf_r+0x1f8>)
 8005570:	a904      	add	r1, sp, #16
 8005572:	4638      	mov	r0, r7
 8005574:	f000 f87a 	bl	800566c <_printf_i>
 8005578:	e7eb      	b.n	8005552 <_svfiprintf_r+0x1c2>
 800557a:	bf00      	nop
 800557c:	08005c38 	.word	0x08005c38
 8005580:	08005c42 	.word	0x08005c42
 8005584:	00000000 	.word	0x00000000
 8005588:	080052d9 	.word	0x080052d9
 800558c:	08005c3e 	.word	0x08005c3e

08005590 <_printf_common>:
 8005590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005594:	4616      	mov	r6, r2
 8005596:	4699      	mov	r9, r3
 8005598:	688a      	ldr	r2, [r1, #8]
 800559a:	690b      	ldr	r3, [r1, #16]
 800559c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055a0:	4293      	cmp	r3, r2
 80055a2:	bfb8      	it	lt
 80055a4:	4613      	movlt	r3, r2
 80055a6:	6033      	str	r3, [r6, #0]
 80055a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055ac:	4607      	mov	r7, r0
 80055ae:	460c      	mov	r4, r1
 80055b0:	b10a      	cbz	r2, 80055b6 <_printf_common+0x26>
 80055b2:	3301      	adds	r3, #1
 80055b4:	6033      	str	r3, [r6, #0]
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	0699      	lsls	r1, r3, #26
 80055ba:	bf42      	ittt	mi
 80055bc:	6833      	ldrmi	r3, [r6, #0]
 80055be:	3302      	addmi	r3, #2
 80055c0:	6033      	strmi	r3, [r6, #0]
 80055c2:	6825      	ldr	r5, [r4, #0]
 80055c4:	f015 0506 	ands.w	r5, r5, #6
 80055c8:	d106      	bne.n	80055d8 <_printf_common+0x48>
 80055ca:	f104 0a19 	add.w	sl, r4, #25
 80055ce:	68e3      	ldr	r3, [r4, #12]
 80055d0:	6832      	ldr	r2, [r6, #0]
 80055d2:	1a9b      	subs	r3, r3, r2
 80055d4:	42ab      	cmp	r3, r5
 80055d6:	dc26      	bgt.n	8005626 <_printf_common+0x96>
 80055d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055dc:	1e13      	subs	r3, r2, #0
 80055de:	6822      	ldr	r2, [r4, #0]
 80055e0:	bf18      	it	ne
 80055e2:	2301      	movne	r3, #1
 80055e4:	0692      	lsls	r2, r2, #26
 80055e6:	d42b      	bmi.n	8005640 <_printf_common+0xb0>
 80055e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055ec:	4649      	mov	r1, r9
 80055ee:	4638      	mov	r0, r7
 80055f0:	47c0      	blx	r8
 80055f2:	3001      	adds	r0, #1
 80055f4:	d01e      	beq.n	8005634 <_printf_common+0xa4>
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	68e5      	ldr	r5, [r4, #12]
 80055fa:	6832      	ldr	r2, [r6, #0]
 80055fc:	f003 0306 	and.w	r3, r3, #6
 8005600:	2b04      	cmp	r3, #4
 8005602:	bf08      	it	eq
 8005604:	1aad      	subeq	r5, r5, r2
 8005606:	68a3      	ldr	r3, [r4, #8]
 8005608:	6922      	ldr	r2, [r4, #16]
 800560a:	bf0c      	ite	eq
 800560c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005610:	2500      	movne	r5, #0
 8005612:	4293      	cmp	r3, r2
 8005614:	bfc4      	itt	gt
 8005616:	1a9b      	subgt	r3, r3, r2
 8005618:	18ed      	addgt	r5, r5, r3
 800561a:	2600      	movs	r6, #0
 800561c:	341a      	adds	r4, #26
 800561e:	42b5      	cmp	r5, r6
 8005620:	d11a      	bne.n	8005658 <_printf_common+0xc8>
 8005622:	2000      	movs	r0, #0
 8005624:	e008      	b.n	8005638 <_printf_common+0xa8>
 8005626:	2301      	movs	r3, #1
 8005628:	4652      	mov	r2, sl
 800562a:	4649      	mov	r1, r9
 800562c:	4638      	mov	r0, r7
 800562e:	47c0      	blx	r8
 8005630:	3001      	adds	r0, #1
 8005632:	d103      	bne.n	800563c <_printf_common+0xac>
 8005634:	f04f 30ff 	mov.w	r0, #4294967295
 8005638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800563c:	3501      	adds	r5, #1
 800563e:	e7c6      	b.n	80055ce <_printf_common+0x3e>
 8005640:	18e1      	adds	r1, r4, r3
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	2030      	movs	r0, #48	; 0x30
 8005646:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800564a:	4422      	add	r2, r4
 800564c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005650:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005654:	3302      	adds	r3, #2
 8005656:	e7c7      	b.n	80055e8 <_printf_common+0x58>
 8005658:	2301      	movs	r3, #1
 800565a:	4622      	mov	r2, r4
 800565c:	4649      	mov	r1, r9
 800565e:	4638      	mov	r0, r7
 8005660:	47c0      	blx	r8
 8005662:	3001      	adds	r0, #1
 8005664:	d0e6      	beq.n	8005634 <_printf_common+0xa4>
 8005666:	3601      	adds	r6, #1
 8005668:	e7d9      	b.n	800561e <_printf_common+0x8e>
	...

0800566c <_printf_i>:
 800566c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005670:	7e0f      	ldrb	r7, [r1, #24]
 8005672:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005674:	2f78      	cmp	r7, #120	; 0x78
 8005676:	4691      	mov	r9, r2
 8005678:	4680      	mov	r8, r0
 800567a:	460c      	mov	r4, r1
 800567c:	469a      	mov	sl, r3
 800567e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005682:	d807      	bhi.n	8005694 <_printf_i+0x28>
 8005684:	2f62      	cmp	r7, #98	; 0x62
 8005686:	d80a      	bhi.n	800569e <_printf_i+0x32>
 8005688:	2f00      	cmp	r7, #0
 800568a:	f000 80d8 	beq.w	800583e <_printf_i+0x1d2>
 800568e:	2f58      	cmp	r7, #88	; 0x58
 8005690:	f000 80a3 	beq.w	80057da <_printf_i+0x16e>
 8005694:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005698:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800569c:	e03a      	b.n	8005714 <_printf_i+0xa8>
 800569e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056a2:	2b15      	cmp	r3, #21
 80056a4:	d8f6      	bhi.n	8005694 <_printf_i+0x28>
 80056a6:	a101      	add	r1, pc, #4	; (adr r1, 80056ac <_printf_i+0x40>)
 80056a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056ac:	08005705 	.word	0x08005705
 80056b0:	08005719 	.word	0x08005719
 80056b4:	08005695 	.word	0x08005695
 80056b8:	08005695 	.word	0x08005695
 80056bc:	08005695 	.word	0x08005695
 80056c0:	08005695 	.word	0x08005695
 80056c4:	08005719 	.word	0x08005719
 80056c8:	08005695 	.word	0x08005695
 80056cc:	08005695 	.word	0x08005695
 80056d0:	08005695 	.word	0x08005695
 80056d4:	08005695 	.word	0x08005695
 80056d8:	08005825 	.word	0x08005825
 80056dc:	08005749 	.word	0x08005749
 80056e0:	08005807 	.word	0x08005807
 80056e4:	08005695 	.word	0x08005695
 80056e8:	08005695 	.word	0x08005695
 80056ec:	08005847 	.word	0x08005847
 80056f0:	08005695 	.word	0x08005695
 80056f4:	08005749 	.word	0x08005749
 80056f8:	08005695 	.word	0x08005695
 80056fc:	08005695 	.word	0x08005695
 8005700:	0800580f 	.word	0x0800580f
 8005704:	682b      	ldr	r3, [r5, #0]
 8005706:	1d1a      	adds	r2, r3, #4
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	602a      	str	r2, [r5, #0]
 800570c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005710:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005714:	2301      	movs	r3, #1
 8005716:	e0a3      	b.n	8005860 <_printf_i+0x1f4>
 8005718:	6820      	ldr	r0, [r4, #0]
 800571a:	6829      	ldr	r1, [r5, #0]
 800571c:	0606      	lsls	r6, r0, #24
 800571e:	f101 0304 	add.w	r3, r1, #4
 8005722:	d50a      	bpl.n	800573a <_printf_i+0xce>
 8005724:	680e      	ldr	r6, [r1, #0]
 8005726:	602b      	str	r3, [r5, #0]
 8005728:	2e00      	cmp	r6, #0
 800572a:	da03      	bge.n	8005734 <_printf_i+0xc8>
 800572c:	232d      	movs	r3, #45	; 0x2d
 800572e:	4276      	negs	r6, r6
 8005730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005734:	485e      	ldr	r0, [pc, #376]	; (80058b0 <_printf_i+0x244>)
 8005736:	230a      	movs	r3, #10
 8005738:	e019      	b.n	800576e <_printf_i+0x102>
 800573a:	680e      	ldr	r6, [r1, #0]
 800573c:	602b      	str	r3, [r5, #0]
 800573e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005742:	bf18      	it	ne
 8005744:	b236      	sxthne	r6, r6
 8005746:	e7ef      	b.n	8005728 <_printf_i+0xbc>
 8005748:	682b      	ldr	r3, [r5, #0]
 800574a:	6820      	ldr	r0, [r4, #0]
 800574c:	1d19      	adds	r1, r3, #4
 800574e:	6029      	str	r1, [r5, #0]
 8005750:	0601      	lsls	r1, r0, #24
 8005752:	d501      	bpl.n	8005758 <_printf_i+0xec>
 8005754:	681e      	ldr	r6, [r3, #0]
 8005756:	e002      	b.n	800575e <_printf_i+0xf2>
 8005758:	0646      	lsls	r6, r0, #25
 800575a:	d5fb      	bpl.n	8005754 <_printf_i+0xe8>
 800575c:	881e      	ldrh	r6, [r3, #0]
 800575e:	4854      	ldr	r0, [pc, #336]	; (80058b0 <_printf_i+0x244>)
 8005760:	2f6f      	cmp	r7, #111	; 0x6f
 8005762:	bf0c      	ite	eq
 8005764:	2308      	moveq	r3, #8
 8005766:	230a      	movne	r3, #10
 8005768:	2100      	movs	r1, #0
 800576a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800576e:	6865      	ldr	r5, [r4, #4]
 8005770:	60a5      	str	r5, [r4, #8]
 8005772:	2d00      	cmp	r5, #0
 8005774:	bfa2      	ittt	ge
 8005776:	6821      	ldrge	r1, [r4, #0]
 8005778:	f021 0104 	bicge.w	r1, r1, #4
 800577c:	6021      	strge	r1, [r4, #0]
 800577e:	b90e      	cbnz	r6, 8005784 <_printf_i+0x118>
 8005780:	2d00      	cmp	r5, #0
 8005782:	d04d      	beq.n	8005820 <_printf_i+0x1b4>
 8005784:	4615      	mov	r5, r2
 8005786:	fbb6 f1f3 	udiv	r1, r6, r3
 800578a:	fb03 6711 	mls	r7, r3, r1, r6
 800578e:	5dc7      	ldrb	r7, [r0, r7]
 8005790:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005794:	4637      	mov	r7, r6
 8005796:	42bb      	cmp	r3, r7
 8005798:	460e      	mov	r6, r1
 800579a:	d9f4      	bls.n	8005786 <_printf_i+0x11a>
 800579c:	2b08      	cmp	r3, #8
 800579e:	d10b      	bne.n	80057b8 <_printf_i+0x14c>
 80057a0:	6823      	ldr	r3, [r4, #0]
 80057a2:	07de      	lsls	r6, r3, #31
 80057a4:	d508      	bpl.n	80057b8 <_printf_i+0x14c>
 80057a6:	6923      	ldr	r3, [r4, #16]
 80057a8:	6861      	ldr	r1, [r4, #4]
 80057aa:	4299      	cmp	r1, r3
 80057ac:	bfde      	ittt	le
 80057ae:	2330      	movle	r3, #48	; 0x30
 80057b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057b8:	1b52      	subs	r2, r2, r5
 80057ba:	6122      	str	r2, [r4, #16]
 80057bc:	f8cd a000 	str.w	sl, [sp]
 80057c0:	464b      	mov	r3, r9
 80057c2:	aa03      	add	r2, sp, #12
 80057c4:	4621      	mov	r1, r4
 80057c6:	4640      	mov	r0, r8
 80057c8:	f7ff fee2 	bl	8005590 <_printf_common>
 80057cc:	3001      	adds	r0, #1
 80057ce:	d14c      	bne.n	800586a <_printf_i+0x1fe>
 80057d0:	f04f 30ff 	mov.w	r0, #4294967295
 80057d4:	b004      	add	sp, #16
 80057d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057da:	4835      	ldr	r0, [pc, #212]	; (80058b0 <_printf_i+0x244>)
 80057dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80057e0:	6829      	ldr	r1, [r5, #0]
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80057e8:	6029      	str	r1, [r5, #0]
 80057ea:	061d      	lsls	r5, r3, #24
 80057ec:	d514      	bpl.n	8005818 <_printf_i+0x1ac>
 80057ee:	07df      	lsls	r7, r3, #31
 80057f0:	bf44      	itt	mi
 80057f2:	f043 0320 	orrmi.w	r3, r3, #32
 80057f6:	6023      	strmi	r3, [r4, #0]
 80057f8:	b91e      	cbnz	r6, 8005802 <_printf_i+0x196>
 80057fa:	6823      	ldr	r3, [r4, #0]
 80057fc:	f023 0320 	bic.w	r3, r3, #32
 8005800:	6023      	str	r3, [r4, #0]
 8005802:	2310      	movs	r3, #16
 8005804:	e7b0      	b.n	8005768 <_printf_i+0xfc>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	f043 0320 	orr.w	r3, r3, #32
 800580c:	6023      	str	r3, [r4, #0]
 800580e:	2378      	movs	r3, #120	; 0x78
 8005810:	4828      	ldr	r0, [pc, #160]	; (80058b4 <_printf_i+0x248>)
 8005812:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005816:	e7e3      	b.n	80057e0 <_printf_i+0x174>
 8005818:	0659      	lsls	r1, r3, #25
 800581a:	bf48      	it	mi
 800581c:	b2b6      	uxthmi	r6, r6
 800581e:	e7e6      	b.n	80057ee <_printf_i+0x182>
 8005820:	4615      	mov	r5, r2
 8005822:	e7bb      	b.n	800579c <_printf_i+0x130>
 8005824:	682b      	ldr	r3, [r5, #0]
 8005826:	6826      	ldr	r6, [r4, #0]
 8005828:	6961      	ldr	r1, [r4, #20]
 800582a:	1d18      	adds	r0, r3, #4
 800582c:	6028      	str	r0, [r5, #0]
 800582e:	0635      	lsls	r5, r6, #24
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	d501      	bpl.n	8005838 <_printf_i+0x1cc>
 8005834:	6019      	str	r1, [r3, #0]
 8005836:	e002      	b.n	800583e <_printf_i+0x1d2>
 8005838:	0670      	lsls	r0, r6, #25
 800583a:	d5fb      	bpl.n	8005834 <_printf_i+0x1c8>
 800583c:	8019      	strh	r1, [r3, #0]
 800583e:	2300      	movs	r3, #0
 8005840:	6123      	str	r3, [r4, #16]
 8005842:	4615      	mov	r5, r2
 8005844:	e7ba      	b.n	80057bc <_printf_i+0x150>
 8005846:	682b      	ldr	r3, [r5, #0]
 8005848:	1d1a      	adds	r2, r3, #4
 800584a:	602a      	str	r2, [r5, #0]
 800584c:	681d      	ldr	r5, [r3, #0]
 800584e:	6862      	ldr	r2, [r4, #4]
 8005850:	2100      	movs	r1, #0
 8005852:	4628      	mov	r0, r5
 8005854:	f7fa fccc 	bl	80001f0 <memchr>
 8005858:	b108      	cbz	r0, 800585e <_printf_i+0x1f2>
 800585a:	1b40      	subs	r0, r0, r5
 800585c:	6060      	str	r0, [r4, #4]
 800585e:	6863      	ldr	r3, [r4, #4]
 8005860:	6123      	str	r3, [r4, #16]
 8005862:	2300      	movs	r3, #0
 8005864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005868:	e7a8      	b.n	80057bc <_printf_i+0x150>
 800586a:	6923      	ldr	r3, [r4, #16]
 800586c:	462a      	mov	r2, r5
 800586e:	4649      	mov	r1, r9
 8005870:	4640      	mov	r0, r8
 8005872:	47d0      	blx	sl
 8005874:	3001      	adds	r0, #1
 8005876:	d0ab      	beq.n	80057d0 <_printf_i+0x164>
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	079b      	lsls	r3, r3, #30
 800587c:	d413      	bmi.n	80058a6 <_printf_i+0x23a>
 800587e:	68e0      	ldr	r0, [r4, #12]
 8005880:	9b03      	ldr	r3, [sp, #12]
 8005882:	4298      	cmp	r0, r3
 8005884:	bfb8      	it	lt
 8005886:	4618      	movlt	r0, r3
 8005888:	e7a4      	b.n	80057d4 <_printf_i+0x168>
 800588a:	2301      	movs	r3, #1
 800588c:	4632      	mov	r2, r6
 800588e:	4649      	mov	r1, r9
 8005890:	4640      	mov	r0, r8
 8005892:	47d0      	blx	sl
 8005894:	3001      	adds	r0, #1
 8005896:	d09b      	beq.n	80057d0 <_printf_i+0x164>
 8005898:	3501      	adds	r5, #1
 800589a:	68e3      	ldr	r3, [r4, #12]
 800589c:	9903      	ldr	r1, [sp, #12]
 800589e:	1a5b      	subs	r3, r3, r1
 80058a0:	42ab      	cmp	r3, r5
 80058a2:	dcf2      	bgt.n	800588a <_printf_i+0x21e>
 80058a4:	e7eb      	b.n	800587e <_printf_i+0x212>
 80058a6:	2500      	movs	r5, #0
 80058a8:	f104 0619 	add.w	r6, r4, #25
 80058ac:	e7f5      	b.n	800589a <_printf_i+0x22e>
 80058ae:	bf00      	nop
 80058b0:	08005c49 	.word	0x08005c49
 80058b4:	08005c5a 	.word	0x08005c5a

080058b8 <memcpy>:
 80058b8:	440a      	add	r2, r1
 80058ba:	4291      	cmp	r1, r2
 80058bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80058c0:	d100      	bne.n	80058c4 <memcpy+0xc>
 80058c2:	4770      	bx	lr
 80058c4:	b510      	push	{r4, lr}
 80058c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058ce:	4291      	cmp	r1, r2
 80058d0:	d1f9      	bne.n	80058c6 <memcpy+0xe>
 80058d2:	bd10      	pop	{r4, pc}

080058d4 <memmove>:
 80058d4:	4288      	cmp	r0, r1
 80058d6:	b510      	push	{r4, lr}
 80058d8:	eb01 0402 	add.w	r4, r1, r2
 80058dc:	d902      	bls.n	80058e4 <memmove+0x10>
 80058de:	4284      	cmp	r4, r0
 80058e0:	4623      	mov	r3, r4
 80058e2:	d807      	bhi.n	80058f4 <memmove+0x20>
 80058e4:	1e43      	subs	r3, r0, #1
 80058e6:	42a1      	cmp	r1, r4
 80058e8:	d008      	beq.n	80058fc <memmove+0x28>
 80058ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058f2:	e7f8      	b.n	80058e6 <memmove+0x12>
 80058f4:	4402      	add	r2, r0
 80058f6:	4601      	mov	r1, r0
 80058f8:	428a      	cmp	r2, r1
 80058fa:	d100      	bne.n	80058fe <memmove+0x2a>
 80058fc:	bd10      	pop	{r4, pc}
 80058fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005902:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005906:	e7f7      	b.n	80058f8 <memmove+0x24>

08005908 <_free_r>:
 8005908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800590a:	2900      	cmp	r1, #0
 800590c:	d044      	beq.n	8005998 <_free_r+0x90>
 800590e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005912:	9001      	str	r0, [sp, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	f1a1 0404 	sub.w	r4, r1, #4
 800591a:	bfb8      	it	lt
 800591c:	18e4      	addlt	r4, r4, r3
 800591e:	f000 f913 	bl	8005b48 <__malloc_lock>
 8005922:	4a1e      	ldr	r2, [pc, #120]	; (800599c <_free_r+0x94>)
 8005924:	9801      	ldr	r0, [sp, #4]
 8005926:	6813      	ldr	r3, [r2, #0]
 8005928:	b933      	cbnz	r3, 8005938 <_free_r+0x30>
 800592a:	6063      	str	r3, [r4, #4]
 800592c:	6014      	str	r4, [r2, #0]
 800592e:	b003      	add	sp, #12
 8005930:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005934:	f000 b90e 	b.w	8005b54 <__malloc_unlock>
 8005938:	42a3      	cmp	r3, r4
 800593a:	d908      	bls.n	800594e <_free_r+0x46>
 800593c:	6825      	ldr	r5, [r4, #0]
 800593e:	1961      	adds	r1, r4, r5
 8005940:	428b      	cmp	r3, r1
 8005942:	bf01      	itttt	eq
 8005944:	6819      	ldreq	r1, [r3, #0]
 8005946:	685b      	ldreq	r3, [r3, #4]
 8005948:	1949      	addeq	r1, r1, r5
 800594a:	6021      	streq	r1, [r4, #0]
 800594c:	e7ed      	b.n	800592a <_free_r+0x22>
 800594e:	461a      	mov	r2, r3
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	b10b      	cbz	r3, 8005958 <_free_r+0x50>
 8005954:	42a3      	cmp	r3, r4
 8005956:	d9fa      	bls.n	800594e <_free_r+0x46>
 8005958:	6811      	ldr	r1, [r2, #0]
 800595a:	1855      	adds	r5, r2, r1
 800595c:	42a5      	cmp	r5, r4
 800595e:	d10b      	bne.n	8005978 <_free_r+0x70>
 8005960:	6824      	ldr	r4, [r4, #0]
 8005962:	4421      	add	r1, r4
 8005964:	1854      	adds	r4, r2, r1
 8005966:	42a3      	cmp	r3, r4
 8005968:	6011      	str	r1, [r2, #0]
 800596a:	d1e0      	bne.n	800592e <_free_r+0x26>
 800596c:	681c      	ldr	r4, [r3, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	6053      	str	r3, [r2, #4]
 8005972:	4421      	add	r1, r4
 8005974:	6011      	str	r1, [r2, #0]
 8005976:	e7da      	b.n	800592e <_free_r+0x26>
 8005978:	d902      	bls.n	8005980 <_free_r+0x78>
 800597a:	230c      	movs	r3, #12
 800597c:	6003      	str	r3, [r0, #0]
 800597e:	e7d6      	b.n	800592e <_free_r+0x26>
 8005980:	6825      	ldr	r5, [r4, #0]
 8005982:	1961      	adds	r1, r4, r5
 8005984:	428b      	cmp	r3, r1
 8005986:	bf04      	itt	eq
 8005988:	6819      	ldreq	r1, [r3, #0]
 800598a:	685b      	ldreq	r3, [r3, #4]
 800598c:	6063      	str	r3, [r4, #4]
 800598e:	bf04      	itt	eq
 8005990:	1949      	addeq	r1, r1, r5
 8005992:	6021      	streq	r1, [r4, #0]
 8005994:	6054      	str	r4, [r2, #4]
 8005996:	e7ca      	b.n	800592e <_free_r+0x26>
 8005998:	b003      	add	sp, #12
 800599a:	bd30      	pop	{r4, r5, pc}
 800599c:	20007928 	.word	0x20007928

080059a0 <sbrk_aligned>:
 80059a0:	b570      	push	{r4, r5, r6, lr}
 80059a2:	4e0e      	ldr	r6, [pc, #56]	; (80059dc <sbrk_aligned+0x3c>)
 80059a4:	460c      	mov	r4, r1
 80059a6:	6831      	ldr	r1, [r6, #0]
 80059a8:	4605      	mov	r5, r0
 80059aa:	b911      	cbnz	r1, 80059b2 <sbrk_aligned+0x12>
 80059ac:	f000 f8bc 	bl	8005b28 <_sbrk_r>
 80059b0:	6030      	str	r0, [r6, #0]
 80059b2:	4621      	mov	r1, r4
 80059b4:	4628      	mov	r0, r5
 80059b6:	f000 f8b7 	bl	8005b28 <_sbrk_r>
 80059ba:	1c43      	adds	r3, r0, #1
 80059bc:	d00a      	beq.n	80059d4 <sbrk_aligned+0x34>
 80059be:	1cc4      	adds	r4, r0, #3
 80059c0:	f024 0403 	bic.w	r4, r4, #3
 80059c4:	42a0      	cmp	r0, r4
 80059c6:	d007      	beq.n	80059d8 <sbrk_aligned+0x38>
 80059c8:	1a21      	subs	r1, r4, r0
 80059ca:	4628      	mov	r0, r5
 80059cc:	f000 f8ac 	bl	8005b28 <_sbrk_r>
 80059d0:	3001      	adds	r0, #1
 80059d2:	d101      	bne.n	80059d8 <sbrk_aligned+0x38>
 80059d4:	f04f 34ff 	mov.w	r4, #4294967295
 80059d8:	4620      	mov	r0, r4
 80059da:	bd70      	pop	{r4, r5, r6, pc}
 80059dc:	2000792c 	.word	0x2000792c

080059e0 <_malloc_r>:
 80059e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059e4:	1ccd      	adds	r5, r1, #3
 80059e6:	f025 0503 	bic.w	r5, r5, #3
 80059ea:	3508      	adds	r5, #8
 80059ec:	2d0c      	cmp	r5, #12
 80059ee:	bf38      	it	cc
 80059f0:	250c      	movcc	r5, #12
 80059f2:	2d00      	cmp	r5, #0
 80059f4:	4607      	mov	r7, r0
 80059f6:	db01      	blt.n	80059fc <_malloc_r+0x1c>
 80059f8:	42a9      	cmp	r1, r5
 80059fa:	d905      	bls.n	8005a08 <_malloc_r+0x28>
 80059fc:	230c      	movs	r3, #12
 80059fe:	603b      	str	r3, [r7, #0]
 8005a00:	2600      	movs	r6, #0
 8005a02:	4630      	mov	r0, r6
 8005a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a08:	4e2e      	ldr	r6, [pc, #184]	; (8005ac4 <_malloc_r+0xe4>)
 8005a0a:	f000 f89d 	bl	8005b48 <__malloc_lock>
 8005a0e:	6833      	ldr	r3, [r6, #0]
 8005a10:	461c      	mov	r4, r3
 8005a12:	bb34      	cbnz	r4, 8005a62 <_malloc_r+0x82>
 8005a14:	4629      	mov	r1, r5
 8005a16:	4638      	mov	r0, r7
 8005a18:	f7ff ffc2 	bl	80059a0 <sbrk_aligned>
 8005a1c:	1c43      	adds	r3, r0, #1
 8005a1e:	4604      	mov	r4, r0
 8005a20:	d14d      	bne.n	8005abe <_malloc_r+0xde>
 8005a22:	6834      	ldr	r4, [r6, #0]
 8005a24:	4626      	mov	r6, r4
 8005a26:	2e00      	cmp	r6, #0
 8005a28:	d140      	bne.n	8005aac <_malloc_r+0xcc>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	4631      	mov	r1, r6
 8005a2e:	4638      	mov	r0, r7
 8005a30:	eb04 0803 	add.w	r8, r4, r3
 8005a34:	f000 f878 	bl	8005b28 <_sbrk_r>
 8005a38:	4580      	cmp	r8, r0
 8005a3a:	d13a      	bne.n	8005ab2 <_malloc_r+0xd2>
 8005a3c:	6821      	ldr	r1, [r4, #0]
 8005a3e:	3503      	adds	r5, #3
 8005a40:	1a6d      	subs	r5, r5, r1
 8005a42:	f025 0503 	bic.w	r5, r5, #3
 8005a46:	3508      	adds	r5, #8
 8005a48:	2d0c      	cmp	r5, #12
 8005a4a:	bf38      	it	cc
 8005a4c:	250c      	movcc	r5, #12
 8005a4e:	4629      	mov	r1, r5
 8005a50:	4638      	mov	r0, r7
 8005a52:	f7ff ffa5 	bl	80059a0 <sbrk_aligned>
 8005a56:	3001      	adds	r0, #1
 8005a58:	d02b      	beq.n	8005ab2 <_malloc_r+0xd2>
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	442b      	add	r3, r5
 8005a5e:	6023      	str	r3, [r4, #0]
 8005a60:	e00e      	b.n	8005a80 <_malloc_r+0xa0>
 8005a62:	6822      	ldr	r2, [r4, #0]
 8005a64:	1b52      	subs	r2, r2, r5
 8005a66:	d41e      	bmi.n	8005aa6 <_malloc_r+0xc6>
 8005a68:	2a0b      	cmp	r2, #11
 8005a6a:	d916      	bls.n	8005a9a <_malloc_r+0xba>
 8005a6c:	1961      	adds	r1, r4, r5
 8005a6e:	42a3      	cmp	r3, r4
 8005a70:	6025      	str	r5, [r4, #0]
 8005a72:	bf18      	it	ne
 8005a74:	6059      	strne	r1, [r3, #4]
 8005a76:	6863      	ldr	r3, [r4, #4]
 8005a78:	bf08      	it	eq
 8005a7a:	6031      	streq	r1, [r6, #0]
 8005a7c:	5162      	str	r2, [r4, r5]
 8005a7e:	604b      	str	r3, [r1, #4]
 8005a80:	4638      	mov	r0, r7
 8005a82:	f104 060b 	add.w	r6, r4, #11
 8005a86:	f000 f865 	bl	8005b54 <__malloc_unlock>
 8005a8a:	f026 0607 	bic.w	r6, r6, #7
 8005a8e:	1d23      	adds	r3, r4, #4
 8005a90:	1af2      	subs	r2, r6, r3
 8005a92:	d0b6      	beq.n	8005a02 <_malloc_r+0x22>
 8005a94:	1b9b      	subs	r3, r3, r6
 8005a96:	50a3      	str	r3, [r4, r2]
 8005a98:	e7b3      	b.n	8005a02 <_malloc_r+0x22>
 8005a9a:	6862      	ldr	r2, [r4, #4]
 8005a9c:	42a3      	cmp	r3, r4
 8005a9e:	bf0c      	ite	eq
 8005aa0:	6032      	streq	r2, [r6, #0]
 8005aa2:	605a      	strne	r2, [r3, #4]
 8005aa4:	e7ec      	b.n	8005a80 <_malloc_r+0xa0>
 8005aa6:	4623      	mov	r3, r4
 8005aa8:	6864      	ldr	r4, [r4, #4]
 8005aaa:	e7b2      	b.n	8005a12 <_malloc_r+0x32>
 8005aac:	4634      	mov	r4, r6
 8005aae:	6876      	ldr	r6, [r6, #4]
 8005ab0:	e7b9      	b.n	8005a26 <_malloc_r+0x46>
 8005ab2:	230c      	movs	r3, #12
 8005ab4:	603b      	str	r3, [r7, #0]
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	f000 f84c 	bl	8005b54 <__malloc_unlock>
 8005abc:	e7a1      	b.n	8005a02 <_malloc_r+0x22>
 8005abe:	6025      	str	r5, [r4, #0]
 8005ac0:	e7de      	b.n	8005a80 <_malloc_r+0xa0>
 8005ac2:	bf00      	nop
 8005ac4:	20007928 	.word	0x20007928

08005ac8 <_realloc_r>:
 8005ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005acc:	4680      	mov	r8, r0
 8005ace:	4614      	mov	r4, r2
 8005ad0:	460e      	mov	r6, r1
 8005ad2:	b921      	cbnz	r1, 8005ade <_realloc_r+0x16>
 8005ad4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad8:	4611      	mov	r1, r2
 8005ada:	f7ff bf81 	b.w	80059e0 <_malloc_r>
 8005ade:	b92a      	cbnz	r2, 8005aec <_realloc_r+0x24>
 8005ae0:	f7ff ff12 	bl	8005908 <_free_r>
 8005ae4:	4625      	mov	r5, r4
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005aec:	f000 f838 	bl	8005b60 <_malloc_usable_size_r>
 8005af0:	4284      	cmp	r4, r0
 8005af2:	4607      	mov	r7, r0
 8005af4:	d802      	bhi.n	8005afc <_realloc_r+0x34>
 8005af6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005afa:	d812      	bhi.n	8005b22 <_realloc_r+0x5a>
 8005afc:	4621      	mov	r1, r4
 8005afe:	4640      	mov	r0, r8
 8005b00:	f7ff ff6e 	bl	80059e0 <_malloc_r>
 8005b04:	4605      	mov	r5, r0
 8005b06:	2800      	cmp	r0, #0
 8005b08:	d0ed      	beq.n	8005ae6 <_realloc_r+0x1e>
 8005b0a:	42bc      	cmp	r4, r7
 8005b0c:	4622      	mov	r2, r4
 8005b0e:	4631      	mov	r1, r6
 8005b10:	bf28      	it	cs
 8005b12:	463a      	movcs	r2, r7
 8005b14:	f7ff fed0 	bl	80058b8 <memcpy>
 8005b18:	4631      	mov	r1, r6
 8005b1a:	4640      	mov	r0, r8
 8005b1c:	f7ff fef4 	bl	8005908 <_free_r>
 8005b20:	e7e1      	b.n	8005ae6 <_realloc_r+0x1e>
 8005b22:	4635      	mov	r5, r6
 8005b24:	e7df      	b.n	8005ae6 <_realloc_r+0x1e>
	...

08005b28 <_sbrk_r>:
 8005b28:	b538      	push	{r3, r4, r5, lr}
 8005b2a:	4d06      	ldr	r5, [pc, #24]	; (8005b44 <_sbrk_r+0x1c>)
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	4604      	mov	r4, r0
 8005b30:	4608      	mov	r0, r1
 8005b32:	602b      	str	r3, [r5, #0]
 8005b34:	f7fc f986 	bl	8001e44 <_sbrk>
 8005b38:	1c43      	adds	r3, r0, #1
 8005b3a:	d102      	bne.n	8005b42 <_sbrk_r+0x1a>
 8005b3c:	682b      	ldr	r3, [r5, #0]
 8005b3e:	b103      	cbz	r3, 8005b42 <_sbrk_r+0x1a>
 8005b40:	6023      	str	r3, [r4, #0]
 8005b42:	bd38      	pop	{r3, r4, r5, pc}
 8005b44:	20007930 	.word	0x20007930

08005b48 <__malloc_lock>:
 8005b48:	4801      	ldr	r0, [pc, #4]	; (8005b50 <__malloc_lock+0x8>)
 8005b4a:	f000 b811 	b.w	8005b70 <__retarget_lock_acquire_recursive>
 8005b4e:	bf00      	nop
 8005b50:	20007934 	.word	0x20007934

08005b54 <__malloc_unlock>:
 8005b54:	4801      	ldr	r0, [pc, #4]	; (8005b5c <__malloc_unlock+0x8>)
 8005b56:	f000 b80c 	b.w	8005b72 <__retarget_lock_release_recursive>
 8005b5a:	bf00      	nop
 8005b5c:	20007934 	.word	0x20007934

08005b60 <_malloc_usable_size_r>:
 8005b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b64:	1f18      	subs	r0, r3, #4
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	bfbc      	itt	lt
 8005b6a:	580b      	ldrlt	r3, [r1, r0]
 8005b6c:	18c0      	addlt	r0, r0, r3
 8005b6e:	4770      	bx	lr

08005b70 <__retarget_lock_acquire_recursive>:
 8005b70:	4770      	bx	lr

08005b72 <__retarget_lock_release_recursive>:
 8005b72:	4770      	bx	lr

08005b74 <trunc>:
 8005b74:	ec51 0b10 	vmov	r0, r1, d0
 8005b78:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005b7c:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8005b80:	2b13      	cmp	r3, #19
 8005b82:	b5d0      	push	{r4, r6, r7, lr}
 8005b84:	460c      	mov	r4, r1
 8005b86:	dc10      	bgt.n	8005baa <trunc+0x36>
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	bfa5      	ittet	ge
 8005b8c:	4a11      	ldrge	r2, [pc, #68]	; (8005bd4 <trunc+0x60>)
 8005b8e:	fa42 f303 	asrge.w	r3, r2, r3
 8005b92:	2100      	movlt	r1, #0
 8005b94:	2100      	movge	r1, #0
 8005b96:	bfb9      	ittee	lt
 8005b98:	2000      	movlt	r0, #0
 8005b9a:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 8005b9e:	2000      	movge	r0, #0
 8005ba0:	ea24 0103 	bicge.w	r1, r4, r3
 8005ba4:	ec41 0b10 	vmov	d0, r0, r1
 8005ba8:	bdd0      	pop	{r4, r6, r7, pc}
 8005baa:	2b33      	cmp	r3, #51	; 0x33
 8005bac:	dd08      	ble.n	8005bc0 <trunc+0x4c>
 8005bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb2:	d1f7      	bne.n	8005ba4 <trunc+0x30>
 8005bb4:	ee10 2a10 	vmov	r2, s0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	f7fa fb6f 	bl	800029c <__adddf3>
 8005bbe:	e7f1      	b.n	8005ba4 <trunc+0x30>
 8005bc0:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8005bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc8:	fa23 f202 	lsr.w	r2, r3, r2
 8005bcc:	ea20 0602 	bic.w	r6, r0, r2
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	e7e7      	b.n	8005ba4 <trunc+0x30>
 8005bd4:	000fffff 	.word	0x000fffff

08005bd8 <_init>:
 8005bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bda:	bf00      	nop
 8005bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bde:	bc08      	pop	{r3}
 8005be0:	469e      	mov	lr, r3
 8005be2:	4770      	bx	lr

08005be4 <_fini>:
 8005be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be6:	bf00      	nop
 8005be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bea:	bc08      	pop	{r3}
 8005bec:	469e      	mov	lr, r3
 8005bee:	4770      	bx	lr
