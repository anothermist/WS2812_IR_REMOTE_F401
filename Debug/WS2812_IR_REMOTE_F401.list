
WS2812_IR_REMOTE_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b6c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a44  08008d0c  08008d0c  00018d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009750  08009750  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009750  08009750  00019750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009758  08009758  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009758  08009758  00019758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800975c  0800975c  0001975c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009760  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007a0c  20000080  080097dc  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20007a8c  080097dc  00027a8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016dee  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f60  00000000  00000000  00036e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  00039e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001238  00000000  00000000  0003b158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191e9  00000000  00000000  0003c390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018860  00000000  00000000  00055579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093e93  00000000  00000000  0006ddd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00101c6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057d0  00000000  00000000  00101cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008cf4 	.word	0x08008cf4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08008cf4 	.word	0x08008cf4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b974 	b.w	8000e7c <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	468e      	mov	lr, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d14d      	bne.n	8000c56 <__udivmoddi4+0xaa>
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	4694      	mov	ip, r2
 8000bbe:	d969      	bls.n	8000c94 <__udivmoddi4+0xe8>
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	b152      	cbz	r2, 8000bdc <__udivmoddi4+0x30>
 8000bc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bca:	f1c2 0120 	rsb	r1, r2, #32
 8000bce:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bda:	4094      	lsls	r4, r2
 8000bdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be0:	0c21      	lsrs	r1, r4, #16
 8000be2:	fbbe f6f8 	udiv	r6, lr, r8
 8000be6:	fa1f f78c 	uxth.w	r7, ip
 8000bea:	fb08 e316 	mls	r3, r8, r6, lr
 8000bee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf2:	fb06 f107 	mul.w	r1, r6, r7
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x64>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c02:	f080 811f 	bcs.w	8000e44 <__udivmoddi4+0x298>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 811c 	bls.w	8000e44 <__udivmoddi4+0x298>
 8000c0c:	3e02      	subs	r6, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c18:	fb08 3310 	mls	r3, r8, r0, r3
 8000c1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c20:	fb00 f707 	mul.w	r7, r0, r7
 8000c24:	42a7      	cmp	r7, r4
 8000c26:	d90a      	bls.n	8000c3e <__udivmoddi4+0x92>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c30:	f080 810a 	bcs.w	8000e48 <__udivmoddi4+0x29c>
 8000c34:	42a7      	cmp	r7, r4
 8000c36:	f240 8107 	bls.w	8000e48 <__udivmoddi4+0x29c>
 8000c3a:	4464      	add	r4, ip
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c42:	1be4      	subs	r4, r4, r7
 8000c44:	2600      	movs	r6, #0
 8000c46:	b11d      	cbz	r5, 8000c50 <__udivmoddi4+0xa4>
 8000c48:	40d4      	lsrs	r4, r2
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d909      	bls.n	8000c6e <__udivmoddi4+0xc2>
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	f000 80ef 	beq.w	8000e3e <__udivmoddi4+0x292>
 8000c60:	2600      	movs	r6, #0
 8000c62:	e9c5 0100 	strd	r0, r1, [r5]
 8000c66:	4630      	mov	r0, r6
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	fab3 f683 	clz	r6, r3
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d14a      	bne.n	8000d0c <__udivmoddi4+0x160>
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d302      	bcc.n	8000c80 <__udivmoddi4+0xd4>
 8000c7a:	4282      	cmp	r2, r0
 8000c7c:	f200 80f9 	bhi.w	8000e72 <__udivmoddi4+0x2c6>
 8000c80:	1a84      	subs	r4, r0, r2
 8000c82:	eb61 0303 	sbc.w	r3, r1, r3
 8000c86:	2001      	movs	r0, #1
 8000c88:	469e      	mov	lr, r3
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	d0e0      	beq.n	8000c50 <__udivmoddi4+0xa4>
 8000c8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c92:	e7dd      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000c94:	b902      	cbnz	r2, 8000c98 <__udivmoddi4+0xec>
 8000c96:	deff      	udf	#255	; 0xff
 8000c98:	fab2 f282 	clz	r2, r2
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	f040 8092 	bne.w	8000dc6 <__udivmoddi4+0x21a>
 8000ca2:	eba1 010c 	sub.w	r1, r1, ip
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f fe8c 	uxth.w	lr, ip
 8000cae:	2601      	movs	r6, #1
 8000cb0:	0c20      	lsrs	r0, r4, #16
 8000cb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cbe:	fb0e f003 	mul.w	r0, lr, r3
 8000cc2:	4288      	cmp	r0, r1
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x12c>
 8000cc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x12a>
 8000cd0:	4288      	cmp	r0, r1
 8000cd2:	f200 80cb 	bhi.w	8000e6c <__udivmoddi4+0x2c0>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	1a09      	subs	r1, r1, r0
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x156>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf8:	d202      	bcs.n	8000d00 <__udivmoddi4+0x154>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f200 80bb 	bhi.w	8000e76 <__udivmoddi4+0x2ca>
 8000d00:	4608      	mov	r0, r1
 8000d02:	eba4 040e 	sub.w	r4, r4, lr
 8000d06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0a:	e79c      	b.n	8000c46 <__udivmoddi4+0x9a>
 8000d0c:	f1c6 0720 	rsb	r7, r6, #32
 8000d10:	40b3      	lsls	r3, r6
 8000d12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d22:	431c      	orrs	r4, r3
 8000d24:	40f9      	lsrs	r1, r7
 8000d26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d32:	0c20      	lsrs	r0, r4, #16
 8000d34:	fa1f fe8c 	uxth.w	lr, ip
 8000d38:	fb09 1118 	mls	r1, r9, r8, r1
 8000d3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d40:	fb08 f00e 	mul.w	r0, r8, lr
 8000d44:	4288      	cmp	r0, r1
 8000d46:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4a:	d90b      	bls.n	8000d64 <__udivmoddi4+0x1b8>
 8000d4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d54:	f080 8088 	bcs.w	8000e68 <__udivmoddi4+0x2bc>
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	f240 8085 	bls.w	8000e68 <__udivmoddi4+0x2bc>
 8000d5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d62:	4461      	add	r1, ip
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d78:	458e      	cmp	lr, r1
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x1e2>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d84:	d26c      	bcs.n	8000e60 <__udivmoddi4+0x2b4>
 8000d86:	458e      	cmp	lr, r1
 8000d88:	d96a      	bls.n	8000e60 <__udivmoddi4+0x2b4>
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	4461      	add	r1, ip
 8000d8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d92:	fba0 9402 	umull	r9, r4, r0, r2
 8000d96:	eba1 010e 	sub.w	r1, r1, lr
 8000d9a:	42a1      	cmp	r1, r4
 8000d9c:	46c8      	mov	r8, r9
 8000d9e:	46a6      	mov	lr, r4
 8000da0:	d356      	bcc.n	8000e50 <__udivmoddi4+0x2a4>
 8000da2:	d053      	beq.n	8000e4c <__udivmoddi4+0x2a0>
 8000da4:	b15d      	cbz	r5, 8000dbe <__udivmoddi4+0x212>
 8000da6:	ebb3 0208 	subs.w	r2, r3, r8
 8000daa:	eb61 010e 	sbc.w	r1, r1, lr
 8000dae:	fa01 f707 	lsl.w	r7, r1, r7
 8000db2:	fa22 f306 	lsr.w	r3, r2, r6
 8000db6:	40f1      	lsrs	r1, r6
 8000db8:	431f      	orrs	r7, r3
 8000dba:	e9c5 7100 	strd	r7, r1, [r5]
 8000dbe:	2600      	movs	r6, #0
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	f1c2 0320 	rsb	r3, r2, #32
 8000dca:	40d8      	lsrs	r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd4:	4091      	lsls	r1, r2
 8000dd6:	4301      	orrs	r1, r0
 8000dd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ddc:	fa1f fe8c 	uxth.w	lr, ip
 8000de0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de4:	fb07 3610 	mls	r6, r7, r0, r3
 8000de8:	0c0b      	lsrs	r3, r1, #16
 8000dea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dee:	fb00 f60e 	mul.w	r6, r0, lr
 8000df2:	429e      	cmp	r6, r3
 8000df4:	fa04 f402 	lsl.w	r4, r4, r2
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x260>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e02:	d22f      	bcs.n	8000e64 <__udivmoddi4+0x2b8>
 8000e04:	429e      	cmp	r6, r3
 8000e06:	d92d      	bls.n	8000e64 <__udivmoddi4+0x2b8>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1b9b      	subs	r3, r3, r6
 8000e0e:	b289      	uxth	r1, r1
 8000e10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e14:	fb07 3316 	mls	r3, r7, r6, r3
 8000e18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e20:	428b      	cmp	r3, r1
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x28a>
 8000e24:	eb1c 0101 	adds.w	r1, ip, r1
 8000e28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e2c:	d216      	bcs.n	8000e5c <__udivmoddi4+0x2b0>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d914      	bls.n	8000e5c <__udivmoddi4+0x2b0>
 8000e32:	3e02      	subs	r6, #2
 8000e34:	4461      	add	r1, ip
 8000e36:	1ac9      	subs	r1, r1, r3
 8000e38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e3c:	e738      	b.n	8000cb0 <__udivmoddi4+0x104>
 8000e3e:	462e      	mov	r6, r5
 8000e40:	4628      	mov	r0, r5
 8000e42:	e705      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000e44:	4606      	mov	r6, r0
 8000e46:	e6e3      	b.n	8000c10 <__udivmoddi4+0x64>
 8000e48:	4618      	mov	r0, r3
 8000e4a:	e6f8      	b.n	8000c3e <__udivmoddi4+0x92>
 8000e4c:	454b      	cmp	r3, r9
 8000e4e:	d2a9      	bcs.n	8000da4 <__udivmoddi4+0x1f8>
 8000e50:	ebb9 0802 	subs.w	r8, r9, r2
 8000e54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e58:	3801      	subs	r0, #1
 8000e5a:	e7a3      	b.n	8000da4 <__udivmoddi4+0x1f8>
 8000e5c:	4646      	mov	r6, r8
 8000e5e:	e7ea      	b.n	8000e36 <__udivmoddi4+0x28a>
 8000e60:	4620      	mov	r0, r4
 8000e62:	e794      	b.n	8000d8e <__udivmoddi4+0x1e2>
 8000e64:	4640      	mov	r0, r8
 8000e66:	e7d1      	b.n	8000e0c <__udivmoddi4+0x260>
 8000e68:	46d0      	mov	r8, sl
 8000e6a:	e77b      	b.n	8000d64 <__udivmoddi4+0x1b8>
 8000e6c:	3b02      	subs	r3, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	e732      	b.n	8000cd8 <__udivmoddi4+0x12c>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e709      	b.n	8000c8a <__udivmoddi4+0xde>
 8000e76:	4464      	add	r4, ip
 8000e78:	3802      	subs	r0, #2
 8000e7a:	e742      	b.n	8000d02 <__udivmoddi4+0x156>

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <AT24XX_Save>:
		return 1;
	else
		return 0;
}

uint8_t AT24XX_Save(uint16_t address, void *data, size_t size_of_data) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af04      	add	r7, sp, #16
 8000e86:	4603      	mov	r3, r0
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 4) || (AT24XX_SIZE_KBIT == 8) || (AT24XX_SIZE_KBIT == 16))
	if(size_of_data > 16)
		return 0;
#endif
#if ((AT24XX_SIZE_KBIT == 32) || (AT24XX_SIZE_KBIT == 64) || (AT24XX_SIZE_KBIT == 128))
	if(size_of_data > 32)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b20      	cmp	r3, #32
 8000e92:	d901      	bls.n	8000e98 <AT24XX_Save+0x18>
		return 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	e016      	b.n	8000ec6 <AT24XX_Save+0x46>
#endif

#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Write(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, HAL_MAX_DELAY) == HAL_OK)
#else
		if (HAL_I2C_Mem_Write(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, HAL_MAX_DELAY) == HAL_OK)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	89fa      	ldrh	r2, [r7, #14]
 8000e9e:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea2:	9102      	str	r1, [sp, #8]
 8000ea4:	9301      	str	r3, [sp, #4]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2310      	movs	r3, #16
 8000eac:	21ae      	movs	r1, #174	; 0xae
 8000eae:	4808      	ldr	r0, [pc, #32]	; (8000ed0 <AT24XX_Save+0x50>)
 8000eb0:	f003 fc64 	bl	800477c <HAL_I2C_Mem_Write>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d104      	bne.n	8000ec4 <AT24XX_Save+0x44>
#endif
{

			HAL_Delay(5);
 8000eba:	2005      	movs	r0, #5
 8000ebc:	f002 fcbe 	bl	800383c <HAL_Delay>
			return 1;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e000      	b.n	8000ec6 <AT24XX_Save+0x46>
} else
	return 0;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200006e4 	.word	0x200006e4

08000ed4 <AT24XX_Load>:

uint8_t AT24XX_Load(uint16_t address, void *data, size_t size_of_data) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af04      	add	r7, sp, #16
 8000eda:	4603      	mov	r3, r0
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Read(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, HAL_MAX_DELAY) == HAL_OK)
#else
		if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, HAL_MAX_DELAY) == HAL_OK)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	89fa      	ldrh	r2, [r7, #14]
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eec:	9102      	str	r1, [sp, #8]
 8000eee:	9301      	str	r3, [sp, #4]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2310      	movs	r3, #16
 8000ef6:	21ae      	movs	r1, #174	; 0xae
 8000ef8:	4806      	ldr	r0, [pc, #24]	; (8000f14 <AT24XX_Load+0x40>)
 8000efa:	f003 fd39 	bl	8004970 <HAL_I2C_Mem_Read>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d101      	bne.n	8000f08 <AT24XX_Load+0x34>
#endif
{
	return 1;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e000      	b.n	8000f0a <AT24XX_Load+0x36>
} else
	return 0;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200006e4 	.word	0x200006e4

08000f18 <AT24XX_Read>:

uint8_t AT24XX_Read(uint16_t address) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	80fb      	strh	r3, [r7, #6]
	uint16_t dt[1] = {0};
 8000f22:	2300      	movs	r3, #0
 8000f24:	81bb      	strh	r3, [r7, #12]
	AT24XX_Load(address, dt, 1);
 8000f26:	f107 010c 	add.w	r1, r7, #12
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ffd0 	bl	8000ed4 <AT24XX_Load>
	return dt[0];
 8000f34:	89bb      	ldrh	r3, [r7, #12]
 8000f36:	b2db      	uxtb	r3, r3
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <AT24XX_Write>:

void AT24XX_Write(uint16_t address, uint8_t val) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	460a      	mov	r2, r1
 8000f4a:	80fb      	strh	r3, [r7, #6]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	717b      	strb	r3, [r7, #5]
	uint8_t save[] = {val};
 8000f50:	797b      	ldrb	r3, [r7, #5]
 8000f52:	733b      	strb	r3, [r7, #12]
	AT24XX_Save(address, save, 1);
 8000f54:	f107 010c 	add.w	r1, r7, #12
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff8f 	bl	8000e80 <AT24XX_Save>
}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <LCD_Command>:

uint32_t RGB(uint8_t r, uint8_t g, uint8_t b) {
	return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
}

inline static void LCD_Command(uint8_t cmd) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
	if (SOFT_CS) LCD_U_CS
	LCD_U_DC
 8000f76:	2200      	movs	r2, #0
 8000f78:	2102      	movs	r1, #2
 8000f7a:	4806      	ldr	r0, [pc, #24]	; (8000f94 <LCD_Command+0x28>)
 8000f7c:	f003 faa0 	bl	80044c0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&LCD_SPI, &cmd, 1, 0);
 8000f80:	1df9      	adds	r1, r7, #7
 8000f82:	2300      	movs	r3, #0
 8000f84:	2201      	movs	r2, #1
 8000f86:	4804      	ldr	r0, [pc, #16]	; (8000f98 <LCD_Command+0x2c>)
 8000f88:	f004 ff55 	bl	8005e36 <HAL_SPI_Transmit>
	if (SOFT_CS) LCD_S_CS
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40020400 	.word	0x40020400
 8000f98:	20000790 	.word	0x20000790

08000f9c <LCD_Data_8>:

inline static void LCD_Data_8(uint8_t data) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
	if (SOFT_CS)
		LCD_U_CS
	LCD_S_DC
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2102      	movs	r1, #2
 8000faa:	4806      	ldr	r0, [pc, #24]	; (8000fc4 <LCD_Data_8+0x28>)
 8000fac:	f003 fa88 	bl	80044c0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&LCD_SPI, &data, 1, 0);
 8000fb0:	1df9      	adds	r1, r7, #7
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <LCD_Data_8+0x2c>)
 8000fb8:	f004 ff3d 	bl	8005e36 <HAL_SPI_Transmit>
	if (SOFT_CS)
		LCD_S_CS
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	20000790 	.word	0x20000790

08000fcc <LCD_Data_16>:

inline static void LCD_Data_16(uint16_t word) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	80fb      	strh	r3, [r7, #6]
	if (SOFT_CS) LCD_U_CS
	LCD_S_DC
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	2102      	movs	r1, #2
 8000fda:	4809      	ldr	r0, [pc, #36]	; (8001000 <LCD_Data_16+0x34>)
 8000fdc:	f003 fa70 	bl	80044c0 <HAL_GPIO_WritePin>
	LCD_Data_8((word >> 8) & 0x00FF);
 8000fe0:	88fb      	ldrh	r3, [r7, #6]
 8000fe2:	0a1b      	lsrs	r3, r3, #8
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ffd7 	bl	8000f9c <LCD_Data_8>
	LCD_Data_8(word & 0x00FF);
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff ffd2 	bl	8000f9c <LCD_Data_8>
	if (SOFT_CS) LCD_S_CS
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40020400 	.word	0x40020400

08001004 <LCD_Data_24>:

inline static void LCD_Data_24(uint32_t word) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	if (SOFT_CS) LCD_U_CS
	LCD_S_DC
 800100c:	2201      	movs	r2, #1
 800100e:	2102      	movs	r1, #2
 8001010:	480b      	ldr	r0, [pc, #44]	; (8001040 <LCD_Data_24+0x3c>)
 8001012:	f003 fa55 	bl	80044c0 <HAL_GPIO_WritePin>
	LCD_Data_8((word >> 16) & 0x00FFFF);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	0c1b      	lsrs	r3, r3, #16
 800101a:	b2db      	uxtb	r3, r3
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ffbd 	bl	8000f9c <LCD_Data_8>
	LCD_Data_8((word >> 8) & 0x00FFFF);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	b2db      	uxtb	r3, r3
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ffb7 	bl	8000f9c <LCD_Data_8>
	LCD_Data_8(word & 0x00FFFF);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff ffb2 	bl	8000f9c <LCD_Data_8>
	if (SOFT_CS) LCD_S_CS
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40020400 	.word	0x40020400

08001044 <LCD_Window>:

inline static void LCD_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4604      	mov	r4, r0
 800104c:	4608      	mov	r0, r1
 800104e:	4611      	mov	r1, r2
 8001050:	461a      	mov	r2, r3
 8001052:	4623      	mov	r3, r4
 8001054:	80fb      	strh	r3, [r7, #6]
 8001056:	4603      	mov	r3, r0
 8001058:	80bb      	strh	r3, [r7, #4]
 800105a:	460b      	mov	r3, r1
 800105c:	807b      	strh	r3, [r7, #2]
 800105e:	4613      	mov	r3, r2
 8001060:	803b      	strh	r3, [r7, #0]
	LCD_Command(COLUMN_ADDRESS_SET);
 8001062:	202a      	movs	r0, #42	; 0x2a
 8001064:	f7ff ff82 	bl	8000f6c <LCD_Command>
	LCD_Data_16(y1);
 8001068:	88bb      	ldrh	r3, [r7, #4]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ffae 	bl	8000fcc <LCD_Data_16>
	LCD_Data_16(y2);
 8001070:	883b      	ldrh	r3, [r7, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ffaa 	bl	8000fcc <LCD_Data_16>
	LCD_Command(PAGE_ADDRESS_SET);
 8001078:	202b      	movs	r0, #43	; 0x2b
 800107a:	f7ff ff77 	bl	8000f6c <LCD_Command>
	LCD_Data_16(x1);
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ffa3 	bl	8000fcc <LCD_Data_16>
	LCD_Data_16(x2);
 8001086:	887b      	ldrh	r3, [r7, #2]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff9f 	bl	8000fcc <LCD_Data_16>
	LCD_Command(MEMORY_WRITE);
 800108e:	202c      	movs	r0, #44	; 0x2c
 8001090:	f7ff ff6c 	bl	8000f6c <LCD_Command>
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	bd90      	pop	{r4, r7, pc}

0800109c <LCD_Rect_Fill>:
void LCD_Pixel(uint16_t x, uint16_t y, uint32_t color24) {
	LCD_Window(x, y, x, y);
	LCD_Data_24(color24);
}

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24) {
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4604      	mov	r4, r0
 80010a4:	4608      	mov	r0, r1
 80010a6:	4611      	mov	r1, r2
 80010a8:	461a      	mov	r2, r3
 80010aa:	4623      	mov	r3, r4
 80010ac:	80fb      	strh	r3, [r7, #6]
 80010ae:	4603      	mov	r3, r0
 80010b0:	80bb      	strh	r3, [r7, #4]
 80010b2:	460b      	mov	r3, r1
 80010b4:	807b      	strh	r3, [r7, #2]
 80010b6:	4613      	mov	r3, r2
 80010b8:	803b      	strh	r3, [r7, #0]
	uint32_t i = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
	uint32_t j = (uint32_t) w * (uint32_t) h;
 80010be:	887b      	ldrh	r3, [r7, #2]
 80010c0:	883a      	ldrh	r2, [r7, #0]
 80010c2:	fb02 f303 	mul.w	r3, r2, r3
 80010c6:	60bb      	str	r3, [r7, #8]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80010c8:	88ba      	ldrh	r2, [r7, #4]
 80010ca:	883b      	ldrh	r3, [r7, #0]
 80010cc:	4413      	add	r3, r2
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	3b01      	subs	r3, #1
 80010d2:	b29c      	uxth	r4, r3
 80010d4:	88fa      	ldrh	r2, [r7, #6]
 80010d6:	887b      	ldrh	r3, [r7, #2]
 80010d8:	4413      	add	r3, r2
 80010da:	b29b      	uxth	r3, r3
 80010dc:	3b01      	subs	r3, #1
 80010de:	b29b      	uxth	r3, r3
 80010e0:	88f9      	ldrh	r1, [r7, #6]
 80010e2:	88b8      	ldrh	r0, [r7, #4]
 80010e4:	4622      	mov	r2, r4
 80010e6:	f7ff ffad 	bl	8001044 <LCD_Window>
	for (i = 0; i < j; i++) LCD_Data_24(color24);
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	e005      	b.n	80010fc <LCD_Rect_Fill+0x60>
 80010f0:	6a38      	ldr	r0, [r7, #32]
 80010f2:	f7ff ff87 	bl	8001004 <LCD_Data_24>
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	3301      	adds	r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	429a      	cmp	r2, r3
 8001102:	d3f5      	bcc.n	80010f0 <LCD_Rect_Fill+0x54>
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	bd90      	pop	{r4, r7, pc}

0800110e <LCD_Line>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24) {
 800110e:	b590      	push	{r4, r7, lr}
 8001110:	b08b      	sub	sp, #44	; 0x2c
 8001112:	af02      	add	r7, sp, #8
 8001114:	4604      	mov	r4, r0
 8001116:	4608      	mov	r0, r1
 8001118:	4611      	mov	r1, r2
 800111a:	461a      	mov	r2, r3
 800111c:	4623      	mov	r3, r4
 800111e:	80fb      	strh	r3, [r7, #6]
 8001120:	4603      	mov	r3, r0
 8001122:	80bb      	strh	r3, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
 8001128:	4613      	mov	r3, r2
 800112a:	803b      	strh	r3, [r7, #0]
	int deltaX = abs(x2 - x1);
 800112c:	887a      	ldrh	r2, [r7, #2]
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	bfb8      	it	lt
 8001136:	425b      	neglt	r3, r3
 8001138:	61bb      	str	r3, [r7, #24]
	int deltaY = abs(y2 - y1);
 800113a:	883a      	ldrh	r2, [r7, #0]
 800113c:	88bb      	ldrh	r3, [r7, #4]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	bfb8      	it	lt
 8001144:	425b      	neglt	r3, r3
 8001146:	617b      	str	r3, [r7, #20]
	int signX = x1 < x2 ? 1 : -1;
 8001148:	88fa      	ldrh	r2, [r7, #6]
 800114a:	887b      	ldrh	r3, [r7, #2]
 800114c:	429a      	cmp	r2, r3
 800114e:	d201      	bcs.n	8001154 <LCD_Line+0x46>
 8001150:	2301      	movs	r3, #1
 8001152:	e001      	b.n	8001158 <LCD_Line+0x4a>
 8001154:	f04f 33ff 	mov.w	r3, #4294967295
 8001158:	613b      	str	r3, [r7, #16]
	int signY = y1 < y2 ? 1 : -1;
 800115a:	88ba      	ldrh	r2, [r7, #4]
 800115c:	883b      	ldrh	r3, [r7, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	d201      	bcs.n	8001166 <LCD_Line+0x58>
 8001162:	2301      	movs	r3, #1
 8001164:	e001      	b.n	800116a <LCD_Line+0x5c>
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
 800116a:	60fb      	str	r3, [r7, #12]
	int error = deltaX - deltaY;
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	61fb      	str	r3, [r7, #28]
	int error2 = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
	for (;;) {
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8001178:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800117c:	b29a      	uxth	r2, r3
 800117e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001182:	b29c      	uxth	r4, r3
 8001184:	88b9      	ldrh	r1, [r7, #4]
 8001186:	88f8      	ldrh	r0, [r7, #6]
 8001188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	4623      	mov	r3, r4
 800118e:	f7ff ff85 	bl	800109c <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 8001192:	88fa      	ldrh	r2, [r7, #6]
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	429a      	cmp	r2, r3
 8001198:	d103      	bne.n	80011a2 <LCD_Line+0x94>
 800119a:	88ba      	ldrh	r2, [r7, #4]
 800119c:	883b      	ldrh	r3, [r7, #0]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d01e      	beq.n	80011e0 <LCD_Line+0xd2>
			break;
		error2 = error * 2;
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
		if (error2 > -deltaY) {
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	425b      	negs	r3, r3
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	dd08      	ble.n	80011c4 <LCD_Line+0xb6>
			error -= deltaY;
 80011b2:	69fa      	ldr	r2, [r7, #28]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	61fb      	str	r3, [r7, #28]
			x1 += signX;
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	b29a      	uxth	r2, r3
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	4413      	add	r3, r2
 80011c2:	80fb      	strh	r3, [r7, #6]
		}
		if (error2 < deltaX) {
 80011c4:	68ba      	ldr	r2, [r7, #8]
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	dad5      	bge.n	8001178 <LCD_Line+0x6a>
			error += deltaX;
 80011cc:	69fa      	ldr	r2, [r7, #28]
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	4413      	add	r3, r2
 80011d2:	61fb      	str	r3, [r7, #28]
			y1 += signY;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	88bb      	ldrh	r3, [r7, #4]
 80011da:	4413      	add	r3, r2
 80011dc:	80bb      	strh	r3, [r7, #4]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 80011de:	e7cb      	b.n	8001178 <LCD_Line+0x6a>
			break;
 80011e0:	bf00      	nop
		}
	}
}
 80011e2:	bf00      	nop
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd90      	pop	{r4, r7, pc}

080011ea <LCD_Rect>:

void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24) {
 80011ea:	b590      	push	{r4, r7, lr}
 80011ec:	b085      	sub	sp, #20
 80011ee:	af02      	add	r7, sp, #8
 80011f0:	4604      	mov	r4, r0
 80011f2:	4608      	mov	r0, r1
 80011f4:	4611      	mov	r1, r2
 80011f6:	461a      	mov	r2, r3
 80011f8:	4623      	mov	r3, r4
 80011fa:	80fb      	strh	r3, [r7, #6]
 80011fc:	4603      	mov	r3, r0
 80011fe:	80bb      	strh	r3, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	807b      	strh	r3, [r7, #2]
 8001204:	4613      	mov	r3, r2
 8001206:	803b      	strh	r3, [r7, #0]
	LCD_Line(x, y, x + w, y, size, color24);
 8001208:	88fa      	ldrh	r2, [r7, #6]
 800120a:	887b      	ldrh	r3, [r7, #2]
 800120c:	4413      	add	r3, r2
 800120e:	b29a      	uxth	r2, r3
 8001210:	88bc      	ldrh	r4, [r7, #4]
 8001212:	88b9      	ldrh	r1, [r7, #4]
 8001214:	88f8      	ldrh	r0, [r7, #6]
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	7e3b      	ldrb	r3, [r7, #24]
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	4623      	mov	r3, r4
 8001220:	f7ff ff75 	bl	800110e <LCD_Line>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8001224:	88ba      	ldrh	r2, [r7, #4]
 8001226:	883b      	ldrh	r3, [r7, #0]
 8001228:	4413      	add	r3, r2
 800122a:	b299      	uxth	r1, r3
 800122c:	88fa      	ldrh	r2, [r7, #6]
 800122e:	887b      	ldrh	r3, [r7, #2]
 8001230:	4413      	add	r3, r2
 8001232:	b29c      	uxth	r4, r3
 8001234:	88ba      	ldrh	r2, [r7, #4]
 8001236:	883b      	ldrh	r3, [r7, #0]
 8001238:	4413      	add	r3, r2
 800123a:	b29a      	uxth	r2, r3
 800123c:	88f8      	ldrh	r0, [r7, #6]
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	7e3b      	ldrb	r3, [r7, #24]
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	4613      	mov	r3, r2
 8001248:	4622      	mov	r2, r4
 800124a:	f7ff ff60 	bl	800110e <LCD_Line>
	LCD_Line(x, y, x, y + h, size, color24);
 800124e:	88ba      	ldrh	r2, [r7, #4]
 8001250:	883b      	ldrh	r3, [r7, #0]
 8001252:	4413      	add	r3, r2
 8001254:	b29c      	uxth	r4, r3
 8001256:	88fa      	ldrh	r2, [r7, #6]
 8001258:	88b9      	ldrh	r1, [r7, #4]
 800125a:	88f8      	ldrh	r0, [r7, #6]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	7e3b      	ldrb	r3, [r7, #24]
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	4623      	mov	r3, r4
 8001266:	f7ff ff52 	bl	800110e <LCD_Line>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 800126a:	88fa      	ldrh	r2, [r7, #6]
 800126c:	887b      	ldrh	r3, [r7, #2]
 800126e:	4413      	add	r3, r2
 8001270:	b298      	uxth	r0, r3
 8001272:	88fa      	ldrh	r2, [r7, #6]
 8001274:	887b      	ldrh	r3, [r7, #2]
 8001276:	4413      	add	r3, r2
 8001278:	b29c      	uxth	r4, r3
 800127a:	88ba      	ldrh	r2, [r7, #4]
 800127c:	883b      	ldrh	r3, [r7, #0]
 800127e:	4413      	add	r3, r2
 8001280:	b29a      	uxth	r2, r3
 8001282:	88b9      	ldrh	r1, [r7, #4]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	9301      	str	r3, [sp, #4]
 8001288:	7e3b      	ldrb	r3, [r7, #24]
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	4613      	mov	r3, r2
 800128e:	4622      	mov	r2, r4
 8001290:	f7ff ff3d 	bl	800110e <LCD_Line>
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	bd90      	pop	{r4, r7, pc}

0800129c <LCD_Circle_Helper>:
			b_--;
		}
	}
}

void LCD_Circle_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint8_t size, uint32_t color24) {
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	4604      	mov	r4, r0
 80012a4:	4608      	mov	r0, r1
 80012a6:	4611      	mov	r1, r2
 80012a8:	461a      	mov	r2, r3
 80012aa:	4623      	mov	r3, r4
 80012ac:	80fb      	strh	r3, [r7, #6]
 80012ae:	4603      	mov	r3, r0
 80012b0:	80bb      	strh	r3, [r7, #4]
 80012b2:	460b      	mov	r3, r1
 80012b4:	807b      	strh	r3, [r7, #2]
 80012b6:	4613      	mov	r3, r2
 80012b8:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80012ba:	887b      	ldrh	r3, [r7, #2]
 80012bc:	f1c3 0301 	rsb	r3, r3, #1
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80012c8:	887b      	ldrh	r3, [r7, #2]
 80012ca:	461a      	mov	r2, r3
 80012cc:	03d2      	lsls	r2, r2, #15
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80012da:	887b      	ldrh	r3, [r7, #2]
 80012dc:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 80012de:	e0cd      	b.n	800147c <LCD_Circle_Helper+0x1e0>
		if (f >= 0) {
 80012e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	db0e      	blt.n	8001306 <LCD_Circle_Helper+0x6a>
			y--;
 80012e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	3b01      	subs	r3, #1
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80012f4:	8a7b      	ldrh	r3, [r7, #18]
 80012f6:	3302      	adds	r3, #2
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80012fc:	8afa      	ldrh	r2, [r7, #22]
 80012fe:	8a7b      	ldrh	r3, [r7, #18]
 8001300:	4413      	add	r3, r2
 8001302:	b29b      	uxth	r3, r3
 8001304:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8001306:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800130a:	b29b      	uxth	r3, r3
 800130c:	3301      	adds	r3, #1
 800130e:	b29b      	uxth	r3, r3
 8001310:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8001312:	8abb      	ldrh	r3, [r7, #20]
 8001314:	3302      	adds	r3, #2
 8001316:	b29b      	uxth	r3, r3
 8001318:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 800131a:	8afa      	ldrh	r2, [r7, #22]
 800131c:	8abb      	ldrh	r3, [r7, #20]
 800131e:	4413      	add	r3, r2
 8001320:	b29b      	uxth	r3, r3
 8001322:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4) {
 8001324:	787b      	ldrb	r3, [r7, #1]
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	2b00      	cmp	r3, #0
 800132c:	d025      	beq.n	800137a <LCD_Circle_Helper+0xde>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 800132e:	88fa      	ldrh	r2, [r7, #6]
 8001330:	8a3b      	ldrh	r3, [r7, #16]
 8001332:	4413      	add	r3, r2
 8001334:	b298      	uxth	r0, r3
 8001336:	88ba      	ldrh	r2, [r7, #4]
 8001338:	89fb      	ldrh	r3, [r7, #14]
 800133a:	4413      	add	r3, r2
 800133c:	b299      	uxth	r1, r3
 800133e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001342:	b29a      	uxth	r2, r3
 8001344:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001348:	b29c      	uxth	r4, r3
 800134a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	4623      	mov	r3, r4
 8001350:	f7ff fea4 	bl	800109c <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 + x, size, size, color24);
 8001354:	88fa      	ldrh	r2, [r7, #6]
 8001356:	89fb      	ldrh	r3, [r7, #14]
 8001358:	4413      	add	r3, r2
 800135a:	b298      	uxth	r0, r3
 800135c:	88ba      	ldrh	r2, [r7, #4]
 800135e:	8a3b      	ldrh	r3, [r7, #16]
 8001360:	4413      	add	r3, r2
 8001362:	b299      	uxth	r1, r3
 8001364:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001368:	b29a      	uxth	r2, r3
 800136a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800136e:	b29c      	uxth	r4, r3
 8001370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	4623      	mov	r3, r4
 8001376:	f7ff fe91 	bl	800109c <LCD_Rect_Fill>
		}
		if (cornername & 0x2) {
 800137a:	787b      	ldrb	r3, [r7, #1]
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d025      	beq.n	80013d0 <LCD_Circle_Helper+0x134>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 8001384:	88fa      	ldrh	r2, [r7, #6]
 8001386:	8a3b      	ldrh	r3, [r7, #16]
 8001388:	4413      	add	r3, r2
 800138a:	b298      	uxth	r0, r3
 800138c:	88ba      	ldrh	r2, [r7, #4]
 800138e:	89fb      	ldrh	r3, [r7, #14]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	b299      	uxth	r1, r3
 8001394:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001398:	b29a      	uxth	r2, r3
 800139a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800139e:	b29c      	uxth	r4, r3
 80013a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	4623      	mov	r3, r4
 80013a6:	f7ff fe79 	bl	800109c <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 - x, size, size, color24);
 80013aa:	88fa      	ldrh	r2, [r7, #6]
 80013ac:	89fb      	ldrh	r3, [r7, #14]
 80013ae:	4413      	add	r3, r2
 80013b0:	b298      	uxth	r0, r3
 80013b2:	88ba      	ldrh	r2, [r7, #4]
 80013b4:	8a3b      	ldrh	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	b299      	uxth	r1, r3
 80013ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013be:	b29a      	uxth	r2, r3
 80013c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013c4:	b29c      	uxth	r4, r3
 80013c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	4623      	mov	r3, r4
 80013cc:	f7ff fe66 	bl	800109c <LCD_Rect_Fill>
		}
		if (cornername & 0x8) {
 80013d0:	787b      	ldrb	r3, [r7, #1]
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d025      	beq.n	8001426 <LCD_Circle_Helper+0x18a>
			LCD_Rect_Fill(x0 - y, y0 + x, size, size, color24);
 80013da:	88fa      	ldrh	r2, [r7, #6]
 80013dc:	89fb      	ldrh	r3, [r7, #14]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	b298      	uxth	r0, r3
 80013e2:	88ba      	ldrh	r2, [r7, #4]
 80013e4:	8a3b      	ldrh	r3, [r7, #16]
 80013e6:	4413      	add	r3, r2
 80013e8:	b299      	uxth	r1, r3
 80013ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013f4:	b29c      	uxth	r4, r3
 80013f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	4623      	mov	r3, r4
 80013fc:	f7ff fe4e 	bl	800109c <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8001400:	88fa      	ldrh	r2, [r7, #6]
 8001402:	8a3b      	ldrh	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	b298      	uxth	r0, r3
 8001408:	88ba      	ldrh	r2, [r7, #4]
 800140a:	89fb      	ldrh	r3, [r7, #14]
 800140c:	4413      	add	r3, r2
 800140e:	b299      	uxth	r1, r3
 8001410:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001414:	b29a      	uxth	r2, r3
 8001416:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800141a:	b29c      	uxth	r4, r3
 800141c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	4623      	mov	r3, r4
 8001422:	f7ff fe3b 	bl	800109c <LCD_Rect_Fill>
		}
		if (cornername & 0x1) {
 8001426:	787b      	ldrb	r3, [r7, #1]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b00      	cmp	r3, #0
 800142e:	d025      	beq.n	800147c <LCD_Circle_Helper+0x1e0>
			LCD_Rect_Fill(x0 - y, y0 - x, size, size, color24);
 8001430:	88fa      	ldrh	r2, [r7, #6]
 8001432:	89fb      	ldrh	r3, [r7, #14]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	b298      	uxth	r0, r3
 8001438:	88ba      	ldrh	r2, [r7, #4]
 800143a:	8a3b      	ldrh	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	b299      	uxth	r1, r3
 8001440:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001444:	b29a      	uxth	r2, r3
 8001446:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800144a:	b29c      	uxth	r4, r3
 800144c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	4623      	mov	r3, r4
 8001452:	f7ff fe23 	bl	800109c <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 8001456:	88fa      	ldrh	r2, [r7, #6]
 8001458:	8a3b      	ldrh	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	b298      	uxth	r0, r3
 800145e:	88ba      	ldrh	r2, [r7, #4]
 8001460:	89fb      	ldrh	r3, [r7, #14]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	b299      	uxth	r1, r3
 8001466:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800146a:	b29a      	uxth	r2, r3
 800146c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001470:	b29c      	uxth	r4, r3
 8001472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	4623      	mov	r3, r4
 8001478:	f7ff fe10 	bl	800109c <LCD_Rect_Fill>
	while (x < y) {
 800147c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001480:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001484:	429a      	cmp	r2, r3
 8001486:	f6ff af2b 	blt.w	80012e0 <LCD_Circle_Helper+0x44>
		}
	}
}
 800148a:	bf00      	nop
 800148c:	bf00      	nop
 800148e:	371c      	adds	r7, #28
 8001490:	46bd      	mov	sp, r7
 8001492:	bd90      	pop	{r4, r7, pc}

08001494 <LCD_Rect_Round>:

void LCD_Rect_Round(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint8_t size, uint32_t color24) {
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b085      	sub	sp, #20
 8001498:	af02      	add	r7, sp, #8
 800149a:	4604      	mov	r4, r0
 800149c:	4608      	mov	r0, r1
 800149e:	4611      	mov	r1, r2
 80014a0:	461a      	mov	r2, r3
 80014a2:	4623      	mov	r3, r4
 80014a4:	80fb      	strh	r3, [r7, #6]
 80014a6:	4603      	mov	r3, r0
 80014a8:	80bb      	strh	r3, [r7, #4]
 80014aa:	460b      	mov	r3, r1
 80014ac:	807b      	strh	r3, [r7, #2]
 80014ae:	4613      	mov	r3, r2
 80014b0:	803b      	strh	r3, [r7, #0]
	LCD_Line(x + (r + 2), y, x + length + size - (r + 2), y, size, color24);
 80014b2:	8b3a      	ldrh	r2, [r7, #24]
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	4413      	add	r3, r2
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	3302      	adds	r3, #2
 80014bc:	b298      	uxth	r0, r3
 80014be:	88fa      	ldrh	r2, [r7, #6]
 80014c0:	887b      	ldrh	r3, [r7, #2]
 80014c2:	4413      	add	r3, r2
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	7f3b      	ldrb	r3, [r7, #28]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	4413      	add	r3, r2
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	8b3b      	ldrh	r3, [r7, #24]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	3b02      	subs	r3, #2
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	88bc      	ldrh	r4, [r7, #4]
 80014da:	88b9      	ldrh	r1, [r7, #4]
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	9301      	str	r3, [sp, #4]
 80014e0:	7f3b      	ldrb	r3, [r7, #28]
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	4623      	mov	r3, r4
 80014e6:	f7ff fe12 	bl	800110e <LCD_Line>
	LCD_Line(x + (r + 2), y + width - 1, x + length + size - (r + 2),y + width - 1, size, color24);
 80014ea:	8b3a      	ldrh	r2, [r7, #24]
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	4413      	add	r3, r2
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	3302      	adds	r3, #2
 80014f4:	b298      	uxth	r0, r3
 80014f6:	88ba      	ldrh	r2, [r7, #4]
 80014f8:	883b      	ldrh	r3, [r7, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	3b01      	subs	r3, #1
 8001500:	b299      	uxth	r1, r3
 8001502:	88fa      	ldrh	r2, [r7, #6]
 8001504:	887b      	ldrh	r3, [r7, #2]
 8001506:	4413      	add	r3, r2
 8001508:	b29a      	uxth	r2, r3
 800150a:	7f3b      	ldrb	r3, [r7, #28]
 800150c:	b29b      	uxth	r3, r3
 800150e:	4413      	add	r3, r2
 8001510:	b29a      	uxth	r2, r3
 8001512:	8b3b      	ldrh	r3, [r7, #24]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	b29b      	uxth	r3, r3
 8001518:	3b02      	subs	r3, #2
 800151a:	b29c      	uxth	r4, r3
 800151c:	88ba      	ldrh	r2, [r7, #4]
 800151e:	883b      	ldrh	r3, [r7, #0]
 8001520:	4413      	add	r3, r2
 8001522:	b29b      	uxth	r3, r3
 8001524:	3b01      	subs	r3, #1
 8001526:	b29a      	uxth	r2, r3
 8001528:	6a3b      	ldr	r3, [r7, #32]
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	7f3b      	ldrb	r3, [r7, #28]
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	4613      	mov	r3, r2
 8001532:	4622      	mov	r2, r4
 8001534:	f7ff fdeb 	bl	800110e <LCD_Line>
	LCD_Line(x, y + (r + 2), x, y + width - size - (r + 2), size, color24);
 8001538:	8b3a      	ldrh	r2, [r7, #24]
 800153a:	88bb      	ldrh	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	b29b      	uxth	r3, r3
 8001540:	3302      	adds	r3, #2
 8001542:	b299      	uxth	r1, r3
 8001544:	88ba      	ldrh	r2, [r7, #4]
 8001546:	883b      	ldrh	r3, [r7, #0]
 8001548:	4413      	add	r3, r2
 800154a:	b29a      	uxth	r2, r3
 800154c:	7f3b      	ldrb	r3, [r7, #28]
 800154e:	b29b      	uxth	r3, r3
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	b29a      	uxth	r2, r3
 8001554:	8b3b      	ldrh	r3, [r7, #24]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	b29b      	uxth	r3, r3
 800155a:	3b02      	subs	r3, #2
 800155c:	b29c      	uxth	r4, r3
 800155e:	88fa      	ldrh	r2, [r7, #6]
 8001560:	88f8      	ldrh	r0, [r7, #6]
 8001562:	6a3b      	ldr	r3, [r7, #32]
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	7f3b      	ldrb	r3, [r7, #28]
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	4623      	mov	r3, r4
 800156c:	f7ff fdcf 	bl	800110e <LCD_Line>
	LCD_Line(x + length - 1, y + (r + 2), x + length - 1, y + width - size - (r + 2), size, color24);
 8001570:	88fa      	ldrh	r2, [r7, #6]
 8001572:	887b      	ldrh	r3, [r7, #2]
 8001574:	4413      	add	r3, r2
 8001576:	b29b      	uxth	r3, r3
 8001578:	3b01      	subs	r3, #1
 800157a:	b298      	uxth	r0, r3
 800157c:	8b3a      	ldrh	r2, [r7, #24]
 800157e:	88bb      	ldrh	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	b29b      	uxth	r3, r3
 8001584:	3302      	adds	r3, #2
 8001586:	b299      	uxth	r1, r3
 8001588:	88fa      	ldrh	r2, [r7, #6]
 800158a:	887b      	ldrh	r3, [r7, #2]
 800158c:	4413      	add	r3, r2
 800158e:	b29b      	uxth	r3, r3
 8001590:	3b01      	subs	r3, #1
 8001592:	b29c      	uxth	r4, r3
 8001594:	88ba      	ldrh	r2, [r7, #4]
 8001596:	883b      	ldrh	r3, [r7, #0]
 8001598:	4413      	add	r3, r2
 800159a:	b29a      	uxth	r2, r3
 800159c:	7f3b      	ldrb	r3, [r7, #28]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	8b3b      	ldrh	r3, [r7, #24]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	3b02      	subs	r3, #2
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	6a3b      	ldr	r3, [r7, #32]
 80015b0:	9301      	str	r3, [sp, #4]
 80015b2:	7f3b      	ldrb	r3, [r7, #28]
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	4613      	mov	r3, r2
 80015b8:	4622      	mov	r2, r4
 80015ba:	f7ff fda8 	bl	800110e <LCD_Line>

	LCD_Circle_Helper(x + (r + 2), y + (r + 2), (r + 2), 1, size, color24);
 80015be:	8b3a      	ldrh	r2, [r7, #24]
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	4413      	add	r3, r2
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	3302      	adds	r3, #2
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	b218      	sxth	r0, r3
 80015cc:	8b3a      	ldrh	r2, [r7, #24]
 80015ce:	88bb      	ldrh	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	3302      	adds	r3, #2
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	b219      	sxth	r1, r3
 80015da:	8b3b      	ldrh	r3, [r7, #24]
 80015dc:	3302      	adds	r3, #2
 80015de:	b29b      	uxth	r3, r3
 80015e0:	b21a      	sxth	r2, r3
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	9301      	str	r3, [sp, #4]
 80015e6:	7f3b      	ldrb	r3, [r7, #28]
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2301      	movs	r3, #1
 80015ec:	f7ff fe56 	bl	800129c <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + (r + 2), (r + 2), 2, size, color24);
 80015f0:	88fa      	ldrh	r2, [r7, #6]
 80015f2:	887b      	ldrh	r3, [r7, #2]
 80015f4:	4413      	add	r3, r2
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	8b3b      	ldrh	r3, [r7, #24]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	3b03      	subs	r3, #3
 8001600:	b29b      	uxth	r3, r3
 8001602:	b218      	sxth	r0, r3
 8001604:	8b3a      	ldrh	r2, [r7, #24]
 8001606:	88bb      	ldrh	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	b29b      	uxth	r3, r3
 800160c:	3302      	adds	r3, #2
 800160e:	b29b      	uxth	r3, r3
 8001610:	b219      	sxth	r1, r3
 8001612:	8b3b      	ldrh	r3, [r7, #24]
 8001614:	3302      	adds	r3, #2
 8001616:	b29b      	uxth	r3, r3
 8001618:	b21a      	sxth	r2, r3
 800161a:	6a3b      	ldr	r3, [r7, #32]
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	7f3b      	ldrb	r3, [r7, #28]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2302      	movs	r3, #2
 8001624:	f7ff fe3a 	bl	800129c <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + width - (r + 2) - 1, (r + 2), 4, size, color24);
 8001628:	88fa      	ldrh	r2, [r7, #6]
 800162a:	887b      	ldrh	r3, [r7, #2]
 800162c:	4413      	add	r3, r2
 800162e:	b29a      	uxth	r2, r3
 8001630:	8b3b      	ldrh	r3, [r7, #24]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	b29b      	uxth	r3, r3
 8001636:	3b03      	subs	r3, #3
 8001638:	b29b      	uxth	r3, r3
 800163a:	b218      	sxth	r0, r3
 800163c:	88ba      	ldrh	r2, [r7, #4]
 800163e:	883b      	ldrh	r3, [r7, #0]
 8001640:	4413      	add	r3, r2
 8001642:	b29a      	uxth	r2, r3
 8001644:	8b3b      	ldrh	r3, [r7, #24]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	b29b      	uxth	r3, r3
 800164a:	3b03      	subs	r3, #3
 800164c:	b29b      	uxth	r3, r3
 800164e:	b219      	sxth	r1, r3
 8001650:	8b3b      	ldrh	r3, [r7, #24]
 8001652:	3302      	adds	r3, #2
 8001654:	b29b      	uxth	r3, r3
 8001656:	b21a      	sxth	r2, r3
 8001658:	6a3b      	ldr	r3, [r7, #32]
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	7f3b      	ldrb	r3, [r7, #28]
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2304      	movs	r3, #4
 8001662:	f7ff fe1b 	bl	800129c <LCD_Circle_Helper>
	LCD_Circle_Helper(x + (r + 2), y + width - (r + 2) - 1, (r + 2), 8, size, color24);
 8001666:	8b3a      	ldrh	r2, [r7, #24]
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	4413      	add	r3, r2
 800166c:	b29b      	uxth	r3, r3
 800166e:	3302      	adds	r3, #2
 8001670:	b29b      	uxth	r3, r3
 8001672:	b218      	sxth	r0, r3
 8001674:	88ba      	ldrh	r2, [r7, #4]
 8001676:	883b      	ldrh	r3, [r7, #0]
 8001678:	4413      	add	r3, r2
 800167a:	b29a      	uxth	r2, r3
 800167c:	8b3b      	ldrh	r3, [r7, #24]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	b29b      	uxth	r3, r3
 8001682:	3b03      	subs	r3, #3
 8001684:	b29b      	uxth	r3, r3
 8001686:	b219      	sxth	r1, r3
 8001688:	8b3b      	ldrh	r3, [r7, #24]
 800168a:	3302      	adds	r3, #2
 800168c:	b29b      	uxth	r3, r3
 800168e:	b21a      	sxth	r2, r3
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	9301      	str	r3, [sp, #4]
 8001694:	7f3b      	ldrb	r3, [r7, #28]
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	2308      	movs	r3, #8
 800169a:	f7ff fdff 	bl	800129c <LCD_Circle_Helper>
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd90      	pop	{r4, r7, pc}

080016a6 <LCD_Char>:
	LCD_Rect_Fill(x + r, y, length - 2 * r, width, color24);
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
}

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24) {
 80016a6:	b590      	push	{r4, r7, lr}
 80016a8:	b08b      	sub	sp, #44	; 0x2c
 80016aa:	af02      	add	r7, sp, #8
 80016ac:	60ba      	str	r2, [r7, #8]
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	4603      	mov	r3, r0
 80016b2:	81fb      	strh	r3, [r7, #14]
 80016b4:	460b      	mov	r3, r1
 80016b6:	81bb      	strh	r3, [r7, #12]
	uint8_t *bitmap = font->bitmap;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph->bitmapOffset;
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	777b      	strb	r3, [r7, #29]
 80016c8:	2300      	movs	r3, #0
 80016ca:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	837b      	strh	r3, [r7, #26]
	uint8_t cur_x, cur_y;
	for (cur_y = 0; cur_y < glyph->height; cur_y++) {
 80016d0:	2300      	movs	r3, #0
 80016d2:	763b      	strb	r3, [r7, #24]
 80016d4:	e093      	b.n	80017fe <LCD_Char+0x158>
		for (cur_x = 0; cur_x < glyph->width; cur_x++) {
 80016d6:	2300      	movs	r3, #0
 80016d8:	767b      	strb	r3, [r7, #25]
 80016da:	e052      	b.n	8001782 <LCD_Char+0xdc>
			if (bit == 0) {
 80016dc:	7f3b      	ldrb	r3, [r7, #28]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d109      	bne.n	80016f6 <LCD_Char+0x50>
				bits = (*(const unsigned char*) (&bitmap[bo++]));
 80016e2:	8bfb      	ldrh	r3, [r7, #30]
 80016e4:	1c5a      	adds	r2, r3, #1
 80016e6:	83fa      	strh	r2, [r7, #30]
 80016e8:	461a      	mov	r2, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	4413      	add	r3, r2
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	777b      	strb	r3, [r7, #29]
				bit = 0x80;
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	773b      	strb	r3, [r7, #28]
			}
			if (bits & bit)
 80016f6:	7f7a      	ldrb	r2, [r7, #29]
 80016f8:	7f3b      	ldrb	r3, [r7, #28]
 80016fa:	4013      	ands	r3, r2
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <LCD_Char+0x64>
				set_pixels++;
 8001702:	8b7b      	ldrh	r3, [r7, #26]
 8001704:	3301      	adds	r3, #1
 8001706:	837b      	strh	r3, [r7, #26]
 8001708:	e035      	b.n	8001776 <LCD_Char+0xd0>
			else if (set_pixels > 0) {
 800170a:	8b7b      	ldrh	r3, [r7, #26]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d032      	beq.n	8001776 <LCD_Char+0xd0>
				LCD_Rect_Fill(x + (glyph->xOffset + cur_x - set_pixels) * size,
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001716:	461a      	mov	r2, r3
 8001718:	7e7b      	ldrb	r3, [r7, #25]
 800171a:	441a      	add	r2, r3
 800171c:	8b7b      	ldrh	r3, [r7, #26]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	b29a      	uxth	r2, r3
 8001722:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001726:	b29b      	uxth	r3, r3
 8001728:	fb12 f303 	smulbb	r3, r2, r3
 800172c:	b29a      	uxth	r2, r3
 800172e:	89fb      	ldrh	r3, [r7, #14]
 8001730:	4413      	add	r3, r2
 8001732:	b298      	uxth	r0, r3
						y + (glyph->yOffset + cur_y) * size, size * set_pixels,
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800173a:	461a      	mov	r2, r3
 800173c:	7e3b      	ldrb	r3, [r7, #24]
 800173e:	4413      	add	r3, r2
				LCD_Rect_Fill(x + (glyph->xOffset + cur_x - set_pixels) * size,
 8001740:	b29a      	uxth	r2, r3
 8001742:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001746:	b29b      	uxth	r3, r3
 8001748:	fb12 f303 	smulbb	r3, r2, r3
 800174c:	b29a      	uxth	r2, r3
 800174e:	89bb      	ldrh	r3, [r7, #12]
 8001750:	4413      	add	r3, r2
 8001752:	b299      	uxth	r1, r3
 8001754:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001758:	b29b      	uxth	r3, r3
 800175a:	8b7a      	ldrh	r2, [r7, #26]
 800175c:	fb12 f303 	smulbb	r3, r2, r3
 8001760:	b29a      	uxth	r2, r3
 8001762:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001766:	b29c      	uxth	r4, r3
 8001768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	4623      	mov	r3, r4
 800176e:	f7ff fc95 	bl	800109c <LCD_Rect_Fill>
						size, color24);
				set_pixels = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 8001776:	7f3b      	ldrb	r3, [r7, #28]
 8001778:	085b      	lsrs	r3, r3, #1
 800177a:	773b      	strb	r3, [r7, #28]
		for (cur_x = 0; cur_x < glyph->width; cur_x++) {
 800177c:	7e7b      	ldrb	r3, [r7, #25]
 800177e:	3301      	adds	r3, #1
 8001780:	767b      	strb	r3, [r7, #25]
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	789b      	ldrb	r3, [r3, #2]
 8001786:	7e7a      	ldrb	r2, [r7, #25]
 8001788:	429a      	cmp	r2, r3
 800178a:	d3a7      	bcc.n	80016dc <LCD_Char+0x36>
		}
		if (set_pixels > 0) {
 800178c:	8b7b      	ldrh	r3, [r7, #26]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d032      	beq.n	80017f8 <LCD_Char+0x152>
			LCD_Rect_Fill(x + (glyph->xOffset + cur_x - set_pixels) * size,
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001798:	461a      	mov	r2, r3
 800179a:	7e7b      	ldrb	r3, [r7, #25]
 800179c:	441a      	add	r2, r3
 800179e:	8b7b      	ldrh	r3, [r7, #26]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	fb12 f303 	smulbb	r3, r2, r3
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	89fb      	ldrh	r3, [r7, #14]
 80017b2:	4413      	add	r3, r2
 80017b4:	b298      	uxth	r0, r3
					y + (glyph->yOffset + cur_y) * size, size * set_pixels,
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80017bc:	461a      	mov	r2, r3
 80017be:	7e3b      	ldrb	r3, [r7, #24]
 80017c0:	4413      	add	r3, r2
			LCD_Rect_Fill(x + (glyph->xOffset + cur_x - set_pixels) * size,
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	fb12 f303 	smulbb	r3, r2, r3
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	89bb      	ldrh	r3, [r7, #12]
 80017d2:	4413      	add	r3, r2
 80017d4:	b299      	uxth	r1, r3
 80017d6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017da:	b29b      	uxth	r3, r3
 80017dc:	8b7a      	ldrh	r2, [r7, #26]
 80017de:	fb12 f303 	smulbb	r3, r2, r3
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017e8:	b29c      	uxth	r4, r3
 80017ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	4623      	mov	r3, r4
 80017f0:	f7ff fc54 	bl	800109c <LCD_Rect_Fill>
					size, color24);
			set_pixels = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	837b      	strh	r3, [r7, #26]
	for (cur_y = 0; cur_y < glyph->height; cur_y++) {
 80017f8:	7e3b      	ldrb	r3, [r7, #24]
 80017fa:	3301      	adds	r3, #1
 80017fc:	763b      	strb	r3, [r7, #24]
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	78db      	ldrb	r3, [r3, #3]
 8001802:	7e3a      	ldrb	r2, [r7, #24]
 8001804:	429a      	cmp	r2, r3
 8001806:	f4ff af66 	bcc.w	80016d6 <LCD_Char+0x30>
		}
	}
}
 800180a:	bf00      	nop
 800180c:	bf00      	nop
 800180e:	3724      	adds	r7, #36	; 0x24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd90      	pop	{r4, r7, pc}

08001814 <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24) {
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b08f      	sub	sp, #60	; 0x3c
 8001818:	af02      	add	r7, sp, #8
 800181a:	60ba      	str	r2, [r7, #8]
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	4603      	mov	r3, r0
 8001820:	81fb      	strh	r3, [r7, #14]
 8001822:	460b      	mov	r3, r1
 8001824:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 8001826:	89fb      	ldrh	r3, [r7, #14]
 8001828:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 800182a:	89bb      	ldrh	r3, [r7, #12]
 800182c:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy(&font, p_font, sizeof(GFXfont));
 800182e:	f107 031c 	add.w	r3, r7, #28
 8001832:	220c      	movs	r2, #12
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	4618      	mov	r0, r3
 8001838:	f006 fda0 	bl	800837c <memcpy>
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++) {
 800183c:	2300      	movs	r3, #0
 800183e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001840:	e056      	b.n	80018f0 <LCD_Font+0xdc>
		char c = text[text_pos];
 8001842:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	4413      	add	r3, r2
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if (c == '\n') {
 800184e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001852:	2b0a      	cmp	r3, #10
 8001854:	d10f      	bne.n	8001876 <LCD_Font+0x62>
			cursor_x = x;
 8001856:	89fb      	ldrh	r3, [r7, #14]
 8001858:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 800185a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800185e:	b29a      	uxth	r2, r3
 8001860:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001864:	b29b      	uxth	r3, r3
 8001866:	fb12 f303 	smulbb	r3, r2, r3
 800186a:	b29a      	uxth	r2, r3
 800186c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800186e:	4413      	add	r3, r2
 8001870:	b29b      	uxth	r3, r3
 8001872:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001874:	e039      	b.n	80018ea <LCD_Font+0xd6>
		} else if (c >= font.first && c <= font.last && c != '\r') {
 8001876:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800187a:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800187e:	429a      	cmp	r2, r3
 8001880:	d333      	bcc.n	80018ea <LCD_Font+0xd6>
 8001882:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001886:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800188a:	429a      	cmp	r2, r3
 800188c:	d82d      	bhi.n	80018ea <LCD_Font+0xd6>
 800188e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001892:	2b0d      	cmp	r3, #13
 8001894:	d029      	beq.n	80018ea <LCD_Font+0xd6>
			GFXglyph glyph;
			memcpy(&glyph, &font.glyph[c - font.first], sizeof(GFXglyph));
 8001896:	6a3a      	ldr	r2, [r7, #32]
 8001898:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800189c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80018a0:	1a5b      	subs	r3, r3, r1
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	18d1      	adds	r1, r2, r3
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	2208      	movs	r2, #8
 80018ac:	4618      	mov	r0, r3
 80018ae:	f006 fd65 	bl	800837c <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80018b2:	f107 041c 	add.w	r4, r7, #28
 80018b6:	f107 0214 	add.w	r2, r7, #20
 80018ba:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80018be:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80018c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018c4:	9301      	str	r3, [sp, #4]
 80018c6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	4623      	mov	r3, r4
 80018ce:	f7ff feea 	bl	80016a6 <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 80018d2:	7e3b      	ldrb	r3, [r7, #24]
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80018da:	b29b      	uxth	r3, r3
 80018dc:	fb12 f303 	smulbb	r3, r2, r3
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018e4:	4413      	add	r3, r2
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++) {
 80018ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80018ec:	3301      	adds	r3, #1
 80018ee:	857b      	strh	r3, [r7, #42]	; 0x2a
 80018f0:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 80018f2:	68b8      	ldr	r0, [r7, #8]
 80018f4:	f7fe fc74 	bl	80001e0 <strlen>
 80018f8:	4603      	mov	r3, r0
 80018fa:	429c      	cmp	r4, r3
 80018fc:	d3a1      	bcc.n	8001842 <LCD_Font+0x2e>
		}
	}
}
 80018fe:	bf00      	nop
 8001900:	bf00      	nop
 8001902:	3734      	adds	r7, #52	; 0x34
 8001904:	46bd      	mov	sp, r7
 8001906:	bd90      	pop	{r4, r7, pc}

08001908 <LCD_Reset>:
		yStart = TOP_FIXED_AREA + (yStart - LCD_WIDTH + BOT_FIXED_AREA); // The value must wrap around as the screen memory is a circular buffer
	LCD_scrollAddress(yStart); // Now we can scroll the display
	return yTemp;
}

void LCD_Reset(void) {
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	LCD_U_CS
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001912:	480d      	ldr	r0, [pc, #52]	; (8001948 <LCD_Reset+0x40>)
 8001914:	f002 fdd4 	bl	80044c0 <HAL_GPIO_WritePin>
	LCD_S_RST
 8001918:	2201      	movs	r2, #1
 800191a:	2101      	movs	r1, #1
 800191c:	480a      	ldr	r0, [pc, #40]	; (8001948 <LCD_Reset+0x40>)
 800191e:	f002 fdcf 	bl	80044c0 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8001922:	2096      	movs	r0, #150	; 0x96
 8001924:	f001 ff8a 	bl	800383c <HAL_Delay>
	LCD_U_RST
 8001928:	2200      	movs	r2, #0
 800192a:	2101      	movs	r1, #1
 800192c:	4806      	ldr	r0, [pc, #24]	; (8001948 <LCD_Reset+0x40>)
 800192e:	f002 fdc7 	bl	80044c0 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8001932:	2096      	movs	r0, #150	; 0x96
 8001934:	f001 ff82 	bl	800383c <HAL_Delay>
	LCD_S_RST
 8001938:	2201      	movs	r2, #1
 800193a:	2101      	movs	r1, #1
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <LCD_Reset+0x40>)
 800193e:	f002 fdbf 	bl	80044c0 <HAL_GPIO_WritePin>
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40020400 	.word	0x40020400

0800194c <LCD_Orientation>:

void LCD_Orientation(uint8_t orientation) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
	LCD_Command(MEMORY_ACCESS_CONTROL);
 8001956:	2036      	movs	r0, #54	; 0x36
 8001958:	f7ff fb08 	bl	8000f6c <LCD_Command>
	switch (orientation) {
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	2b03      	cmp	r3, #3
 8001960:	d83a      	bhi.n	80019d8 <LCD_Orientation+0x8c>
 8001962:	a201      	add	r2, pc, #4	; (adr r2, 8001968 <LCD_Orientation+0x1c>)
 8001964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001968:	08001979 	.word	0x08001979
 800196c:	08001991 	.word	0x08001991
 8001970:	080019a9 	.word	0x080019a9
 8001974:	080019c1 	.word	0x080019c1
	case 0:
		LCD_Data_8(0x40 | 0x08);
 8001978:	2048      	movs	r0, #72	; 0x48
 800197a:	f7ff fb0f 	bl	8000f9c <LCD_Data_8>
		LCD_Width = LCD_HEIGHT;
 800197e:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <LCD_Orientation+0x94>)
 8001980:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001984:	801a      	strh	r2, [r3, #0]
		LCD_Height = LCD_WIDTH;
 8001986:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <LCD_Orientation+0x98>)
 8001988:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800198c:	801a      	strh	r2, [r3, #0]
		break;
 800198e:	e023      	b.n	80019d8 <LCD_Orientation+0x8c>
	case 1:
		LCD_Data_8(0x20 | 0x08);
 8001990:	2028      	movs	r0, #40	; 0x28
 8001992:	f7ff fb03 	bl	8000f9c <LCD_Data_8>
		LCD_Width = LCD_WIDTH;
 8001996:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <LCD_Orientation+0x94>)
 8001998:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800199c:	801a      	strh	r2, [r3, #0]
		LCD_Height = LCD_HEIGHT;
 800199e:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <LCD_Orientation+0x98>)
 80019a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019a4:	801a      	strh	r2, [r3, #0]
		break;
 80019a6:	e017      	b.n	80019d8 <LCD_Orientation+0x8c>
	case 2:
		LCD_Data_8(0x80 | 0x08);
 80019a8:	2088      	movs	r0, #136	; 0x88
 80019aa:	f7ff faf7 	bl	8000f9c <LCD_Data_8>
		LCD_Width = LCD_HEIGHT;
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <LCD_Orientation+0x94>)
 80019b0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019b4:	801a      	strh	r2, [r3, #0]
		LCD_Height = LCD_WIDTH;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <LCD_Orientation+0x98>)
 80019b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80019bc:	801a      	strh	r2, [r3, #0]
		break;
 80019be:	e00b      	b.n	80019d8 <LCD_Orientation+0x8c>
	case 3:
		LCD_Data_8(0x40 | 0x80 | 0x20 | 0x08);
 80019c0:	20e8      	movs	r0, #232	; 0xe8
 80019c2:	f7ff faeb 	bl	8000f9c <LCD_Data_8>
		LCD_Width = LCD_WIDTH;
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <LCD_Orientation+0x94>)
 80019c8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80019cc:	801a      	strh	r2, [r3, #0]
		LCD_Height = LCD_HEIGHT;
 80019ce:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <LCD_Orientation+0x98>)
 80019d0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019d4:	801a      	strh	r2, [r3, #0]
		break;
 80019d6:	bf00      	nop
	}
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	2000009c 	.word	0x2000009c
 80019e4:	2000009e 	.word	0x2000009e

080019e8 <LCD_Init>:

void LCD_Init(void) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af02      	add	r7, sp, #8
	LCD_Reset();
 80019ee:	f7ff ff8b 	bl	8001908 <LCD_Reset>
	LCD_Command(SOFTWARE_RESET);
 80019f2:	2001      	movs	r0, #1
 80019f4:	f7ff faba 	bl	8000f6c <LCD_Command>

	LCD_Command(POWER_CONTROL_1);
 80019f8:	20c0      	movs	r0, #192	; 0xc0
 80019fa:	f7ff fab7 	bl	8000f6c <LCD_Command>
	LCD_Data_8(0x17);    //Vreg1out
 80019fe:	2017      	movs	r0, #23
 8001a00:	f7ff facc 	bl	8000f9c <LCD_Data_8>
	LCD_Data_8(0x15);    //Verg2out
 8001a04:	2015      	movs	r0, #21
 8001a06:	f7ff fac9 	bl	8000f9c <LCD_Data_8>

	LCD_Command(POWER_CONTROL_2);
 8001a0a:	20c1      	movs	r0, #193	; 0xc1
 8001a0c:	f7ff faae 	bl	8000f6c <LCD_Command>
	LCD_Data_8(0x41);    //VGH,VGL
 8001a10:	2041      	movs	r0, #65	; 0x41
 8001a12:	f7ff fac3 	bl	8000f9c <LCD_Data_8>

	LCD_Command(VCOM_CONTROL_1);
 8001a16:	20c5      	movs	r0, #197	; 0xc5
 8001a18:	f7ff faa8 	bl	8000f6c <LCD_Command>
	LCD_Data_8(0x00);
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f7ff fabd 	bl	8000f9c <LCD_Data_8>
	LCD_Data_8(0x12);    //Vcom
 8001a22:	2012      	movs	r0, #18
 8001a24:	f7ff faba 	bl	8000f9c <LCD_Data_8>
	LCD_Data_8(0x80);
 8001a28:	2080      	movs	r0, #128	; 0x80
 8001a2a:	f7ff fab7 	bl	8000f9c <LCD_Data_8>

	LCD_Command(MEMORY_ACCESS_CONTROL);
 8001a2e:	2036      	movs	r0, #54	; 0x36
 8001a30:	f7ff fa9c 	bl	8000f6c <LCD_Command>
	LCD_Data_8(0x48);
 8001a34:	2048      	movs	r0, #72	; 0x48
 8001a36:	f7ff fab1 	bl	8000f9c <LCD_Data_8>

	LCD_Command(COLMOD_PIXEL_FORMAT_SET);
 8001a3a:	203a      	movs	r0, #58	; 0x3a
 8001a3c:	f7ff fa96 	bl	8000f6c <LCD_Command>
	LCD_Data_8(0x66); 	  //18 bit
 8001a40:	2066      	movs	r0, #102	; 0x66
 8001a42:	f7ff faab 	bl	8000f9c <LCD_Data_8>

	LCD_Command(RGB_SIGNAL_CONTROL);
 8001a46:	20b0      	movs	r0, #176	; 0xb0
 8001a48:	f7ff fa90 	bl	8000f6c <LCD_Command>
	LCD_Data_8(0x80);    //SDO NOT USE
 8001a4c:	2080      	movs	r0, #128	; 0x80
 8001a4e:	f7ff faa5 	bl	8000f9c <LCD_Data_8>

	LCD_Command(FRAME_RATE_CONTROL_NORMAL);
 8001a52:	20b1      	movs	r0, #177	; 0xb1
 8001a54:	f7ff fa8a 	bl	8000f6c <LCD_Command>
	LCD_Data_8(0xA0);    //60Hz
 8001a58:	20a0      	movs	r0, #160	; 0xa0
 8001a5a:	f7ff fa9f 	bl	8000f9c <LCD_Data_8>

	LCD_Command(DISPLAY_INVERSION_CONTROL);
 8001a5e:	20b4      	movs	r0, #180	; 0xb4
 8001a60:	f7ff fa84 	bl	8000f6c <LCD_Command>
	LCD_Data_8(0x02);    //2-dot
 8001a64:	2002      	movs	r0, #2
 8001a66:	f7ff fa99 	bl	8000f9c <LCD_Data_8>

	LCD_Command(DISPLAY_FUNCTION_CONTROL);
 8001a6a:	20b6      	movs	r0, #182	; 0xb6
 8001a6c:	f7ff fa7e 	bl	8000f6c <LCD_Command>
	LCD_Data_8(0x02);    //MCU
 8001a70:	2002      	movs	r0, #2
 8001a72:	f7ff fa93 	bl	8000f9c <LCD_Data_8>
	LCD_Data_8(0x02);    //Source,Gate scan dieection
 8001a76:	2002      	movs	r0, #2
 8001a78:	f7ff fa90 	bl	8000f9c <LCD_Data_8>

	LCD_Command(0XE9);   // Set Image Functio
 8001a7c:	20e9      	movs	r0, #233	; 0xe9
 8001a7e:	f7ff fa75 	bl	8000f6c <LCD_Command>
	LCD_Data_8(0x00);    // Disable 24 bit data
 8001a82:	2000      	movs	r0, #0
 8001a84:	f7ff fa8a 	bl	8000f9c <LCD_Data_8>

	LCD_Command(PUMP_RATIO_CONTROL);
 8001a88:	20f7      	movs	r0, #247	; 0xf7
 8001a8a:	f7ff fa6f 	bl	8000f6c <LCD_Command>
	LCD_Data_8(0xA9);
 8001a8e:	20a9      	movs	r0, #169	; 0xa9
 8001a90:	f7ff fa84 	bl	8000f9c <LCD_Data_8>
	LCD_Data_8(0x51);
 8001a94:	2051      	movs	r0, #81	; 0x51
 8001a96:	f7ff fa81 	bl	8000f9c <LCD_Data_8>
	LCD_Data_8(0x2C);
 8001a9a:	202c      	movs	r0, #44	; 0x2c
 8001a9c:	f7ff fa7e 	bl	8000f9c <LCD_Data_8>
	LCD_Data_8(0x82);    // D7 stream, loose
 8001aa0:	2082      	movs	r0, #130	; 0x82
 8001aa2:	f7ff fa7b 	bl	8000f9c <LCD_Data_8>
//	LCD_Data_8(0x0A);
//	LCD_Data_8(0x82);
//	LCD_Data_8(0x27);
//	LCD_Command(COLMOD_PIXEL_FORMAT_SET);
//	LCD_Data_8(0x55);
	LCD_Command(SLEEP_OUT);
 8001aa6:	2011      	movs	r0, #17
 8001aa8:	f7ff fa60 	bl	8000f6c <LCD_Command>
	LCD_Command(DISPLAY_ON);
 8001aac:	2029      	movs	r0, #41	; 0x29
 8001aae:	f7ff fa5d 	bl	8000f6c <LCD_Command>
	LCD_Orientation(DEFAULT_ORIENTATION);
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f7ff ff4a 	bl	800194c <LCD_Orientation>
	LCD_Rect_Fill(0, 0, LCD_WIDTH, LCD_HEIGHT, BLACK);
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001ac0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f7ff fae8 	bl	800109c <LCD_Rect_Fill>
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_TIM_PeriodElapsedCallback>:
#include "ir_remote.h"

volatile irparams_t irparams;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	if(htim == &TIMER_IR)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a56      	ldr	r2, [pc, #344]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	f040 809b 	bne.w	8001c1c <HAL_TIM_PeriodElapsedCallback+0x148>
	{
		uint8_t irdata = RECIV_PIN;
 8001ae6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aea:	4854      	ldr	r0, [pc, #336]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001aec:	f002 fcd0 	bl	8004490 <HAL_GPIO_ReadPin>
 8001af0:	4603      	mov	r3, r0
 8001af2:	73fb      	strb	r3, [r7, #15]

		irparams.timer++;  // One more 50uS tick
 8001af4:	4b52      	ldr	r3, [pc, #328]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001af6:	885b      	ldrh	r3, [r3, #2]
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	3301      	adds	r3, #1
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	4b50      	ldr	r3, [pc, #320]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001b00:	805a      	strh	r2, [r3, #2]
		if(irparams.rawlen >= RAWBUF) irparams.rcvstate = STATE_OVERFLOW;  // Buffer overflow
 8001b02:	4b4f      	ldr	r3, [pc, #316]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001b04:	785b      	ldrb	r3, [r3, #1]

		switch(irparams.rcvstate)
 8001b06:	4b4e      	ldr	r3, [pc, #312]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	3b02      	subs	r3, #2
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	f200 808d 	bhi.w	8001c2e <HAL_TIM_PeriodElapsedCallback+0x15a>
 8001b14:	a201      	add	r2, pc, #4	; (adr r2, 8001b1c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1a:	bf00      	nop
 8001b1c:	08001b31 	.word	0x08001b31
 8001b20:	08001b85 	.word	0x08001b85
 8001b24:	08001bb9 	.word	0x08001bb9
 8001b28:	08001bff 	.word	0x08001bff
 8001b2c:	08001c0d 	.word	0x08001c0d
		{
			case STATE_IDLE: // In the middle of a gap
				if(irdata == MARK)
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d174      	bne.n	8001c20 <HAL_TIM_PeriodElapsedCallback+0x14c>
				{
					if(irparams.timer < GAP_TICKS)  // Not big enough to be a gap.
 8001b36:	4b42      	ldr	r3, [pc, #264]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001b38:	885b      	ldrh	r3, [r3, #2]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	2b63      	cmp	r3, #99	; 0x63
 8001b3e:	d803      	bhi.n	8001b48 <HAL_TIM_PeriodElapsedCallback+0x74>
					{
						irparams.timer = 0;
 8001b40:	4b3f      	ldr	r3, [pc, #252]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	805a      	strh	r2, [r3, #2]
						irparams.timer = 0;
						irparams.rcvstate = STATE_MARK;
					}
				}

			break;
 8001b46:	e06b      	b.n	8001c20 <HAL_TIM_PeriodElapsedCallback+0x14c>
						irparams.overflow = 0;
 8001b48:	4b3d      	ldr	r3, [pc, #244]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						irparams.rawlen  = 0;
 8001b50:	4b3b      	ldr	r3, [pc, #236]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	705a      	strb	r2, [r3, #1]
						irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8001b56:	4b3a      	ldr	r3, [pc, #232]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001b58:	785b      	ldrb	r3, [r3, #1]
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	b2d1      	uxtb	r1, r2
 8001b60:	4a37      	ldr	r2, [pc, #220]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001b62:	7051      	strb	r1, [r2, #1]
 8001b64:	4618      	mov	r0, r3
 8001b66:	4b36      	ldr	r3, [pc, #216]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001b68:	885b      	ldrh	r3, [r3, #2]
 8001b6a:	b299      	uxth	r1, r3
 8001b6c:	4a34      	ldr	r2, [pc, #208]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001b6e:	0043      	lsls	r3, r0, #1
 8001b70:	4413      	add	r3, r2
 8001b72:	460a      	mov	r2, r1
 8001b74:	809a      	strh	r2, [r3, #4]
						irparams.timer = 0;
 8001b76:	4b32      	ldr	r3, [pc, #200]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	805a      	strh	r2, [r3, #2]
						irparams.rcvstate = STATE_MARK;
 8001b7c:	4b30      	ldr	r3, [pc, #192]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001b7e:	2203      	movs	r2, #3
 8001b80:	701a      	strb	r2, [r3, #0]
			break;
 8001b82:	e04d      	b.n	8001c20 <HAL_TIM_PeriodElapsedCallback+0x14c>

			case STATE_MARK:  // Timing Mark
				if(irdata == SPACE) // Mark ended; Record time
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d14c      	bne.n	8001c24 <HAL_TIM_PeriodElapsedCallback+0x150>
				{
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8001b8a:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001b8c:	785b      	ldrb	r3, [r3, #1]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	b2d1      	uxtb	r1, r2
 8001b94:	4a2a      	ldr	r2, [pc, #168]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001b96:	7051      	strb	r1, [r2, #1]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001b9c:	885b      	ldrh	r3, [r3, #2]
 8001b9e:	b299      	uxth	r1, r3
 8001ba0:	4a27      	ldr	r2, [pc, #156]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001ba2:	0043      	lsls	r3, r0, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	460a      	mov	r2, r1
 8001ba8:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 8001baa:	4b25      	ldr	r3, [pc, #148]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_SPACE;
 8001bb0:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	701a      	strb	r2, [r3, #0]
				}

			break;
 8001bb6:	e035      	b.n	8001c24 <HAL_TIM_PeriodElapsedCallback+0x150>

			case STATE_SPACE:  // Timing Space
				if(irdata == MARK) // Space just ended; Record time
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d116      	bne.n	8001bec <HAL_TIM_PeriodElapsedCallback+0x118>
				{
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8001bbe:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001bc0:	785b      	ldrb	r3, [r3, #1]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	1c5a      	adds	r2, r3, #1
 8001bc6:	b2d1      	uxtb	r1, r2
 8001bc8:	4a1d      	ldr	r2, [pc, #116]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001bca:	7051      	strb	r1, [r2, #1]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001bd0:	885b      	ldrh	r3, [r3, #2]
 8001bd2:	b299      	uxth	r1, r3
 8001bd4:	4a1a      	ldr	r2, [pc, #104]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001bd6:	0043      	lsls	r3, r0, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	460a      	mov	r2, r1
 8001bdc:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 8001bde:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_MARK;
 8001be4:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001be6:	2203      	movs	r2, #3
 8001be8:	701a      	strb	r2, [r3, #0]
				else if(irparams.timer > GAP_TICKS) // Space
				{
					irparams.rcvstate = STATE_STOP;
				}

			break;
 8001bea:	e01d      	b.n	8001c28 <HAL_TIM_PeriodElapsedCallback+0x154>
				else if(irparams.timer > GAP_TICKS) // Space
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001bee:	885b      	ldrh	r3, [r3, #2]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	2b64      	cmp	r3, #100	; 0x64
 8001bf4:	d918      	bls.n	8001c28 <HAL_TIM_PeriodElapsedCallback+0x154>
					irparams.rcvstate = STATE_STOP;
 8001bf6:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001bf8:	2205      	movs	r2, #5
 8001bfa:	701a      	strb	r2, [r3, #0]
			break;
 8001bfc:	e014      	b.n	8001c28 <HAL_TIM_PeriodElapsedCallback+0x154>

			case STATE_STOP:  // Waiting; Measuring Gap
			 	if(irdata == MARK) irparams.timer = 0;  // Reset gap timer
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d113      	bne.n	8001c2c <HAL_TIM_PeriodElapsedCallback+0x158>
 8001c04:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	805a      	strh	r2, [r3, #2]
			break;
 8001c0a:	e00f      	b.n	8001c2c <HAL_TIM_PeriodElapsedCallback+0x158>

			case STATE_OVERFLOW:  // Flag up a read overflow; Stop the State Machine
				irparams.overflow = 1;
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				irparams.rcvstate = STATE_STOP;
 8001c14:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001c16:	2205      	movs	r2, #5
 8001c18:	701a      	strb	r2, [r3, #0]
			break;
 8001c1a:	e008      	b.n	8001c2e <HAL_TIM_PeriodElapsedCallback+0x15a>
		}
	}
 8001c1c:	bf00      	nop
 8001c1e:	e006      	b.n	8001c2e <HAL_TIM_PeriodElapsedCallback+0x15a>
			break;
 8001c20:	bf00      	nop
 8001c22:	e004      	b.n	8001c2e <HAL_TIM_PeriodElapsedCallback+0x15a>
			break;
 8001c24:	bf00      	nop
 8001c26:	e002      	b.n	8001c2e <HAL_TIM_PeriodElapsedCallback+0x15a>
			break;
 8001c28:	bf00      	nop
 8001c2a:	e000      	b.n	8001c2e <HAL_TIM_PeriodElapsedCallback+0x15a>
			break;
 8001c2c:	bf00      	nop
}
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000830 	.word	0x20000830
 8001c3c:	40020800 	.word	0x40020800
 8001c40:	200000a0 	.word	0x200000a0

08001c44 <ir_decode>:

int16_t ir_decode(decode_results *results)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
	if(irparams.rcvstate != STATE_STOP) return 0;
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <ir_decode+0x54>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b05      	cmp	r3, #5
 8001c54:	d001      	beq.n	8001c5a <ir_decode+0x16>
 8001c56:	2300      	movs	r3, #0
 8001c58:	e01a      	b.n	8001c90 <ir_decode+0x4c>

	results->rawbuf = irparams.rawbuf;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <ir_decode+0x58>)
 8001c5e:	609a      	str	r2, [r3, #8]
	results->rawlen = irparams.rawlen;
 8001c60:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <ir_decode+0x54>)
 8001c62:	785b      	ldrb	r3, [r3, #1]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	b21a      	sxth	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	819a      	strh	r2, [r3, #12]
	results->overflow = irparams.overflow;
 8001c6c:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <ir_decode+0x54>)
 8001c6e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	b21a      	sxth	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	81da      	strh	r2, [r3, #14]

	if(decodeHash(results)) return 1;
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f880 	bl	8001d80 <decodeHash>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <ir_decode+0x46>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e002      	b.n	8001c90 <ir_decode+0x4c>
	ir_enableIRIn();
 8001c8a:	f000 f809 	bl	8001ca0 <ir_enableIRIn>
	return 0;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	200000a0 	.word	0x200000a0
 8001c9c:	200000a4 	.word	0x200000a4

08001ca0 <ir_enableIRIn>:

void ir_enableIRIn()
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <ir_enableIRIn+0x24>)
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <ir_enableIRIn+0x24>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	705a      	strb	r2, [r3, #1]

	__HAL_TIM_SET_COUNTER(&TIMER_IR, 0x0000);
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <ir_enableIRIn+0x28>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&TIMER_IR);
 8001cb8:	4803      	ldr	r0, [pc, #12]	; (8001cc8 <ir_enableIRIn+0x28>)
 8001cba:	f004 fcb5 	bl	8006628 <HAL_TIM_Base_Start_IT>
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200000a0 	.word	0x200000a0
 8001cc8:	20000830 	.word	0x20000830

08001ccc <ir_resume>:

void ir_resume() // Restart the ISR state machine
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <ir_resume+0x1c>)
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 8001cd6:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <ir_resume+0x1c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	705a      	strb	r2, [r3, #1]
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	200000a0 	.word	0x200000a0
 8001cec:	00000000 	.word	0x00000000

08001cf0 <compare>:

int16_t compare(uint16_t oldval, uint16_t newval)
{
 8001cf0:	b5b0      	push	{r4, r5, r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	460a      	mov	r2, r1
 8001cfa:	80fb      	strh	r3, [r7, #6]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	80bb      	strh	r3, [r7, #4]
	if(newval < oldval * .8) return 0;
 8001d00:	88bb      	ldrh	r3, [r7, #4]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fc16 	bl	8000534 <__aeabi_i2d>
 8001d08:	4604      	mov	r4, r0
 8001d0a:	460d      	mov	r5, r1
 8001d0c:	88fb      	ldrh	r3, [r7, #6]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fc10 	bl	8000534 <__aeabi_i2d>
 8001d14:	a318      	add	r3, pc, #96	; (adr r3, 8001d78 <compare+0x88>)
 8001d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1a:	f7fe fc75 	bl	8000608 <__aeabi_dmul>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4620      	mov	r0, r4
 8001d24:	4629      	mov	r1, r5
 8001d26:	f7fe fee1 	bl	8000aec <__aeabi_dcmplt>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <compare+0x44>
 8001d30:	2300      	movs	r3, #0
 8001d32:	e01a      	b.n	8001d6a <compare+0x7a>
	else if(oldval < newval * .8) return 2;
 8001d34:	88fb      	ldrh	r3, [r7, #6]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fbfc 	bl	8000534 <__aeabi_i2d>
 8001d3c:	4604      	mov	r4, r0
 8001d3e:	460d      	mov	r5, r1
 8001d40:	88bb      	ldrh	r3, [r7, #4]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fbf6 	bl	8000534 <__aeabi_i2d>
 8001d48:	a30b      	add	r3, pc, #44	; (adr r3, 8001d78 <compare+0x88>)
 8001d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4e:	f7fe fc5b 	bl	8000608 <__aeabi_dmul>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4620      	mov	r0, r4
 8001d58:	4629      	mov	r1, r5
 8001d5a:	f7fe fec7 	bl	8000aec <__aeabi_dcmplt>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <compare+0x78>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e000      	b.n	8001d6a <compare+0x7a>
	else return 1;
 8001d68:	2301      	movs	r3, #1
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bdb0      	pop	{r4, r5, r7, pc}
 8001d72:	bf00      	nop
 8001d74:	f3af 8000 	nop.w
 8001d78:	9999999a 	.word	0x9999999a
 8001d7c:	3fe99999 	.word	0x3fe99999

08001d80 <decodeHash>:

#define FNV_PRIME_32 16777619
#define FNV_BASIS_32 2166136261

int32_t decodeHash(decode_results *results)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	int32_t hash = FNV_BASIS_32;
 8001d88:	4b21      	ldr	r3, [pc, #132]	; (8001e10 <decodeHash+0x90>)
 8001d8a:	60fb      	str	r3, [r7, #12]

	if(results->rawlen < 6) return 0;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001d92:	2b05      	cmp	r3, #5
 8001d94:	dc01      	bgt.n	8001d9a <decodeHash+0x1a>
 8001d96:	2300      	movs	r3, #0
 8001d98:	e035      	b.n	8001e06 <decodeHash+0x86>

	for(int16_t i = 1; (i + 2) < results->rawlen; i++)
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	817b      	strh	r3, [r7, #10]
 8001d9e:	e023      	b.n	8001de8 <decodeHash+0x68>
	{
		int16_t value = compare(results->rawbuf[i], results->rawbuf[i+2]);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	b298      	uxth	r0, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001db8:	3302      	adds	r3, #2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f7ff ff94 	bl	8001cf0 <compare>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	813b      	strh	r3, [r7, #8]
		hash = (hash * FNV_PRIME_32) ^ value;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4a11      	ldr	r2, [pc, #68]	; (8001e14 <decodeHash+0x94>)
 8001dd0:	fb03 f202 	mul.w	r2, r3, r2
 8001dd4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001dd8:	4053      	eors	r3, r2
 8001dda:	60fb      	str	r3, [r7, #12]
	for(int16_t i = 1; (i + 2) < results->rawlen; i++)
 8001ddc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	3301      	adds	r3, #1
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	817b      	strh	r3, [r7, #10]
 8001de8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001dec:	3302      	adds	r3, #2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001df4:	4293      	cmp	r3, r2
 8001df6:	dbd3      	blt.n	8001da0 <decodeHash+0x20>
	}

	results->value = hash;
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	601a      	str	r2, [r3, #0]
	results->bits = 32;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2220      	movs	r2, #32
 8001e02:	809a      	strh	r2, [r3, #4]
	return 1;
 8001e04:	2301      	movs	r3, #1
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	811c9dc5 	.word	0x811c9dc5
 8001e14:	01000193 	.word	0x01000193

08001e18 <remake_palette>:

long long lastTick;

uint8_t palette[3][360];

void remake_palette(double brightness, double saturation) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001e22:	ed87 1b00 	vstr	d1, [r7]
	for (uint16_t i = 0; i < 360; i++) {
 8001e26:	2300      	movs	r3, #0
 8001e28:	82fb      	strh	r3, [r7, #22]
 8001e2a:	e02f      	b.n	8001e8c <remake_palette+0x74>
		rgb = hsv_to_rgb(i, saturation, brightness);
 8001e2c:	8afb      	ldrh	r3, [r7, #22]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fb70 	bl	8000514 <__aeabi_ui2d>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	ed97 2b02 	vldr	d2, [r7, #8]
 8001e3c:	ed97 1b00 	vldr	d1, [r7]
 8001e40:	ec43 2b10 	vmov	d0, r2, r3
 8001e44:	f000 fe64 	bl	8002b10 <hsv_to_rgb>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <remake_palette+0x88>)
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	7019      	strb	r1, [r3, #0]
 8001e50:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8001e54:	7059      	strb	r1, [r3, #1]
 8001e56:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8001e5a:	709a      	strb	r2, [r3, #2]
		palette[0][i] = rgb.r;
 8001e5c:	8afb      	ldrh	r3, [r7, #22]
 8001e5e:	4a10      	ldr	r2, [pc, #64]	; (8001ea0 <remake_palette+0x88>)
 8001e60:	7811      	ldrb	r1, [r2, #0]
 8001e62:	4a10      	ldr	r2, [pc, #64]	; (8001ea4 <remake_palette+0x8c>)
 8001e64:	54d1      	strb	r1, [r2, r3]
		palette[1][i] = rgb.g;
 8001e66:	8afb      	ldrh	r3, [r7, #22]
 8001e68:	4a0d      	ldr	r2, [pc, #52]	; (8001ea0 <remake_palette+0x88>)
 8001e6a:	7851      	ldrb	r1, [r2, #1]
 8001e6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ea4 <remake_palette+0x8c>)
 8001e6e:	4413      	add	r3, r2
 8001e70:	460a      	mov	r2, r1
 8001e72:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
		palette[2][i] = rgb.b;
 8001e76:	8afb      	ldrh	r3, [r7, #22]
 8001e78:	4a09      	ldr	r2, [pc, #36]	; (8001ea0 <remake_palette+0x88>)
 8001e7a:	7891      	ldrb	r1, [r2, #2]
 8001e7c:	4a09      	ldr	r2, [pc, #36]	; (8001ea4 <remake_palette+0x8c>)
 8001e7e:	4413      	add	r3, r2
 8001e80:	460a      	mov	r2, r1
 8001e82:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
	for (uint16_t i = 0; i < 360; i++) {
 8001e86:	8afb      	ldrh	r3, [r7, #22]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	82fb      	strh	r3, [r7, #22]
 8001e8c:	8afb      	ldrh	r3, [r7, #22]
 8001e8e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001e92:	d3cb      	bcc.n	8001e2c <remake_palette+0x14>
	}
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000990 	.word	0x20000990
 8001ea4:	200002a8 	.word	0x200002a8

08001ea8 <rainbow>:

uint16_t offset = 0;

void rainbow(uint8_t reverse, uint16_t chain, uint16_t segment) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	80bb      	strh	r3, [r7, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	807b      	strh	r3, [r7, #2]

	if (reverse) {
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d03e      	beq.n	8001f3e <rainbow+0x96>
		for (uint16_t i = 0; i < chain; i++) {
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	81fb      	strh	r3, [r7, #14]
 8001ec4:	e027      	b.n	8001f16 <rainbow+0x6e>
			uint16_t paletteIndex = ((360 / segment)
 8001ec6:	887b      	ldrh	r3, [r7, #2]
 8001ec8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001ecc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ed0:	b299      	uxth	r1, r3
					* ((i + offset - 1) % segment));
 8001ed2:	89fb      	ldrh	r3, [r7, #14]
 8001ed4:	4a3d      	ldr	r2, [pc, #244]	; (8001fcc <rainbow+0x124>)
 8001ed6:	8812      	ldrh	r2, [r2, #0]
 8001ed8:	4413      	add	r3, r2
 8001eda:	3b01      	subs	r3, #1
 8001edc:	887a      	ldrh	r2, [r7, #2]
 8001ede:	fb93 f0f2 	sdiv	r0, r3, r2
 8001ee2:	fb00 f202 	mul.w	r2, r0, r2
 8001ee6:	1a9b      	subs	r3, r3, r2
			uint16_t paletteIndex = ((360 / segment)
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	fb11 f303 	smulbb	r3, r1, r3
 8001eee:	813b      	strh	r3, [r7, #8]
			led_rgb_to_buf_dma(palette[0][paletteIndex],
 8001ef0:	893b      	ldrh	r3, [r7, #8]
 8001ef2:	4a37      	ldr	r2, [pc, #220]	; (8001fd0 <rainbow+0x128>)
 8001ef4:	5cd0      	ldrb	r0, [r2, r3]
 8001ef6:	893b      	ldrh	r3, [r7, #8]
 8001ef8:	4a35      	ldr	r2, [pc, #212]	; (8001fd0 <rainbow+0x128>)
 8001efa:	4413      	add	r3, r2
 8001efc:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8001f00:	893b      	ldrh	r3, [r7, #8]
 8001f02:	4a33      	ldr	r2, [pc, #204]	; (8001fd0 <rainbow+0x128>)
 8001f04:	4413      	add	r3, r2
 8001f06:	f893 22d0 	ldrb.w	r2, [r3, #720]	; 0x2d0
 8001f0a:	89fb      	ldrh	r3, [r7, #14]
 8001f0c:	f001 fa2e 	bl	800336c <led_rgb_to_buf_dma>
		for (uint16_t i = 0; i < chain; i++) {
 8001f10:	89fb      	ldrh	r3, [r7, #14]
 8001f12:	3301      	adds	r3, #1
 8001f14:	81fb      	strh	r3, [r7, #14]
 8001f16:	89fa      	ldrh	r2, [r7, #14]
 8001f18:	88bb      	ldrh	r3, [r7, #4]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d3d3      	bcc.n	8001ec6 <rainbow+0x1e>
					palette[1][paletteIndex], palette[2][paletteIndex], i);
		}
		led_light();
 8001f1e:	f001 fabf 	bl	80034a0 <led_light>
		offset--;
 8001f22:	4b2a      	ldr	r3, [pc, #168]	; (8001fcc <rainbow+0x124>)
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <rainbow+0x124>)
 8001f2c:	801a      	strh	r2, [r3, #0]
		if (offset == 0)
 8001f2e:	4b27      	ldr	r3, [pc, #156]	; (8001fcc <rainbow+0x124>)
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d145      	bne.n	8001fc2 <rainbow+0x11a>
			offset = segment;
 8001f36:	4a25      	ldr	r2, [pc, #148]	; (8001fcc <rainbow+0x124>)
 8001f38:	887b      	ldrh	r3, [r7, #2]
 8001f3a:	8013      	strh	r3, [r2, #0]
		led_light();
		offset++;
		if (offset == segment)
			offset = 0;
	}
}
 8001f3c:	e041      	b.n	8001fc2 <rainbow+0x11a>
		for (uint16_t i = 0; i < chain; i++) {
 8001f3e:	2300      	movs	r3, #0
 8001f40:	81bb      	strh	r3, [r7, #12]
 8001f42:	e02a      	b.n	8001f9a <rainbow+0xf2>
					- ((360 / segment) * ((i + offset) % segment));
 8001f44:	887b      	ldrh	r3, [r7, #2]
 8001f46:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001f4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f4e:	b299      	uxth	r1, r3
 8001f50:	89bb      	ldrh	r3, [r7, #12]
 8001f52:	4a1e      	ldr	r2, [pc, #120]	; (8001fcc <rainbow+0x124>)
 8001f54:	8812      	ldrh	r2, [r2, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	887a      	ldrh	r2, [r7, #2]
 8001f5a:	fb93 f0f2 	sdiv	r0, r3, r2
 8001f5e:	fb00 f202 	mul.w	r2, r0, r2
 8001f62:	1a9b      	subs	r3, r3, r2
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	fb11 f303 	smulbb	r3, r1, r3
 8001f6a:	b29b      	uxth	r3, r3
			uint16_t paletteIndex = 359
 8001f6c:	f5c3 73b3 	rsb	r3, r3, #358	; 0x166
 8001f70:	3301      	adds	r3, #1
 8001f72:	817b      	strh	r3, [r7, #10]
			led_rgb_to_buf_dma(palette[0][paletteIndex],
 8001f74:	897b      	ldrh	r3, [r7, #10]
 8001f76:	4a16      	ldr	r2, [pc, #88]	; (8001fd0 <rainbow+0x128>)
 8001f78:	5cd0      	ldrb	r0, [r2, r3]
 8001f7a:	897b      	ldrh	r3, [r7, #10]
 8001f7c:	4a14      	ldr	r2, [pc, #80]	; (8001fd0 <rainbow+0x128>)
 8001f7e:	4413      	add	r3, r2
 8001f80:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8001f84:	897b      	ldrh	r3, [r7, #10]
 8001f86:	4a12      	ldr	r2, [pc, #72]	; (8001fd0 <rainbow+0x128>)
 8001f88:	4413      	add	r3, r2
 8001f8a:	f893 22d0 	ldrb.w	r2, [r3, #720]	; 0x2d0
 8001f8e:	89bb      	ldrh	r3, [r7, #12]
 8001f90:	f001 f9ec 	bl	800336c <led_rgb_to_buf_dma>
		for (uint16_t i = 0; i < chain; i++) {
 8001f94:	89bb      	ldrh	r3, [r7, #12]
 8001f96:	3301      	adds	r3, #1
 8001f98:	81bb      	strh	r3, [r7, #12]
 8001f9a:	89ba      	ldrh	r2, [r7, #12]
 8001f9c:	88bb      	ldrh	r3, [r7, #4]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d3d0      	bcc.n	8001f44 <rainbow+0x9c>
		led_light();
 8001fa2:	f001 fa7d 	bl	80034a0 <led_light>
		offset++;
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <rainbow+0x124>)
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	3301      	adds	r3, #1
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <rainbow+0x124>)
 8001fb0:	801a      	strh	r2, [r3, #0]
		if (offset == segment)
 8001fb2:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <rainbow+0x124>)
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	887a      	ldrh	r2, [r7, #2]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d102      	bne.n	8001fc2 <rainbow+0x11a>
			offset = 0;
 8001fbc:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <rainbow+0x124>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	801a      	strh	r2, [r3, #0]
}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200006e0 	.word	0x200006e0
 8001fd0:	200002a8 	.word	0x200002a8
 8001fd4:	00000000 	.word	0x00000000

08001fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fdc:	b096      	sub	sp, #88	; 0x58
 8001fde:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fe0:	f001 fbba 	bl	8003758 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fe4:	f000 fa7e 	bl	80024e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fe8:	f000 fd02 	bl	80029f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001fec:	f000 fce0 	bl	80029b0 <MX_DMA_Init>
  MX_TIM1_Init();
 8001ff0:	f000 fb7c 	bl	80026ec <MX_TIM1_Init>
  MX_TIM4_Init();
 8001ff4:	f000 fc1a 	bl	800282c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001ff8:	f000 fcb0 	bl	800295c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001ffc:	f000 fb0a 	bl	8002614 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002000:	f000 fb3e 	bl	8002680 <MX_SPI2_Init>
  MX_I2C1_Init();
 8002004:	f000 fad8 	bl	80025b8 <MX_I2C1_Init>
  MX_TIM10_Init();
 8002008:	f000 fc5c 	bl	80028c4 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

	TIM10->CCR1 = 125;
 800200c:	4b17      	ldr	r3, [pc, #92]	; (800206c <main+0x94>)
 800200e:	227d      	movs	r2, #125	; 0x7d
 8002010:	635a      	str	r2, [r3, #52]	; 0x34
//	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);

	ir_enableIRIn();
 8002012:	f7ff fe45 	bl	8001ca0 <ir_enableIRIn>
	char trans_str[64] = { 0, };
 8002016:	2300      	movs	r3, #0
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	f107 0308 	add.w	r3, r7, #8
 800201e:	223c      	movs	r2, #60	; 0x3c
 8002020:	2100      	movs	r1, #0
 8002022:	4618      	mov	r0, r3
 8002024:	f006 f9b8 	bl	8008398 <memset>
	snprintf(trans_str, 64, "IR-receiver\r\n");
 8002028:	1d3b      	adds	r3, r7, #4
 800202a:	4a11      	ldr	r2, [pc, #68]	; (8002070 <main+0x98>)
 800202c:	2140      	movs	r1, #64	; 0x40
 800202e:	4618      	mov	r0, r3
 8002030:	f006 f9ba 	bl	80083a8 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) trans_str, strlen(trans_str), 100);
 8002034:	1d3b      	adds	r3, r7, #4
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe f8d2 	bl	80001e0 <strlen>
 800203c:	4603      	mov	r3, r0
 800203e:	b29a      	uxth	r2, r3
 8002040:	1d39      	adds	r1, r7, #4
 8002042:	2364      	movs	r3, #100	; 0x64
 8002044:	480b      	ldr	r0, [pc, #44]	; (8002074 <main+0x9c>)
 8002046:	f005 fdfa 	bl	8007c3e <HAL_UART_Transmit>

	bright = AT24XX_Read(10);
 800204a:	200a      	movs	r0, #10
 800204c:	f7fe ff64 	bl	8000f18 <AT24XX_Read>
 8002050:	4603      	mov	r3, r0
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fa5e 	bl	8000514 <__aeabi_ui2d>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4906      	ldr	r1, [pc, #24]	; (8002078 <main+0xa0>)
 800205e:	e9c1 2300 	strd	r2, r3, [r1]

	for (uint16_t i = 0; i < 40; i++) {
 8002062:	2300      	movs	r3, #0
 8002064:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002068:	e014      	b.n	8002094 <main+0xbc>
 800206a:	bf00      	nop
 800206c:	40014400 	.word	0x40014400
 8002070:	08008d0c 	.word	0x08008d0c
 8002074:	20000920 	.word	0x20000920
 8002078:	20000978 	.word	0x20000978
		led_rgb_to_buf_dma(1, 1, 1, i);
 800207c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002080:	2201      	movs	r2, #1
 8002082:	2101      	movs	r1, #1
 8002084:	2001      	movs	r0, #1
 8002086:	f001 f971 	bl	800336c <led_rgb_to_buf_dma>
	for (uint16_t i = 0; i < 40; i++) {
 800208a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800208e:	3301      	adds	r3, #1
 8002090:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002094:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002098:	2b27      	cmp	r3, #39	; 0x27
 800209a:	d9ef      	bls.n	800207c <main+0xa4>
	}
	led_light();
 800209c:	f001 fa00 	bl	80034a0 <led_light>

	remake_palette(bright / 255, satur);
 80020a0:	4bbd      	ldr	r3, [pc, #756]	; (8002398 <main+0x3c0>)
 80020a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020a6:	a3ba      	add	r3, pc, #744	; (adr r3, 8002390 <main+0x3b8>)
 80020a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ac:	f7fe fbd6 	bl	800085c <__aeabi_ddiv>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	ec43 2b16 	vmov	d6, r2, r3
 80020b8:	4bb8      	ldr	r3, [pc, #736]	; (800239c <main+0x3c4>)
 80020ba:	ed93 7b00 	vldr	d7, [r3]
 80020be:	eeb0 1a47 	vmov.f32	s2, s14
 80020c2:	eef0 1a67 	vmov.f32	s3, s15
 80020c6:	eeb0 0a46 	vmov.f32	s0, s12
 80020ca:	eef0 0a66 	vmov.f32	s1, s13
 80020ce:	f7ff fea3 	bl	8001e18 <remake_palette>

	LCD_Init();
 80020d2:	f7ff fc89 	bl	80019e8 <LCD_Init>
	XPT2046_Init();
 80020d6:	f001 fa21 	bl	800351c <XPT2046_Init>

//	LCD_Rect_Fill(0, 0, LCD_WIDTH, LCD_HEIGHT, BLUE);
//	LCD_Rect_Fill(1, 1, LCD_WIDTH - 2, LCD_HEIGHT - 2, BLACK);

	LCD_Rect(0, 0, LCD_WIDTH, LCD_HEIGHT, 1, WHITE);
 80020da:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80020de:	9301      	str	r3, [sp, #4]
 80020e0:	2301      	movs	r3, #1
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80020e8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80020ec:	2100      	movs	r1, #0
 80020ee:	2000      	movs	r0, #0
 80020f0:	f7ff f87b 	bl	80011ea <LCD_Rect>

	LCD_Rect_Round(110, 10, 256, 15, 1, 1, RED);
 80020f4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80020f8:	9302      	str	r3, [sp, #8]
 80020fa:	2301      	movs	r3, #1
 80020fc:	9301      	str	r3, [sp, #4]
 80020fe:	2301      	movs	r3, #1
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	230f      	movs	r3, #15
 8002104:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002108:	210a      	movs	r1, #10
 800210a:	206e      	movs	r0, #110	; 0x6e
 800210c:	f7ff f9c2 	bl	8001494 <LCD_Rect_Round>
	LCD_Rect_Round(110, 35, 256, 15, 1, 1, GREEN);
 8002110:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002114:	9302      	str	r3, [sp, #8]
 8002116:	2301      	movs	r3, #1
 8002118:	9301      	str	r3, [sp, #4]
 800211a:	2301      	movs	r3, #1
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	230f      	movs	r3, #15
 8002120:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002124:	2123      	movs	r1, #35	; 0x23
 8002126:	206e      	movs	r0, #110	; 0x6e
 8002128:	f7ff f9b4 	bl	8001494 <LCD_Rect_Round>
	LCD_Rect_Round(110, 60, 256, 15, 1, 1, BLUE);
 800212c:	23ff      	movs	r3, #255	; 0xff
 800212e:	9302      	str	r3, [sp, #8]
 8002130:	2301      	movs	r3, #1
 8002132:	9301      	str	r3, [sp, #4]
 8002134:	2301      	movs	r3, #1
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	230f      	movs	r3, #15
 800213a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800213e:	213c      	movs	r1, #60	; 0x3c
 8002140:	206e      	movs	r0, #110	; 0x6e
 8002142:	f7ff f9a7 	bl	8001494 <LCD_Rect_Round>
	LCD_Rect_Round(110, 85, 361, 15, 1, 1, WHITE);
 8002146:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800214a:	9302      	str	r3, [sp, #8]
 800214c:	2301      	movs	r3, #1
 800214e:	9301      	str	r3, [sp, #4]
 8002150:	2301      	movs	r3, #1
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	230f      	movs	r3, #15
 8002156:	f240 1269 	movw	r2, #361	; 0x169
 800215a:	2155      	movs	r1, #85	; 0x55
 800215c:	206e      	movs	r0, #110	; 0x6e
 800215e:	f7ff f999 	bl	8001494 <LCD_Rect_Round>
	LCD_Rect_Round(110, 110, 256, 15, 1, 1, GRAY);
 8002162:	4b8f      	ldr	r3, [pc, #572]	; (80023a0 <main+0x3c8>)
 8002164:	9302      	str	r3, [sp, #8]
 8002166:	2301      	movs	r3, #1
 8002168:	9301      	str	r3, [sp, #4]
 800216a:	2301      	movs	r3, #1
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	230f      	movs	r3, #15
 8002170:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002174:	216e      	movs	r1, #110	; 0x6e
 8002176:	206e      	movs	r0, #110	; 0x6e
 8002178:	f7ff f98c 	bl	8001494 <LCD_Rect_Round>
	LCD_Rect_Round(110, 135, 256, 15, 1, 1, YELLOW);
 800217c:	4b89      	ldr	r3, [pc, #548]	; (80023a4 <main+0x3cc>)
 800217e:	9302      	str	r3, [sp, #8]
 8002180:	2301      	movs	r3, #1
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	2301      	movs	r3, #1
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	230f      	movs	r3, #15
 800218a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800218e:	2187      	movs	r1, #135	; 0x87
 8002190:	206e      	movs	r0, #110	; 0x6e
 8002192:	f7ff f97f 	bl	8001494 <LCD_Rect_Round>
	LCD_Rect_Round(110, 160, 256, 15, 1, 1, CYAN);
 8002196:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800219a:	9302      	str	r3, [sp, #8]
 800219c:	2301      	movs	r3, #1
 800219e:	9301      	str	r3, [sp, #4]
 80021a0:	2301      	movs	r3, #1
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	230f      	movs	r3, #15
 80021a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021aa:	21a0      	movs	r1, #160	; 0xa0
 80021ac:	206e      	movs	r0, #110	; 0x6e
 80021ae:	f7ff f971 	bl	8001494 <LCD_Rect_Round>


	LCD_Font(25, 25, "R: 127", &DejaVu_Sans_20, 1, RED);
 80021b2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	2301      	movs	r3, #1
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	4b7a      	ldr	r3, [pc, #488]	; (80023a8 <main+0x3d0>)
 80021be:	4a7b      	ldr	r2, [pc, #492]	; (80023ac <main+0x3d4>)
 80021c0:	2119      	movs	r1, #25
 80021c2:	2019      	movs	r0, #25
 80021c4:	f7ff fb26 	bl	8001814 <LCD_Font>
	LCD_Font(25, 50, "G: 127", &DejaVu_Sans_20, 1, GREEN);
 80021c8:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80021cc:	9301      	str	r3, [sp, #4]
 80021ce:	2301      	movs	r3, #1
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	4b75      	ldr	r3, [pc, #468]	; (80023a8 <main+0x3d0>)
 80021d4:	4a76      	ldr	r2, [pc, #472]	; (80023b0 <main+0x3d8>)
 80021d6:	2132      	movs	r1, #50	; 0x32
 80021d8:	2019      	movs	r0, #25
 80021da:	f7ff fb1b 	bl	8001814 <LCD_Font>
	LCD_Font(25, 75, "B: 127", &DejaVu_Sans_20, 1, BLUE);
 80021de:	23ff      	movs	r3, #255	; 0xff
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	2301      	movs	r3, #1
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	4b70      	ldr	r3, [pc, #448]	; (80023a8 <main+0x3d0>)
 80021e8:	4a72      	ldr	r2, [pc, #456]	; (80023b4 <main+0x3dc>)
 80021ea:	214b      	movs	r1, #75	; 0x4b
 80021ec:	2019      	movs	r0, #25
 80021ee:	f7ff fb11 	bl	8001814 <LCD_Font>
	LCD_Font(25, 100, "H: 180", &DejaVu_Sans_20, 1, WHITE);
 80021f2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80021f6:	9301      	str	r3, [sp, #4]
 80021f8:	2301      	movs	r3, #1
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	4b6a      	ldr	r3, [pc, #424]	; (80023a8 <main+0x3d0>)
 80021fe:	4a6e      	ldr	r2, [pc, #440]	; (80023b8 <main+0x3e0>)
 8002200:	2164      	movs	r1, #100	; 0x64
 8002202:	2019      	movs	r0, #25
 8002204:	f7ff fb06 	bl	8001814 <LCD_Font>
	LCD_Font(25, 125, "S: 127", &DejaVu_Sans_20, 1, GRAY);
 8002208:	4b65      	ldr	r3, [pc, #404]	; (80023a0 <main+0x3c8>)
 800220a:	9301      	str	r3, [sp, #4]
 800220c:	2301      	movs	r3, #1
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	4b65      	ldr	r3, [pc, #404]	; (80023a8 <main+0x3d0>)
 8002212:	4a6a      	ldr	r2, [pc, #424]	; (80023bc <main+0x3e4>)
 8002214:	217d      	movs	r1, #125	; 0x7d
 8002216:	2019      	movs	r0, #25
 8002218:	f7ff fafc 	bl	8001814 <LCD_Font>
	LCD_Font(25, 150, "V: 127", &DejaVu_Sans_20, 1, YELLOW);
 800221c:	4b61      	ldr	r3, [pc, #388]	; (80023a4 <main+0x3cc>)
 800221e:	9301      	str	r3, [sp, #4]
 8002220:	2301      	movs	r3, #1
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	4b60      	ldr	r3, [pc, #384]	; (80023a8 <main+0x3d0>)
 8002226:	4a66      	ldr	r2, [pc, #408]	; (80023c0 <main+0x3e8>)
 8002228:	2196      	movs	r1, #150	; 0x96
 800222a:	2019      	movs	r0, #25
 800222c:	f7ff faf2 	bl	8001814 <LCD_Font>
	LCD_Font(25, 175, "D: 100", &DejaVu_Sans_20, 1, CYAN);
 8002230:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002234:	9301      	str	r3, [sp, #4]
 8002236:	2301      	movs	r3, #1
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	4b5b      	ldr	r3, [pc, #364]	; (80023a8 <main+0x3d0>)
 800223c:	4a61      	ldr	r2, [pc, #388]	; (80023c4 <main+0x3ec>)
 800223e:	21af      	movs	r1, #175	; 0xaf
 8002240:	2019      	movs	r0, #25
 8002242:	f7ff fae7 	bl	8001814 <LCD_Font>
  /* USER CODE BEGIN WHILE */
	while (1) {

//		if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET)){

			touchX = getX();
 8002246:	f001 fa29 	bl	800369c <getX>
 800224a:	4603      	mov	r3, r0
 800224c:	461a      	mov	r2, r3
 800224e:	4b5e      	ldr	r3, [pc, #376]	; (80023c8 <main+0x3f0>)
 8002250:	801a      	strh	r2, [r3, #0]
			touchY = getY();
 8002252:	f001 fa3d 	bl	80036d0 <getY>
 8002256:	4603      	mov	r3, r0
 8002258:	461a      	mov	r2, r3
 800225a:	4b5c      	ldr	r3, [pc, #368]	; (80023cc <main+0x3f4>)
 800225c:	801a      	strh	r2, [r3, #0]
			if (touchX && touchY) {
 800225e:	4b5a      	ldr	r3, [pc, #360]	; (80023c8 <main+0x3f0>)
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d019      	beq.n	800229a <main+0x2c2>
 8002266:	4b59      	ldr	r3, [pc, #356]	; (80023cc <main+0x3f4>)
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d015      	beq.n	800229a <main+0x2c2>
				LCD_Rect_Fill(touchX, touchY, 1, 1, WHITE);
 800226e:	4b56      	ldr	r3, [pc, #344]	; (80023c8 <main+0x3f0>)
 8002270:	8818      	ldrh	r0, [r3, #0]
 8002272:	4b56      	ldr	r3, [pc, #344]	; (80023cc <main+0x3f4>)
 8002274:	8819      	ldrh	r1, [r3, #0]
 8002276:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	2301      	movs	r3, #1
 800227e:	2201      	movs	r2, #1
 8002280:	f7fe ff0c 	bl	800109c <LCD_Rect_Fill>

				HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8002284:	2100      	movs	r1, #0
 8002286:	4852      	ldr	r0, [pc, #328]	; (80023d0 <main+0x3f8>)
 8002288:	f004 fa8a 	bl	80067a0 <HAL_TIM_PWM_Start>
				HAL_Delay(50);
 800228c:	2032      	movs	r0, #50	; 0x32
 800228e:	f001 fad5 	bl	800383c <HAL_Delay>
				HAL_TIM_PWM_Stop(&htim10, TIM_CHANNEL_1);
 8002292:	2100      	movs	r1, #0
 8002294:	484e      	ldr	r0, [pc, #312]	; (80023d0 <main+0x3f8>)
 8002296:	f004 fb33 	bl	8006900 <HAL_TIM_PWM_Stop>
			}
//		}
			touchX = 0;
 800229a:	4b4b      	ldr	r3, [pc, #300]	; (80023c8 <main+0x3f0>)
 800229c:	2200      	movs	r2, #0
 800229e:	801a      	strh	r2, [r3, #0]
			touchY = 0;
 80022a0:	4b4a      	ldr	r3, [pc, #296]	; (80023cc <main+0x3f4>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	801a      	strh	r2, [r3, #0]

		millis = HAL_GetTick();
 80022a6:	f001 fabd 	bl	8003824 <HAL_GetTick>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2200      	movs	r2, #0
 80022ae:	469a      	mov	sl, r3
 80022b0:	4693      	mov	fp, r2
 80022b2:	4b48      	ldr	r3, [pc, #288]	; (80023d4 <main+0x3fc>)
 80022b4:	e9c3 ab00 	strd	sl, fp, [r3]
		if (millis_last + delay < millis) {
 80022b8:	4b47      	ldr	r3, [pc, #284]	; (80023d8 <main+0x400>)
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	2200      	movs	r2, #0
 80022c0:	4698      	mov	r8, r3
 80022c2:	4691      	mov	r9, r2
 80022c4:	4b45      	ldr	r3, [pc, #276]	; (80023dc <main+0x404>)
 80022c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ca:	eb18 0402 	adds.w	r4, r8, r2
 80022ce:	eb49 0503 	adc.w	r5, r9, r3
 80022d2:	4b40      	ldr	r3, [pc, #256]	; (80023d4 <main+0x3fc>)
 80022d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d8:	4294      	cmp	r4, r2
 80022da:	eb75 0303 	sbcs.w	r3, r5, r3
 80022de:	da0b      	bge.n	80022f8 <main+0x320>
			millis_last = millis;
 80022e0:	4b3c      	ldr	r3, [pc, #240]	; (80023d4 <main+0x3fc>)
 80022e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e6:	493d      	ldr	r1, [pc, #244]	; (80023dc <main+0x404>)
 80022e8:	e9c1 2300 	strd	r2, r3, [r1]
			rainbow(1, 600, 8);
 80022ec:	2208      	movs	r2, #8
 80022ee:	f44f 7116 	mov.w	r1, #600	; 0x258
 80022f2:	2001      	movs	r0, #1
 80022f4:	f7ff fdd8 	bl	8001ea8 <rainbow>
		}

		if (ir_decode(&results)) {
 80022f8:	4839      	ldr	r0, [pc, #228]	; (80023e0 <main+0x408>)
 80022fa:	f7ff fca3 	bl	8001c44 <ir_decode>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0a0      	beq.n	8002246 <main+0x26e>
			snprintf(trans_str, 64, "Code: HEX %p DEC %lu\r\n",
					(void*) results.value, results.value);
 8002304:	4b36      	ldr	r3, [pc, #216]	; (80023e0 <main+0x408>)
 8002306:	681b      	ldr	r3, [r3, #0]
			snprintf(trans_str, 64, "Code: HEX %p DEC %lu\r\n",
 8002308:	461a      	mov	r2, r3
 800230a:	4b35      	ldr	r3, [pc, #212]	; (80023e0 <main+0x408>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	1d38      	adds	r0, r7, #4
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	4613      	mov	r3, r2
 8002314:	4a33      	ldr	r2, [pc, #204]	; (80023e4 <main+0x40c>)
 8002316:	2140      	movs	r1, #64	; 0x40
 8002318:	f006 f846 	bl	80083a8 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) trans_str, strlen(trans_str), 100);
 800231c:	1d3b      	adds	r3, r7, #4
 800231e:	4618      	mov	r0, r3
 8002320:	f7fd ff5e 	bl	80001e0 <strlen>
 8002324:	4603      	mov	r3, r0
 8002326:	b29a      	uxth	r2, r3
 8002328:	1d39      	adds	r1, r7, #4
 800232a:	2364      	movs	r3, #100	; 0x64
 800232c:	482e      	ldr	r0, [pc, #184]	; (80023e8 <main+0x410>)
 800232e:	f005 fc86 	bl	8007c3e <HAL_UART_Transmit>

			HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8002332:	2100      	movs	r1, #0
 8002334:	4826      	ldr	r0, [pc, #152]	; (80023d0 <main+0x3f8>)
 8002336:	f004 fa33 	bl	80067a0 <HAL_TIM_PWM_Start>
			HAL_Delay(50);
 800233a:	2032      	movs	r0, #50	; 0x32
 800233c:	f001 fa7e 	bl	800383c <HAL_Delay>
			HAL_TIM_PWM_Stop(&htim10, TIM_CHANNEL_1);
 8002340:	2100      	movs	r1, #0
 8002342:	4823      	ldr	r0, [pc, #140]	; (80023d0 <main+0x3f8>)
 8002344:	f004 fadc 	bl	8006900 <HAL_TIM_PWM_Stop>

			if (results.value == 0x44490a7b && bright > 0) { // Button: "[BR-]"
 8002348:	4b25      	ldr	r3, [pc, #148]	; (80023e0 <main+0x408>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a27      	ldr	r2, [pc, #156]	; (80023ec <main+0x414>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d171      	bne.n	8002436 <main+0x45e>
 8002352:	4b11      	ldr	r3, [pc, #68]	; (8002398 <main+0x3c0>)
 8002354:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	f7fe fbe2 	bl	8000b28 <__aeabi_dcmpgt>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d065      	beq.n	8002436 <main+0x45e>
				bright -= 1;
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <main+0x3c0>)
 800236c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <main+0x418>)
 8002376:	f7fd ff8f 	bl	8000298 <__aeabi_dsub>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4906      	ldr	r1, [pc, #24]	; (8002398 <main+0x3c0>)
 8002380:	e9c1 2300 	strd	r2, r3, [r1]
				AT24XX_Write(10, bright);
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <main+0x3c0>)
 8002386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238a:	4610      	mov	r0, r2
 800238c:	4619      	mov	r1, r3
 800238e:	e031      	b.n	80023f4 <main+0x41c>
 8002390:	00000000 	.word	0x00000000
 8002394:	406fe000 	.word	0x406fe000
 8002398:	20000978 	.word	0x20000978
 800239c:	20000000 	.word	0x20000000
 80023a0:	007f7f7f 	.word	0x007f7f7f
 80023a4:	00ffff00 	.word	0x00ffff00
 80023a8:	080096f0 	.word	0x080096f0
 80023ac:	08008d1c 	.word	0x08008d1c
 80023b0:	08008d24 	.word	0x08008d24
 80023b4:	08008d2c 	.word	0x08008d2c
 80023b8:	08008d34 	.word	0x08008d34
 80023bc:	08008d3c 	.word	0x08008d3c
 80023c0:	08008d44 	.word	0x08008d44
 80023c4:	08008d4c 	.word	0x08008d4c
 80023c8:	20000964 	.word	0x20000964
 80023cc:	20000966 	.word	0x20000966
 80023d0:	20000878 	.word	0x20000878
 80023d4:	20000980 	.word	0x20000980
 80023d8:	20000008 	.word	0x20000008
 80023dc:	20000988 	.word	0x20000988
 80023e0:	20000968 	.word	0x20000968
 80023e4:	08008d54 	.word	0x08008d54
 80023e8:	20000920 	.word	0x20000920
 80023ec:	44490a7b 	.word	0x44490a7b
 80023f0:	3ff00000 	.word	0x3ff00000
 80023f4:	f7fe fba2 	bl	8000b3c <__aeabi_d2uiz>
 80023f8:	4603      	mov	r3, r0
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	4619      	mov	r1, r3
 80023fe:	200a      	movs	r0, #10
 8002400:	f7fe fd9e 	bl	8000f40 <AT24XX_Write>
				remake_palette(bright / 255, satur);
 8002404:	4b32      	ldr	r3, [pc, #200]	; (80024d0 <main+0x4f8>)
 8002406:	e9d3 0100 	ldrd	r0, r1, [r3]
 800240a:	a32f      	add	r3, pc, #188	; (adr r3, 80024c8 <main+0x4f0>)
 800240c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002410:	f7fe fa24 	bl	800085c <__aeabi_ddiv>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	ec43 2b16 	vmov	d6, r2, r3
 800241c:	4b2d      	ldr	r3, [pc, #180]	; (80024d4 <main+0x4fc>)
 800241e:	ed93 7b00 	vldr	d7, [r3]
 8002422:	eeb0 1a47 	vmov.f32	s2, s14
 8002426:	eef0 1a67 	vmov.f32	s3, s15
 800242a:	eeb0 0a46 	vmov.f32	s0, s12
 800242e:	eef0 0a66 	vmov.f32	s1, s13
 8002432:	f7ff fcf1 	bl	8001e18 <remake_palette>
			}

			if (results.value == 0xb3d4b87f && bright < 255) { // Button: "[BR+]"
 8002436:	4b28      	ldr	r3, [pc, #160]	; (80024d8 <main+0x500>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a28      	ldr	r2, [pc, #160]	; (80024dc <main+0x504>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d13d      	bne.n	80024bc <main+0x4e4>
 8002440:	4b23      	ldr	r3, [pc, #140]	; (80024d0 <main+0x4f8>)
 8002442:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002446:	a320      	add	r3, pc, #128	; (adr r3, 80024c8 <main+0x4f0>)
 8002448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244c:	f7fe fb4e 	bl	8000aec <__aeabi_dcmplt>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d032      	beq.n	80024bc <main+0x4e4>
				bright += 1;
 8002456:	4b1e      	ldr	r3, [pc, #120]	; (80024d0 <main+0x4f8>)
 8002458:	e9d3 0100 	ldrd	r0, r1, [r3]
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	4b1f      	ldr	r3, [pc, #124]	; (80024e0 <main+0x508>)
 8002462:	f7fd ff1b 	bl	800029c <__adddf3>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4919      	ldr	r1, [pc, #100]	; (80024d0 <main+0x4f8>)
 800246c:	e9c1 2300 	strd	r2, r3, [r1]
				AT24XX_Write(10, bright);
 8002470:	4b17      	ldr	r3, [pc, #92]	; (80024d0 <main+0x4f8>)
 8002472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	f7fe fb5f 	bl	8000b3c <__aeabi_d2uiz>
 800247e:	4603      	mov	r3, r0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	4619      	mov	r1, r3
 8002484:	200a      	movs	r0, #10
 8002486:	f7fe fd5b 	bl	8000f40 <AT24XX_Write>
				remake_palette(bright / 255, satur);
 800248a:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <main+0x4f8>)
 800248c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002490:	a30d      	add	r3, pc, #52	; (adr r3, 80024c8 <main+0x4f0>)
 8002492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002496:	f7fe f9e1 	bl	800085c <__aeabi_ddiv>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	ec43 2b16 	vmov	d6, r2, r3
 80024a2:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <main+0x4fc>)
 80024a4:	ed93 7b00 	vldr	d7, [r3]
 80024a8:	eeb0 1a47 	vmov.f32	s2, s14
 80024ac:	eef0 1a67 	vmov.f32	s3, s15
 80024b0:	eeb0 0a46 	vmov.f32	s0, s12
 80024b4:	eef0 0a66 	vmov.f32	s1, s13
 80024b8:	f7ff fcae 	bl	8001e18 <remake_palette>
			}
			ir_resume();
 80024bc:	f7ff fc06 	bl	8001ccc <ir_resume>
			touchX = getX();
 80024c0:	e6c1      	b.n	8002246 <main+0x26e>
 80024c2:	bf00      	nop
 80024c4:	f3af 8000 	nop.w
 80024c8:	00000000 	.word	0x00000000
 80024cc:	406fe000 	.word	0x406fe000
 80024d0:	20000978 	.word	0x20000978
 80024d4:	20000000 	.word	0x20000000
 80024d8:	20000968 	.word	0x20000968
 80024dc:	b3d4b87f 	.word	0xb3d4b87f
 80024e0:	3ff00000 	.word	0x3ff00000

080024e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b094      	sub	sp, #80	; 0x50
 80024e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ea:	f107 0320 	add.w	r3, r7, #32
 80024ee:	2230      	movs	r2, #48	; 0x30
 80024f0:	2100      	movs	r1, #0
 80024f2:	4618      	mov	r0, r3
 80024f4:	f005 ff50 	bl	8008398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024f8:	f107 030c 	add.w	r3, r7, #12
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002508:	2300      	movs	r3, #0
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	4b28      	ldr	r3, [pc, #160]	; (80025b0 <SystemClock_Config+0xcc>)
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	4a27      	ldr	r2, [pc, #156]	; (80025b0 <SystemClock_Config+0xcc>)
 8002512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002516:	6413      	str	r3, [r2, #64]	; 0x40
 8002518:	4b25      	ldr	r3, [pc, #148]	; (80025b0 <SystemClock_Config+0xcc>)
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002524:	2300      	movs	r3, #0
 8002526:	607b      	str	r3, [r7, #4]
 8002528:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <SystemClock_Config+0xd0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002530:	4a20      	ldr	r2, [pc, #128]	; (80025b4 <SystemClock_Config+0xd0>)
 8002532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	4b1e      	ldr	r3, [pc, #120]	; (80025b4 <SystemClock_Config+0xd0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002540:	607b      	str	r3, [r7, #4]
 8002542:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002544:	2301      	movs	r3, #1
 8002546:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002548:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800254e:	2302      	movs	r3, #2
 8002550:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002552:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002556:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002558:	2319      	movs	r3, #25
 800255a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800255c:	23a8      	movs	r3, #168	; 0xa8
 800255e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002560:	2302      	movs	r3, #2
 8002562:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002564:	2304      	movs	r3, #4
 8002566:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002568:	f107 0320 	add.w	r3, r7, #32
 800256c:	4618      	mov	r0, r3
 800256e:	f002 ff81 	bl	8005474 <HAL_RCC_OscConfig>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002578:	f000 fac2 	bl	8002b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800257c:	230f      	movs	r3, #15
 800257e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002580:	2302      	movs	r3, #2
 8002582:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800258c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002592:	f107 030c 	add.w	r3, r7, #12
 8002596:	2102      	movs	r1, #2
 8002598:	4618      	mov	r0, r3
 800259a:	f003 f9e3 	bl	8005964 <HAL_RCC_ClockConfig>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80025a4:	f000 faac 	bl	8002b00 <Error_Handler>
  }
}
 80025a8:	bf00      	nop
 80025aa:	3750      	adds	r7, #80	; 0x50
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40007000 	.word	0x40007000

080025b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025bc:	4b12      	ldr	r3, [pc, #72]	; (8002608 <MX_I2C1_Init+0x50>)
 80025be:	4a13      	ldr	r2, [pc, #76]	; (800260c <MX_I2C1_Init+0x54>)
 80025c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80025c2:	4b11      	ldr	r3, [pc, #68]	; (8002608 <MX_I2C1_Init+0x50>)
 80025c4:	4a12      	ldr	r2, [pc, #72]	; (8002610 <MX_I2C1_Init+0x58>)
 80025c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <MX_I2C1_Init+0x50>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025ce:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <MX_I2C1_Init+0x50>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <MX_I2C1_Init+0x50>)
 80025d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025dc:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <MX_I2C1_Init+0x50>)
 80025de:	2200      	movs	r2, #0
 80025e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80025e2:	4b09      	ldr	r3, [pc, #36]	; (8002608 <MX_I2C1_Init+0x50>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025e8:	4b07      	ldr	r3, [pc, #28]	; (8002608 <MX_I2C1_Init+0x50>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <MX_I2C1_Init+0x50>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025f4:	4804      	ldr	r0, [pc, #16]	; (8002608 <MX_I2C1_Init+0x50>)
 80025f6:	f001 ff7d 	bl	80044f4 <HAL_I2C_Init>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002600:	f000 fa7e 	bl	8002b00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}
 8002608:	200006e4 	.word	0x200006e4
 800260c:	40005400 	.word	0x40005400
 8002610:	000186a0 	.word	0x000186a0

08002614 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002618:	4b17      	ldr	r3, [pc, #92]	; (8002678 <MX_SPI1_Init+0x64>)
 800261a:	4a18      	ldr	r2, [pc, #96]	; (800267c <MX_SPI1_Init+0x68>)
 800261c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800261e:	4b16      	ldr	r3, [pc, #88]	; (8002678 <MX_SPI1_Init+0x64>)
 8002620:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002624:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002626:	4b14      	ldr	r3, [pc, #80]	; (8002678 <MX_SPI1_Init+0x64>)
 8002628:	2200      	movs	r2, #0
 800262a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800262c:	4b12      	ldr	r3, [pc, #72]	; (8002678 <MX_SPI1_Init+0x64>)
 800262e:	2200      	movs	r2, #0
 8002630:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002632:	4b11      	ldr	r3, [pc, #68]	; (8002678 <MX_SPI1_Init+0x64>)
 8002634:	2200      	movs	r2, #0
 8002636:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002638:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <MX_SPI1_Init+0x64>)
 800263a:	2200      	movs	r2, #0
 800263c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800263e:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <MX_SPI1_Init+0x64>)
 8002640:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002644:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002646:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <MX_SPI1_Init+0x64>)
 8002648:	2238      	movs	r2, #56	; 0x38
 800264a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800264c:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <MX_SPI1_Init+0x64>)
 800264e:	2200      	movs	r2, #0
 8002650:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002652:	4b09      	ldr	r3, [pc, #36]	; (8002678 <MX_SPI1_Init+0x64>)
 8002654:	2200      	movs	r2, #0
 8002656:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002658:	4b07      	ldr	r3, [pc, #28]	; (8002678 <MX_SPI1_Init+0x64>)
 800265a:	2200      	movs	r2, #0
 800265c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <MX_SPI1_Init+0x64>)
 8002660:	220a      	movs	r2, #10
 8002662:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002664:	4804      	ldr	r0, [pc, #16]	; (8002678 <MX_SPI1_Init+0x64>)
 8002666:	f003 fb5d 	bl	8005d24 <HAL_SPI_Init>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002670:	f000 fa46 	bl	8002b00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002674:	bf00      	nop
 8002676:	bd80      	pop	{r7, pc}
 8002678:	20000738 	.word	0x20000738
 800267c:	40013000 	.word	0x40013000

08002680 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002684:	4b17      	ldr	r3, [pc, #92]	; (80026e4 <MX_SPI2_Init+0x64>)
 8002686:	4a18      	ldr	r2, [pc, #96]	; (80026e8 <MX_SPI2_Init+0x68>)
 8002688:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800268a:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <MX_SPI2_Init+0x64>)
 800268c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002690:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002692:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <MX_SPI2_Init+0x64>)
 8002694:	2200      	movs	r2, #0
 8002696:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002698:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <MX_SPI2_Init+0x64>)
 800269a:	2200      	movs	r2, #0
 800269c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800269e:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <MX_SPI2_Init+0x64>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026a4:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <MX_SPI2_Init+0x64>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80026aa:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <MX_SPI2_Init+0x64>)
 80026ac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80026b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026b2:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <MX_SPI2_Init+0x64>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026b8:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <MX_SPI2_Init+0x64>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80026be:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <MX_SPI2_Init+0x64>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026c4:	4b07      	ldr	r3, [pc, #28]	; (80026e4 <MX_SPI2_Init+0x64>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <MX_SPI2_Init+0x64>)
 80026cc:	220a      	movs	r2, #10
 80026ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80026d0:	4804      	ldr	r0, [pc, #16]	; (80026e4 <MX_SPI2_Init+0x64>)
 80026d2:	f003 fb27 	bl	8005d24 <HAL_SPI_Init>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80026dc:	f000 fa10 	bl	8002b00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80026e0:	bf00      	nop
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20000790 	.word	0x20000790
 80026e8:	40003800 	.word	0x40003800

080026ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b096      	sub	sp, #88	; 0x58
 80026f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	605a      	str	r2, [r3, #4]
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002700:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800270a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	609a      	str	r2, [r3, #8]
 8002716:	60da      	str	r2, [r3, #12]
 8002718:	611a      	str	r2, [r3, #16]
 800271a:	615a      	str	r2, [r3, #20]
 800271c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	2220      	movs	r2, #32
 8002722:	2100      	movs	r1, #0
 8002724:	4618      	mov	r0, r3
 8002726:	f005 fe37 	bl	8008398 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800272a:	4b3e      	ldr	r3, [pc, #248]	; (8002824 <MX_TIM1_Init+0x138>)
 800272c:	4a3e      	ldr	r2, [pc, #248]	; (8002828 <MX_TIM1_Init+0x13c>)
 800272e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002730:	4b3c      	ldr	r3, [pc, #240]	; (8002824 <MX_TIM1_Init+0x138>)
 8002732:	2200      	movs	r2, #0
 8002734:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002736:	4b3b      	ldr	r3, [pc, #236]	; (8002824 <MX_TIM1_Init+0x138>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 104;
 800273c:	4b39      	ldr	r3, [pc, #228]	; (8002824 <MX_TIM1_Init+0x138>)
 800273e:	2268      	movs	r2, #104	; 0x68
 8002740:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002742:	4b38      	ldr	r3, [pc, #224]	; (8002824 <MX_TIM1_Init+0x138>)
 8002744:	2200      	movs	r2, #0
 8002746:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002748:	4b36      	ldr	r3, [pc, #216]	; (8002824 <MX_TIM1_Init+0x138>)
 800274a:	2200      	movs	r2, #0
 800274c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800274e:	4b35      	ldr	r3, [pc, #212]	; (8002824 <MX_TIM1_Init+0x138>)
 8002750:	2200      	movs	r2, #0
 8002752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002754:	4833      	ldr	r0, [pc, #204]	; (8002824 <MX_TIM1_Init+0x138>)
 8002756:	f003 ff17 	bl	8006588 <HAL_TIM_Base_Init>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002760:	f000 f9ce 	bl	8002b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002768:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800276a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800276e:	4619      	mov	r1, r3
 8002770:	482c      	ldr	r0, [pc, #176]	; (8002824 <MX_TIM1_Init+0x138>)
 8002772:	f004 fca3 	bl	80070bc <HAL_TIM_ConfigClockSource>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800277c:	f000 f9c0 	bl	8002b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002780:	4828      	ldr	r0, [pc, #160]	; (8002824 <MX_TIM1_Init+0x138>)
 8002782:	f003 ffb3 	bl	80066ec <HAL_TIM_PWM_Init>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800278c:	f000 f9b8 	bl	8002b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002790:	2300      	movs	r3, #0
 8002792:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002794:	2300      	movs	r3, #0
 8002796:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002798:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800279c:	4619      	mov	r1, r3
 800279e:	4821      	ldr	r0, [pc, #132]	; (8002824 <MX_TIM1_Init+0x138>)
 80027a0:	f005 f92c 	bl	80079fc <HAL_TIMEx_MasterConfigSynchronization>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80027aa:	f000 f9a9 	bl	8002b00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027ae:	2360      	movs	r3, #96	; 0x60
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027b6:	2300      	movs	r3, #0
 80027b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80027ba:	2300      	movs	r3, #0
 80027bc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027be:	2300      	movs	r3, #0
 80027c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80027c2:	2300      	movs	r3, #0
 80027c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80027c6:	2300      	movs	r3, #0
 80027c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ce:	2200      	movs	r2, #0
 80027d0:	4619      	mov	r1, r3
 80027d2:	4814      	ldr	r0, [pc, #80]	; (8002824 <MX_TIM1_Init+0x138>)
 80027d4:	f004 fbb0 	bl	8006f38 <HAL_TIM_PWM_ConfigChannel>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80027de:	f000 f98f 	bl	8002b00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027e2:	2300      	movs	r3, #0
 80027e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80027ee:	2300      	movs	r3, #0
 80027f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80027f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002800:	1d3b      	adds	r3, r7, #4
 8002802:	4619      	mov	r1, r3
 8002804:	4807      	ldr	r0, [pc, #28]	; (8002824 <MX_TIM1_Init+0x138>)
 8002806:	f005 f967 	bl	8007ad8 <HAL_TIMEx_ConfigBreakDeadTime>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002810:	f000 f976 	bl	8002b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002814:	4803      	ldr	r0, [pc, #12]	; (8002824 <MX_TIM1_Init+0x138>)
 8002816:	f000 fc69 	bl	80030ec <HAL_TIM_MspPostInit>

}
 800281a:	bf00      	nop
 800281c:	3758      	adds	r7, #88	; 0x58
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	200007e8 	.word	0x200007e8
 8002828:	40010000 	.word	0x40010000

0800282c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002832:	f107 0308 	add.w	r3, r7, #8
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	605a      	str	r2, [r3, #4]
 800283c:	609a      	str	r2, [r3, #8]
 800283e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002840:	463b      	mov	r3, r7
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002848:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <MX_TIM4_Init+0x90>)
 800284a:	4a1d      	ldr	r2, [pc, #116]	; (80028c0 <MX_TIM4_Init+0x94>)
 800284c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800284e:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <MX_TIM4_Init+0x90>)
 8002850:	2253      	movs	r2, #83	; 0x53
 8002852:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002854:	4b19      	ldr	r3, [pc, #100]	; (80028bc <MX_TIM4_Init+0x90>)
 8002856:	2200      	movs	r2, #0
 8002858:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49;
 800285a:	4b18      	ldr	r3, [pc, #96]	; (80028bc <MX_TIM4_Init+0x90>)
 800285c:	2231      	movs	r2, #49	; 0x31
 800285e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002860:	4b16      	ldr	r3, [pc, #88]	; (80028bc <MX_TIM4_Init+0x90>)
 8002862:	2200      	movs	r2, #0
 8002864:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002866:	4b15      	ldr	r3, [pc, #84]	; (80028bc <MX_TIM4_Init+0x90>)
 8002868:	2200      	movs	r2, #0
 800286a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800286c:	4813      	ldr	r0, [pc, #76]	; (80028bc <MX_TIM4_Init+0x90>)
 800286e:	f003 fe8b 	bl	8006588 <HAL_TIM_Base_Init>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8002878:	f000 f942 	bl	8002b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800287c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002880:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002882:	f107 0308 	add.w	r3, r7, #8
 8002886:	4619      	mov	r1, r3
 8002888:	480c      	ldr	r0, [pc, #48]	; (80028bc <MX_TIM4_Init+0x90>)
 800288a:	f004 fc17 	bl	80070bc <HAL_TIM_ConfigClockSource>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8002894:	f000 f934 	bl	8002b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002898:	2300      	movs	r3, #0
 800289a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800289c:	2300      	movs	r3, #0
 800289e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028a0:	463b      	mov	r3, r7
 80028a2:	4619      	mov	r1, r3
 80028a4:	4805      	ldr	r0, [pc, #20]	; (80028bc <MX_TIM4_Init+0x90>)
 80028a6:	f005 f8a9 	bl	80079fc <HAL_TIMEx_MasterConfigSynchronization>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80028b0:	f000 f926 	bl	8002b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80028b4:	bf00      	nop
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20000830 	.word	0x20000830
 80028c0:	40000800 	.word	0x40000800

080028c4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80028ca:	1d3b      	adds	r3, r7, #4
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
 80028d6:	611a      	str	r2, [r3, #16]
 80028d8:	615a      	str	r2, [r3, #20]
 80028da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80028dc:	4b1d      	ldr	r3, [pc, #116]	; (8002954 <MX_TIM10_Init+0x90>)
 80028de:	4a1e      	ldr	r2, [pc, #120]	; (8002958 <MX_TIM10_Init+0x94>)
 80028e0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84-1;
 80028e2:	4b1c      	ldr	r3, [pc, #112]	; (8002954 <MX_TIM10_Init+0x90>)
 80028e4:	2253      	movs	r2, #83	; 0x53
 80028e6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e8:	4b1a      	ldr	r3, [pc, #104]	; (8002954 <MX_TIM10_Init+0x90>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 250-1;
 80028ee:	4b19      	ldr	r3, [pc, #100]	; (8002954 <MX_TIM10_Init+0x90>)
 80028f0:	22f9      	movs	r2, #249	; 0xf9
 80028f2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028f4:	4b17      	ldr	r3, [pc, #92]	; (8002954 <MX_TIM10_Init+0x90>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028fa:	4b16      	ldr	r3, [pc, #88]	; (8002954 <MX_TIM10_Init+0x90>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002900:	4814      	ldr	r0, [pc, #80]	; (8002954 <MX_TIM10_Init+0x90>)
 8002902:	f003 fe41 	bl	8006588 <HAL_TIM_Base_Init>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 800290c:	f000 f8f8 	bl	8002b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002910:	4810      	ldr	r0, [pc, #64]	; (8002954 <MX_TIM10_Init+0x90>)
 8002912:	f003 feeb 	bl	80066ec <HAL_TIM_PWM_Init>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 800291c:	f000 f8f0 	bl	8002b00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002920:	2360      	movs	r3, #96	; 0x60
 8002922:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002930:	1d3b      	adds	r3, r7, #4
 8002932:	2200      	movs	r2, #0
 8002934:	4619      	mov	r1, r3
 8002936:	4807      	ldr	r0, [pc, #28]	; (8002954 <MX_TIM10_Init+0x90>)
 8002938:	f004 fafe 	bl	8006f38 <HAL_TIM_PWM_ConfigChannel>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 8002942:	f000 f8dd 	bl	8002b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002946:	4803      	ldr	r0, [pc, #12]	; (8002954 <MX_TIM10_Init+0x90>)
 8002948:	f000 fbd0 	bl	80030ec <HAL_TIM_MspPostInit>

}
 800294c:	bf00      	nop
 800294e:	3720      	adds	r7, #32
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20000878 	.word	0x20000878
 8002958:	40014400 	.word	0x40014400

0800295c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002960:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <MX_USART1_UART_Init+0x4c>)
 8002962:	4a12      	ldr	r2, [pc, #72]	; (80029ac <MX_USART1_UART_Init+0x50>)
 8002964:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002966:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <MX_USART1_UART_Init+0x4c>)
 8002968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800296c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800296e:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <MX_USART1_UART_Init+0x4c>)
 8002970:	2200      	movs	r2, #0
 8002972:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002974:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <MX_USART1_UART_Init+0x4c>)
 8002976:	2200      	movs	r2, #0
 8002978:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800297a:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <MX_USART1_UART_Init+0x4c>)
 800297c:	2200      	movs	r2, #0
 800297e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002980:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <MX_USART1_UART_Init+0x4c>)
 8002982:	220c      	movs	r2, #12
 8002984:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002986:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <MX_USART1_UART_Init+0x4c>)
 8002988:	2200      	movs	r2, #0
 800298a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <MX_USART1_UART_Init+0x4c>)
 800298e:	2200      	movs	r2, #0
 8002990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002992:	4805      	ldr	r0, [pc, #20]	; (80029a8 <MX_USART1_UART_Init+0x4c>)
 8002994:	f005 f906 	bl	8007ba4 <HAL_UART_Init>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800299e:	f000 f8af 	bl	8002b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000920 	.word	0x20000920
 80029ac:	40011000 	.word	0x40011000

080029b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	607b      	str	r3, [r7, #4]
 80029ba:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <MX_DMA_Init+0x3c>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	4a0b      	ldr	r2, [pc, #44]	; (80029ec <MX_DMA_Init+0x3c>)
 80029c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029c4:	6313      	str	r3, [r2, #48]	; 0x30
 80029c6:	4b09      	ldr	r3, [pc, #36]	; (80029ec <MX_DMA_Init+0x3c>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ce:	607b      	str	r3, [r7, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80029d2:	2200      	movs	r2, #0
 80029d4:	2100      	movs	r1, #0
 80029d6:	2039      	movs	r0, #57	; 0x39
 80029d8:	f001 f82f 	bl	8003a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80029dc:	2039      	movs	r0, #57	; 0x39
 80029de:	f001 f848 	bl	8003a72 <HAL_NVIC_EnableIRQ>

}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40023800 	.word	0x40023800

080029f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08a      	sub	sp, #40	; 0x28
 80029f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f6:	f107 0314 	add.w	r3, r7, #20
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	605a      	str	r2, [r3, #4]
 8002a00:	609a      	str	r2, [r3, #8]
 8002a02:	60da      	str	r2, [r3, #12]
 8002a04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	4b39      	ldr	r3, [pc, #228]	; (8002af0 <MX_GPIO_Init+0x100>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	4a38      	ldr	r2, [pc, #224]	; (8002af0 <MX_GPIO_Init+0x100>)
 8002a10:	f043 0304 	orr.w	r3, r3, #4
 8002a14:	6313      	str	r3, [r2, #48]	; 0x30
 8002a16:	4b36      	ldr	r3, [pc, #216]	; (8002af0 <MX_GPIO_Init+0x100>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	4b32      	ldr	r3, [pc, #200]	; (8002af0 <MX_GPIO_Init+0x100>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	4a31      	ldr	r2, [pc, #196]	; (8002af0 <MX_GPIO_Init+0x100>)
 8002a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a30:	6313      	str	r3, [r2, #48]	; 0x30
 8002a32:	4b2f      	ldr	r3, [pc, #188]	; (8002af0 <MX_GPIO_Init+0x100>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	4b2b      	ldr	r3, [pc, #172]	; (8002af0 <MX_GPIO_Init+0x100>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	4a2a      	ldr	r2, [pc, #168]	; (8002af0 <MX_GPIO_Init+0x100>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4e:	4b28      	ldr	r3, [pc, #160]	; (8002af0 <MX_GPIO_Init+0x100>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	607b      	str	r3, [r7, #4]
 8002a5e:	4b24      	ldr	r3, [pc, #144]	; (8002af0 <MX_GPIO_Init+0x100>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	4a23      	ldr	r2, [pc, #140]	; (8002af0 <MX_GPIO_Init+0x100>)
 8002a64:	f043 0302 	orr.w	r3, r3, #2
 8002a68:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6a:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <MX_GPIO_Init+0x100>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8002a76:	2200      	movs	r2, #0
 8002a78:	2102      	movs	r1, #2
 8002a7a:	481e      	ldr	r0, [pc, #120]	; (8002af4 <MX_GPIO_Init+0x104>)
 8002a7c:	f001 fd20 	bl	80044c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IR_REC_Pin */
  GPIO_InitStruct.Pin = IR_REC_Pin;
 8002a80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR_REC_GPIO_Port, &GPIO_InitStruct);
 8002a8e:	f107 0314 	add.w	r3, r7, #20
 8002a92:	4619      	mov	r1, r3
 8002a94:	4818      	ldr	r0, [pc, #96]	; (8002af8 <MX_GPIO_Init+0x108>)
 8002a96:	f001 fb77 	bl	8004188 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8002aa6:	f107 0314 	add.w	r3, r7, #20
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4813      	ldr	r0, [pc, #76]	; (8002afc <MX_GPIO_Init+0x10c>)
 8002aae:	f001 fb6b 	bl	8004188 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8002ab2:	2308      	movs	r3, #8
 8002ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002aba:	2302      	movs	r3, #2
 8002abc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002abe:	f107 0314 	add.w	r3, r7, #20
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	480d      	ldr	r0, [pc, #52]	; (8002afc <MX_GPIO_Init+0x10c>)
 8002ac6:	f001 fb5f 	bl	8004188 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8002aca:	2302      	movs	r3, #2
 8002acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8002ada:	f107 0314 	add.w	r3, r7, #20
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4804      	ldr	r0, [pc, #16]	; (8002af4 <MX_GPIO_Init+0x104>)
 8002ae2:	f001 fb51 	bl	8004188 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ae6:	bf00      	nop
 8002ae8:	3728      	adds	r7, #40	; 0x28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40020400 	.word	0x40020400
 8002af8:	40020800 	.word	0x40020800
 8002afc:	40020000 	.word	0x40020000

08002b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b04:	b672      	cpsid	i
}
 8002b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002b08:	e7fe      	b.n	8002b08 <Error_Handler+0x8>
 8002b0a:	0000      	movs	r0, r0
 8002b0c:	0000      	movs	r0, r0
	...

08002b10 <hsv_to_rgb>:
#include "rgb_hsv.h"

C_RGB rgb;

C_RGB hsv_to_rgb(double H, double S, double V) {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b098      	sub	sp, #96	; 0x60
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	ed87 0b04 	vstr	d0, [r7, #16]
 8002b1a:	ed87 1b02 	vstr	d1, [r7, #8]
 8002b1e:	ed87 2b00 	vstr	d2, [r7]
	double r = 0, g = 0, b = 0;
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if (S == 0) {
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	f04f 0300 	mov.w	r3, #0
 8002b4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b52:	f7fd ffc1 	bl	8000ad8 <__aeabi_dcmpeq>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00c      	beq.n	8002b76 <hsv_to_rgb+0x66>
		r = V;
 8002b5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b60:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		g = V;
 8002b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b68:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		b = V;
 8002b6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b70:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8002b74:	e0de      	b.n	8002d34 <hsv_to_rgb+0x224>
	} else {
		uint16_t i;
		double f, p, q, t;

		if (H == 360)
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	4b95      	ldr	r3, [pc, #596]	; (8002dd0 <hsv_to_rgb+0x2c0>)
 8002b7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b80:	f7fd ffaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d006      	beq.n	8002b98 <hsv_to_rgb+0x88>
			H = 0;
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002b96:	e00a      	b.n	8002bae <hsv_to_rgb+0x9e>
		else
			H = H / 60;
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	4b8d      	ldr	r3, [pc, #564]	; (8002dd4 <hsv_to_rgb+0x2c4>)
 8002b9e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ba2:	f7fd fe5b 	bl	800085c <__aeabi_ddiv>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	e9c7 2304 	strd	r2, r3, [r7, #16]

		i = (uint16_t) trunc(H);
 8002bae:	ed97 0b04 	vldr	d0, [r7, #16]
 8002bb2:	f006 f86d 	bl	8008c90 <trunc>
 8002bb6:	ec53 2b10 	vmov	r2, r3, d0
 8002bba:	4610      	mov	r0, r2
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	f7fd ffbd 	bl	8000b3c <__aeabi_d2uiz>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		f = H - i;
 8002bc8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fd fcb1 	bl	8000534 <__aeabi_i2d>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bda:	f7fd fb5d 	bl	8000298 <__aeabi_dsub>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

		p = V * (1.0 - S);
 8002be6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bea:	f04f 0000 	mov.w	r0, #0
 8002bee:	497a      	ldr	r1, [pc, #488]	; (8002dd8 <hsv_to_rgb+0x2c8>)
 8002bf0:	f7fd fb52 	bl	8000298 <__aeabi_dsub>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002bfc:	f7fd fd04 	bl	8000608 <__aeabi_dmul>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		q = V * (1.0 - (S * f));
 8002c08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c10:	f7fd fcfa 	bl	8000608 <__aeabi_dmul>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	f04f 0000 	mov.w	r0, #0
 8002c1c:	496e      	ldr	r1, [pc, #440]	; (8002dd8 <hsv_to_rgb+0x2c8>)
 8002c1e:	f7fd fb3b 	bl	8000298 <__aeabi_dsub>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c2a:	f7fd fced 	bl	8000608 <__aeabi_dmul>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		t = V * (1.0 - (S * (1.0 - f)));
 8002c36:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c3a:	f04f 0000 	mov.w	r0, #0
 8002c3e:	4966      	ldr	r1, [pc, #408]	; (8002dd8 <hsv_to_rgb+0x2c8>)
 8002c40:	f7fd fb2a 	bl	8000298 <__aeabi_dsub>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4610      	mov	r0, r2
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c50:	f7fd fcda 	bl	8000608 <__aeabi_dmul>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	f04f 0000 	mov.w	r0, #0
 8002c5c:	495e      	ldr	r1, [pc, #376]	; (8002dd8 <hsv_to_rgb+0x2c8>)
 8002c5e:	f7fd fb1b 	bl	8000298 <__aeabi_dsub>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c6a:	f7fd fccd 	bl	8000608 <__aeabi_dmul>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	e9c7 2308 	strd	r2, r3, [r7, #32]

		switch (i) {
 8002c76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d84d      	bhi.n	8002d1a <hsv_to_rgb+0x20a>
 8002c7e:	a201      	add	r2, pc, #4	; (adr r2, 8002c84 <hsv_to_rgb+0x174>)
 8002c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c84:	08002c99 	.word	0x08002c99
 8002c88:	08002cb3 	.word	0x08002cb3
 8002c8c:	08002ccd 	.word	0x08002ccd
 8002c90:	08002ce7 	.word	0x08002ce7
 8002c94:	08002d01 	.word	0x08002d01
		case 0:
			r = V;
 8002c98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c9c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			g = t;
 8002ca0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ca4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			b = p;
 8002ca8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002cac:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			break;
 8002cb0:	e040      	b.n	8002d34 <hsv_to_rgb+0x224>
		case 1:
			r = q;
 8002cb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cb6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			g = V;
 8002cba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cbe:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			b = p;
 8002cc2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002cc6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			break;
 8002cca:	e033      	b.n	8002d34 <hsv_to_rgb+0x224>
		case 2:
			r = p;
 8002ccc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002cd0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			g = V;
 8002cd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cd8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			b = t;
 8002cdc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ce0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			break;
 8002ce4:	e026      	b.n	8002d34 <hsv_to_rgb+0x224>
		case 3:
			r = p;
 8002ce6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002cea:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			g = q;
 8002cee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cf2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			b = V;
 8002cf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cfa:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			break;
 8002cfe:	e019      	b.n	8002d34 <hsv_to_rgb+0x224>
		case 4:
			r = t;
 8002d00:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d04:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			g = p;
 8002d08:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d0c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			b = V;
 8002d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d14:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			break;
 8002d18:	e00c      	b.n	8002d34 <hsv_to_rgb+0x224>
		default:
			r = V;
 8002d1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d1e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			g = p;
 8002d22:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d26:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			b = q;
 8002d2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d2e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			break;
 8002d32:	bf00      	nop
		}

	}
	rgb.r = r * 255;
 8002d34:	a324      	add	r3, pc, #144	; (adr r3, 8002dc8 <hsv_to_rgb+0x2b8>)
 8002d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002d3e:	f7fd fc63 	bl	8000608 <__aeabi_dmul>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4610      	mov	r0, r2
 8002d48:	4619      	mov	r1, r3
 8002d4a:	f7fd fef7 	bl	8000b3c <__aeabi_d2uiz>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	4b22      	ldr	r3, [pc, #136]	; (8002ddc <hsv_to_rgb+0x2cc>)
 8002d54:	701a      	strb	r2, [r3, #0]
	rgb.g = g * 255;
 8002d56:	a31c      	add	r3, pc, #112	; (adr r3, 8002dc8 <hsv_to_rgb+0x2b8>)
 8002d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002d60:	f7fd fc52 	bl	8000608 <__aeabi_dmul>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4610      	mov	r0, r2
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f7fd fee6 	bl	8000b3c <__aeabi_d2uiz>
 8002d70:	4603      	mov	r3, r0
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <hsv_to_rgb+0x2cc>)
 8002d76:	705a      	strb	r2, [r3, #1]
	rgb.b = b * 255;
 8002d78:	a313      	add	r3, pc, #76	; (adr r3, 8002dc8 <hsv_to_rgb+0x2b8>)
 8002d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002d82:	f7fd fc41 	bl	8000608 <__aeabi_dmul>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	f7fd fed5 	bl	8000b3c <__aeabi_d2uiz>
 8002d92:	4603      	mov	r3, r0
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <hsv_to_rgb+0x2cc>)
 8002d98:	709a      	strb	r2, [r3, #2]
	return rgb;
 8002d9a:	4a10      	ldr	r2, [pc, #64]	; (8002ddc <hsv_to_rgb+0x2cc>)
 8002d9c:	f107 031c 	add.w	r3, r7, #28
 8002da0:	6812      	ldr	r2, [r2, #0]
 8002da2:	4611      	mov	r1, r2
 8002da4:	8019      	strh	r1, [r3, #0]
 8002da6:	3302      	adds	r3, #2
 8002da8:	0c12      	lsrs	r2, r2, #16
 8002daa:	701a      	strb	r2, [r3, #0]
 8002dac:	2300      	movs	r3, #0
 8002dae:	7f3a      	ldrb	r2, [r7, #28]
 8002db0:	f362 0307 	bfi	r3, r2, #0, #8
 8002db4:	7f7a      	ldrb	r2, [r7, #29]
 8002db6:	f362 230f 	bfi	r3, r2, #8, #8
 8002dba:	7fba      	ldrb	r2, [r7, #30]
 8002dbc:	f362 4317 	bfi	r3, r2, #16, #8
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3760      	adds	r7, #96	; 0x60
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	00000000 	.word	0x00000000
 8002dcc:	406fe000 	.word	0x406fe000
 8002dd0:	40768000 	.word	0x40768000
 8002dd4:	404e0000 	.word	0x404e0000
 8002dd8:	3ff00000 	.word	0x3ff00000
 8002ddc:	20000990 	.word	0x20000990

08002de0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	607b      	str	r3, [r7, #4]
 8002dea:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <HAL_MspInit+0x4c>)
 8002dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dee:	4a0f      	ldr	r2, [pc, #60]	; (8002e2c <HAL_MspInit+0x4c>)
 8002df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df4:	6453      	str	r3, [r2, #68]	; 0x44
 8002df6:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <HAL_MspInit+0x4c>)
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dfe:	607b      	str	r3, [r7, #4]
 8002e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	603b      	str	r3, [r7, #0]
 8002e06:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <HAL_MspInit+0x4c>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	4a08      	ldr	r2, [pc, #32]	; (8002e2c <HAL_MspInit+0x4c>)
 8002e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e10:	6413      	str	r3, [r2, #64]	; 0x40
 8002e12:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_MspInit+0x4c>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800

08002e30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	; 0x28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e38:	f107 0314 	add.w	r3, r7, #20
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	60da      	str	r2, [r3, #12]
 8002e46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a19      	ldr	r2, [pc, #100]	; (8002eb4 <HAL_I2C_MspInit+0x84>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d12b      	bne.n	8002eaa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	4b18      	ldr	r3, [pc, #96]	; (8002eb8 <HAL_I2C_MspInit+0x88>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	4a17      	ldr	r2, [pc, #92]	; (8002eb8 <HAL_I2C_MspInit+0x88>)
 8002e5c:	f043 0302 	orr.w	r3, r3, #2
 8002e60:	6313      	str	r3, [r2, #48]	; 0x30
 8002e62:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <HAL_I2C_MspInit+0x88>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e6e:	23c0      	movs	r3, #192	; 0xc0
 8002e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e72:	2312      	movs	r3, #18
 8002e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e7e:	2304      	movs	r3, #4
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e82:	f107 0314 	add.w	r3, r7, #20
 8002e86:	4619      	mov	r1, r3
 8002e88:	480c      	ldr	r0, [pc, #48]	; (8002ebc <HAL_I2C_MspInit+0x8c>)
 8002e8a:	f001 f97d 	bl	8004188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <HAL_I2C_MspInit+0x88>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	4a08      	ldr	r2, [pc, #32]	; (8002eb8 <HAL_I2C_MspInit+0x88>)
 8002e98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_I2C_MspInit+0x88>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002eaa:	bf00      	nop
 8002eac:	3728      	adds	r7, #40	; 0x28
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40005400 	.word	0x40005400
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	40020400 	.word	0x40020400

08002ec0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08c      	sub	sp, #48	; 0x30
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec8:	f107 031c 	add.w	r3, r7, #28
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	60da      	str	r2, [r3, #12]
 8002ed6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a32      	ldr	r2, [pc, #200]	; (8002fa8 <HAL_SPI_MspInit+0xe8>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d12c      	bne.n	8002f3c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61bb      	str	r3, [r7, #24]
 8002ee6:	4b31      	ldr	r3, [pc, #196]	; (8002fac <HAL_SPI_MspInit+0xec>)
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eea:	4a30      	ldr	r2, [pc, #192]	; (8002fac <HAL_SPI_MspInit+0xec>)
 8002eec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ef2:	4b2e      	ldr	r3, [pc, #184]	; (8002fac <HAL_SPI_MspInit+0xec>)
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002efa:	61bb      	str	r3, [r7, #24]
 8002efc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	4b2a      	ldr	r3, [pc, #168]	; (8002fac <HAL_SPI_MspInit+0xec>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	4a29      	ldr	r2, [pc, #164]	; (8002fac <HAL_SPI_MspInit+0xec>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0e:	4b27      	ldr	r3, [pc, #156]	; (8002fac <HAL_SPI_MspInit+0xec>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002f1a:	23f0      	movs	r3, #240	; 0xf0
 8002f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f26:	2303      	movs	r3, #3
 8002f28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f2a:	2305      	movs	r3, #5
 8002f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2e:	f107 031c 	add.w	r3, r7, #28
 8002f32:	4619      	mov	r1, r3
 8002f34:	481e      	ldr	r0, [pc, #120]	; (8002fb0 <HAL_SPI_MspInit+0xf0>)
 8002f36:	f001 f927 	bl	8004188 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002f3a:	e031      	b.n	8002fa0 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1c      	ldr	r2, [pc, #112]	; (8002fb4 <HAL_SPI_MspInit+0xf4>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d12c      	bne.n	8002fa0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	4b18      	ldr	r3, [pc, #96]	; (8002fac <HAL_SPI_MspInit+0xec>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	4a17      	ldr	r2, [pc, #92]	; (8002fac <HAL_SPI_MspInit+0xec>)
 8002f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f54:	6413      	str	r3, [r2, #64]	; 0x40
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <HAL_SPI_MspInit+0xec>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	4b11      	ldr	r3, [pc, #68]	; (8002fac <HAL_SPI_MspInit+0xec>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	4a10      	ldr	r2, [pc, #64]	; (8002fac <HAL_SPI_MspInit+0xec>)
 8002f6c:	f043 0302 	orr.w	r3, r3, #2
 8002f70:	6313      	str	r3, [r2, #48]	; 0x30
 8002f72:	4b0e      	ldr	r3, [pc, #56]	; (8002fac <HAL_SPI_MspInit+0xec>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002f7e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f84:	2302      	movs	r3, #2
 8002f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f90:	2305      	movs	r3, #5
 8002f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f94:	f107 031c 	add.w	r3, r7, #28
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4807      	ldr	r0, [pc, #28]	; (8002fb8 <HAL_SPI_MspInit+0xf8>)
 8002f9c:	f001 f8f4 	bl	8004188 <HAL_GPIO_Init>
}
 8002fa0:	bf00      	nop
 8002fa2:	3730      	adds	r7, #48	; 0x30
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40013000 	.word	0x40013000
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	40020000 	.word	0x40020000
 8002fb4:	40003800 	.word	0x40003800
 8002fb8:	40020400 	.word	0x40020400

08002fbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a42      	ldr	r2, [pc, #264]	; (80030d4 <HAL_TIM_Base_MspInit+0x118>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d147      	bne.n	800305e <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	4b41      	ldr	r3, [pc, #260]	; (80030d8 <HAL_TIM_Base_MspInit+0x11c>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	4a40      	ldr	r2, [pc, #256]	; (80030d8 <HAL_TIM_Base_MspInit+0x11c>)
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fde:	4b3e      	ldr	r3, [pc, #248]	; (80030d8 <HAL_TIM_Base_MspInit+0x11c>)
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8002fea:	4b3c      	ldr	r3, [pc, #240]	; (80030dc <HAL_TIM_Base_MspInit+0x120>)
 8002fec:	4a3c      	ldr	r2, [pc, #240]	; (80030e0 <HAL_TIM_Base_MspInit+0x124>)
 8002fee:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8002ff0:	4b3a      	ldr	r3, [pc, #232]	; (80030dc <HAL_TIM_Base_MspInit+0x120>)
 8002ff2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002ff6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ff8:	4b38      	ldr	r3, [pc, #224]	; (80030dc <HAL_TIM_Base_MspInit+0x120>)
 8002ffa:	2240      	movs	r2, #64	; 0x40
 8002ffc:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ffe:	4b37      	ldr	r3, [pc, #220]	; (80030dc <HAL_TIM_Base_MspInit+0x120>)
 8003000:	2200      	movs	r2, #0
 8003002:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003004:	4b35      	ldr	r3, [pc, #212]	; (80030dc <HAL_TIM_Base_MspInit+0x120>)
 8003006:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800300a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800300c:	4b33      	ldr	r3, [pc, #204]	; (80030dc <HAL_TIM_Base_MspInit+0x120>)
 800300e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003012:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003014:	4b31      	ldr	r3, [pc, #196]	; (80030dc <HAL_TIM_Base_MspInit+0x120>)
 8003016:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800301a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800301c:	4b2f      	ldr	r3, [pc, #188]	; (80030dc <HAL_TIM_Base_MspInit+0x120>)
 800301e:	2200      	movs	r2, #0
 8003020:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003022:	4b2e      	ldr	r3, [pc, #184]	; (80030dc <HAL_TIM_Base_MspInit+0x120>)
 8003024:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003028:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800302a:	4b2c      	ldr	r3, [pc, #176]	; (80030dc <HAL_TIM_Base_MspInit+0x120>)
 800302c:	2200      	movs	r2, #0
 800302e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8003030:	482a      	ldr	r0, [pc, #168]	; (80030dc <HAL_TIM_Base_MspInit+0x120>)
 8003032:	f000 fd39 	bl	8003aa8 <HAL_DMA_Init>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 800303c:	f7ff fd60 	bl	8002b00 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a26      	ldr	r2, [pc, #152]	; (80030dc <HAL_TIM_Base_MspInit+0x120>)
 8003044:	625a      	str	r2, [r3, #36]	; 0x24
 8003046:	4a25      	ldr	r2, [pc, #148]	; (80030dc <HAL_TIM_Base_MspInit+0x120>)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800304c:	2200      	movs	r2, #0
 800304e:	2100      	movs	r1, #0
 8003050:	2019      	movs	r0, #25
 8003052:	f000 fcf2 	bl	8003a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003056:	2019      	movs	r0, #25
 8003058:	f000 fd0b 	bl	8003a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800305c:	e036      	b.n	80030cc <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM4)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a20      	ldr	r2, [pc, #128]	; (80030e4 <HAL_TIM_Base_MspInit+0x128>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d116      	bne.n	8003096 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003068:	2300      	movs	r3, #0
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <HAL_TIM_Base_MspInit+0x11c>)
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	4a19      	ldr	r2, [pc, #100]	; (80030d8 <HAL_TIM_Base_MspInit+0x11c>)
 8003072:	f043 0304 	orr.w	r3, r3, #4
 8003076:	6413      	str	r3, [r2, #64]	; 0x40
 8003078:	4b17      	ldr	r3, [pc, #92]	; (80030d8 <HAL_TIM_Base_MspInit+0x11c>)
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003084:	2200      	movs	r2, #0
 8003086:	2100      	movs	r1, #0
 8003088:	201e      	movs	r0, #30
 800308a:	f000 fcd6 	bl	8003a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800308e:	201e      	movs	r0, #30
 8003090:	f000 fcef 	bl	8003a72 <HAL_NVIC_EnableIRQ>
}
 8003094:	e01a      	b.n	80030cc <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM10)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a13      	ldr	r2, [pc, #76]	; (80030e8 <HAL_TIM_Base_MspInit+0x12c>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d115      	bne.n	80030cc <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	4b0c      	ldr	r3, [pc, #48]	; (80030d8 <HAL_TIM_Base_MspInit+0x11c>)
 80030a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a8:	4a0b      	ldr	r2, [pc, #44]	; (80030d8 <HAL_TIM_Base_MspInit+0x11c>)
 80030aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ae:	6453      	str	r3, [r2, #68]	; 0x44
 80030b0:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <HAL_TIM_Base_MspInit+0x11c>)
 80030b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80030bc:	2200      	movs	r2, #0
 80030be:	2100      	movs	r1, #0
 80030c0:	2019      	movs	r0, #25
 80030c2:	f000 fcba 	bl	8003a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80030c6:	2019      	movs	r0, #25
 80030c8:	f000 fcd3 	bl	8003a72 <HAL_NVIC_EnableIRQ>
}
 80030cc:	bf00      	nop
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40010000 	.word	0x40010000
 80030d8:	40023800 	.word	0x40023800
 80030dc:	200008c0 	.word	0x200008c0
 80030e0:	40026428 	.word	0x40026428
 80030e4:	40000800 	.word	0x40000800
 80030e8:	40014400 	.word	0x40014400

080030ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08a      	sub	sp, #40	; 0x28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f4:	f107 0314 	add.w	r3, r7, #20
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	605a      	str	r2, [r3, #4]
 80030fe:	609a      	str	r2, [r3, #8]
 8003100:	60da      	str	r2, [r3, #12]
 8003102:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a25      	ldr	r2, [pc, #148]	; (80031a0 <HAL_TIM_MspPostInit+0xb4>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d11f      	bne.n	800314e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	4b24      	ldr	r3, [pc, #144]	; (80031a4 <HAL_TIM_MspPostInit+0xb8>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	4a23      	ldr	r2, [pc, #140]	; (80031a4 <HAL_TIM_MspPostInit+0xb8>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	6313      	str	r3, [r2, #48]	; 0x30
 800311e:	4b21      	ldr	r3, [pc, #132]	; (80031a4 <HAL_TIM_MspPostInit+0xb8>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800312a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800312e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003130:	2302      	movs	r3, #2
 8003132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003134:	2300      	movs	r3, #0
 8003136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003138:	2300      	movs	r3, #0
 800313a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800313c:	2301      	movs	r3, #1
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003140:	f107 0314 	add.w	r3, r7, #20
 8003144:	4619      	mov	r1, r3
 8003146:	4818      	ldr	r0, [pc, #96]	; (80031a8 <HAL_TIM_MspPostInit+0xbc>)
 8003148:	f001 f81e 	bl	8004188 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 800314c:	e023      	b.n	8003196 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM10)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a16      	ldr	r2, [pc, #88]	; (80031ac <HAL_TIM_MspPostInit+0xc0>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d11e      	bne.n	8003196 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003158:	2300      	movs	r3, #0
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <HAL_TIM_MspPostInit+0xb8>)
 800315e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003160:	4a10      	ldr	r2, [pc, #64]	; (80031a4 <HAL_TIM_MspPostInit+0xb8>)
 8003162:	f043 0302 	orr.w	r3, r3, #2
 8003166:	6313      	str	r3, [r2, #48]	; 0x30
 8003168:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <HAL_TIM_MspPostInit+0xb8>)
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317a:	2302      	movs	r3, #2
 800317c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003182:	2300      	movs	r3, #0
 8003184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003186:	2303      	movs	r3, #3
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800318a:	f107 0314 	add.w	r3, r7, #20
 800318e:	4619      	mov	r1, r3
 8003190:	4807      	ldr	r0, [pc, #28]	; (80031b0 <HAL_TIM_MspPostInit+0xc4>)
 8003192:	f000 fff9 	bl	8004188 <HAL_GPIO_Init>
}
 8003196:	bf00      	nop
 8003198:	3728      	adds	r7, #40	; 0x28
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40010000 	.word	0x40010000
 80031a4:	40023800 	.word	0x40023800
 80031a8:	40020000 	.word	0x40020000
 80031ac:	40014400 	.word	0x40014400
 80031b0:	40020400 	.word	0x40020400

080031b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08a      	sub	sp, #40	; 0x28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031bc:	f107 0314 	add.w	r3, r7, #20
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	60da      	str	r2, [r3, #12]
 80031ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a19      	ldr	r2, [pc, #100]	; (8003238 <HAL_UART_MspInit+0x84>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d12c      	bne.n	8003230 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031d6:	2300      	movs	r3, #0
 80031d8:	613b      	str	r3, [r7, #16]
 80031da:	4b18      	ldr	r3, [pc, #96]	; (800323c <HAL_UART_MspInit+0x88>)
 80031dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031de:	4a17      	ldr	r2, [pc, #92]	; (800323c <HAL_UART_MspInit+0x88>)
 80031e0:	f043 0310 	orr.w	r3, r3, #16
 80031e4:	6453      	str	r3, [r2, #68]	; 0x44
 80031e6:	4b15      	ldr	r3, [pc, #84]	; (800323c <HAL_UART_MspInit+0x88>)
 80031e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ea:	f003 0310 	and.w	r3, r3, #16
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	4b11      	ldr	r3, [pc, #68]	; (800323c <HAL_UART_MspInit+0x88>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	4a10      	ldr	r2, [pc, #64]	; (800323c <HAL_UART_MspInit+0x88>)
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	6313      	str	r3, [r2, #48]	; 0x30
 8003202:	4b0e      	ldr	r3, [pc, #56]	; (800323c <HAL_UART_MspInit+0x88>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800320e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003214:	2302      	movs	r3, #2
 8003216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003218:	2300      	movs	r3, #0
 800321a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800321c:	2303      	movs	r3, #3
 800321e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003220:	2307      	movs	r3, #7
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003224:	f107 0314 	add.w	r3, r7, #20
 8003228:	4619      	mov	r1, r3
 800322a:	4805      	ldr	r0, [pc, #20]	; (8003240 <HAL_UART_MspInit+0x8c>)
 800322c:	f000 ffac 	bl	8004188 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003230:	bf00      	nop
 8003232:	3728      	adds	r7, #40	; 0x28
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40011000 	.word	0x40011000
 800323c:	40023800 	.word	0x40023800
 8003240:	40020000 	.word	0x40020000

08003244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003248:	e7fe      	b.n	8003248 <NMI_Handler+0x4>

0800324a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800324a:	b480      	push	{r7}
 800324c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800324e:	e7fe      	b.n	800324e <HardFault_Handler+0x4>

08003250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003254:	e7fe      	b.n	8003254 <MemManage_Handler+0x4>

08003256 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003256:	b480      	push	{r7}
 8003258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800325a:	e7fe      	b.n	800325a <BusFault_Handler+0x4>

0800325c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003260:	e7fe      	b.n	8003260 <UsageFault_Handler+0x4>

08003262 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003262:	b480      	push	{r7}
 8003264:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003266:	bf00      	nop
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003274:	bf00      	nop
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800327e:	b480      	push	{r7}
 8003280:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003282:	bf00      	nop
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003290:	f000 fab4 	bl	80037fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003294:	bf00      	nop
 8003296:	bd80      	pop	{r7, pc}

08003298 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800329c:	4803      	ldr	r0, [pc, #12]	; (80032ac <TIM1_UP_TIM10_IRQHandler+0x14>)
 800329e:	f003 fd43 	bl	8006d28 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80032a2:	4803      	ldr	r0, [pc, #12]	; (80032b0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80032a4:	f003 fd40 	bl	8006d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80032a8:	bf00      	nop
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	200007e8 	.word	0x200007e8
 80032b0:	20000878 	.word	0x20000878

080032b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80032b8:	4802      	ldr	r0, [pc, #8]	; (80032c4 <TIM4_IRQHandler+0x10>)
 80032ba:	f003 fd35 	bl	8006d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80032be:	bf00      	nop
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20000830 	.word	0x20000830

080032c8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80032cc:	4802      	ldr	r0, [pc, #8]	; (80032d8 <DMA2_Stream1_IRQHandler+0x10>)
 80032ce:	f000 fcf1 	bl	8003cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	200008c0 	.word	0x200008c0

080032dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032e4:	4a14      	ldr	r2, [pc, #80]	; (8003338 <_sbrk+0x5c>)
 80032e6:	4b15      	ldr	r3, [pc, #84]	; (800333c <_sbrk+0x60>)
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032f0:	4b13      	ldr	r3, [pc, #76]	; (8003340 <_sbrk+0x64>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d102      	bne.n	80032fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <_sbrk+0x64>)
 80032fa:	4a12      	ldr	r2, [pc, #72]	; (8003344 <_sbrk+0x68>)
 80032fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032fe:	4b10      	ldr	r3, [pc, #64]	; (8003340 <_sbrk+0x64>)
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4413      	add	r3, r2
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	429a      	cmp	r2, r3
 800330a:	d207      	bcs.n	800331c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800330c:	f005 f80c 	bl	8008328 <__errno>
 8003310:	4603      	mov	r3, r0
 8003312:	220c      	movs	r2, #12
 8003314:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003316:	f04f 33ff 	mov.w	r3, #4294967295
 800331a:	e009      	b.n	8003330 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800331c:	4b08      	ldr	r3, [pc, #32]	; (8003340 <_sbrk+0x64>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003322:	4b07      	ldr	r3, [pc, #28]	; (8003340 <_sbrk+0x64>)
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4413      	add	r3, r2
 800332a:	4a05      	ldr	r2, [pc, #20]	; (8003340 <_sbrk+0x64>)
 800332c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800332e:	68fb      	ldr	r3, [r7, #12]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	20010000 	.word	0x20010000
 800333c:	00000400 	.word	0x00000400
 8003340:	20000994 	.word	0x20000994
 8003344:	20007a90 	.word	0x20007a90

08003348 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800334c:	4b06      	ldr	r3, [pc, #24]	; (8003368 <SystemInit+0x20>)
 800334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003352:	4a05      	ldr	r2, [pc, #20]	; (8003368 <SystemInit+0x20>)
 8003354:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003358:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800335c:	bf00      	nop
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <led_rgb_to_buf_dma>:
//void led_init(void) {
//	uint16_t i;
//	for (i = DELAY_LEN; i < ARRAY_LEN; i++) BUF_DMA[i] = LO;
//}

void led_rgb_to_buf_dma(uint8_t pixR, uint8_t pixG, uint8_t pixB, uint16_t posX) {
 800336c:	b490      	push	{r4, r7}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	4604      	mov	r4, r0
 8003374:	4608      	mov	r0, r1
 8003376:	4611      	mov	r1, r2
 8003378:	461a      	mov	r2, r3
 800337a:	4623      	mov	r3, r4
 800337c:	71fb      	strb	r3, [r7, #7]
 800337e:	4603      	mov	r3, r0
 8003380:	71bb      	strb	r3, [r7, #6]
 8003382:	460b      	mov	r3, r1
 8003384:	717b      	strb	r3, [r7, #5]
 8003386:	4613      	mov	r3, r2
 8003388:	807b      	strh	r3, [r7, #2]
	volatile uint16_t i;
	for (i = 0; i < 8; i++) {
 800338a:	2300      	movs	r3, #0
 800338c:	81fb      	strh	r3, [r7, #14]
 800338e:	e07a      	b.n	8003486 <led_rgb_to_buf_dma+0x11a>
		if (BitIsSet(pixR,(7-i)) == 1) BUF_DMA[DELAY_LEN + posX * 24 + i + 8] = HI;
 8003390:	79fa      	ldrb	r2, [r7, #7]
 8003392:	89fb      	ldrh	r3, [r7, #14]
 8003394:	b29b      	uxth	r3, r3
 8003396:	f1c3 0307 	rsb	r3, r3, #7
 800339a:	fa42 f303 	asr.w	r3, r2, r3
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00e      	beq.n	80033c4 <led_rgb_to_buf_dma+0x58>
 80033a6:	887a      	ldrh	r2, [r7, #2]
 80033a8:	4613      	mov	r3, r2
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	4413      	add	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	3330      	adds	r3, #48	; 0x30
 80033b2:	89fa      	ldrh	r2, [r7, #14]
 80033b4:	b292      	uxth	r2, r2
 80033b6:	4413      	add	r3, r2
 80033b8:	3308      	adds	r3, #8
 80033ba:	4a38      	ldr	r2, [pc, #224]	; (800349c <led_rgb_to_buf_dma+0x130>)
 80033bc:	2141      	movs	r1, #65	; 0x41
 80033be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80033c2:	e00d      	b.n	80033e0 <led_rgb_to_buf_dma+0x74>
		else BUF_DMA[DELAY_LEN + posX * 24 + i + 8] = LO;
 80033c4:	887a      	ldrh	r2, [r7, #2]
 80033c6:	4613      	mov	r3, r2
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	4413      	add	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	3330      	adds	r3, #48	; 0x30
 80033d0:	89fa      	ldrh	r2, [r7, #14]
 80033d2:	b292      	uxth	r2, r2
 80033d4:	4413      	add	r3, r2
 80033d6:	3308      	adds	r3, #8
 80033d8:	4a30      	ldr	r2, [pc, #192]	; (800349c <led_rgb_to_buf_dma+0x130>)
 80033da:	211a      	movs	r1, #26
 80033dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		if (BitIsSet(pixG,(7-i)) == 1) BUF_DMA[DELAY_LEN + posX * 24 + i + 0] = HI;
 80033e0:	79ba      	ldrb	r2, [r7, #6]
 80033e2:	89fb      	ldrh	r3, [r7, #14]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	f1c3 0307 	rsb	r3, r3, #7
 80033ea:	fa42 f303 	asr.w	r3, r2, r3
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00d      	beq.n	8003412 <led_rgb_to_buf_dma+0xa6>
 80033f6:	887a      	ldrh	r2, [r7, #2]
 80033f8:	4613      	mov	r3, r2
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	4413      	add	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	3330      	adds	r3, #48	; 0x30
 8003402:	89fa      	ldrh	r2, [r7, #14]
 8003404:	b292      	uxth	r2, r2
 8003406:	4413      	add	r3, r2
 8003408:	4a24      	ldr	r2, [pc, #144]	; (800349c <led_rgb_to_buf_dma+0x130>)
 800340a:	2141      	movs	r1, #65	; 0x41
 800340c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003410:	e00c      	b.n	800342c <led_rgb_to_buf_dma+0xc0>
		else BUF_DMA[DELAY_LEN + posX * 24 + i + 0] = LO;
 8003412:	887a      	ldrh	r2, [r7, #2]
 8003414:	4613      	mov	r3, r2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	4413      	add	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	3330      	adds	r3, #48	; 0x30
 800341e:	89fa      	ldrh	r2, [r7, #14]
 8003420:	b292      	uxth	r2, r2
 8003422:	4413      	add	r3, r2
 8003424:	4a1d      	ldr	r2, [pc, #116]	; (800349c <led_rgb_to_buf_dma+0x130>)
 8003426:	211a      	movs	r1, #26
 8003428:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		if (BitIsSet(pixB,(7-i)) == 1) BUF_DMA[DELAY_LEN + posX * 24 + i + 16] = HI;
 800342c:	797a      	ldrb	r2, [r7, #5]
 800342e:	89fb      	ldrh	r3, [r7, #14]
 8003430:	b29b      	uxth	r3, r3
 8003432:	f1c3 0307 	rsb	r3, r3, #7
 8003436:	fa42 f303 	asr.w	r3, r2, r3
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00e      	beq.n	8003460 <led_rgb_to_buf_dma+0xf4>
 8003442:	887a      	ldrh	r2, [r7, #2]
 8003444:	4613      	mov	r3, r2
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	4413      	add	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	3330      	adds	r3, #48	; 0x30
 800344e:	89fa      	ldrh	r2, [r7, #14]
 8003450:	b292      	uxth	r2, r2
 8003452:	4413      	add	r3, r2
 8003454:	3310      	adds	r3, #16
 8003456:	4a11      	ldr	r2, [pc, #68]	; (800349c <led_rgb_to_buf_dma+0x130>)
 8003458:	2141      	movs	r1, #65	; 0x41
 800345a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800345e:	e00d      	b.n	800347c <led_rgb_to_buf_dma+0x110>
		else BUF_DMA[DELAY_LEN + posX * 24 + i + 16] = LO;
 8003460:	887a      	ldrh	r2, [r7, #2]
 8003462:	4613      	mov	r3, r2
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	4413      	add	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	3330      	adds	r3, #48	; 0x30
 800346c:	89fa      	ldrh	r2, [r7, #14]
 800346e:	b292      	uxth	r2, r2
 8003470:	4413      	add	r3, r2
 8003472:	3310      	adds	r3, #16
 8003474:	4a09      	ldr	r2, [pc, #36]	; (800349c <led_rgb_to_buf_dma+0x130>)
 8003476:	211a      	movs	r1, #26
 8003478:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < 8; i++) {
 800347c:	89fb      	ldrh	r3, [r7, #14]
 800347e:	b29b      	uxth	r3, r3
 8003480:	3301      	adds	r3, #1
 8003482:	b29b      	uxth	r3, r3
 8003484:	81fb      	strh	r3, [r7, #14]
 8003486:	89fb      	ldrh	r3, [r7, #14]
 8003488:	b29b      	uxth	r3, r3
 800348a:	2b07      	cmp	r3, #7
 800348c:	d980      	bls.n	8003390 <led_rgb_to_buf_dma+0x24>
	}
}
 800348e:	bf00      	nop
 8003490:	bf00      	nop
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bc90      	pop	{r4, r7}
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000998 	.word	0x20000998

080034a0 <led_light>:
		led_rgb_to_buf_dma(rgb_t[13][0], rgb_t[13][1], rgb_t[13][2], n * 15 + 13);
		led_rgb_to_buf_dma(rgb_t[14][0], rgb_t[14][1], rgb_t[14][2], n * 15 + 14);
	}
}

void led_light(void) {
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&TIM_LED, TIM_LED_CH, (uint32_t*) &BUF_DMA, ARRAY_LEN);
 80034a4:	f643 0370 	movw	r3, #14448	; 0x3870
 80034a8:	4a03      	ldr	r2, [pc, #12]	; (80034b8 <led_light+0x18>)
 80034aa:	2100      	movs	r1, #0
 80034ac:	4803      	ldr	r0, [pc, #12]	; (80034bc <led_light+0x1c>)
 80034ae:	f003 fa8b 	bl	80069c8 <HAL_TIM_PWM_Start_DMA>
}
 80034b2:	bf00      	nop
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20000998 	.word	0x20000998
 80034bc:	200007e8 	.word	0x200007e8

080034c0 <remap>:
#include "xpt2046.h"

extern SPI_HandleTypeDef XPT2046_SPI;

inline static float remap(float x, float in_min, float in_max, float out_min, float out_max)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	ed87 0a05 	vstr	s0, [r7, #20]
 80034ca:	edc7 0a04 	vstr	s1, [r7, #16]
 80034ce:	ed87 1a03 	vstr	s2, [r7, #12]
 80034d2:	edc7 1a02 	vstr	s3, [r7, #8]
 80034d6:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80034da:	ed97 7a05 	vldr	s14, [r7, #20]
 80034de:	edd7 7a04 	vldr	s15, [r7, #16]
 80034e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034e6:	edd7 6a01 	vldr	s13, [r7, #4]
 80034ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80034ee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80034f2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80034f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80034fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80034fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003506:	edd7 7a02 	vldr	s15, [r7, #8]
 800350a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800350e:	eeb0 0a67 	vmov.f32	s0, s15
 8003512:	371c      	adds	r7, #28
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <XPT2046_Init>:

void XPT2046_Init(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&XPT2046_SPI, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 8003520:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003524:	2201      	movs	r2, #1
 8003526:	2180      	movs	r1, #128	; 0x80
 8003528:	4809      	ldr	r0, [pc, #36]	; (8003550 <XPT2046_Init+0x34>)
 800352a:	f002 fc84 	bl	8005e36 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 800352e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003532:	2201      	movs	r2, #1
 8003534:	2100      	movs	r1, #0
 8003536:	4806      	ldr	r0, [pc, #24]	; (8003550 <XPT2046_Init+0x34>)
 8003538:	f002 fc7d 	bl	8005e36 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 800353c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003540:	2201      	movs	r2, #1
 8003542:	2100      	movs	r1, #0
 8003544:	4802      	ldr	r0, [pc, #8]	; (8003550 <XPT2046_Init+0x34>)
 8003546:	f002 fc76 	bl	8005e36 <HAL_SPI_Transmit>
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000738 	.word	0x20000738

08003554 <getRaw>:

uint16_t getRaw(uint8_t address)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af02      	add	r7, sp, #8
 800355a:	4603      	mov	r3, r0
 800355c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_Delay(1);
 800355e:	2001      	movs	r0, #1
 8003560:	f000 f96c 	bl	800383c <HAL_Delay>
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 8003564:	1df9      	adds	r1, r7, #7
 8003566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800356a:	2201      	movs	r2, #1
 800356c:	4814      	ldr	r0, [pc, #80]	; (80035c0 <getRaw+0x6c>)
 800356e:	f002 fc62 	bl	8005e36 <HAL_SPI_Transmit>
	address = 0x00;
 8003572:	2300      	movs	r3, #0
 8003574:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 8003576:	f107 020b 	add.w	r2, r7, #11
 800357a:	1df9      	adds	r1, r7, #7
 800357c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	2301      	movs	r3, #1
 8003584:	480e      	ldr	r0, [pc, #56]	; (80035c0 <getRaw+0x6c>)
 8003586:	f002 fd92 	bl	80060ae <HAL_SPI_TransmitReceive>
	MSB = data;   
 800358a:	7afb      	ldrb	r3, [r7, #11]
 800358c:	81fb      	strh	r3, [r7, #14]
	address = 0x00;
 800358e:	2300      	movs	r3, #0
 8003590:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 8003592:	f107 020b 	add.w	r2, r7, #11
 8003596:	1df9      	adds	r1, r7, #7
 8003598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	2301      	movs	r3, #1
 80035a0:	4807      	ldr	r0, [pc, #28]	; (80035c0 <getRaw+0x6c>)
 80035a2:	f002 fd84 	bl	80060ae <HAL_SPI_TransmitReceive>
	LSB = data;
 80035a6:	7afb      	ldrb	r3, [r7, #11]
 80035a8:	81bb      	strh	r3, [r7, #12]
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
	return ((MSB << 8) | (LSB)) >> 3;
 80035aa:	89fb      	ldrh	r3, [r7, #14]
 80035ac:	021a      	lsls	r2, r3, #8
 80035ae:	89bb      	ldrh	r3, [r7, #12]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	10db      	asrs	r3, r3, #3
 80035b4:	b29b      	uxth	r3, r3
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20000738 	.word	0x20000738

080035c4 <X>:

inline static uint16_t X(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
	uint16_t x;
	x = (uint16_t) remap(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 80035ca:	20d0      	movs	r0, #208	; 0xd0
 80035cc:	f7ff ffc2 	bl	8003554 <getRaw>
 80035d0:	4603      	mov	r3, r0
 80035d2:	ee07 3a90 	vmov	s15, r3
 80035d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035da:	ed9f 2a12 	vldr	s4, [pc, #72]	; 8003624 <X+0x60>
 80035de:	eddf 1a12 	vldr	s3, [pc, #72]	; 8003628 <X+0x64>
 80035e2:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800362c <X+0x68>
 80035e6:	eddf 0a12 	vldr	s1, [pc, #72]	; 8003630 <X+0x6c>
 80035ea:	eeb0 0a67 	vmov.f32	s0, s15
 80035ee:	f7ff ff67 	bl	80034c0 <remap>
 80035f2:	eef0 7a40 	vmov.f32	s15, s0
 80035f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035fa:	ee17 3a90 	vmov	r3, s15
 80035fe:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_X) x = OUT_MAX_X - x;
 8003600:	88fb      	ldrh	r3, [r7, #6]
 8003602:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8003606:	80fb      	strh	r3, [r7, #6]
	if (x > OUT_MIN_X && x < OUT_MAX_X) return x;
 8003608:	88fb      	ldrh	r3, [r7, #6]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d005      	beq.n	800361a <X+0x56>
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003614:	d201      	bcs.n	800361a <X+0x56>
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	e000      	b.n	800361c <X+0x58>
	else return 0;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	43a00000 	.word	0x43a00000
 8003628:	00000000 	.word	0x00000000
 800362c:	45610000 	.word	0x45610000
 8003630:	43c80000 	.word	0x43c80000

08003634 <Y>:

inline static uint16_t Y(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
	uint16_t y;
	y = (uint16_t) remap(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
 800363a:	2090      	movs	r0, #144	; 0x90
 800363c:	f7ff ff8a 	bl	8003554 <getRaw>
 8003640:	4603      	mov	r3, r0
 8003642:	ee07 3a90 	vmov	s15, r3
 8003646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800364a:	ed9f 2a10 	vldr	s4, [pc, #64]	; 800368c <Y+0x58>
 800364e:	eddf 1a10 	vldr	s3, [pc, #64]	; 8003690 <Y+0x5c>
 8003652:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8003694 <Y+0x60>
 8003656:	eddf 0a10 	vldr	s1, [pc, #64]	; 8003698 <Y+0x64>
 800365a:	eeb0 0a67 	vmov.f32	s0, s15
 800365e:	f7ff ff2f 	bl	80034c0 <remap>
 8003662:	eef0 7a40 	vmov.f32	s15, s0
 8003666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800366a:	ee17 3a90 	vmov	r3, s15
 800366e:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_Y) y = OUT_MAX_Y - y;
	if (y > OUT_MIN_Y && y < OUT_MAX_Y) return y;
 8003670:	88fb      	ldrh	r3, [r7, #6]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <Y+0x4e>
 8003676:	88fb      	ldrh	r3, [r7, #6]
 8003678:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800367c:	d201      	bcs.n	8003682 <Y+0x4e>
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	e000      	b.n	8003684 <Y+0x50>
	else return 0;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	43f00000 	.word	0x43f00000
 8003690:	00000000 	.word	0x00000000
 8003694:	456a6000 	.word	0x456a6000
 8003698:	43480000 	.word	0x43480000

0800369c <getX>:

uint16_t getX(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t x[2] = { 1, 2 };
 80036a2:	4b0a      	ldr	r3, [pc, #40]	; (80036cc <getX+0x30>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	607b      	str	r3, [r7, #4]
		while (x[0] != x[1])
 80036a8:	e007      	b.n	80036ba <getX+0x1e>
		{
			if (XPT2046_REVERSED) { x[0] = Y(); x[1] = Y(); }
 80036aa:	f7ff ffc3 	bl	8003634 <Y>
 80036ae:	4603      	mov	r3, r0
 80036b0:	80bb      	strh	r3, [r7, #4]
 80036b2:	f7ff ffbf 	bl	8003634 <Y>
 80036b6:	4603      	mov	r3, r0
 80036b8:	80fb      	strh	r3, [r7, #6]
		while (x[0] != x[1])
 80036ba:	88ba      	ldrh	r2, [r7, #4]
 80036bc:	88fb      	ldrh	r3, [r7, #6]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d1f3      	bne.n	80036aa <getX+0xe>
			else { x[0] = X(); x[1] = X(); }
		}
		return x[0];
 80036c2:	88bb      	ldrh	r3, [r7, #4]
	} 
	else if (XPT2046_REVERSED) return Y(); else return X();
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	08008d6c 	.word	0x08008d6c

080036d0 <getY>:

uint16_t getY(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t y[2] = { 1, 2 };
 80036d6:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <getY+0x30>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	607b      	str	r3, [r7, #4]
		while (y[0] != y[1])
 80036dc:	e007      	b.n	80036ee <getY+0x1e>
		{
			if (XPT2046_REVERSED) { y[0] = X(); y[1] = X(); }
 80036de:	f7ff ff71 	bl	80035c4 <X>
 80036e2:	4603      	mov	r3, r0
 80036e4:	80bb      	strh	r3, [r7, #4]
 80036e6:	f7ff ff6d 	bl	80035c4 <X>
 80036ea:	4603      	mov	r3, r0
 80036ec:	80fb      	strh	r3, [r7, #6]
		while (y[0] != y[1])
 80036ee:	88ba      	ldrh	r2, [r7, #4]
 80036f0:	88fb      	ldrh	r3, [r7, #6]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d1f3      	bne.n	80036de <getY+0xe>
			else { y[0] = Y(); y[1] = Y(); }
		}
		return y[0];
 80036f6:	88bb      	ldrh	r3, [r7, #4]
	}
	else if (XPT2046_REVERSED) return X(); else return Y();
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	08008d6c 	.word	0x08008d6c

08003704 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003704:	f8df d034 	ldr.w	sp, [pc, #52]	; 800373c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003708:	480d      	ldr	r0, [pc, #52]	; (8003740 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800370a:	490e      	ldr	r1, [pc, #56]	; (8003744 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800370c:	4a0e      	ldr	r2, [pc, #56]	; (8003748 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800370e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003710:	e002      	b.n	8003718 <LoopCopyDataInit>

08003712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003716:	3304      	adds	r3, #4

08003718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800371a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800371c:	d3f9      	bcc.n	8003712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800371e:	4a0b      	ldr	r2, [pc, #44]	; (800374c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003720:	4c0b      	ldr	r4, [pc, #44]	; (8003750 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003724:	e001      	b.n	800372a <LoopFillZerobss>

08003726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003728:	3204      	adds	r2, #4

0800372a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800372a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800372c:	d3fb      	bcc.n	8003726 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800372e:	f7ff fe0b 	bl	8003348 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003732:	f004 fdff 	bl	8008334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003736:	f7fe fc4f 	bl	8001fd8 <main>
  bx  lr    
 800373a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800373c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003744:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8003748:	08009760 	.word	0x08009760
  ldr r2, =_sbss
 800374c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8003750:	20007a8c 	.word	0x20007a8c

08003754 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003754:	e7fe      	b.n	8003754 <ADC_IRQHandler>
	...

08003758 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800375c:	4b0e      	ldr	r3, [pc, #56]	; (8003798 <HAL_Init+0x40>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a0d      	ldr	r2, [pc, #52]	; (8003798 <HAL_Init+0x40>)
 8003762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003766:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003768:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <HAL_Init+0x40>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a0a      	ldr	r2, [pc, #40]	; (8003798 <HAL_Init+0x40>)
 800376e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003772:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003774:	4b08      	ldr	r3, [pc, #32]	; (8003798 <HAL_Init+0x40>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a07      	ldr	r2, [pc, #28]	; (8003798 <HAL_Init+0x40>)
 800377a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800377e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003780:	2003      	movs	r0, #3
 8003782:	f000 f94f 	bl	8003a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003786:	200f      	movs	r0, #15
 8003788:	f000 f808 	bl	800379c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800378c:	f7ff fb28 	bl	8002de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40023c00 	.word	0x40023c00

0800379c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037a4:	4b12      	ldr	r3, [pc, #72]	; (80037f0 <HAL_InitTick+0x54>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <HAL_InitTick+0x58>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	4619      	mov	r1, r3
 80037ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80037b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 f967 	bl	8003a8e <HAL_SYSTICK_Config>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e00e      	b.n	80037e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b0f      	cmp	r3, #15
 80037ce:	d80a      	bhi.n	80037e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037d0:	2200      	movs	r2, #0
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	f04f 30ff 	mov.w	r0, #4294967295
 80037d8:	f000 f92f 	bl	8003a3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037dc:	4a06      	ldr	r2, [pc, #24]	; (80037f8 <HAL_InitTick+0x5c>)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	e000      	b.n	80037e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	2000000c 	.word	0x2000000c
 80037f4:	20000014 	.word	0x20000014
 80037f8:	20000010 	.word	0x20000010

080037fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003800:	4b06      	ldr	r3, [pc, #24]	; (800381c <HAL_IncTick+0x20>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	461a      	mov	r2, r3
 8003806:	4b06      	ldr	r3, [pc, #24]	; (8003820 <HAL_IncTick+0x24>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4413      	add	r3, r2
 800380c:	4a04      	ldr	r2, [pc, #16]	; (8003820 <HAL_IncTick+0x24>)
 800380e:	6013      	str	r3, [r2, #0]
}
 8003810:	bf00      	nop
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	20000014 	.word	0x20000014
 8003820:	20007a78 	.word	0x20007a78

08003824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  return uwTick;
 8003828:	4b03      	ldr	r3, [pc, #12]	; (8003838 <HAL_GetTick+0x14>)
 800382a:	681b      	ldr	r3, [r3, #0]
}
 800382c:	4618      	mov	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	20007a78 	.word	0x20007a78

0800383c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003844:	f7ff ffee 	bl	8003824 <HAL_GetTick>
 8003848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003854:	d005      	beq.n	8003862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003856:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <HAL_Delay+0x44>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	461a      	mov	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4413      	add	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003862:	bf00      	nop
 8003864:	f7ff ffde 	bl	8003824 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	429a      	cmp	r2, r3
 8003872:	d8f7      	bhi.n	8003864 <HAL_Delay+0x28>
  {
  }
}
 8003874:	bf00      	nop
 8003876:	bf00      	nop
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000014 	.word	0x20000014

08003884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003894:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038a0:	4013      	ands	r3, r2
 80038a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038b6:	4a04      	ldr	r2, [pc, #16]	; (80038c8 <__NVIC_SetPriorityGrouping+0x44>)
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	60d3      	str	r3, [r2, #12]
}
 80038bc:	bf00      	nop
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	e000ed00 	.word	0xe000ed00

080038cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038d0:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <__NVIC_GetPriorityGrouping+0x18>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	0a1b      	lsrs	r3, r3, #8
 80038d6:	f003 0307 	and.w	r3, r3, #7
}
 80038da:	4618      	mov	r0, r3
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	e000ed00 	.word	0xe000ed00

080038e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	db0b      	blt.n	8003912 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	f003 021f 	and.w	r2, r3, #31
 8003900:	4907      	ldr	r1, [pc, #28]	; (8003920 <__NVIC_EnableIRQ+0x38>)
 8003902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	2001      	movs	r0, #1
 800390a:	fa00 f202 	lsl.w	r2, r0, r2
 800390e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	e000e100 	.word	0xe000e100

08003924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	6039      	str	r1, [r7, #0]
 800392e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003934:	2b00      	cmp	r3, #0
 8003936:	db0a      	blt.n	800394e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	b2da      	uxtb	r2, r3
 800393c:	490c      	ldr	r1, [pc, #48]	; (8003970 <__NVIC_SetPriority+0x4c>)
 800393e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003942:	0112      	lsls	r2, r2, #4
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	440b      	add	r3, r1
 8003948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800394c:	e00a      	b.n	8003964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	b2da      	uxtb	r2, r3
 8003952:	4908      	ldr	r1, [pc, #32]	; (8003974 <__NVIC_SetPriority+0x50>)
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	3b04      	subs	r3, #4
 800395c:	0112      	lsls	r2, r2, #4
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	440b      	add	r3, r1
 8003962:	761a      	strb	r2, [r3, #24]
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	e000e100 	.word	0xe000e100
 8003974:	e000ed00 	.word	0xe000ed00

08003978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003978:	b480      	push	{r7}
 800397a:	b089      	sub	sp, #36	; 0x24
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f1c3 0307 	rsb	r3, r3, #7
 8003992:	2b04      	cmp	r3, #4
 8003994:	bf28      	it	cs
 8003996:	2304      	movcs	r3, #4
 8003998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	3304      	adds	r3, #4
 800399e:	2b06      	cmp	r3, #6
 80039a0:	d902      	bls.n	80039a8 <NVIC_EncodePriority+0x30>
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	3b03      	subs	r3, #3
 80039a6:	e000      	b.n	80039aa <NVIC_EncodePriority+0x32>
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039ac:	f04f 32ff 	mov.w	r2, #4294967295
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	43da      	mvns	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	401a      	ands	r2, r3
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039c0:	f04f 31ff 	mov.w	r1, #4294967295
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ca:	43d9      	mvns	r1, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d0:	4313      	orrs	r3, r2
         );
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3724      	adds	r7, #36	; 0x24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
	...

080039e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039f0:	d301      	bcc.n	80039f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039f2:	2301      	movs	r3, #1
 80039f4:	e00f      	b.n	8003a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039f6:	4a0a      	ldr	r2, [pc, #40]	; (8003a20 <SysTick_Config+0x40>)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039fe:	210f      	movs	r1, #15
 8003a00:	f04f 30ff 	mov.w	r0, #4294967295
 8003a04:	f7ff ff8e 	bl	8003924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a08:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <SysTick_Config+0x40>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a0e:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <SysTick_Config+0x40>)
 8003a10:	2207      	movs	r2, #7
 8003a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	e000e010 	.word	0xe000e010

08003a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff ff29 	bl	8003884 <__NVIC_SetPriorityGrouping>
}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b086      	sub	sp, #24
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	4603      	mov	r3, r0
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	607a      	str	r2, [r7, #4]
 8003a46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a4c:	f7ff ff3e 	bl	80038cc <__NVIC_GetPriorityGrouping>
 8003a50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	6978      	ldr	r0, [r7, #20]
 8003a58:	f7ff ff8e 	bl	8003978 <NVIC_EncodePriority>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a62:	4611      	mov	r1, r2
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff ff5d 	bl	8003924 <__NVIC_SetPriority>
}
 8003a6a:	bf00      	nop
 8003a6c:	3718      	adds	r7, #24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b082      	sub	sp, #8
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	4603      	mov	r3, r0
 8003a7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff ff31 	bl	80038e8 <__NVIC_EnableIRQ>
}
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff ffa2 	bl	80039e0 <SysTick_Config>
 8003a9c:	4603      	mov	r3, r0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
	...

08003aa8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ab4:	f7ff feb6 	bl	8003824 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e099      	b.n	8003bf8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0201 	bic.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ae4:	e00f      	b.n	8003b06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ae6:	f7ff fe9d 	bl	8003824 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b05      	cmp	r3, #5
 8003af2:	d908      	bls.n	8003b06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2220      	movs	r2, #32
 8003af8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2203      	movs	r2, #3
 8003afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e078      	b.n	8003bf8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e8      	bne.n	8003ae6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	4b38      	ldr	r3, [pc, #224]	; (8003c00 <HAL_DMA_Init+0x158>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d107      	bne.n	8003b70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f023 0307 	bic.w	r3, r3, #7
 8003b86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d117      	bne.n	8003bca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00e      	beq.n	8003bca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 fa6f 	bl	8004090 <DMA_CheckFifoParam>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d008      	beq.n	8003bca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2240      	movs	r2, #64	; 0x40
 8003bbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e016      	b.n	8003bf8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fa26 	bl	8004024 <DMA_CalcBaseAndBitshift>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be0:	223f      	movs	r2, #63	; 0x3f
 8003be2:	409a      	lsls	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	f010803f 	.word	0xf010803f

08003c04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_DMA_Start_IT+0x26>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e040      	b.n	8003cac <HAL_DMA_Start_IT+0xa8>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d12f      	bne.n	8003c9e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2202      	movs	r2, #2
 8003c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	68b9      	ldr	r1, [r7, #8]
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 f9b8 	bl	8003fc8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5c:	223f      	movs	r2, #63	; 0x3f
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0216 	orr.w	r2, r2, #22
 8003c72:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d007      	beq.n	8003c8c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0208 	orr.w	r2, r2, #8
 8003c8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	e005      	b.n	8003caa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003cc0:	4b8e      	ldr	r3, [pc, #568]	; (8003efc <HAL_DMA_IRQHandler+0x248>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a8e      	ldr	r2, [pc, #568]	; (8003f00 <HAL_DMA_IRQHandler+0x24c>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	0a9b      	lsrs	r3, r3, #10
 8003ccc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cde:	2208      	movs	r2, #8
 8003ce0:	409a      	lsls	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d01a      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d013      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0204 	bic.w	r2, r2, #4
 8003d06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d0c:	2208      	movs	r2, #8
 8003d0e:	409a      	lsls	r2, r3
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d18:	f043 0201 	orr.w	r2, r3, #1
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d24:	2201      	movs	r2, #1
 8003d26:	409a      	lsls	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d012      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00b      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d42:	2201      	movs	r2, #1
 8003d44:	409a      	lsls	r2, r3
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4e:	f043 0202 	orr.w	r2, r3, #2
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5a:	2204      	movs	r2, #4
 8003d5c:	409a      	lsls	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4013      	ands	r3, r2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d012      	beq.n	8003d8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00b      	beq.n	8003d8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d78:	2204      	movs	r2, #4
 8003d7a:	409a      	lsls	r2, r3
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d84:	f043 0204 	orr.w	r2, r3, #4
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d90:	2210      	movs	r2, #16
 8003d92:	409a      	lsls	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4013      	ands	r3, r2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d043      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d03c      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dae:	2210      	movs	r2, #16
 8003db0:	409a      	lsls	r2, r3
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d018      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d108      	bne.n	8003de4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d024      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	4798      	blx	r3
 8003de2:	e01f      	b.n	8003e24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d01b      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	4798      	blx	r3
 8003df4:	e016      	b.n	8003e24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d107      	bne.n	8003e14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0208 	bic.w	r2, r2, #8
 8003e12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e28:	2220      	movs	r2, #32
 8003e2a:	409a      	lsls	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 808f 	beq.w	8003f54 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0310 	and.w	r3, r3, #16
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 8087 	beq.w	8003f54 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	409a      	lsls	r2, r3
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b05      	cmp	r3, #5
 8003e5c:	d136      	bne.n	8003ecc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0216 	bic.w	r2, r2, #22
 8003e6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695a      	ldr	r2, [r3, #20]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d103      	bne.n	8003e8e <HAL_DMA_IRQHandler+0x1da>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d007      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0208 	bic.w	r2, r2, #8
 8003e9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea2:	223f      	movs	r2, #63	; 0x3f
 8003ea4:	409a      	lsls	r2, r3
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d07e      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	4798      	blx	r3
        }
        return;
 8003eca:	e079      	b.n	8003fc0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d01d      	beq.n	8003f16 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10d      	bne.n	8003f04 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d031      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	4798      	blx	r3
 8003ef8:	e02c      	b.n	8003f54 <HAL_DMA_IRQHandler+0x2a0>
 8003efa:	bf00      	nop
 8003efc:	2000000c 	.word	0x2000000c
 8003f00:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d023      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	4798      	blx	r3
 8003f14:	e01e      	b.n	8003f54 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10f      	bne.n	8003f44 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0210 	bic.w	r2, r2, #16
 8003f32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d003      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d032      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d022      	beq.n	8003fae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2205      	movs	r2, #5
 8003f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0201 	bic.w	r2, r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	3301      	adds	r3, #1
 8003f84:	60bb      	str	r3, [r7, #8]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d307      	bcc.n	8003f9c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f2      	bne.n	8003f80 <HAL_DMA_IRQHandler+0x2cc>
 8003f9a:	e000      	b.n	8003f9e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f9c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d005      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	4798      	blx	r3
 8003fbe:	e000      	b.n	8003fc2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003fc0:	bf00      	nop
    }
  }
}
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
 8003fd4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fe4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	2b40      	cmp	r3, #64	; 0x40
 8003ff4:	d108      	bne.n	8004008 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004006:	e007      	b.n	8004018 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	60da      	str	r2, [r3, #12]
}
 8004018:	bf00      	nop
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	b2db      	uxtb	r3, r3
 8004032:	3b10      	subs	r3, #16
 8004034:	4a14      	ldr	r2, [pc, #80]	; (8004088 <DMA_CalcBaseAndBitshift+0x64>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	091b      	lsrs	r3, r3, #4
 800403c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800403e:	4a13      	ldr	r2, [pc, #76]	; (800408c <DMA_CalcBaseAndBitshift+0x68>)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4413      	add	r3, r2
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2b03      	cmp	r3, #3
 8004050:	d909      	bls.n	8004066 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800405a:	f023 0303 	bic.w	r3, r3, #3
 800405e:	1d1a      	adds	r2, r3, #4
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	659a      	str	r2, [r3, #88]	; 0x58
 8004064:	e007      	b.n	8004076 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800406e:	f023 0303 	bic.w	r3, r3, #3
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800407a:	4618      	mov	r0, r3
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	aaaaaaab 	.word	0xaaaaaaab
 800408c:	08009714 	.word	0x08009714

08004090 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004098:	2300      	movs	r3, #0
 800409a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d11f      	bne.n	80040ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d856      	bhi.n	800415e <DMA_CheckFifoParam+0xce>
 80040b0:	a201      	add	r2, pc, #4	; (adr r2, 80040b8 <DMA_CheckFifoParam+0x28>)
 80040b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b6:	bf00      	nop
 80040b8:	080040c9 	.word	0x080040c9
 80040bc:	080040db 	.word	0x080040db
 80040c0:	080040c9 	.word	0x080040c9
 80040c4:	0800415f 	.word	0x0800415f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d046      	beq.n	8004162 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040d8:	e043      	b.n	8004162 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040e2:	d140      	bne.n	8004166 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040e8:	e03d      	b.n	8004166 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040f2:	d121      	bne.n	8004138 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	d837      	bhi.n	800416a <DMA_CheckFifoParam+0xda>
 80040fa:	a201      	add	r2, pc, #4	; (adr r2, 8004100 <DMA_CheckFifoParam+0x70>)
 80040fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004100:	08004111 	.word	0x08004111
 8004104:	08004117 	.word	0x08004117
 8004108:	08004111 	.word	0x08004111
 800410c:	08004129 	.word	0x08004129
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	73fb      	strb	r3, [r7, #15]
      break;
 8004114:	e030      	b.n	8004178 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d025      	beq.n	800416e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004126:	e022      	b.n	800416e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004130:	d11f      	bne.n	8004172 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004136:	e01c      	b.n	8004172 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d903      	bls.n	8004146 <DMA_CheckFifoParam+0xb6>
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b03      	cmp	r3, #3
 8004142:	d003      	beq.n	800414c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004144:	e018      	b.n	8004178 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	73fb      	strb	r3, [r7, #15]
      break;
 800414a:	e015      	b.n	8004178 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004150:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00e      	beq.n	8004176 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	73fb      	strb	r3, [r7, #15]
      break;
 800415c:	e00b      	b.n	8004176 <DMA_CheckFifoParam+0xe6>
      break;
 800415e:	bf00      	nop
 8004160:	e00a      	b.n	8004178 <DMA_CheckFifoParam+0xe8>
      break;
 8004162:	bf00      	nop
 8004164:	e008      	b.n	8004178 <DMA_CheckFifoParam+0xe8>
      break;
 8004166:	bf00      	nop
 8004168:	e006      	b.n	8004178 <DMA_CheckFifoParam+0xe8>
      break;
 800416a:	bf00      	nop
 800416c:	e004      	b.n	8004178 <DMA_CheckFifoParam+0xe8>
      break;
 800416e:	bf00      	nop
 8004170:	e002      	b.n	8004178 <DMA_CheckFifoParam+0xe8>
      break;   
 8004172:	bf00      	nop
 8004174:	e000      	b.n	8004178 <DMA_CheckFifoParam+0xe8>
      break;
 8004176:	bf00      	nop
    }
  } 
  
  return status; 
 8004178:	7bfb      	ldrb	r3, [r7, #15]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop

08004188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004188:	b480      	push	{r7}
 800418a:	b089      	sub	sp, #36	; 0x24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004192:	2300      	movs	r3, #0
 8004194:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004196:	2300      	movs	r3, #0
 8004198:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800419a:	2300      	movs	r3, #0
 800419c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800419e:	2300      	movs	r3, #0
 80041a0:	61fb      	str	r3, [r7, #28]
 80041a2:	e159      	b.n	8004458 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041a4:	2201      	movs	r2, #1
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	4013      	ands	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	429a      	cmp	r2, r3
 80041be:	f040 8148 	bne.w	8004452 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d005      	beq.n	80041da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d130      	bne.n	800423c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	2203      	movs	r2, #3
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	43db      	mvns	r3, r3
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	4013      	ands	r3, r2
 80041f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	4313      	orrs	r3, r2
 8004202:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004210:	2201      	movs	r2, #1
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	43db      	mvns	r3, r3
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4013      	ands	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	091b      	lsrs	r3, r3, #4
 8004226:	f003 0201 	and.w	r2, r3, #1
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	4313      	orrs	r3, r2
 8004234:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f003 0303 	and.w	r3, r3, #3
 8004244:	2b03      	cmp	r3, #3
 8004246:	d017      	beq.n	8004278 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	2203      	movs	r2, #3
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	43db      	mvns	r3, r3
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	4013      	ands	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	4313      	orrs	r3, r2
 8004270:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f003 0303 	and.w	r3, r3, #3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d123      	bne.n	80042cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	08da      	lsrs	r2, r3, #3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3208      	adds	r2, #8
 800428c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004290:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	220f      	movs	r2, #15
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	43db      	mvns	r3, r3
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4013      	ands	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	fa02 f303 	lsl.w	r3, r2, r3
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	08da      	lsrs	r2, r3, #3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3208      	adds	r2, #8
 80042c6:	69b9      	ldr	r1, [r7, #24]
 80042c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	2203      	movs	r2, #3
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	43db      	mvns	r3, r3
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	4013      	ands	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f003 0203 	and.w	r2, r3, #3
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 80a2 	beq.w	8004452 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800430e:	2300      	movs	r3, #0
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	4b57      	ldr	r3, [pc, #348]	; (8004470 <HAL_GPIO_Init+0x2e8>)
 8004314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004316:	4a56      	ldr	r2, [pc, #344]	; (8004470 <HAL_GPIO_Init+0x2e8>)
 8004318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800431c:	6453      	str	r3, [r2, #68]	; 0x44
 800431e:	4b54      	ldr	r3, [pc, #336]	; (8004470 <HAL_GPIO_Init+0x2e8>)
 8004320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800432a:	4a52      	ldr	r2, [pc, #328]	; (8004474 <HAL_GPIO_Init+0x2ec>)
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	089b      	lsrs	r3, r3, #2
 8004330:	3302      	adds	r3, #2
 8004332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	220f      	movs	r2, #15
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	43db      	mvns	r3, r3
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	4013      	ands	r3, r2
 800434c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a49      	ldr	r2, [pc, #292]	; (8004478 <HAL_GPIO_Init+0x2f0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d019      	beq.n	800438a <HAL_GPIO_Init+0x202>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a48      	ldr	r2, [pc, #288]	; (800447c <HAL_GPIO_Init+0x2f4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d013      	beq.n	8004386 <HAL_GPIO_Init+0x1fe>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a47      	ldr	r2, [pc, #284]	; (8004480 <HAL_GPIO_Init+0x2f8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00d      	beq.n	8004382 <HAL_GPIO_Init+0x1fa>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a46      	ldr	r2, [pc, #280]	; (8004484 <HAL_GPIO_Init+0x2fc>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d007      	beq.n	800437e <HAL_GPIO_Init+0x1f6>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a45      	ldr	r2, [pc, #276]	; (8004488 <HAL_GPIO_Init+0x300>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d101      	bne.n	800437a <HAL_GPIO_Init+0x1f2>
 8004376:	2304      	movs	r3, #4
 8004378:	e008      	b.n	800438c <HAL_GPIO_Init+0x204>
 800437a:	2307      	movs	r3, #7
 800437c:	e006      	b.n	800438c <HAL_GPIO_Init+0x204>
 800437e:	2303      	movs	r3, #3
 8004380:	e004      	b.n	800438c <HAL_GPIO_Init+0x204>
 8004382:	2302      	movs	r3, #2
 8004384:	e002      	b.n	800438c <HAL_GPIO_Init+0x204>
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <HAL_GPIO_Init+0x204>
 800438a:	2300      	movs	r3, #0
 800438c:	69fa      	ldr	r2, [r7, #28]
 800438e:	f002 0203 	and.w	r2, r2, #3
 8004392:	0092      	lsls	r2, r2, #2
 8004394:	4093      	lsls	r3, r2
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4313      	orrs	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800439c:	4935      	ldr	r1, [pc, #212]	; (8004474 <HAL_GPIO_Init+0x2ec>)
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	089b      	lsrs	r3, r3, #2
 80043a2:	3302      	adds	r3, #2
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043aa:	4b38      	ldr	r3, [pc, #224]	; (800448c <HAL_GPIO_Init+0x304>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	43db      	mvns	r3, r3
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	4013      	ands	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043ce:	4a2f      	ldr	r2, [pc, #188]	; (800448c <HAL_GPIO_Init+0x304>)
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043d4:	4b2d      	ldr	r3, [pc, #180]	; (800448c <HAL_GPIO_Init+0x304>)
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	43db      	mvns	r3, r3
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	4013      	ands	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043f8:	4a24      	ldr	r2, [pc, #144]	; (800448c <HAL_GPIO_Init+0x304>)
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043fe:	4b23      	ldr	r3, [pc, #140]	; (800448c <HAL_GPIO_Init+0x304>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	43db      	mvns	r3, r3
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	4013      	ands	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	4313      	orrs	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004422:	4a1a      	ldr	r2, [pc, #104]	; (800448c <HAL_GPIO_Init+0x304>)
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004428:	4b18      	ldr	r3, [pc, #96]	; (800448c <HAL_GPIO_Init+0x304>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	43db      	mvns	r3, r3
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	4013      	ands	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	4313      	orrs	r3, r2
 800444a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800444c:	4a0f      	ldr	r2, [pc, #60]	; (800448c <HAL_GPIO_Init+0x304>)
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	3301      	adds	r3, #1
 8004456:	61fb      	str	r3, [r7, #28]
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	2b0f      	cmp	r3, #15
 800445c:	f67f aea2 	bls.w	80041a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004460:	bf00      	nop
 8004462:	bf00      	nop
 8004464:	3724      	adds	r7, #36	; 0x24
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	40023800 	.word	0x40023800
 8004474:	40013800 	.word	0x40013800
 8004478:	40020000 	.word	0x40020000
 800447c:	40020400 	.word	0x40020400
 8004480:	40020800 	.word	0x40020800
 8004484:	40020c00 	.word	0x40020c00
 8004488:	40021000 	.word	0x40021000
 800448c:	40013c00 	.word	0x40013c00

08004490 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691a      	ldr	r2, [r3, #16]
 80044a0:	887b      	ldrh	r3, [r7, #2]
 80044a2:	4013      	ands	r3, r2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044a8:	2301      	movs	r3, #1
 80044aa:	73fb      	strb	r3, [r7, #15]
 80044ac:	e001      	b.n	80044b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044ae:	2300      	movs	r3, #0
 80044b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	460b      	mov	r3, r1
 80044ca:	807b      	strh	r3, [r7, #2]
 80044cc:	4613      	mov	r3, r2
 80044ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044d0:	787b      	ldrb	r3, [r7, #1]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044d6:	887a      	ldrh	r2, [r7, #2]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044dc:	e003      	b.n	80044e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044de:	887b      	ldrh	r3, [r7, #2]
 80044e0:	041a      	lsls	r2, r3, #16
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	619a      	str	r2, [r3, #24]
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
	...

080044f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e12b      	b.n	800475e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fe fc88 	bl	8002e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2224      	movs	r2, #36	; 0x24
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0201 	bic.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004546:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004556:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004558:	f001 fbbc 	bl	8005cd4 <HAL_RCC_GetPCLK1Freq>
 800455c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	4a81      	ldr	r2, [pc, #516]	; (8004768 <HAL_I2C_Init+0x274>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d807      	bhi.n	8004578 <HAL_I2C_Init+0x84>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4a80      	ldr	r2, [pc, #512]	; (800476c <HAL_I2C_Init+0x278>)
 800456c:	4293      	cmp	r3, r2
 800456e:	bf94      	ite	ls
 8004570:	2301      	movls	r3, #1
 8004572:	2300      	movhi	r3, #0
 8004574:	b2db      	uxtb	r3, r3
 8004576:	e006      	b.n	8004586 <HAL_I2C_Init+0x92>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4a7d      	ldr	r2, [pc, #500]	; (8004770 <HAL_I2C_Init+0x27c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	bf94      	ite	ls
 8004580:	2301      	movls	r3, #1
 8004582:	2300      	movhi	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e0e7      	b.n	800475e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4a78      	ldr	r2, [pc, #480]	; (8004774 <HAL_I2C_Init+0x280>)
 8004592:	fba2 2303 	umull	r2, r3, r2, r3
 8004596:	0c9b      	lsrs	r3, r3, #18
 8004598:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	4a6a      	ldr	r2, [pc, #424]	; (8004768 <HAL_I2C_Init+0x274>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d802      	bhi.n	80045c8 <HAL_I2C_Init+0xd4>
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	3301      	adds	r3, #1
 80045c6:	e009      	b.n	80045dc <HAL_I2C_Init+0xe8>
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045ce:	fb02 f303 	mul.w	r3, r2, r3
 80045d2:	4a69      	ldr	r2, [pc, #420]	; (8004778 <HAL_I2C_Init+0x284>)
 80045d4:	fba2 2303 	umull	r2, r3, r2, r3
 80045d8:	099b      	lsrs	r3, r3, #6
 80045da:	3301      	adds	r3, #1
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6812      	ldr	r2, [r2, #0]
 80045e0:	430b      	orrs	r3, r1
 80045e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	495c      	ldr	r1, [pc, #368]	; (8004768 <HAL_I2C_Init+0x274>)
 80045f8:	428b      	cmp	r3, r1
 80045fa:	d819      	bhi.n	8004630 <HAL_I2C_Init+0x13c>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	1e59      	subs	r1, r3, #1
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	fbb1 f3f3 	udiv	r3, r1, r3
 800460a:	1c59      	adds	r1, r3, #1
 800460c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004610:	400b      	ands	r3, r1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <HAL_I2C_Init+0x138>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	1e59      	subs	r1, r3, #1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	fbb1 f3f3 	udiv	r3, r1, r3
 8004624:	3301      	adds	r3, #1
 8004626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800462a:	e051      	b.n	80046d0 <HAL_I2C_Init+0x1dc>
 800462c:	2304      	movs	r3, #4
 800462e:	e04f      	b.n	80046d0 <HAL_I2C_Init+0x1dc>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d111      	bne.n	800465c <HAL_I2C_Init+0x168>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	1e58      	subs	r0, r3, #1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6859      	ldr	r1, [r3, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	440b      	add	r3, r1
 8004646:	fbb0 f3f3 	udiv	r3, r0, r3
 800464a:	3301      	adds	r3, #1
 800464c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004650:	2b00      	cmp	r3, #0
 8004652:	bf0c      	ite	eq
 8004654:	2301      	moveq	r3, #1
 8004656:	2300      	movne	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	e012      	b.n	8004682 <HAL_I2C_Init+0x18e>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	1e58      	subs	r0, r3, #1
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6859      	ldr	r1, [r3, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	0099      	lsls	r1, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004672:	3301      	adds	r3, #1
 8004674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf0c      	ite	eq
 800467c:	2301      	moveq	r3, #1
 800467e:	2300      	movne	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <HAL_I2C_Init+0x196>
 8004686:	2301      	movs	r3, #1
 8004688:	e022      	b.n	80046d0 <HAL_I2C_Init+0x1dc>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10e      	bne.n	80046b0 <HAL_I2C_Init+0x1bc>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	1e58      	subs	r0, r3, #1
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6859      	ldr	r1, [r3, #4]
 800469a:	460b      	mov	r3, r1
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	440b      	add	r3, r1
 80046a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80046a4:	3301      	adds	r3, #1
 80046a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ae:	e00f      	b.n	80046d0 <HAL_I2C_Init+0x1dc>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	1e58      	subs	r0, r3, #1
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6859      	ldr	r1, [r3, #4]
 80046b8:	460b      	mov	r3, r1
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	0099      	lsls	r1, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046c6:	3301      	adds	r3, #1
 80046c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	6809      	ldr	r1, [r1, #0]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69da      	ldr	r2, [r3, #28]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80046fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6911      	ldr	r1, [r2, #16]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	68d2      	ldr	r2, [r2, #12]
 800470a:	4311      	orrs	r1, r2
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6812      	ldr	r2, [r2, #0]
 8004710:	430b      	orrs	r3, r1
 8004712:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	695a      	ldr	r2, [r3, #20]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0201 	orr.w	r2, r2, #1
 800473e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2220      	movs	r2, #32
 800474a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	000186a0 	.word	0x000186a0
 800476c:	001e847f 	.word	0x001e847f
 8004770:	003d08ff 	.word	0x003d08ff
 8004774:	431bde83 	.word	0x431bde83
 8004778:	10624dd3 	.word	0x10624dd3

0800477c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af02      	add	r7, sp, #8
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	4608      	mov	r0, r1
 8004786:	4611      	mov	r1, r2
 8004788:	461a      	mov	r2, r3
 800478a:	4603      	mov	r3, r0
 800478c:	817b      	strh	r3, [r7, #10]
 800478e:	460b      	mov	r3, r1
 8004790:	813b      	strh	r3, [r7, #8]
 8004792:	4613      	mov	r3, r2
 8004794:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004796:	f7ff f845 	bl	8003824 <HAL_GetTick>
 800479a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b20      	cmp	r3, #32
 80047a6:	f040 80d9 	bne.w	800495c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	2319      	movs	r3, #25
 80047b0:	2201      	movs	r2, #1
 80047b2:	496d      	ldr	r1, [pc, #436]	; (8004968 <HAL_I2C_Mem_Write+0x1ec>)
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 fc7f 	bl	80050b8 <I2C_WaitOnFlagUntilTimeout>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80047c0:	2302      	movs	r3, #2
 80047c2:	e0cc      	b.n	800495e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d101      	bne.n	80047d2 <HAL_I2C_Mem_Write+0x56>
 80047ce:	2302      	movs	r3, #2
 80047d0:	e0c5      	b.n	800495e <HAL_I2C_Mem_Write+0x1e2>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d007      	beq.n	80047f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004806:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2221      	movs	r2, #33	; 0x21
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2240      	movs	r2, #64	; 0x40
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a3a      	ldr	r2, [r7, #32]
 8004822:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004828:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482e:	b29a      	uxth	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4a4d      	ldr	r2, [pc, #308]	; (800496c <HAL_I2C_Mem_Write+0x1f0>)
 8004838:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800483a:	88f8      	ldrh	r0, [r7, #6]
 800483c:	893a      	ldrh	r2, [r7, #8]
 800483e:	8979      	ldrh	r1, [r7, #10]
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	9301      	str	r3, [sp, #4]
 8004844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	4603      	mov	r3, r0
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 fab6 	bl	8004dbc <I2C_RequestMemoryWrite>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d052      	beq.n	80048fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e081      	b.n	800495e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 fd00 	bl	8005264 <I2C_WaitOnTXEFlagUntilTimeout>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00d      	beq.n	8004886 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	2b04      	cmp	r3, #4
 8004870:	d107      	bne.n	8004882 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004880:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e06b      	b.n	800495e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	781a      	ldrb	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a0:	3b01      	subs	r3, #1
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d11b      	bne.n	80048fc <HAL_I2C_Mem_Write+0x180>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d017      	beq.n	80048fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	781a      	ldrb	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1aa      	bne.n	800485a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 fcec 	bl	80052e6 <I2C_WaitOnBTFFlagUntilTimeout>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00d      	beq.n	8004930 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	2b04      	cmp	r3, #4
 800491a:	d107      	bne.n	800492c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e016      	b.n	800495e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800493e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	e000      	b.n	800495e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800495c:	2302      	movs	r3, #2
  }
}
 800495e:	4618      	mov	r0, r3
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	00100002 	.word	0x00100002
 800496c:	ffff0000 	.word	0xffff0000

08004970 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b08c      	sub	sp, #48	; 0x30
 8004974:	af02      	add	r7, sp, #8
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	4608      	mov	r0, r1
 800497a:	4611      	mov	r1, r2
 800497c:	461a      	mov	r2, r3
 800497e:	4603      	mov	r3, r0
 8004980:	817b      	strh	r3, [r7, #10]
 8004982:	460b      	mov	r3, r1
 8004984:	813b      	strh	r3, [r7, #8]
 8004986:	4613      	mov	r3, r2
 8004988:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800498a:	f7fe ff4b 	bl	8003824 <HAL_GetTick>
 800498e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b20      	cmp	r3, #32
 800499a:	f040 8208 	bne.w	8004dae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	2319      	movs	r3, #25
 80049a4:	2201      	movs	r2, #1
 80049a6:	497b      	ldr	r1, [pc, #492]	; (8004b94 <HAL_I2C_Mem_Read+0x224>)
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 fb85 	bl	80050b8 <I2C_WaitOnFlagUntilTimeout>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80049b4:	2302      	movs	r3, #2
 80049b6:	e1fb      	b.n	8004db0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_I2C_Mem_Read+0x56>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e1f4      	b.n	8004db0 <HAL_I2C_Mem_Read+0x440>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d007      	beq.n	80049ec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0201 	orr.w	r2, r2, #1
 80049ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2222      	movs	r2, #34	; 0x22
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2240      	movs	r2, #64	; 0x40
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4a5b      	ldr	r2, [pc, #364]	; (8004b98 <HAL_I2C_Mem_Read+0x228>)
 8004a2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a2e:	88f8      	ldrh	r0, [r7, #6]
 8004a30:	893a      	ldrh	r2, [r7, #8]
 8004a32:	8979      	ldrh	r1, [r7, #10]
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	9301      	str	r3, [sp, #4]
 8004a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 fa52 	bl	8004ee8 <I2C_RequestMemoryRead>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e1b0      	b.n	8004db0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d113      	bne.n	8004a7e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a56:	2300      	movs	r3, #0
 8004a58:	623b      	str	r3, [r7, #32]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	623b      	str	r3, [r7, #32]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	623b      	str	r3, [r7, #32]
 8004a6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	e184      	b.n	8004d88 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d11b      	bne.n	8004abe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a96:	2300      	movs	r3, #0
 8004a98:	61fb      	str	r3, [r7, #28]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	61fb      	str	r3, [r7, #28]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	61fb      	str	r3, [r7, #28]
 8004aaa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	e164      	b.n	8004d88 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d11b      	bne.n	8004afe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ae4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	61bb      	str	r3, [r7, #24]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	61bb      	str	r3, [r7, #24]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	61bb      	str	r3, [r7, #24]
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	e144      	b.n	8004d88 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004afe:	2300      	movs	r3, #0
 8004b00:	617b      	str	r3, [r7, #20]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	617b      	str	r3, [r7, #20]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004b14:	e138      	b.n	8004d88 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1a:	2b03      	cmp	r3, #3
 8004b1c:	f200 80f1 	bhi.w	8004d02 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d123      	bne.n	8004b70 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f000 fc1b 	bl	8005368 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e139      	b.n	8004db0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	691a      	ldr	r2, [r3, #16]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4e:	1c5a      	adds	r2, r3, #1
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	3b01      	subs	r3, #1
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b6e:	e10b      	b.n	8004d88 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d14e      	bne.n	8004c16 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7e:	2200      	movs	r2, #0
 8004b80:	4906      	ldr	r1, [pc, #24]	; (8004b9c <HAL_I2C_Mem_Read+0x22c>)
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 fa98 	bl	80050b8 <I2C_WaitOnFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d008      	beq.n	8004ba0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e10e      	b.n	8004db0 <HAL_I2C_Mem_Read+0x440>
 8004b92:	bf00      	nop
 8004b94:	00100002 	.word	0x00100002
 8004b98:	ffff0000 	.word	0xffff0000
 8004b9c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691a      	ldr	r2, [r3, #16]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	691a      	ldr	r2, [r3, #16]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	b2d2      	uxtb	r2, r2
 8004bee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c14:	e0b8      	b.n	8004d88 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	4966      	ldr	r1, [pc, #408]	; (8004db8 <HAL_I2C_Mem_Read+0x448>)
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 fa49 	bl	80050b8 <I2C_WaitOnFlagUntilTimeout>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e0bf      	b.n	8004db0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691a      	ldr	r2, [r3, #16]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c78:	2200      	movs	r2, #0
 8004c7a:	494f      	ldr	r1, [pc, #316]	; (8004db8 <HAL_I2C_Mem_Read+0x448>)
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 fa1b 	bl	80050b8 <I2C_WaitOnFlagUntilTimeout>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d001      	beq.n	8004c8c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e091      	b.n	8004db0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	691a      	ldr	r2, [r3, #16]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	b2d2      	uxtb	r2, r2
 8004cda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	1c5a      	adds	r2, r3, #1
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cea:	3b01      	subs	r3, #1
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d00:	e042      	b.n	8004d88 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 fb2e 	bl	8005368 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e04c      	b.n	8004db0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	b2d2      	uxtb	r2, r2
 8004d22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	d118      	bne.n	8004d88 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f47f aec2 	bne.w	8004b16 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	e000      	b.n	8004db0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004dae:	2302      	movs	r3, #2
  }
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3728      	adds	r7, #40	; 0x28
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	00010004 	.word	0x00010004

08004dbc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4603      	mov	r3, r0
 8004dcc:	817b      	strh	r3, [r7, #10]
 8004dce:	460b      	mov	r3, r1
 8004dd0:	813b      	strh	r3, [r7, #8]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004de4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 f960 	bl	80050b8 <I2C_WaitOnFlagUntilTimeout>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00d      	beq.n	8004e1a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e0c:	d103      	bne.n	8004e16 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e05f      	b.n	8004eda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e1a:	897b      	ldrh	r3, [r7, #10]
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	461a      	mov	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	6a3a      	ldr	r2, [r7, #32]
 8004e2e:	492d      	ldr	r1, [pc, #180]	; (8004ee4 <I2C_RequestMemoryWrite+0x128>)
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 f998 	bl	8005166 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e04c      	b.n	8004eda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e40:	2300      	movs	r3, #0
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	617b      	str	r3, [r7, #20]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	617b      	str	r3, [r7, #20]
 8004e54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e58:	6a39      	ldr	r1, [r7, #32]
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 fa02 	bl	8005264 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00d      	beq.n	8004e82 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d107      	bne.n	8004e7e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e02b      	b.n	8004eda <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e82:	88fb      	ldrh	r3, [r7, #6]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d105      	bne.n	8004e94 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e88:	893b      	ldrh	r3, [r7, #8]
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	611a      	str	r2, [r3, #16]
 8004e92:	e021      	b.n	8004ed8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e94:	893b      	ldrh	r3, [r7, #8]
 8004e96:	0a1b      	lsrs	r3, r3, #8
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea4:	6a39      	ldr	r1, [r7, #32]
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 f9dc 	bl	8005264 <I2C_WaitOnTXEFlagUntilTimeout>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00d      	beq.n	8004ece <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d107      	bne.n	8004eca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ec8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e005      	b.n	8004eda <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ece:	893b      	ldrh	r3, [r7, #8]
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	00010002 	.word	0x00010002

08004ee8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b088      	sub	sp, #32
 8004eec:	af02      	add	r7, sp, #8
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	4608      	mov	r0, r1
 8004ef2:	4611      	mov	r1, r2
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	817b      	strh	r3, [r7, #10]
 8004efa:	460b      	mov	r3, r1
 8004efc:	813b      	strh	r3, [r7, #8]
 8004efe:	4613      	mov	r3, r2
 8004f00:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f10:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 f8c2 	bl	80050b8 <I2C_WaitOnFlagUntilTimeout>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00d      	beq.n	8004f56 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f48:	d103      	bne.n	8004f52 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e0aa      	b.n	80050ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f56:	897b      	ldrh	r3, [r7, #10]
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	6a3a      	ldr	r2, [r7, #32]
 8004f6a:	4952      	ldr	r1, [pc, #328]	; (80050b4 <I2C_RequestMemoryRead+0x1cc>)
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f000 f8fa 	bl	8005166 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e097      	b.n	80050ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	617b      	str	r3, [r7, #20]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f94:	6a39      	ldr	r1, [r7, #32]
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 f964 	bl	8005264 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00d      	beq.n	8004fbe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d107      	bne.n	8004fba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e076      	b.n	80050ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fbe:	88fb      	ldrh	r3, [r7, #6]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d105      	bne.n	8004fd0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fc4:	893b      	ldrh	r3, [r7, #8]
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	611a      	str	r2, [r3, #16]
 8004fce:	e021      	b.n	8005014 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004fd0:	893b      	ldrh	r3, [r7, #8]
 8004fd2:	0a1b      	lsrs	r3, r3, #8
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe0:	6a39      	ldr	r1, [r7, #32]
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 f93e 	bl	8005264 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00d      	beq.n	800500a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d107      	bne.n	8005006 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005004:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e050      	b.n	80050ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800500a:	893b      	ldrh	r3, [r7, #8]
 800500c:	b2da      	uxtb	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005016:	6a39      	ldr	r1, [r7, #32]
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f000 f923 	bl	8005264 <I2C_WaitOnTXEFlagUntilTimeout>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00d      	beq.n	8005040 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005028:	2b04      	cmp	r3, #4
 800502a:	d107      	bne.n	800503c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800503a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e035      	b.n	80050ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800504e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	2200      	movs	r2, #0
 8005058:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 f82b 	bl	80050b8 <I2C_WaitOnFlagUntilTimeout>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00d      	beq.n	8005084 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005076:	d103      	bne.n	8005080 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800507e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e013      	b.n	80050ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005084:	897b      	ldrh	r3, [r7, #10]
 8005086:	b2db      	uxtb	r3, r3
 8005088:	f043 0301 	orr.w	r3, r3, #1
 800508c:	b2da      	uxtb	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	6a3a      	ldr	r2, [r7, #32]
 8005098:	4906      	ldr	r1, [pc, #24]	; (80050b4 <I2C_RequestMemoryRead+0x1cc>)
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f000 f863 	bl	8005166 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e000      	b.n	80050ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	00010002 	.word	0x00010002

080050b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	603b      	str	r3, [r7, #0]
 80050c4:	4613      	mov	r3, r2
 80050c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050c8:	e025      	b.n	8005116 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d0:	d021      	beq.n	8005116 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050d2:	f7fe fba7 	bl	8003824 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d302      	bcc.n	80050e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d116      	bne.n	8005116 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	f043 0220 	orr.w	r2, r3, #32
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e023      	b.n	800515e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	0c1b      	lsrs	r3, r3, #16
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b01      	cmp	r3, #1
 800511e:	d10d      	bne.n	800513c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	43da      	mvns	r2, r3
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	4013      	ands	r3, r2
 800512c:	b29b      	uxth	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	bf0c      	ite	eq
 8005132:	2301      	moveq	r3, #1
 8005134:	2300      	movne	r3, #0
 8005136:	b2db      	uxtb	r3, r3
 8005138:	461a      	mov	r2, r3
 800513a:	e00c      	b.n	8005156 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	43da      	mvns	r2, r3
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	4013      	ands	r3, r2
 8005148:	b29b      	uxth	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	bf0c      	ite	eq
 800514e:	2301      	moveq	r3, #1
 8005150:	2300      	movne	r3, #0
 8005152:	b2db      	uxtb	r3, r3
 8005154:	461a      	mov	r2, r3
 8005156:	79fb      	ldrb	r3, [r7, #7]
 8005158:	429a      	cmp	r2, r3
 800515a:	d0b6      	beq.n	80050ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b084      	sub	sp, #16
 800516a:	af00      	add	r7, sp, #0
 800516c:	60f8      	str	r0, [r7, #12]
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	607a      	str	r2, [r7, #4]
 8005172:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005174:	e051      	b.n	800521a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005184:	d123      	bne.n	80051ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005194:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800519e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2220      	movs	r2, #32
 80051aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	f043 0204 	orr.w	r2, r3, #4
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e046      	b.n	800525c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d4:	d021      	beq.n	800521a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d6:	f7fe fb25 	bl	8003824 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d302      	bcc.n	80051ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d116      	bne.n	800521a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2220      	movs	r2, #32
 80051f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	f043 0220 	orr.w	r2, r3, #32
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e020      	b.n	800525c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	0c1b      	lsrs	r3, r3, #16
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b01      	cmp	r3, #1
 8005222:	d10c      	bne.n	800523e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	43da      	mvns	r2, r3
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4013      	ands	r3, r2
 8005230:	b29b      	uxth	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	bf14      	ite	ne
 8005236:	2301      	movne	r3, #1
 8005238:	2300      	moveq	r3, #0
 800523a:	b2db      	uxtb	r3, r3
 800523c:	e00b      	b.n	8005256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	43da      	mvns	r2, r3
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	4013      	ands	r3, r2
 800524a:	b29b      	uxth	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	bf14      	ite	ne
 8005250:	2301      	movne	r3, #1
 8005252:	2300      	moveq	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d18d      	bne.n	8005176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005270:	e02d      	b.n	80052ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 f8ce 	bl	8005414 <I2C_IsAcknowledgeFailed>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e02d      	b.n	80052de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005288:	d021      	beq.n	80052ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800528a:	f7fe facb 	bl	8003824 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	429a      	cmp	r2, r3
 8005298:	d302      	bcc.n	80052a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d116      	bne.n	80052ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2220      	movs	r2, #32
 80052aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	f043 0220 	orr.w	r2, r3, #32
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e007      	b.n	80052de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d8:	2b80      	cmp	r3, #128	; 0x80
 80052da:	d1ca      	bne.n	8005272 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b084      	sub	sp, #16
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	60f8      	str	r0, [r7, #12]
 80052ee:	60b9      	str	r1, [r7, #8]
 80052f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052f2:	e02d      	b.n	8005350 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 f88d 	bl	8005414 <I2C_IsAcknowledgeFailed>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e02d      	b.n	8005360 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530a:	d021      	beq.n	8005350 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800530c:	f7fe fa8a 	bl	8003824 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	429a      	cmp	r2, r3
 800531a:	d302      	bcc.n	8005322 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d116      	bne.n	8005350 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2220      	movs	r2, #32
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533c:	f043 0220 	orr.w	r2, r3, #32
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e007      	b.n	8005360 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	f003 0304 	and.w	r3, r3, #4
 800535a:	2b04      	cmp	r3, #4
 800535c:	d1ca      	bne.n	80052f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005374:	e042      	b.n	80053fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	f003 0310 	and.w	r3, r3, #16
 8005380:	2b10      	cmp	r3, #16
 8005382:	d119      	bne.n	80053b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f06f 0210 	mvn.w	r2, #16
 800538c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e029      	b.n	800540c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053b8:	f7fe fa34 	bl	8003824 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d302      	bcc.n	80053ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d116      	bne.n	80053fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e8:	f043 0220 	orr.w	r2, r3, #32
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e007      	b.n	800540c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005406:	2b40      	cmp	r3, #64	; 0x40
 8005408:	d1b5      	bne.n	8005376 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800542a:	d11b      	bne.n	8005464 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005434:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2220      	movs	r2, #32
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005450:	f043 0204 	orr.w	r2, r3, #4
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e000      	b.n	8005466 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
	...

08005474 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e267      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d075      	beq.n	800557e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005492:	4b88      	ldr	r3, [pc, #544]	; (80056b4 <HAL_RCC_OscConfig+0x240>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 030c 	and.w	r3, r3, #12
 800549a:	2b04      	cmp	r3, #4
 800549c:	d00c      	beq.n	80054b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800549e:	4b85      	ldr	r3, [pc, #532]	; (80056b4 <HAL_RCC_OscConfig+0x240>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054a6:	2b08      	cmp	r3, #8
 80054a8:	d112      	bne.n	80054d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054aa:	4b82      	ldr	r3, [pc, #520]	; (80056b4 <HAL_RCC_OscConfig+0x240>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054b6:	d10b      	bne.n	80054d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054b8:	4b7e      	ldr	r3, [pc, #504]	; (80056b4 <HAL_RCC_OscConfig+0x240>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d05b      	beq.n	800557c <HAL_RCC_OscConfig+0x108>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d157      	bne.n	800557c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e242      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d8:	d106      	bne.n	80054e8 <HAL_RCC_OscConfig+0x74>
 80054da:	4b76      	ldr	r3, [pc, #472]	; (80056b4 <HAL_RCC_OscConfig+0x240>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a75      	ldr	r2, [pc, #468]	; (80056b4 <HAL_RCC_OscConfig+0x240>)
 80054e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	e01d      	b.n	8005524 <HAL_RCC_OscConfig+0xb0>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054f0:	d10c      	bne.n	800550c <HAL_RCC_OscConfig+0x98>
 80054f2:	4b70      	ldr	r3, [pc, #448]	; (80056b4 <HAL_RCC_OscConfig+0x240>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a6f      	ldr	r2, [pc, #444]	; (80056b4 <HAL_RCC_OscConfig+0x240>)
 80054f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	4b6d      	ldr	r3, [pc, #436]	; (80056b4 <HAL_RCC_OscConfig+0x240>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a6c      	ldr	r2, [pc, #432]	; (80056b4 <HAL_RCC_OscConfig+0x240>)
 8005504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	e00b      	b.n	8005524 <HAL_RCC_OscConfig+0xb0>
 800550c:	4b69      	ldr	r3, [pc, #420]	; (80056b4 <HAL_RCC_OscConfig+0x240>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a68      	ldr	r2, [pc, #416]	; (80056b4 <HAL_RCC_OscConfig+0x240>)
 8005512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005516:	6013      	str	r3, [r2, #0]
 8005518:	4b66      	ldr	r3, [pc, #408]	; (80056b4 <HAL_RCC_OscConfig+0x240>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a65      	ldr	r2, [pc, #404]	; (80056b4 <HAL_RCC_OscConfig+0x240>)
 800551e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d013      	beq.n	8005554 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800552c:	f7fe f97a 	bl	8003824 <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005532:	e008      	b.n	8005546 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005534:	f7fe f976 	bl	8003824 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b64      	cmp	r3, #100	; 0x64
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e207      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005546:	4b5b      	ldr	r3, [pc, #364]	; (80056b4 <HAL_RCC_OscConfig+0x240>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d0f0      	beq.n	8005534 <HAL_RCC_OscConfig+0xc0>
 8005552:	e014      	b.n	800557e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005554:	f7fe f966 	bl	8003824 <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800555c:	f7fe f962 	bl	8003824 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b64      	cmp	r3, #100	; 0x64
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e1f3      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800556e:	4b51      	ldr	r3, [pc, #324]	; (80056b4 <HAL_RCC_OscConfig+0x240>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1f0      	bne.n	800555c <HAL_RCC_OscConfig+0xe8>
 800557a:	e000      	b.n	800557e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800557c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d063      	beq.n	8005652 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800558a:	4b4a      	ldr	r3, [pc, #296]	; (80056b4 <HAL_RCC_OscConfig+0x240>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 030c 	and.w	r3, r3, #12
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00b      	beq.n	80055ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005596:	4b47      	ldr	r3, [pc, #284]	; (80056b4 <HAL_RCC_OscConfig+0x240>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800559e:	2b08      	cmp	r3, #8
 80055a0:	d11c      	bne.n	80055dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055a2:	4b44      	ldr	r3, [pc, #272]	; (80056b4 <HAL_RCC_OscConfig+0x240>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d116      	bne.n	80055dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ae:	4b41      	ldr	r3, [pc, #260]	; (80056b4 <HAL_RCC_OscConfig+0x240>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d005      	beq.n	80055c6 <HAL_RCC_OscConfig+0x152>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d001      	beq.n	80055c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e1c7      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055c6:	4b3b      	ldr	r3, [pc, #236]	; (80056b4 <HAL_RCC_OscConfig+0x240>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	4937      	ldr	r1, [pc, #220]	; (80056b4 <HAL_RCC_OscConfig+0x240>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055da:	e03a      	b.n	8005652 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d020      	beq.n	8005626 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055e4:	4b34      	ldr	r3, [pc, #208]	; (80056b8 <HAL_RCC_OscConfig+0x244>)
 80055e6:	2201      	movs	r2, #1
 80055e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ea:	f7fe f91b 	bl	8003824 <HAL_GetTick>
 80055ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055f0:	e008      	b.n	8005604 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055f2:	f7fe f917 	bl	8003824 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d901      	bls.n	8005604 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e1a8      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005604:	4b2b      	ldr	r3, [pc, #172]	; (80056b4 <HAL_RCC_OscConfig+0x240>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0f0      	beq.n	80055f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005610:	4b28      	ldr	r3, [pc, #160]	; (80056b4 <HAL_RCC_OscConfig+0x240>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	4925      	ldr	r1, [pc, #148]	; (80056b4 <HAL_RCC_OscConfig+0x240>)
 8005620:	4313      	orrs	r3, r2
 8005622:	600b      	str	r3, [r1, #0]
 8005624:	e015      	b.n	8005652 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005626:	4b24      	ldr	r3, [pc, #144]	; (80056b8 <HAL_RCC_OscConfig+0x244>)
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562c:	f7fe f8fa 	bl	8003824 <HAL_GetTick>
 8005630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005634:	f7fe f8f6 	bl	8003824 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e187      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005646:	4b1b      	ldr	r3, [pc, #108]	; (80056b4 <HAL_RCC_OscConfig+0x240>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1f0      	bne.n	8005634 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d036      	beq.n	80056cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d016      	beq.n	8005694 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005666:	4b15      	ldr	r3, [pc, #84]	; (80056bc <HAL_RCC_OscConfig+0x248>)
 8005668:	2201      	movs	r2, #1
 800566a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800566c:	f7fe f8da 	bl	8003824 <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005672:	e008      	b.n	8005686 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005674:	f7fe f8d6 	bl	8003824 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e167      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005686:	4b0b      	ldr	r3, [pc, #44]	; (80056b4 <HAL_RCC_OscConfig+0x240>)
 8005688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0f0      	beq.n	8005674 <HAL_RCC_OscConfig+0x200>
 8005692:	e01b      	b.n	80056cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005694:	4b09      	ldr	r3, [pc, #36]	; (80056bc <HAL_RCC_OscConfig+0x248>)
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800569a:	f7fe f8c3 	bl	8003824 <HAL_GetTick>
 800569e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056a0:	e00e      	b.n	80056c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056a2:	f7fe f8bf 	bl	8003824 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d907      	bls.n	80056c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e150      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
 80056b4:	40023800 	.word	0x40023800
 80056b8:	42470000 	.word	0x42470000
 80056bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056c0:	4b88      	ldr	r3, [pc, #544]	; (80058e4 <HAL_RCC_OscConfig+0x470>)
 80056c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1ea      	bne.n	80056a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 8097 	beq.w	8005808 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056da:	2300      	movs	r3, #0
 80056dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056de:	4b81      	ldr	r3, [pc, #516]	; (80058e4 <HAL_RCC_OscConfig+0x470>)
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10f      	bne.n	800570a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ea:	2300      	movs	r3, #0
 80056ec:	60bb      	str	r3, [r7, #8]
 80056ee:	4b7d      	ldr	r3, [pc, #500]	; (80058e4 <HAL_RCC_OscConfig+0x470>)
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	4a7c      	ldr	r2, [pc, #496]	; (80058e4 <HAL_RCC_OscConfig+0x470>)
 80056f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056f8:	6413      	str	r3, [r2, #64]	; 0x40
 80056fa:	4b7a      	ldr	r3, [pc, #488]	; (80058e4 <HAL_RCC_OscConfig+0x470>)
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005702:	60bb      	str	r3, [r7, #8]
 8005704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005706:	2301      	movs	r3, #1
 8005708:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800570a:	4b77      	ldr	r3, [pc, #476]	; (80058e8 <HAL_RCC_OscConfig+0x474>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005712:	2b00      	cmp	r3, #0
 8005714:	d118      	bne.n	8005748 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005716:	4b74      	ldr	r3, [pc, #464]	; (80058e8 <HAL_RCC_OscConfig+0x474>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a73      	ldr	r2, [pc, #460]	; (80058e8 <HAL_RCC_OscConfig+0x474>)
 800571c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005722:	f7fe f87f 	bl	8003824 <HAL_GetTick>
 8005726:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005728:	e008      	b.n	800573c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800572a:	f7fe f87b 	bl	8003824 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d901      	bls.n	800573c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e10c      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800573c:	4b6a      	ldr	r3, [pc, #424]	; (80058e8 <HAL_RCC_OscConfig+0x474>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005744:	2b00      	cmp	r3, #0
 8005746:	d0f0      	beq.n	800572a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d106      	bne.n	800575e <HAL_RCC_OscConfig+0x2ea>
 8005750:	4b64      	ldr	r3, [pc, #400]	; (80058e4 <HAL_RCC_OscConfig+0x470>)
 8005752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005754:	4a63      	ldr	r2, [pc, #396]	; (80058e4 <HAL_RCC_OscConfig+0x470>)
 8005756:	f043 0301 	orr.w	r3, r3, #1
 800575a:	6713      	str	r3, [r2, #112]	; 0x70
 800575c:	e01c      	b.n	8005798 <HAL_RCC_OscConfig+0x324>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	2b05      	cmp	r3, #5
 8005764:	d10c      	bne.n	8005780 <HAL_RCC_OscConfig+0x30c>
 8005766:	4b5f      	ldr	r3, [pc, #380]	; (80058e4 <HAL_RCC_OscConfig+0x470>)
 8005768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576a:	4a5e      	ldr	r2, [pc, #376]	; (80058e4 <HAL_RCC_OscConfig+0x470>)
 800576c:	f043 0304 	orr.w	r3, r3, #4
 8005770:	6713      	str	r3, [r2, #112]	; 0x70
 8005772:	4b5c      	ldr	r3, [pc, #368]	; (80058e4 <HAL_RCC_OscConfig+0x470>)
 8005774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005776:	4a5b      	ldr	r2, [pc, #364]	; (80058e4 <HAL_RCC_OscConfig+0x470>)
 8005778:	f043 0301 	orr.w	r3, r3, #1
 800577c:	6713      	str	r3, [r2, #112]	; 0x70
 800577e:	e00b      	b.n	8005798 <HAL_RCC_OscConfig+0x324>
 8005780:	4b58      	ldr	r3, [pc, #352]	; (80058e4 <HAL_RCC_OscConfig+0x470>)
 8005782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005784:	4a57      	ldr	r2, [pc, #348]	; (80058e4 <HAL_RCC_OscConfig+0x470>)
 8005786:	f023 0301 	bic.w	r3, r3, #1
 800578a:	6713      	str	r3, [r2, #112]	; 0x70
 800578c:	4b55      	ldr	r3, [pc, #340]	; (80058e4 <HAL_RCC_OscConfig+0x470>)
 800578e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005790:	4a54      	ldr	r2, [pc, #336]	; (80058e4 <HAL_RCC_OscConfig+0x470>)
 8005792:	f023 0304 	bic.w	r3, r3, #4
 8005796:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d015      	beq.n	80057cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a0:	f7fe f840 	bl	8003824 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a6:	e00a      	b.n	80057be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057a8:	f7fe f83c 	bl	8003824 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e0cb      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057be:	4b49      	ldr	r3, [pc, #292]	; (80058e4 <HAL_RCC_OscConfig+0x470>)
 80057c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0ee      	beq.n	80057a8 <HAL_RCC_OscConfig+0x334>
 80057ca:	e014      	b.n	80057f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057cc:	f7fe f82a 	bl	8003824 <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057d2:	e00a      	b.n	80057ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057d4:	f7fe f826 	bl	8003824 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	f241 3288 	movw	r2, #5000	; 0x1388
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e0b5      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ea:	4b3e      	ldr	r3, [pc, #248]	; (80058e4 <HAL_RCC_OscConfig+0x470>)
 80057ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1ee      	bne.n	80057d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057f6:	7dfb      	ldrb	r3, [r7, #23]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d105      	bne.n	8005808 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057fc:	4b39      	ldr	r3, [pc, #228]	; (80058e4 <HAL_RCC_OscConfig+0x470>)
 80057fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005800:	4a38      	ldr	r2, [pc, #224]	; (80058e4 <HAL_RCC_OscConfig+0x470>)
 8005802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005806:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 80a1 	beq.w	8005954 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005812:	4b34      	ldr	r3, [pc, #208]	; (80058e4 <HAL_RCC_OscConfig+0x470>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 030c 	and.w	r3, r3, #12
 800581a:	2b08      	cmp	r3, #8
 800581c:	d05c      	beq.n	80058d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	2b02      	cmp	r3, #2
 8005824:	d141      	bne.n	80058aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005826:	4b31      	ldr	r3, [pc, #196]	; (80058ec <HAL_RCC_OscConfig+0x478>)
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800582c:	f7fd fffa 	bl	8003824 <HAL_GetTick>
 8005830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005832:	e008      	b.n	8005846 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005834:	f7fd fff6 	bl	8003824 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d901      	bls.n	8005846 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e087      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005846:	4b27      	ldr	r3, [pc, #156]	; (80058e4 <HAL_RCC_OscConfig+0x470>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1f0      	bne.n	8005834 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	69da      	ldr	r2, [r3, #28]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	431a      	orrs	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	019b      	lsls	r3, r3, #6
 8005862:	431a      	orrs	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005868:	085b      	lsrs	r3, r3, #1
 800586a:	3b01      	subs	r3, #1
 800586c:	041b      	lsls	r3, r3, #16
 800586e:	431a      	orrs	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	061b      	lsls	r3, r3, #24
 8005876:	491b      	ldr	r1, [pc, #108]	; (80058e4 <HAL_RCC_OscConfig+0x470>)
 8005878:	4313      	orrs	r3, r2
 800587a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800587c:	4b1b      	ldr	r3, [pc, #108]	; (80058ec <HAL_RCC_OscConfig+0x478>)
 800587e:	2201      	movs	r2, #1
 8005880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005882:	f7fd ffcf 	bl	8003824 <HAL_GetTick>
 8005886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005888:	e008      	b.n	800589c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800588a:	f7fd ffcb 	bl	8003824 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d901      	bls.n	800589c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e05c      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800589c:	4b11      	ldr	r3, [pc, #68]	; (80058e4 <HAL_RCC_OscConfig+0x470>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0f0      	beq.n	800588a <HAL_RCC_OscConfig+0x416>
 80058a8:	e054      	b.n	8005954 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058aa:	4b10      	ldr	r3, [pc, #64]	; (80058ec <HAL_RCC_OscConfig+0x478>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b0:	f7fd ffb8 	bl	8003824 <HAL_GetTick>
 80058b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058b6:	e008      	b.n	80058ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058b8:	f7fd ffb4 	bl	8003824 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e045      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ca:	4b06      	ldr	r3, [pc, #24]	; (80058e4 <HAL_RCC_OscConfig+0x470>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1f0      	bne.n	80058b8 <HAL_RCC_OscConfig+0x444>
 80058d6:	e03d      	b.n	8005954 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d107      	bne.n	80058f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e038      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
 80058e4:	40023800 	.word	0x40023800
 80058e8:	40007000 	.word	0x40007000
 80058ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058f0:	4b1b      	ldr	r3, [pc, #108]	; (8005960 <HAL_RCC_OscConfig+0x4ec>)
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d028      	beq.n	8005950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005908:	429a      	cmp	r2, r3
 800590a:	d121      	bne.n	8005950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005916:	429a      	cmp	r2, r3
 8005918:	d11a      	bne.n	8005950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005920:	4013      	ands	r3, r2
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005926:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005928:	4293      	cmp	r3, r2
 800592a:	d111      	bne.n	8005950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005936:	085b      	lsrs	r3, r3, #1
 8005938:	3b01      	subs	r3, #1
 800593a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800593c:	429a      	cmp	r2, r3
 800593e:	d107      	bne.n	8005950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800594c:	429a      	cmp	r2, r3
 800594e:	d001      	beq.n	8005954 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e000      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	40023800 	.word	0x40023800

08005964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e0cc      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005978:	4b68      	ldr	r3, [pc, #416]	; (8005b1c <HAL_RCC_ClockConfig+0x1b8>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	429a      	cmp	r2, r3
 8005984:	d90c      	bls.n	80059a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005986:	4b65      	ldr	r3, [pc, #404]	; (8005b1c <HAL_RCC_ClockConfig+0x1b8>)
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	b2d2      	uxtb	r2, r2
 800598c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800598e:	4b63      	ldr	r3, [pc, #396]	; (8005b1c <HAL_RCC_ClockConfig+0x1b8>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0307 	and.w	r3, r3, #7
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	429a      	cmp	r2, r3
 800599a:	d001      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e0b8      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d020      	beq.n	80059ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d005      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059b8:	4b59      	ldr	r3, [pc, #356]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	4a58      	ldr	r2, [pc, #352]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 80059be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0308 	and.w	r3, r3, #8
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d005      	beq.n	80059dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059d0:	4b53      	ldr	r3, [pc, #332]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	4a52      	ldr	r2, [pc, #328]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 80059d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059dc:	4b50      	ldr	r3, [pc, #320]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	494d      	ldr	r1, [pc, #308]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d044      	beq.n	8005a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d107      	bne.n	8005a12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a02:	4b47      	ldr	r3, [pc, #284]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d119      	bne.n	8005a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e07f      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d003      	beq.n	8005a22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d107      	bne.n	8005a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a22:	4b3f      	ldr	r3, [pc, #252]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d109      	bne.n	8005a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e06f      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a32:	4b3b      	ldr	r3, [pc, #236]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e067      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a42:	4b37      	ldr	r3, [pc, #220]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f023 0203 	bic.w	r2, r3, #3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	4934      	ldr	r1, [pc, #208]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a54:	f7fd fee6 	bl	8003824 <HAL_GetTick>
 8005a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a5a:	e00a      	b.n	8005a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a5c:	f7fd fee2 	bl	8003824 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e04f      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a72:	4b2b      	ldr	r3, [pc, #172]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f003 020c 	and.w	r2, r3, #12
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d1eb      	bne.n	8005a5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a84:	4b25      	ldr	r3, [pc, #148]	; (8005b1c <HAL_RCC_ClockConfig+0x1b8>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d20c      	bcs.n	8005aac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a92:	4b22      	ldr	r3, [pc, #136]	; (8005b1c <HAL_RCC_ClockConfig+0x1b8>)
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a9a:	4b20      	ldr	r3, [pc, #128]	; (8005b1c <HAL_RCC_ClockConfig+0x1b8>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d001      	beq.n	8005aac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e032      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d008      	beq.n	8005aca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ab8:	4b19      	ldr	r3, [pc, #100]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	4916      	ldr	r1, [pc, #88]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0308 	and.w	r3, r3, #8
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d009      	beq.n	8005aea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ad6:	4b12      	ldr	r3, [pc, #72]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	490e      	ldr	r1, [pc, #56]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005aea:	f000 f821 	bl	8005b30 <HAL_RCC_GetSysClockFreq>
 8005aee:	4602      	mov	r2, r0
 8005af0:	4b0b      	ldr	r3, [pc, #44]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	091b      	lsrs	r3, r3, #4
 8005af6:	f003 030f 	and.w	r3, r3, #15
 8005afa:	490a      	ldr	r1, [pc, #40]	; (8005b24 <HAL_RCC_ClockConfig+0x1c0>)
 8005afc:	5ccb      	ldrb	r3, [r1, r3]
 8005afe:	fa22 f303 	lsr.w	r3, r2, r3
 8005b02:	4a09      	ldr	r2, [pc, #36]	; (8005b28 <HAL_RCC_ClockConfig+0x1c4>)
 8005b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b06:	4b09      	ldr	r3, [pc, #36]	; (8005b2c <HAL_RCC_ClockConfig+0x1c8>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fd fe46 	bl	800379c <HAL_InitTick>

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	40023c00 	.word	0x40023c00
 8005b20:	40023800 	.word	0x40023800
 8005b24:	080096fc 	.word	0x080096fc
 8005b28:	2000000c 	.word	0x2000000c
 8005b2c:	20000010 	.word	0x20000010

08005b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b34:	b090      	sub	sp, #64	; 0x40
 8005b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b40:	2300      	movs	r3, #0
 8005b42:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b48:	4b59      	ldr	r3, [pc, #356]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f003 030c 	and.w	r3, r3, #12
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d00d      	beq.n	8005b70 <HAL_RCC_GetSysClockFreq+0x40>
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	f200 80a1 	bhi.w	8005c9c <HAL_RCC_GetSysClockFreq+0x16c>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <HAL_RCC_GetSysClockFreq+0x34>
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d003      	beq.n	8005b6a <HAL_RCC_GetSysClockFreq+0x3a>
 8005b62:	e09b      	b.n	8005c9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b64:	4b53      	ldr	r3, [pc, #332]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005b66:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005b68:	e09b      	b.n	8005ca2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b6a:	4b53      	ldr	r3, [pc, #332]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005b6e:	e098      	b.n	8005ca2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b70:	4b4f      	ldr	r3, [pc, #316]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b78:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b7a:	4b4d      	ldr	r3, [pc, #308]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d028      	beq.n	8005bd8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b86:	4b4a      	ldr	r3, [pc, #296]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	099b      	lsrs	r3, r3, #6
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	623b      	str	r3, [r7, #32]
 8005b90:	627a      	str	r2, [r7, #36]	; 0x24
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005b98:	2100      	movs	r1, #0
 8005b9a:	4b47      	ldr	r3, [pc, #284]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b9c:	fb03 f201 	mul.w	r2, r3, r1
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	fb00 f303 	mul.w	r3, r0, r3
 8005ba6:	4413      	add	r3, r2
 8005ba8:	4a43      	ldr	r2, [pc, #268]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8005baa:	fba0 1202 	umull	r1, r2, r0, r2
 8005bae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bb0:	460a      	mov	r2, r1
 8005bb2:	62ba      	str	r2, [r7, #40]	; 0x28
 8005bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bb6:	4413      	add	r3, r2
 8005bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	61bb      	str	r3, [r7, #24]
 8005bc0:	61fa      	str	r2, [r7, #28]
 8005bc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005bca:	f7fa ffd7 	bl	8000b7c <__aeabi_uldivmod>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bd6:	e053      	b.n	8005c80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bd8:	4b35      	ldr	r3, [pc, #212]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	099b      	lsrs	r3, r3, #6
 8005bde:	2200      	movs	r2, #0
 8005be0:	613b      	str	r3, [r7, #16]
 8005be2:	617a      	str	r2, [r7, #20]
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005bea:	f04f 0b00 	mov.w	fp, #0
 8005bee:	4652      	mov	r2, sl
 8005bf0:	465b      	mov	r3, fp
 8005bf2:	f04f 0000 	mov.w	r0, #0
 8005bf6:	f04f 0100 	mov.w	r1, #0
 8005bfa:	0159      	lsls	r1, r3, #5
 8005bfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c00:	0150      	lsls	r0, r2, #5
 8005c02:	4602      	mov	r2, r0
 8005c04:	460b      	mov	r3, r1
 8005c06:	ebb2 080a 	subs.w	r8, r2, sl
 8005c0a:	eb63 090b 	sbc.w	r9, r3, fp
 8005c0e:	f04f 0200 	mov.w	r2, #0
 8005c12:	f04f 0300 	mov.w	r3, #0
 8005c16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005c1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005c1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005c22:	ebb2 0408 	subs.w	r4, r2, r8
 8005c26:	eb63 0509 	sbc.w	r5, r3, r9
 8005c2a:	f04f 0200 	mov.w	r2, #0
 8005c2e:	f04f 0300 	mov.w	r3, #0
 8005c32:	00eb      	lsls	r3, r5, #3
 8005c34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c38:	00e2      	lsls	r2, r4, #3
 8005c3a:	4614      	mov	r4, r2
 8005c3c:	461d      	mov	r5, r3
 8005c3e:	eb14 030a 	adds.w	r3, r4, sl
 8005c42:	603b      	str	r3, [r7, #0]
 8005c44:	eb45 030b 	adc.w	r3, r5, fp
 8005c48:	607b      	str	r3, [r7, #4]
 8005c4a:	f04f 0200 	mov.w	r2, #0
 8005c4e:	f04f 0300 	mov.w	r3, #0
 8005c52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c56:	4629      	mov	r1, r5
 8005c58:	028b      	lsls	r3, r1, #10
 8005c5a:	4621      	mov	r1, r4
 8005c5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c60:	4621      	mov	r1, r4
 8005c62:	028a      	lsls	r2, r1, #10
 8005c64:	4610      	mov	r0, r2
 8005c66:	4619      	mov	r1, r3
 8005c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	60bb      	str	r3, [r7, #8]
 8005c6e:	60fa      	str	r2, [r7, #12]
 8005c70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c74:	f7fa ff82 	bl	8000b7c <__aeabi_uldivmod>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c80:	4b0b      	ldr	r3, [pc, #44]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	0c1b      	lsrs	r3, r3, #16
 8005c86:	f003 0303 	and.w	r3, r3, #3
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	005b      	lsls	r3, r3, #1
 8005c8e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005c90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005c9a:	e002      	b.n	8005ca2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c9c:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005c9e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3740      	adds	r7, #64	; 0x40
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cae:	bf00      	nop
 8005cb0:	40023800 	.word	0x40023800
 8005cb4:	00f42400 	.word	0x00f42400
 8005cb8:	017d7840 	.word	0x017d7840

08005cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cc0:	4b03      	ldr	r3, [pc, #12]	; (8005cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	2000000c 	.word	0x2000000c

08005cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005cd8:	f7ff fff0 	bl	8005cbc <HAL_RCC_GetHCLKFreq>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	4b05      	ldr	r3, [pc, #20]	; (8005cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	0a9b      	lsrs	r3, r3, #10
 8005ce4:	f003 0307 	and.w	r3, r3, #7
 8005ce8:	4903      	ldr	r1, [pc, #12]	; (8005cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cea:	5ccb      	ldrb	r3, [r1, r3]
 8005cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	40023800 	.word	0x40023800
 8005cf8:	0800970c 	.word	0x0800970c

08005cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d00:	f7ff ffdc 	bl	8005cbc <HAL_RCC_GetHCLKFreq>
 8005d04:	4602      	mov	r2, r0
 8005d06:	4b05      	ldr	r3, [pc, #20]	; (8005d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	0b5b      	lsrs	r3, r3, #13
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	4903      	ldr	r1, [pc, #12]	; (8005d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d12:	5ccb      	ldrb	r3, [r1, r3]
 8005d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	40023800 	.word	0x40023800
 8005d20:	0800970c 	.word	0x0800970c

08005d24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e07b      	b.n	8005e2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d108      	bne.n	8005d50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d46:	d009      	beq.n	8005d5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	61da      	str	r2, [r3, #28]
 8005d4e:	e005      	b.n	8005d5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d106      	bne.n	8005d7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7fd f8a2 	bl	8002ec0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005da4:	431a      	orrs	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dae:	431a      	orrs	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	431a      	orrs	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de0:	ea42 0103 	orr.w	r1, r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	0c1b      	lsrs	r3, r3, #16
 8005dfa:	f003 0104 	and.w	r1, r3, #4
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	f003 0210 	and.w	r2, r3, #16
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69da      	ldr	r2, [r3, #28]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b088      	sub	sp, #32
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	60f8      	str	r0, [r7, #12]
 8005e3e:	60b9      	str	r1, [r7, #8]
 8005e40:	603b      	str	r3, [r7, #0]
 8005e42:	4613      	mov	r3, r2
 8005e44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d101      	bne.n	8005e58 <HAL_SPI_Transmit+0x22>
 8005e54:	2302      	movs	r3, #2
 8005e56:	e126      	b.n	80060a6 <HAL_SPI_Transmit+0x270>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e60:	f7fd fce0 	bl	8003824 <HAL_GetTick>
 8005e64:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e66:	88fb      	ldrh	r3, [r7, #6]
 8005e68:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d002      	beq.n	8005e7c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e76:	2302      	movs	r3, #2
 8005e78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e7a:	e10b      	b.n	8006094 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d002      	beq.n	8005e88 <HAL_SPI_Transmit+0x52>
 8005e82:	88fb      	ldrh	r3, [r7, #6]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d102      	bne.n	8005e8e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e8c:	e102      	b.n	8006094 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2203      	movs	r2, #3
 8005e92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	88fa      	ldrh	r2, [r7, #6]
 8005ea6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	88fa      	ldrh	r2, [r7, #6]
 8005eac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed4:	d10f      	bne.n	8005ef6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ee4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ef4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f00:	2b40      	cmp	r3, #64	; 0x40
 8005f02:	d007      	beq.n	8005f14 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f1c:	d14b      	bne.n	8005fb6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <HAL_SPI_Transmit+0xf6>
 8005f26:	8afb      	ldrh	r3, [r7, #22]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d13e      	bne.n	8005faa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f30:	881a      	ldrh	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3c:	1c9a      	adds	r2, r3, #2
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f50:	e02b      	b.n	8005faa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d112      	bne.n	8005f86 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f64:	881a      	ldrh	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f70:	1c9a      	adds	r2, r3, #2
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f84:	e011      	b.n	8005faa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f86:	f7fd fc4d 	bl	8003824 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d803      	bhi.n	8005f9e <HAL_SPI_Transmit+0x168>
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9c:	d102      	bne.n	8005fa4 <HAL_SPI_Transmit+0x16e>
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d102      	bne.n	8005faa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fa8:	e074      	b.n	8006094 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1ce      	bne.n	8005f52 <HAL_SPI_Transmit+0x11c>
 8005fb4:	e04c      	b.n	8006050 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <HAL_SPI_Transmit+0x18e>
 8005fbe:	8afb      	ldrh	r3, [r7, #22]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d140      	bne.n	8006046 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	330c      	adds	r3, #12
 8005fce:	7812      	ldrb	r2, [r2, #0]
 8005fd0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005fea:	e02c      	b.n	8006046 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d113      	bne.n	8006022 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	330c      	adds	r3, #12
 8006004:	7812      	ldrb	r2, [r2, #0]
 8006006:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600c:	1c5a      	adds	r2, r3, #1
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006016:	b29b      	uxth	r3, r3
 8006018:	3b01      	subs	r3, #1
 800601a:	b29a      	uxth	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006020:	e011      	b.n	8006046 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006022:	f7fd fbff 	bl	8003824 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	429a      	cmp	r2, r3
 8006030:	d803      	bhi.n	800603a <HAL_SPI_Transmit+0x204>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006038:	d102      	bne.n	8006040 <HAL_SPI_Transmit+0x20a>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d102      	bne.n	8006046 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006044:	e026      	b.n	8006094 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800604a:	b29b      	uxth	r3, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1cd      	bne.n	8005fec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	6839      	ldr	r1, [r7, #0]
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 fa55 	bl	8006504 <SPI_EndRxTxTransaction>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d002      	beq.n	8006066 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2220      	movs	r2, #32
 8006064:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10a      	bne.n	8006084 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800606e:	2300      	movs	r3, #0
 8006070:	613b      	str	r3, [r7, #16]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	613b      	str	r3, [r7, #16]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	613b      	str	r3, [r7, #16]
 8006082:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006088:	2b00      	cmp	r3, #0
 800608a:	d002      	beq.n	8006092 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	77fb      	strb	r3, [r7, #31]
 8006090:	e000      	b.n	8006094 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006092:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80060a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3720      	adds	r7, #32
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b08c      	sub	sp, #48	; 0x30
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	60f8      	str	r0, [r7, #12]
 80060b6:	60b9      	str	r1, [r7, #8]
 80060b8:	607a      	str	r2, [r7, #4]
 80060ba:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80060bc:	2301      	movs	r3, #1
 80060be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80060c0:	2300      	movs	r3, #0
 80060c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_SPI_TransmitReceive+0x26>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e18a      	b.n	80063ea <HAL_SPI_TransmitReceive+0x33c>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060dc:	f7fd fba2 	bl	8003824 <HAL_GetTick>
 80060e0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80060f2:	887b      	ldrh	r3, [r7, #2]
 80060f4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d00f      	beq.n	800611e <HAL_SPI_TransmitReceive+0x70>
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006104:	d107      	bne.n	8006116 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d103      	bne.n	8006116 <HAL_SPI_TransmitReceive+0x68>
 800610e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006112:	2b04      	cmp	r3, #4
 8006114:	d003      	beq.n	800611e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006116:	2302      	movs	r3, #2
 8006118:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800611c:	e15b      	b.n	80063d6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d005      	beq.n	8006130 <HAL_SPI_TransmitReceive+0x82>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <HAL_SPI_TransmitReceive+0x82>
 800612a:	887b      	ldrh	r3, [r7, #2]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d103      	bne.n	8006138 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006136:	e14e      	b.n	80063d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b04      	cmp	r3, #4
 8006142:	d003      	beq.n	800614c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2205      	movs	r2, #5
 8006148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	887a      	ldrh	r2, [r7, #2]
 800615c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	887a      	ldrh	r2, [r7, #2]
 8006162:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	887a      	ldrh	r2, [r7, #2]
 800616e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	887a      	ldrh	r2, [r7, #2]
 8006174:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618c:	2b40      	cmp	r3, #64	; 0x40
 800618e:	d007      	beq.n	80061a0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800619e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061a8:	d178      	bne.n	800629c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d002      	beq.n	80061b8 <HAL_SPI_TransmitReceive+0x10a>
 80061b2:	8b7b      	ldrh	r3, [r7, #26]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d166      	bne.n	8006286 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061bc:	881a      	ldrh	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c8:	1c9a      	adds	r2, r3, #2
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	3b01      	subs	r3, #1
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061dc:	e053      	b.n	8006286 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d11b      	bne.n	8006224 <HAL_SPI_TransmitReceive+0x176>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d016      	beq.n	8006224 <HAL_SPI_TransmitReceive+0x176>
 80061f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d113      	bne.n	8006224 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006200:	881a      	ldrh	r2, [r3, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620c:	1c9a      	adds	r2, r3, #2
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006216:	b29b      	uxth	r3, r3
 8006218:	3b01      	subs	r3, #1
 800621a:	b29a      	uxth	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006220:	2300      	movs	r3, #0
 8006222:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	2b01      	cmp	r3, #1
 8006230:	d119      	bne.n	8006266 <HAL_SPI_TransmitReceive+0x1b8>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006236:	b29b      	uxth	r3, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	d014      	beq.n	8006266 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006246:	b292      	uxth	r2, r2
 8006248:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624e:	1c9a      	adds	r2, r3, #2
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006258:	b29b      	uxth	r3, r3
 800625a:	3b01      	subs	r3, #1
 800625c:	b29a      	uxth	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006262:	2301      	movs	r3, #1
 8006264:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006266:	f7fd fadd 	bl	8003824 <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006272:	429a      	cmp	r2, r3
 8006274:	d807      	bhi.n	8006286 <HAL_SPI_TransmitReceive+0x1d8>
 8006276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627c:	d003      	beq.n	8006286 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006284:	e0a7      	b.n	80063d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800628a:	b29b      	uxth	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1a6      	bne.n	80061de <HAL_SPI_TransmitReceive+0x130>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006294:	b29b      	uxth	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1a1      	bne.n	80061de <HAL_SPI_TransmitReceive+0x130>
 800629a:	e07c      	b.n	8006396 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d002      	beq.n	80062aa <HAL_SPI_TransmitReceive+0x1fc>
 80062a4:	8b7b      	ldrh	r3, [r7, #26]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d16b      	bne.n	8006382 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	330c      	adds	r3, #12
 80062b4:	7812      	ldrb	r2, [r2, #0]
 80062b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062bc:	1c5a      	adds	r2, r3, #1
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	3b01      	subs	r3, #1
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062d0:	e057      	b.n	8006382 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f003 0302 	and.w	r3, r3, #2
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d11c      	bne.n	800631a <HAL_SPI_TransmitReceive+0x26c>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d017      	beq.n	800631a <HAL_SPI_TransmitReceive+0x26c>
 80062ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d114      	bne.n	800631a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	330c      	adds	r3, #12
 80062fa:	7812      	ldrb	r2, [r2, #0]
 80062fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800630c:	b29b      	uxth	r3, r3
 800630e:	3b01      	subs	r3, #1
 8006310:	b29a      	uxth	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006316:	2300      	movs	r3, #0
 8006318:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b01      	cmp	r3, #1
 8006326:	d119      	bne.n	800635c <HAL_SPI_TransmitReceive+0x2ae>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800632c:	b29b      	uxth	r3, r3
 800632e:	2b00      	cmp	r3, #0
 8006330:	d014      	beq.n	800635c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68da      	ldr	r2, [r3, #12]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633c:	b2d2      	uxtb	r2, r2
 800633e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006344:	1c5a      	adds	r2, r3, #1
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800634e:	b29b      	uxth	r3, r3
 8006350:	3b01      	subs	r3, #1
 8006352:	b29a      	uxth	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006358:	2301      	movs	r3, #1
 800635a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800635c:	f7fd fa62 	bl	8003824 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006368:	429a      	cmp	r2, r3
 800636a:	d803      	bhi.n	8006374 <HAL_SPI_TransmitReceive+0x2c6>
 800636c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006372:	d102      	bne.n	800637a <HAL_SPI_TransmitReceive+0x2cc>
 8006374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006376:	2b00      	cmp	r3, #0
 8006378:	d103      	bne.n	8006382 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006380:	e029      	b.n	80063d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006386:	b29b      	uxth	r3, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1a2      	bne.n	80062d2 <HAL_SPI_TransmitReceive+0x224>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006390:	b29b      	uxth	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d19d      	bne.n	80062d2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006398:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f000 f8b2 	bl	8006504 <SPI_EndRxTxTransaction>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d006      	beq.n	80063b4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2220      	movs	r2, #32
 80063b0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80063b2:	e010      	b.n	80063d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10b      	bne.n	80063d4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063bc:	2300      	movs	r3, #0
 80063be:	617b      	str	r3, [r7, #20]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	617b      	str	r3, [r7, #20]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	617b      	str	r3, [r7, #20]
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	e000      	b.n	80063d6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80063d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80063e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3730      	adds	r7, #48	; 0x30
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
	...

080063f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b088      	sub	sp, #32
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	603b      	str	r3, [r7, #0]
 8006400:	4613      	mov	r3, r2
 8006402:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006404:	f7fd fa0e 	bl	8003824 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640c:	1a9b      	subs	r3, r3, r2
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	4413      	add	r3, r2
 8006412:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006414:	f7fd fa06 	bl	8003824 <HAL_GetTick>
 8006418:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800641a:	4b39      	ldr	r3, [pc, #228]	; (8006500 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	015b      	lsls	r3, r3, #5
 8006420:	0d1b      	lsrs	r3, r3, #20
 8006422:	69fa      	ldr	r2, [r7, #28]
 8006424:	fb02 f303 	mul.w	r3, r2, r3
 8006428:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800642a:	e054      	b.n	80064d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006432:	d050      	beq.n	80064d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006434:	f7fd f9f6 	bl	8003824 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	69fa      	ldr	r2, [r7, #28]
 8006440:	429a      	cmp	r2, r3
 8006442:	d902      	bls.n	800644a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d13d      	bne.n	80064c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006458:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006462:	d111      	bne.n	8006488 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800646c:	d004      	beq.n	8006478 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006476:	d107      	bne.n	8006488 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006486:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006490:	d10f      	bne.n	80064b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e017      	b.n	80064f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	3b01      	subs	r3, #1
 80064d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	4013      	ands	r3, r2
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	bf0c      	ite	eq
 80064e6:	2301      	moveq	r3, #1
 80064e8:	2300      	movne	r3, #0
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	461a      	mov	r2, r3
 80064ee:	79fb      	ldrb	r3, [r7, #7]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d19b      	bne.n	800642c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3720      	adds	r7, #32
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	2000000c 	.word	0x2000000c

08006504 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b088      	sub	sp, #32
 8006508:	af02      	add	r7, sp, #8
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006510:	4b1b      	ldr	r3, [pc, #108]	; (8006580 <SPI_EndRxTxTransaction+0x7c>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a1b      	ldr	r2, [pc, #108]	; (8006584 <SPI_EndRxTxTransaction+0x80>)
 8006516:	fba2 2303 	umull	r2, r3, r2, r3
 800651a:	0d5b      	lsrs	r3, r3, #21
 800651c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006520:	fb02 f303 	mul.w	r3, r2, r3
 8006524:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800652e:	d112      	bne.n	8006556 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2200      	movs	r2, #0
 8006538:	2180      	movs	r1, #128	; 0x80
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f7ff ff5a 	bl	80063f4 <SPI_WaitFlagStateUntilTimeout>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d016      	beq.n	8006574 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800654a:	f043 0220 	orr.w	r2, r3, #32
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e00f      	b.n	8006576 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00a      	beq.n	8006572 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	3b01      	subs	r3, #1
 8006560:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656c:	2b80      	cmp	r3, #128	; 0x80
 800656e:	d0f2      	beq.n	8006556 <SPI_EndRxTxTransaction+0x52>
 8006570:	e000      	b.n	8006574 <SPI_EndRxTxTransaction+0x70>
        break;
 8006572:	bf00      	nop
  }

  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3718      	adds	r7, #24
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	2000000c 	.word	0x2000000c
 8006584:	165e9f81 	.word	0x165e9f81

08006588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e041      	b.n	800661e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d106      	bne.n	80065b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7fc fd04 	bl	8002fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	3304      	adds	r3, #4
 80065c4:	4619      	mov	r1, r3
 80065c6:	4610      	mov	r0, r2
 80065c8:	f000 ff4c 	bl	8007464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
	...

08006628 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b01      	cmp	r3, #1
 800663a:	d001      	beq.n	8006640 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e044      	b.n	80066ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68da      	ldr	r2, [r3, #12]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f042 0201 	orr.w	r2, r2, #1
 8006656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a1e      	ldr	r2, [pc, #120]	; (80066d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d018      	beq.n	8006694 <HAL_TIM_Base_Start_IT+0x6c>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800666a:	d013      	beq.n	8006694 <HAL_TIM_Base_Start_IT+0x6c>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a1a      	ldr	r2, [pc, #104]	; (80066dc <HAL_TIM_Base_Start_IT+0xb4>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00e      	beq.n	8006694 <HAL_TIM_Base_Start_IT+0x6c>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a19      	ldr	r2, [pc, #100]	; (80066e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d009      	beq.n	8006694 <HAL_TIM_Base_Start_IT+0x6c>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a17      	ldr	r2, [pc, #92]	; (80066e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d004      	beq.n	8006694 <HAL_TIM_Base_Start_IT+0x6c>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a16      	ldr	r2, [pc, #88]	; (80066e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d111      	bne.n	80066b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f003 0307 	and.w	r3, r3, #7
 800669e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2b06      	cmp	r3, #6
 80066a4:	d010      	beq.n	80066c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f042 0201 	orr.w	r2, r2, #1
 80066b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b6:	e007      	b.n	80066c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f042 0201 	orr.w	r2, r2, #1
 80066c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	40010000 	.word	0x40010000
 80066dc:	40000400 	.word	0x40000400
 80066e0:	40000800 	.word	0x40000800
 80066e4:	40000c00 	.word	0x40000c00
 80066e8:	40014000 	.word	0x40014000

080066ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e041      	b.n	8006782 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d106      	bne.n	8006718 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f839 	bl	800678a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2202      	movs	r2, #2
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	3304      	adds	r3, #4
 8006728:	4619      	mov	r1, r3
 800672a:	4610      	mov	r0, r2
 800672c:	f000 fe9a 	bl	8007464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006792:	bf00      	nop
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
	...

080067a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d109      	bne.n	80067c4 <HAL_TIM_PWM_Start+0x24>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	bf14      	ite	ne
 80067bc:	2301      	movne	r3, #1
 80067be:	2300      	moveq	r3, #0
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	e022      	b.n	800680a <HAL_TIM_PWM_Start+0x6a>
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	d109      	bne.n	80067de <HAL_TIM_PWM_Start+0x3e>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	bf14      	ite	ne
 80067d6:	2301      	movne	r3, #1
 80067d8:	2300      	moveq	r3, #0
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	e015      	b.n	800680a <HAL_TIM_PWM_Start+0x6a>
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d109      	bne.n	80067f8 <HAL_TIM_PWM_Start+0x58>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	bf14      	ite	ne
 80067f0:	2301      	movne	r3, #1
 80067f2:	2300      	moveq	r3, #0
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	e008      	b.n	800680a <HAL_TIM_PWM_Start+0x6a>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b01      	cmp	r3, #1
 8006802:	bf14      	ite	ne
 8006804:	2301      	movne	r3, #1
 8006806:	2300      	moveq	r3, #0
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d001      	beq.n	8006812 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e068      	b.n	80068e4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d104      	bne.n	8006822 <HAL_TIM_PWM_Start+0x82>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006820:	e013      	b.n	800684a <HAL_TIM_PWM_Start+0xaa>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b04      	cmp	r3, #4
 8006826:	d104      	bne.n	8006832 <HAL_TIM_PWM_Start+0x92>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2202      	movs	r2, #2
 800682c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006830:	e00b      	b.n	800684a <HAL_TIM_PWM_Start+0xaa>
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2b08      	cmp	r3, #8
 8006836:	d104      	bne.n	8006842 <HAL_TIM_PWM_Start+0xa2>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006840:	e003      	b.n	800684a <HAL_TIM_PWM_Start+0xaa>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2202      	movs	r2, #2
 8006846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2201      	movs	r2, #1
 8006850:	6839      	ldr	r1, [r7, #0]
 8006852:	4618      	mov	r0, r3
 8006854:	f001 f8ac 	bl	80079b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a23      	ldr	r2, [pc, #140]	; (80068ec <HAL_TIM_PWM_Start+0x14c>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d107      	bne.n	8006872 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006870:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a1d      	ldr	r2, [pc, #116]	; (80068ec <HAL_TIM_PWM_Start+0x14c>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d018      	beq.n	80068ae <HAL_TIM_PWM_Start+0x10e>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006884:	d013      	beq.n	80068ae <HAL_TIM_PWM_Start+0x10e>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a19      	ldr	r2, [pc, #100]	; (80068f0 <HAL_TIM_PWM_Start+0x150>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00e      	beq.n	80068ae <HAL_TIM_PWM_Start+0x10e>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a17      	ldr	r2, [pc, #92]	; (80068f4 <HAL_TIM_PWM_Start+0x154>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d009      	beq.n	80068ae <HAL_TIM_PWM_Start+0x10e>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a16      	ldr	r2, [pc, #88]	; (80068f8 <HAL_TIM_PWM_Start+0x158>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d004      	beq.n	80068ae <HAL_TIM_PWM_Start+0x10e>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a14      	ldr	r2, [pc, #80]	; (80068fc <HAL_TIM_PWM_Start+0x15c>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d111      	bne.n	80068d2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f003 0307 	and.w	r3, r3, #7
 80068b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2b06      	cmp	r3, #6
 80068be:	d010      	beq.n	80068e2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f042 0201 	orr.w	r2, r2, #1
 80068ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068d0:	e007      	b.n	80068e2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f042 0201 	orr.w	r2, r2, #1
 80068e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	40010000 	.word	0x40010000
 80068f0:	40000400 	.word	0x40000400
 80068f4:	40000800 	.word	0x40000800
 80068f8:	40000c00 	.word	0x40000c00
 80068fc:	40014000 	.word	0x40014000

08006900 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2200      	movs	r2, #0
 8006910:	6839      	ldr	r1, [r7, #0]
 8006912:	4618      	mov	r0, r3
 8006914:	f001 f84c 	bl	80079b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a29      	ldr	r2, [pc, #164]	; (80069c4 <HAL_TIM_PWM_Stop+0xc4>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d117      	bne.n	8006952 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6a1a      	ldr	r2, [r3, #32]
 8006928:	f241 1311 	movw	r3, #4369	; 0x1111
 800692c:	4013      	ands	r3, r2
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10f      	bne.n	8006952 <HAL_TIM_PWM_Stop+0x52>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6a1a      	ldr	r2, [r3, #32]
 8006938:	f240 4344 	movw	r3, #1092	; 0x444
 800693c:	4013      	ands	r3, r2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d107      	bne.n	8006952 <HAL_TIM_PWM_Stop+0x52>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006950:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6a1a      	ldr	r2, [r3, #32]
 8006958:	f241 1311 	movw	r3, #4369	; 0x1111
 800695c:	4013      	ands	r3, r2
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10f      	bne.n	8006982 <HAL_TIM_PWM_Stop+0x82>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6a1a      	ldr	r2, [r3, #32]
 8006968:	f240 4344 	movw	r3, #1092	; 0x444
 800696c:	4013      	ands	r3, r2
 800696e:	2b00      	cmp	r3, #0
 8006970:	d107      	bne.n	8006982 <HAL_TIM_PWM_Stop+0x82>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f022 0201 	bic.w	r2, r2, #1
 8006980:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d104      	bne.n	8006992 <HAL_TIM_PWM_Stop+0x92>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006990:	e013      	b.n	80069ba <HAL_TIM_PWM_Stop+0xba>
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	2b04      	cmp	r3, #4
 8006996:	d104      	bne.n	80069a2 <HAL_TIM_PWM_Stop+0xa2>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069a0:	e00b      	b.n	80069ba <HAL_TIM_PWM_Stop+0xba>
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b08      	cmp	r3, #8
 80069a6:	d104      	bne.n	80069b2 <HAL_TIM_PWM_Stop+0xb2>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069b0:	e003      	b.n	80069ba <HAL_TIM_PWM_Stop+0xba>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	40010000 	.word	0x40010000

080069c8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
 80069d4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80069d6:	2300      	movs	r3, #0
 80069d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d109      	bne.n	80069f4 <HAL_TIM_PWM_Start_DMA+0x2c>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	bf0c      	ite	eq
 80069ec:	2301      	moveq	r3, #1
 80069ee:	2300      	movne	r3, #0
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	e022      	b.n	8006a3a <HAL_TIM_PWM_Start_DMA+0x72>
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	d109      	bne.n	8006a0e <HAL_TIM_PWM_Start_DMA+0x46>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	bf0c      	ite	eq
 8006a06:	2301      	moveq	r3, #1
 8006a08:	2300      	movne	r3, #0
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	e015      	b.n	8006a3a <HAL_TIM_PWM_Start_DMA+0x72>
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d109      	bne.n	8006a28 <HAL_TIM_PWM_Start_DMA+0x60>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	bf0c      	ite	eq
 8006a20:	2301      	moveq	r3, #1
 8006a22:	2300      	movne	r3, #0
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	e008      	b.n	8006a3a <HAL_TIM_PWM_Start_DMA+0x72>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	bf0c      	ite	eq
 8006a34:	2301      	moveq	r3, #1
 8006a36:	2300      	movne	r3, #0
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8006a3e:	2302      	movs	r3, #2
 8006a40:	e15d      	b.n	8006cfe <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d109      	bne.n	8006a5c <HAL_TIM_PWM_Start_DMA+0x94>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	bf0c      	ite	eq
 8006a54:	2301      	moveq	r3, #1
 8006a56:	2300      	movne	r3, #0
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	e022      	b.n	8006aa2 <HAL_TIM_PWM_Start_DMA+0xda>
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	d109      	bne.n	8006a76 <HAL_TIM_PWM_Start_DMA+0xae>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	bf0c      	ite	eq
 8006a6e:	2301      	moveq	r3, #1
 8006a70:	2300      	movne	r3, #0
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	e015      	b.n	8006aa2 <HAL_TIM_PWM_Start_DMA+0xda>
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2b08      	cmp	r3, #8
 8006a7a:	d109      	bne.n	8006a90 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	bf0c      	ite	eq
 8006a88:	2301      	moveq	r3, #1
 8006a8a:	2300      	movne	r3, #0
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	e008      	b.n	8006aa2 <HAL_TIM_PWM_Start_DMA+0xda>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	bf0c      	ite	eq
 8006a9c:	2301      	moveq	r3, #1
 8006a9e:	2300      	movne	r3, #0
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d024      	beq.n	8006af0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d104      	bne.n	8006ab6 <HAL_TIM_PWM_Start_DMA+0xee>
 8006aac:	887b      	ldrh	r3, [r7, #2]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e123      	b.n	8006cfe <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d104      	bne.n	8006ac6 <HAL_TIM_PWM_Start_DMA+0xfe>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ac4:	e016      	b.n	8006af4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	2b04      	cmp	r3, #4
 8006aca:	d104      	bne.n	8006ad6 <HAL_TIM_PWM_Start_DMA+0x10e>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2202      	movs	r2, #2
 8006ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ad4:	e00e      	b.n	8006af4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	2b08      	cmp	r3, #8
 8006ada:	d104      	bne.n	8006ae6 <HAL_TIM_PWM_Start_DMA+0x11e>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ae4:	e006      	b.n	8006af4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2202      	movs	r2, #2
 8006aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006aee:	e001      	b.n	8006af4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e104      	b.n	8006cfe <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b0c      	cmp	r3, #12
 8006af8:	f200 80ae 	bhi.w	8006c58 <HAL_TIM_PWM_Start_DMA+0x290>
 8006afc:	a201      	add	r2, pc, #4	; (adr r2, 8006b04 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8006afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b02:	bf00      	nop
 8006b04:	08006b39 	.word	0x08006b39
 8006b08:	08006c59 	.word	0x08006c59
 8006b0c:	08006c59 	.word	0x08006c59
 8006b10:	08006c59 	.word	0x08006c59
 8006b14:	08006b81 	.word	0x08006b81
 8006b18:	08006c59 	.word	0x08006c59
 8006b1c:	08006c59 	.word	0x08006c59
 8006b20:	08006c59 	.word	0x08006c59
 8006b24:	08006bc9 	.word	0x08006bc9
 8006b28:	08006c59 	.word	0x08006c59
 8006b2c:	08006c59 	.word	0x08006c59
 8006b30:	08006c59 	.word	0x08006c59
 8006b34:	08006c11 	.word	0x08006c11
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3c:	4a72      	ldr	r2, [pc, #456]	; (8006d08 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006b3e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	4a71      	ldr	r2, [pc, #452]	; (8006d0c <HAL_TIM_PWM_Start_DMA+0x344>)
 8006b46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4c:	4a70      	ldr	r2, [pc, #448]	; (8006d10 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006b4e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006b54:	6879      	ldr	r1, [r7, #4]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3334      	adds	r3, #52	; 0x34
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	887b      	ldrh	r3, [r7, #2]
 8006b60:	f7fd f850 	bl	8003c04 <HAL_DMA_Start_IT>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e0c7      	b.n	8006cfe <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68da      	ldr	r2, [r3, #12]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b7c:	60da      	str	r2, [r3, #12]
      break;
 8006b7e:	e06e      	b.n	8006c5e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b84:	4a60      	ldr	r2, [pc, #384]	; (8006d08 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006b86:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8c:	4a5f      	ldr	r2, [pc, #380]	; (8006d0c <HAL_TIM_PWM_Start_DMA+0x344>)
 8006b8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b94:	4a5e      	ldr	r2, [pc, #376]	; (8006d10 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006b96:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006b9c:	6879      	ldr	r1, [r7, #4]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3338      	adds	r3, #56	; 0x38
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	887b      	ldrh	r3, [r7, #2]
 8006ba8:	f7fd f82c 	bl	8003c04 <HAL_DMA_Start_IT>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e0a3      	b.n	8006cfe <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68da      	ldr	r2, [r3, #12]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006bc4:	60da      	str	r2, [r3, #12]
      break;
 8006bc6:	e04a      	b.n	8006c5e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bcc:	4a4e      	ldr	r2, [pc, #312]	; (8006d08 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006bce:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd4:	4a4d      	ldr	r2, [pc, #308]	; (8006d0c <HAL_TIM_PWM_Start_DMA+0x344>)
 8006bd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bdc:	4a4c      	ldr	r2, [pc, #304]	; (8006d10 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006bde:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006be4:	6879      	ldr	r1, [r7, #4]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	333c      	adds	r3, #60	; 0x3c
 8006bec:	461a      	mov	r2, r3
 8006bee:	887b      	ldrh	r3, [r7, #2]
 8006bf0:	f7fd f808 	bl	8003c04 <HAL_DMA_Start_IT>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e07f      	b.n	8006cfe <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68da      	ldr	r2, [r3, #12]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c0c:	60da      	str	r2, [r3, #12]
      break;
 8006c0e:	e026      	b.n	8006c5e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c14:	4a3c      	ldr	r2, [pc, #240]	; (8006d08 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006c16:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1c:	4a3b      	ldr	r2, [pc, #236]	; (8006d0c <HAL_TIM_PWM_Start_DMA+0x344>)
 8006c1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c24:	4a3a      	ldr	r2, [pc, #232]	; (8006d10 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006c26:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	3340      	adds	r3, #64	; 0x40
 8006c34:	461a      	mov	r2, r3
 8006c36:	887b      	ldrh	r3, [r7, #2]
 8006c38:	f7fc ffe4 	bl	8003c04 <HAL_DMA_Start_IT>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e05b      	b.n	8006cfe <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68da      	ldr	r2, [r3, #12]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c54:	60da      	str	r2, [r3, #12]
      break;
 8006c56:	e002      	b.n	8006c5e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8006c5e:	7dfb      	ldrb	r3, [r7, #23]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d14b      	bne.n	8006cfc <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	68b9      	ldr	r1, [r7, #8]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 fe9f 	bl	80079b0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a27      	ldr	r2, [pc, #156]	; (8006d14 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d107      	bne.n	8006c8c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c8a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a20      	ldr	r2, [pc, #128]	; (8006d14 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d018      	beq.n	8006cc8 <HAL_TIM_PWM_Start_DMA+0x300>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c9e:	d013      	beq.n	8006cc8 <HAL_TIM_PWM_Start_DMA+0x300>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a1c      	ldr	r2, [pc, #112]	; (8006d18 <HAL_TIM_PWM_Start_DMA+0x350>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d00e      	beq.n	8006cc8 <HAL_TIM_PWM_Start_DMA+0x300>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a1b      	ldr	r2, [pc, #108]	; (8006d1c <HAL_TIM_PWM_Start_DMA+0x354>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d009      	beq.n	8006cc8 <HAL_TIM_PWM_Start_DMA+0x300>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a19      	ldr	r2, [pc, #100]	; (8006d20 <HAL_TIM_PWM_Start_DMA+0x358>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d004      	beq.n	8006cc8 <HAL_TIM_PWM_Start_DMA+0x300>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a18      	ldr	r2, [pc, #96]	; (8006d24 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d111      	bne.n	8006cec <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f003 0307 	and.w	r3, r3, #7
 8006cd2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	2b06      	cmp	r3, #6
 8006cd8:	d010      	beq.n	8006cfc <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f042 0201 	orr.w	r2, r2, #1
 8006ce8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cea:	e007      	b.n	8006cfc <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f042 0201 	orr.w	r2, r2, #1
 8006cfa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	08007355 	.word	0x08007355
 8006d0c:	080073fd 	.word	0x080073fd
 8006d10:	080072c3 	.word	0x080072c3
 8006d14:	40010000 	.word	0x40010000
 8006d18:	40000400 	.word	0x40000400
 8006d1c:	40000800 	.word	0x40000800
 8006d20:	40000c00 	.word	0x40000c00
 8006d24:	40014000 	.word	0x40014000

08006d28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d122      	bne.n	8006d84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d11b      	bne.n	8006d84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f06f 0202 	mvn.w	r2, #2
 8006d54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	f003 0303 	and.w	r3, r3, #3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d003      	beq.n	8006d72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fa77 	bl	800725e <HAL_TIM_IC_CaptureCallback>
 8006d70:	e005      	b.n	8006d7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 fa69 	bl	800724a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fa7a 	bl	8007272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f003 0304 	and.w	r3, r3, #4
 8006d8e:	2b04      	cmp	r3, #4
 8006d90:	d122      	bne.n	8006dd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	f003 0304 	and.w	r3, r3, #4
 8006d9c:	2b04      	cmp	r3, #4
 8006d9e:	d11b      	bne.n	8006dd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f06f 0204 	mvn.w	r2, #4
 8006da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2202      	movs	r2, #2
 8006dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fa4d 	bl	800725e <HAL_TIM_IC_CaptureCallback>
 8006dc4:	e005      	b.n	8006dd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fa3f 	bl	800724a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fa50 	bl	8007272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	f003 0308 	and.w	r3, r3, #8
 8006de2:	2b08      	cmp	r3, #8
 8006de4:	d122      	bne.n	8006e2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	f003 0308 	and.w	r3, r3, #8
 8006df0:	2b08      	cmp	r3, #8
 8006df2:	d11b      	bne.n	8006e2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f06f 0208 	mvn.w	r2, #8
 8006dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2204      	movs	r2, #4
 8006e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	69db      	ldr	r3, [r3, #28]
 8006e0a:	f003 0303 	and.w	r3, r3, #3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d003      	beq.n	8006e1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fa23 	bl	800725e <HAL_TIM_IC_CaptureCallback>
 8006e18:	e005      	b.n	8006e26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fa15 	bl	800724a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fa26 	bl	8007272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	f003 0310 	and.w	r3, r3, #16
 8006e36:	2b10      	cmp	r3, #16
 8006e38:	d122      	bne.n	8006e80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	f003 0310 	and.w	r3, r3, #16
 8006e44:	2b10      	cmp	r3, #16
 8006e46:	d11b      	bne.n	8006e80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f06f 0210 	mvn.w	r2, #16
 8006e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2208      	movs	r2, #8
 8006e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	69db      	ldr	r3, [r3, #28]
 8006e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d003      	beq.n	8006e6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f9f9 	bl	800725e <HAL_TIM_IC_CaptureCallback>
 8006e6c:	e005      	b.n	8006e7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f9eb 	bl	800724a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f9fc 	bl	8007272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	f003 0301 	and.w	r3, r3, #1
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d10e      	bne.n	8006eac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d107      	bne.n	8006eac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f06f 0201 	mvn.w	r2, #1
 8006ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7fa fe14 	bl	8001ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb6:	2b80      	cmp	r3, #128	; 0x80
 8006eb8:	d10e      	bne.n	8006ed8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec4:	2b80      	cmp	r3, #128	; 0x80
 8006ec6:	d107      	bne.n	8006ed8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fe5c 	bl	8007b90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee2:	2b40      	cmp	r3, #64	; 0x40
 8006ee4:	d10e      	bne.n	8006f04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef0:	2b40      	cmp	r3, #64	; 0x40
 8006ef2:	d107      	bne.n	8006f04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f9cb 	bl	800729a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	f003 0320 	and.w	r3, r3, #32
 8006f0e:	2b20      	cmp	r3, #32
 8006f10:	d10e      	bne.n	8006f30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	f003 0320 	and.w	r3, r3, #32
 8006f1c:	2b20      	cmp	r3, #32
 8006f1e:	d107      	bne.n	8006f30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f06f 0220 	mvn.w	r2, #32
 8006f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fe26 	bl	8007b7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f30:	bf00      	nop
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f44:	2300      	movs	r3, #0
 8006f46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d101      	bne.n	8006f56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f52:	2302      	movs	r3, #2
 8006f54:	e0ae      	b.n	80070b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b0c      	cmp	r3, #12
 8006f62:	f200 809f 	bhi.w	80070a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006f66:	a201      	add	r2, pc, #4	; (adr r2, 8006f6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6c:	08006fa1 	.word	0x08006fa1
 8006f70:	080070a5 	.word	0x080070a5
 8006f74:	080070a5 	.word	0x080070a5
 8006f78:	080070a5 	.word	0x080070a5
 8006f7c:	08006fe1 	.word	0x08006fe1
 8006f80:	080070a5 	.word	0x080070a5
 8006f84:	080070a5 	.word	0x080070a5
 8006f88:	080070a5 	.word	0x080070a5
 8006f8c:	08007023 	.word	0x08007023
 8006f90:	080070a5 	.word	0x080070a5
 8006f94:	080070a5 	.word	0x080070a5
 8006f98:	080070a5 	.word	0x080070a5
 8006f9c:	08007063 	.word	0x08007063
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68b9      	ldr	r1, [r7, #8]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 fadc 	bl	8007564 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	699a      	ldr	r2, [r3, #24]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f042 0208 	orr.w	r2, r2, #8
 8006fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	699a      	ldr	r2, [r3, #24]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f022 0204 	bic.w	r2, r2, #4
 8006fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6999      	ldr	r1, [r3, #24]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	691a      	ldr	r2, [r3, #16]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	619a      	str	r2, [r3, #24]
      break;
 8006fde:	e064      	b.n	80070aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68b9      	ldr	r1, [r7, #8]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 fb22 	bl	8007630 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	699a      	ldr	r2, [r3, #24]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	699a      	ldr	r2, [r3, #24]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800700a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6999      	ldr	r1, [r3, #24]
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	021a      	lsls	r2, r3, #8
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	430a      	orrs	r2, r1
 800701e:	619a      	str	r2, [r3, #24]
      break;
 8007020:	e043      	b.n	80070aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68b9      	ldr	r1, [r7, #8]
 8007028:	4618      	mov	r0, r3
 800702a:	f000 fb6d 	bl	8007708 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	69da      	ldr	r2, [r3, #28]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f042 0208 	orr.w	r2, r2, #8
 800703c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	69da      	ldr	r2, [r3, #28]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f022 0204 	bic.w	r2, r2, #4
 800704c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	69d9      	ldr	r1, [r3, #28]
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	691a      	ldr	r2, [r3, #16]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	430a      	orrs	r2, r1
 800705e:	61da      	str	r2, [r3, #28]
      break;
 8007060:	e023      	b.n	80070aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68b9      	ldr	r1, [r7, #8]
 8007068:	4618      	mov	r0, r3
 800706a:	f000 fbb7 	bl	80077dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	69da      	ldr	r2, [r3, #28]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800707c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	69da      	ldr	r2, [r3, #28]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800708c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	69d9      	ldr	r1, [r3, #28]
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	021a      	lsls	r2, r3, #8
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	430a      	orrs	r2, r1
 80070a0:	61da      	str	r2, [r3, #28]
      break;
 80070a2:	e002      	b.n	80070aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	75fb      	strb	r3, [r7, #23]
      break;
 80070a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3718      	adds	r7, #24
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d101      	bne.n	80070d8 <HAL_TIM_ConfigClockSource+0x1c>
 80070d4:	2302      	movs	r3, #2
 80070d6:	e0b4      	b.n	8007242 <HAL_TIM_ConfigClockSource+0x186>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2202      	movs	r2, #2
 80070e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80070f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007110:	d03e      	beq.n	8007190 <HAL_TIM_ConfigClockSource+0xd4>
 8007112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007116:	f200 8087 	bhi.w	8007228 <HAL_TIM_ConfigClockSource+0x16c>
 800711a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800711e:	f000 8086 	beq.w	800722e <HAL_TIM_ConfigClockSource+0x172>
 8007122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007126:	d87f      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x16c>
 8007128:	2b70      	cmp	r3, #112	; 0x70
 800712a:	d01a      	beq.n	8007162 <HAL_TIM_ConfigClockSource+0xa6>
 800712c:	2b70      	cmp	r3, #112	; 0x70
 800712e:	d87b      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x16c>
 8007130:	2b60      	cmp	r3, #96	; 0x60
 8007132:	d050      	beq.n	80071d6 <HAL_TIM_ConfigClockSource+0x11a>
 8007134:	2b60      	cmp	r3, #96	; 0x60
 8007136:	d877      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x16c>
 8007138:	2b50      	cmp	r3, #80	; 0x50
 800713a:	d03c      	beq.n	80071b6 <HAL_TIM_ConfigClockSource+0xfa>
 800713c:	2b50      	cmp	r3, #80	; 0x50
 800713e:	d873      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x16c>
 8007140:	2b40      	cmp	r3, #64	; 0x40
 8007142:	d058      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0x13a>
 8007144:	2b40      	cmp	r3, #64	; 0x40
 8007146:	d86f      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x16c>
 8007148:	2b30      	cmp	r3, #48	; 0x30
 800714a:	d064      	beq.n	8007216 <HAL_TIM_ConfigClockSource+0x15a>
 800714c:	2b30      	cmp	r3, #48	; 0x30
 800714e:	d86b      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x16c>
 8007150:	2b20      	cmp	r3, #32
 8007152:	d060      	beq.n	8007216 <HAL_TIM_ConfigClockSource+0x15a>
 8007154:	2b20      	cmp	r3, #32
 8007156:	d867      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x16c>
 8007158:	2b00      	cmp	r3, #0
 800715a:	d05c      	beq.n	8007216 <HAL_TIM_ConfigClockSource+0x15a>
 800715c:	2b10      	cmp	r3, #16
 800715e:	d05a      	beq.n	8007216 <HAL_TIM_ConfigClockSource+0x15a>
 8007160:	e062      	b.n	8007228 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6818      	ldr	r0, [r3, #0]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	6899      	ldr	r1, [r3, #8]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	f000 fbfd 	bl	8007970 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007184:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	609a      	str	r2, [r3, #8]
      break;
 800718e:	e04f      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6818      	ldr	r0, [r3, #0]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	6899      	ldr	r1, [r3, #8]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f000 fbe6 	bl	8007970 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689a      	ldr	r2, [r3, #8]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071b2:	609a      	str	r2, [r3, #8]
      break;
 80071b4:	e03c      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6818      	ldr	r0, [r3, #0]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	6859      	ldr	r1, [r3, #4]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	461a      	mov	r2, r3
 80071c4:	f000 fb5a 	bl	800787c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2150      	movs	r1, #80	; 0x50
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 fbb3 	bl	800793a <TIM_ITRx_SetConfig>
      break;
 80071d4:	e02c      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6818      	ldr	r0, [r3, #0]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	6859      	ldr	r1, [r3, #4]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	461a      	mov	r2, r3
 80071e4:	f000 fb79 	bl	80078da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2160      	movs	r1, #96	; 0x60
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 fba3 	bl	800793a <TIM_ITRx_SetConfig>
      break;
 80071f4:	e01c      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6818      	ldr	r0, [r3, #0]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	6859      	ldr	r1, [r3, #4]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	461a      	mov	r2, r3
 8007204:	f000 fb3a 	bl	800787c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2140      	movs	r1, #64	; 0x40
 800720e:	4618      	mov	r0, r3
 8007210:	f000 fb93 	bl	800793a <TIM_ITRx_SetConfig>
      break;
 8007214:	e00c      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4619      	mov	r1, r3
 8007220:	4610      	mov	r0, r2
 8007222:	f000 fb8a 	bl	800793a <TIM_ITRx_SetConfig>
      break;
 8007226:	e003      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	73fb      	strb	r3, [r7, #15]
      break;
 800722c:	e000      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800722e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007240:	7bfb      	ldrb	r3, [r7, #15]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800724a:	b480      	push	{r7}
 800724c:	b083      	sub	sp, #12
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007252:	bf00      	nop
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007266:	bf00      	nop
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007272:	b480      	push	{r7}
 8007274:	b083      	sub	sp, #12
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800727a:	bf00      	nop
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr

08007286 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007286:	b480      	push	{r7}
 8007288:	b083      	sub	sp, #12
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800728e:	bf00      	nop
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800729a:	b480      	push	{r7}
 800729c:	b083      	sub	sp, #12
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072a2:	bf00      	nop
 80072a4:	370c      	adds	r7, #12
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80072ae:	b480      	push	{r7}
 80072b0:	b083      	sub	sp, #12
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80072b6:	bf00      	nop
 80072b8:	370c      	adds	r7, #12
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b084      	sub	sp, #16
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ce:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d107      	bne.n	80072ea <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2201      	movs	r2, #1
 80072de:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072e8:	e02a      	b.n	8007340 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d107      	bne.n	8007304 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2202      	movs	r2, #2
 80072f8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007302:	e01d      	b.n	8007340 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	429a      	cmp	r2, r3
 800730c:	d107      	bne.n	800731e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2204      	movs	r2, #4
 8007312:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800731c:	e010      	b.n	8007340 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	429a      	cmp	r2, r3
 8007326:	d107      	bne.n	8007338 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2208      	movs	r2, #8
 800732c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007336:	e003      	b.n	8007340 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f7ff ffb4 	bl	80072ae <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	771a      	strb	r2, [r3, #28]
}
 800734c:	bf00      	nop
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007360:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	429a      	cmp	r2, r3
 800736a:	d10b      	bne.n	8007384 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2201      	movs	r2, #1
 8007370:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d136      	bne.n	80073e8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007382:	e031      	b.n	80073e8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	429a      	cmp	r2, r3
 800738c:	d10b      	bne.n	80073a6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2202      	movs	r2, #2
 8007392:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	69db      	ldr	r3, [r3, #28]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d125      	bne.n	80073e8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073a4:	e020      	b.n	80073e8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d10b      	bne.n	80073c8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2204      	movs	r2, #4
 80073b4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	69db      	ldr	r3, [r3, #28]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d114      	bne.n	80073e8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073c6:	e00f      	b.n	80073e8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d10a      	bne.n	80073e8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2208      	movs	r2, #8
 80073d6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	69db      	ldr	r3, [r3, #28]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d103      	bne.n	80073e8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f7ff ff42 	bl	8007272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	771a      	strb	r2, [r3, #28]
}
 80073f4:	bf00      	nop
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007408:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	429a      	cmp	r2, r3
 8007412:	d103      	bne.n	800741c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2201      	movs	r2, #1
 8007418:	771a      	strb	r2, [r3, #28]
 800741a:	e019      	b.n	8007450 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	429a      	cmp	r2, r3
 8007424:	d103      	bne.n	800742e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2202      	movs	r2, #2
 800742a:	771a      	strb	r2, [r3, #28]
 800742c:	e010      	b.n	8007450 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	429a      	cmp	r2, r3
 8007436:	d103      	bne.n	8007440 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2204      	movs	r2, #4
 800743c:	771a      	strb	r2, [r3, #28]
 800743e:	e007      	b.n	8007450 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	429a      	cmp	r2, r3
 8007448:	d102      	bne.n	8007450 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2208      	movs	r2, #8
 800744e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f7ff ff18 	bl	8007286 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	771a      	strb	r2, [r3, #28]
}
 800745c:	bf00      	nop
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a34      	ldr	r2, [pc, #208]	; (8007548 <TIM_Base_SetConfig+0xe4>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d00f      	beq.n	800749c <TIM_Base_SetConfig+0x38>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007482:	d00b      	beq.n	800749c <TIM_Base_SetConfig+0x38>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a31      	ldr	r2, [pc, #196]	; (800754c <TIM_Base_SetConfig+0xe8>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d007      	beq.n	800749c <TIM_Base_SetConfig+0x38>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a30      	ldr	r2, [pc, #192]	; (8007550 <TIM_Base_SetConfig+0xec>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d003      	beq.n	800749c <TIM_Base_SetConfig+0x38>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a2f      	ldr	r2, [pc, #188]	; (8007554 <TIM_Base_SetConfig+0xf0>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d108      	bne.n	80074ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a25      	ldr	r2, [pc, #148]	; (8007548 <TIM_Base_SetConfig+0xe4>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d01b      	beq.n	80074ee <TIM_Base_SetConfig+0x8a>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074bc:	d017      	beq.n	80074ee <TIM_Base_SetConfig+0x8a>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a22      	ldr	r2, [pc, #136]	; (800754c <TIM_Base_SetConfig+0xe8>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d013      	beq.n	80074ee <TIM_Base_SetConfig+0x8a>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a21      	ldr	r2, [pc, #132]	; (8007550 <TIM_Base_SetConfig+0xec>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d00f      	beq.n	80074ee <TIM_Base_SetConfig+0x8a>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a20      	ldr	r2, [pc, #128]	; (8007554 <TIM_Base_SetConfig+0xf0>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d00b      	beq.n	80074ee <TIM_Base_SetConfig+0x8a>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a1f      	ldr	r2, [pc, #124]	; (8007558 <TIM_Base_SetConfig+0xf4>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d007      	beq.n	80074ee <TIM_Base_SetConfig+0x8a>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a1e      	ldr	r2, [pc, #120]	; (800755c <TIM_Base_SetConfig+0xf8>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d003      	beq.n	80074ee <TIM_Base_SetConfig+0x8a>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a1d      	ldr	r2, [pc, #116]	; (8007560 <TIM_Base_SetConfig+0xfc>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d108      	bne.n	8007500 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	695b      	ldr	r3, [r3, #20]
 800750a:	4313      	orrs	r3, r2
 800750c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	689a      	ldr	r2, [r3, #8]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a08      	ldr	r2, [pc, #32]	; (8007548 <TIM_Base_SetConfig+0xe4>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d103      	bne.n	8007534 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	691a      	ldr	r2, [r3, #16]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	615a      	str	r2, [r3, #20]
}
 800753a:	bf00      	nop
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	40010000 	.word	0x40010000
 800754c:	40000400 	.word	0x40000400
 8007550:	40000800 	.word	0x40000800
 8007554:	40000c00 	.word	0x40000c00
 8007558:	40014000 	.word	0x40014000
 800755c:	40014400 	.word	0x40014400
 8007560:	40014800 	.word	0x40014800

08007564 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007564:	b480      	push	{r7}
 8007566:	b087      	sub	sp, #28
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a1b      	ldr	r3, [r3, #32]
 8007572:	f023 0201 	bic.w	r2, r3, #1
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a1b      	ldr	r3, [r3, #32]
 800757e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f023 0303 	bic.w	r3, r3, #3
 800759a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	f023 0302 	bic.w	r3, r3, #2
 80075ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a1c      	ldr	r2, [pc, #112]	; (800762c <TIM_OC1_SetConfig+0xc8>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d10c      	bne.n	80075da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	f023 0308 	bic.w	r3, r3, #8
 80075c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	f023 0304 	bic.w	r3, r3, #4
 80075d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a13      	ldr	r2, [pc, #76]	; (800762c <TIM_OC1_SetConfig+0xc8>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d111      	bne.n	8007606 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	4313      	orrs	r3, r2
 8007604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	621a      	str	r2, [r3, #32]
}
 8007620:	bf00      	nop
 8007622:	371c      	adds	r7, #28
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	40010000 	.word	0x40010000

08007630 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007630:	b480      	push	{r7}
 8007632:	b087      	sub	sp, #28
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	f023 0210 	bic.w	r2, r3, #16
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800765e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	021b      	lsls	r3, r3, #8
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	4313      	orrs	r3, r2
 8007672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f023 0320 	bic.w	r3, r3, #32
 800767a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	011b      	lsls	r3, r3, #4
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	4313      	orrs	r3, r2
 8007686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a1e      	ldr	r2, [pc, #120]	; (8007704 <TIM_OC2_SetConfig+0xd4>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d10d      	bne.n	80076ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	011b      	lsls	r3, r3, #4
 800769e:	697a      	ldr	r2, [r7, #20]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a15      	ldr	r2, [pc, #84]	; (8007704 <TIM_OC2_SetConfig+0xd4>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d113      	bne.n	80076dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	695b      	ldr	r3, [r3, #20]
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	693a      	ldr	r2, [r7, #16]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	4313      	orrs	r3, r2
 80076da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	621a      	str	r2, [r3, #32]
}
 80076f6:	bf00      	nop
 80076f8:	371c      	adds	r7, #28
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	40010000 	.word	0x40010000

08007708 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007708:	b480      	push	{r7}
 800770a:	b087      	sub	sp, #28
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a1b      	ldr	r3, [r3, #32]
 8007716:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a1b      	ldr	r3, [r3, #32]
 8007722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	69db      	ldr	r3, [r3, #28]
 800772e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f023 0303 	bic.w	r3, r3, #3
 800773e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	4313      	orrs	r3, r2
 8007748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	021b      	lsls	r3, r3, #8
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	4313      	orrs	r3, r2
 800775c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a1d      	ldr	r2, [pc, #116]	; (80077d8 <TIM_OC3_SetConfig+0xd0>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d10d      	bne.n	8007782 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800776c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	021b      	lsls	r3, r3, #8
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	4313      	orrs	r3, r2
 8007778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a14      	ldr	r2, [pc, #80]	; (80077d8 <TIM_OC3_SetConfig+0xd0>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d113      	bne.n	80077b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	011b      	lsls	r3, r3, #4
 80077a0:	693a      	ldr	r2, [r7, #16]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	011b      	lsls	r3, r3, #4
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	693a      	ldr	r2, [r7, #16]
 80077b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	685a      	ldr	r2, [r3, #4]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	621a      	str	r2, [r3, #32]
}
 80077cc:	bf00      	nop
 80077ce:	371c      	adds	r7, #28
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr
 80077d8:	40010000 	.word	0x40010000

080077dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077dc:	b480      	push	{r7}
 80077de:	b087      	sub	sp, #28
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a1b      	ldr	r3, [r3, #32]
 80077ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	69db      	ldr	r3, [r3, #28]
 8007802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800780a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007812:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	021b      	lsls	r3, r3, #8
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	4313      	orrs	r3, r2
 800781e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007826:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	031b      	lsls	r3, r3, #12
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	4313      	orrs	r3, r2
 8007832:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a10      	ldr	r2, [pc, #64]	; (8007878 <TIM_OC4_SetConfig+0x9c>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d109      	bne.n	8007850 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007842:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	695b      	ldr	r3, [r3, #20]
 8007848:	019b      	lsls	r3, r3, #6
 800784a:	697a      	ldr	r2, [r7, #20]
 800784c:	4313      	orrs	r3, r2
 800784e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	693a      	ldr	r2, [r7, #16]
 8007868:	621a      	str	r2, [r3, #32]
}
 800786a:	bf00      	nop
 800786c:	371c      	adds	r7, #28
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	40010000 	.word	0x40010000

0800787c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800787c:	b480      	push	{r7}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6a1b      	ldr	r3, [r3, #32]
 800788c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	f023 0201 	bic.w	r2, r3, #1
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	011b      	lsls	r3, r3, #4
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f023 030a 	bic.w	r3, r3, #10
 80078b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	4313      	orrs	r3, r2
 80078c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	621a      	str	r2, [r3, #32]
}
 80078ce:	bf00      	nop
 80078d0:	371c      	adds	r7, #28
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078da:	b480      	push	{r7}
 80078dc:	b087      	sub	sp, #28
 80078de:	af00      	add	r7, sp, #0
 80078e0:	60f8      	str	r0, [r7, #12]
 80078e2:	60b9      	str	r1, [r7, #8]
 80078e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	f023 0210 	bic.w	r2, r3, #16
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6a1b      	ldr	r3, [r3, #32]
 80078fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007904:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	031b      	lsls	r3, r3, #12
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	4313      	orrs	r3, r2
 800790e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007916:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	011b      	lsls	r3, r3, #4
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	4313      	orrs	r3, r2
 8007920:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	697a      	ldr	r2, [r7, #20]
 8007926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	621a      	str	r2, [r3, #32]
}
 800792e:	bf00      	nop
 8007930:	371c      	adds	r7, #28
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800793a:	b480      	push	{r7}
 800793c:	b085      	sub	sp, #20
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007950:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	4313      	orrs	r3, r2
 8007958:	f043 0307 	orr.w	r3, r3, #7
 800795c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	609a      	str	r2, [r3, #8]
}
 8007964:	bf00      	nop
 8007966:	3714      	adds	r7, #20
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007970:	b480      	push	{r7}
 8007972:	b087      	sub	sp, #28
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
 800797c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800798a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	021a      	lsls	r2, r3, #8
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	431a      	orrs	r2, r3
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	4313      	orrs	r3, r2
 8007998:	697a      	ldr	r2, [r7, #20]
 800799a:	4313      	orrs	r3, r2
 800799c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	609a      	str	r2, [r3, #8]
}
 80079a4:	bf00      	nop
 80079a6:	371c      	adds	r7, #28
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b087      	sub	sp, #28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	f003 031f 	and.w	r3, r3, #31
 80079c2:	2201      	movs	r2, #1
 80079c4:	fa02 f303 	lsl.w	r3, r2, r3
 80079c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6a1a      	ldr	r2, [r3, #32]
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	43db      	mvns	r3, r3
 80079d2:	401a      	ands	r2, r3
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6a1a      	ldr	r2, [r3, #32]
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	f003 031f 	and.w	r3, r3, #31
 80079e2:	6879      	ldr	r1, [r7, #4]
 80079e4:	fa01 f303 	lsl.w	r3, r1, r3
 80079e8:	431a      	orrs	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	621a      	str	r2, [r3, #32]
}
 80079ee:	bf00      	nop
 80079f0:	371c      	adds	r7, #28
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
	...

080079fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d101      	bne.n	8007a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a10:	2302      	movs	r3, #2
 8007a12:	e050      	b.n	8007ab6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2202      	movs	r2, #2
 8007a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a1c      	ldr	r2, [pc, #112]	; (8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d018      	beq.n	8007a8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a60:	d013      	beq.n	8007a8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a18      	ldr	r2, [pc, #96]	; (8007ac8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d00e      	beq.n	8007a8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a16      	ldr	r2, [pc, #88]	; (8007acc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d009      	beq.n	8007a8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a15      	ldr	r2, [pc, #84]	; (8007ad0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d004      	beq.n	8007a8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a13      	ldr	r2, [pc, #76]	; (8007ad4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d10c      	bne.n	8007aa4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	40010000 	.word	0x40010000
 8007ac8:	40000400 	.word	0x40000400
 8007acc:	40000800 	.word	0x40000800
 8007ad0:	40000c00 	.word	0x40000c00
 8007ad4:	40014000 	.word	0x40014000

08007ad8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d101      	bne.n	8007af4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007af0:	2302      	movs	r3, #2
 8007af2:	e03d      	b.n	8007b70 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	69db      	ldr	r3, [r3, #28]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3714      	adds	r7, #20
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b98:	bf00      	nop
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d101      	bne.n	8007bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e03f      	b.n	8007c36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d106      	bne.n	8007bd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7fb faf2 	bl	80031b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2224      	movs	r2, #36	; 0x24
 8007bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68da      	ldr	r2, [r3, #12]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007be6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f929 	bl	8007e40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	691a      	ldr	r2, [r3, #16]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007bfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	695a      	ldr	r2, [r3, #20]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68da      	ldr	r2, [r3, #12]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2220      	movs	r2, #32
 8007c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2220      	movs	r2, #32
 8007c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b08a      	sub	sp, #40	; 0x28
 8007c42:	af02      	add	r7, sp, #8
 8007c44:	60f8      	str	r0, [r7, #12]
 8007c46:	60b9      	str	r1, [r7, #8]
 8007c48:	603b      	str	r3, [r7, #0]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b20      	cmp	r3, #32
 8007c5c:	d17c      	bne.n	8007d58 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d002      	beq.n	8007c6a <HAL_UART_Transmit+0x2c>
 8007c64:	88fb      	ldrh	r3, [r7, #6]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d101      	bne.n	8007c6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e075      	b.n	8007d5a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d101      	bne.n	8007c7c <HAL_UART_Transmit+0x3e>
 8007c78:	2302      	movs	r3, #2
 8007c7a:	e06e      	b.n	8007d5a <HAL_UART_Transmit+0x11c>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2221      	movs	r2, #33	; 0x21
 8007c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c92:	f7fb fdc7 	bl	8003824 <HAL_GetTick>
 8007c96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	88fa      	ldrh	r2, [r7, #6]
 8007c9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	88fa      	ldrh	r2, [r7, #6]
 8007ca2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cac:	d108      	bne.n	8007cc0 <HAL_UART_Transmit+0x82>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d104      	bne.n	8007cc0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	61bb      	str	r3, [r7, #24]
 8007cbe:	e003      	b.n	8007cc8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007cd0:	e02a      	b.n	8007d28 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	9300      	str	r3, [sp, #0]
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	2180      	movs	r1, #128	; 0x80
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	f000 f840 	bl	8007d62 <UART_WaitOnFlagUntilTimeout>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d001      	beq.n	8007cec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	e036      	b.n	8007d5a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10b      	bne.n	8007d0a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	881b      	ldrh	r3, [r3, #0]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	3302      	adds	r3, #2
 8007d06:	61bb      	str	r3, [r7, #24]
 8007d08:	e007      	b.n	8007d1a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	781a      	ldrb	r2, [r3, #0]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	3301      	adds	r3, #1
 8007d18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	3b01      	subs	r3, #1
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1cf      	bne.n	8007cd2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	2140      	movs	r1, #64	; 0x40
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f000 f810 	bl	8007d62 <UART_WaitOnFlagUntilTimeout>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	e006      	b.n	8007d5a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2220      	movs	r2, #32
 8007d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007d54:	2300      	movs	r3, #0
 8007d56:	e000      	b.n	8007d5a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007d58:	2302      	movs	r3, #2
  }
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3720      	adds	r7, #32
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b090      	sub	sp, #64	; 0x40
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	60f8      	str	r0, [r7, #12]
 8007d6a:	60b9      	str	r1, [r7, #8]
 8007d6c:	603b      	str	r3, [r7, #0]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d72:	e050      	b.n	8007e16 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7a:	d04c      	beq.n	8007e16 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d007      	beq.n	8007d92 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d82:	f7fb fd4f 	bl	8003824 <HAL_GetTick>
 8007d86:	4602      	mov	r2, r0
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d241      	bcs.n	8007e16 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	330c      	adds	r3, #12
 8007d98:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9c:	e853 3f00 	ldrex	r3, [r3]
 8007da0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007da8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	330c      	adds	r3, #12
 8007db0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007db2:	637a      	str	r2, [r7, #52]	; 0x34
 8007db4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007db8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dba:	e841 2300 	strex	r3, r2, [r1]
 8007dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1e5      	bne.n	8007d92 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	3314      	adds	r3, #20
 8007dcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	e853 3f00 	ldrex	r3, [r3]
 8007dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	f023 0301 	bic.w	r3, r3, #1
 8007ddc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3314      	adds	r3, #20
 8007de4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007de6:	623a      	str	r2, [r7, #32]
 8007de8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dea:	69f9      	ldr	r1, [r7, #28]
 8007dec:	6a3a      	ldr	r2, [r7, #32]
 8007dee:	e841 2300 	strex	r3, r2, [r1]
 8007df2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1e5      	bne.n	8007dc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2220      	movs	r2, #32
 8007dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2220      	movs	r2, #32
 8007e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e00f      	b.n	8007e36 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	4013      	ands	r3, r2
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	bf0c      	ite	eq
 8007e26:	2301      	moveq	r3, #1
 8007e28:	2300      	movne	r3, #0
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	79fb      	ldrb	r3, [r7, #7]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d09f      	beq.n	8007d74 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3740      	adds	r7, #64	; 0x40
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
	...

08007e40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e44:	b0c0      	sub	sp, #256	; 0x100
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e5c:	68d9      	ldr	r1, [r3, #12]
 8007e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	ea40 0301 	orr.w	r3, r0, r1
 8007e68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e6e:	689a      	ldr	r2, [r3, #8]
 8007e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	431a      	orrs	r2, r3
 8007e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e7c:	695b      	ldr	r3, [r3, #20]
 8007e7e:	431a      	orrs	r2, r3
 8007e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e84:	69db      	ldr	r3, [r3, #28]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007e98:	f021 010c 	bic.w	r1, r1, #12
 8007e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ea6:	430b      	orrs	r3, r1
 8007ea8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eba:	6999      	ldr	r1, [r3, #24]
 8007ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	ea40 0301 	orr.w	r3, r0, r1
 8007ec6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	4b8f      	ldr	r3, [pc, #572]	; (800810c <UART_SetConfig+0x2cc>)
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d005      	beq.n	8007ee0 <UART_SetConfig+0xa0>
 8007ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	4b8d      	ldr	r3, [pc, #564]	; (8008110 <UART_SetConfig+0x2d0>)
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d104      	bne.n	8007eea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ee0:	f7fd ff0c 	bl	8005cfc <HAL_RCC_GetPCLK2Freq>
 8007ee4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007ee8:	e003      	b.n	8007ef2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007eea:	f7fd fef3 	bl	8005cd4 <HAL_RCC_GetPCLK1Freq>
 8007eee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ef6:	69db      	ldr	r3, [r3, #28]
 8007ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007efc:	f040 810c 	bne.w	8008118 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f04:	2200      	movs	r2, #0
 8007f06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007f0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007f12:	4622      	mov	r2, r4
 8007f14:	462b      	mov	r3, r5
 8007f16:	1891      	adds	r1, r2, r2
 8007f18:	65b9      	str	r1, [r7, #88]	; 0x58
 8007f1a:	415b      	adcs	r3, r3
 8007f1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007f22:	4621      	mov	r1, r4
 8007f24:	eb12 0801 	adds.w	r8, r2, r1
 8007f28:	4629      	mov	r1, r5
 8007f2a:	eb43 0901 	adc.w	r9, r3, r1
 8007f2e:	f04f 0200 	mov.w	r2, #0
 8007f32:	f04f 0300 	mov.w	r3, #0
 8007f36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f42:	4690      	mov	r8, r2
 8007f44:	4699      	mov	r9, r3
 8007f46:	4623      	mov	r3, r4
 8007f48:	eb18 0303 	adds.w	r3, r8, r3
 8007f4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f50:	462b      	mov	r3, r5
 8007f52:	eb49 0303 	adc.w	r3, r9, r3
 8007f56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007f6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007f6e:	460b      	mov	r3, r1
 8007f70:	18db      	adds	r3, r3, r3
 8007f72:	653b      	str	r3, [r7, #80]	; 0x50
 8007f74:	4613      	mov	r3, r2
 8007f76:	eb42 0303 	adc.w	r3, r2, r3
 8007f7a:	657b      	str	r3, [r7, #84]	; 0x54
 8007f7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007f80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007f84:	f7f8 fdfa 	bl	8000b7c <__aeabi_uldivmod>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	4b61      	ldr	r3, [pc, #388]	; (8008114 <UART_SetConfig+0x2d4>)
 8007f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8007f92:	095b      	lsrs	r3, r3, #5
 8007f94:	011c      	lsls	r4, r3, #4
 8007f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007fa0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007fa4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007fa8:	4642      	mov	r2, r8
 8007faa:	464b      	mov	r3, r9
 8007fac:	1891      	adds	r1, r2, r2
 8007fae:	64b9      	str	r1, [r7, #72]	; 0x48
 8007fb0:	415b      	adcs	r3, r3
 8007fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007fb8:	4641      	mov	r1, r8
 8007fba:	eb12 0a01 	adds.w	sl, r2, r1
 8007fbe:	4649      	mov	r1, r9
 8007fc0:	eb43 0b01 	adc.w	fp, r3, r1
 8007fc4:	f04f 0200 	mov.w	r2, #0
 8007fc8:	f04f 0300 	mov.w	r3, #0
 8007fcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007fd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007fd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007fd8:	4692      	mov	sl, r2
 8007fda:	469b      	mov	fp, r3
 8007fdc:	4643      	mov	r3, r8
 8007fde:	eb1a 0303 	adds.w	r3, sl, r3
 8007fe2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007fe6:	464b      	mov	r3, r9
 8007fe8:	eb4b 0303 	adc.w	r3, fp, r3
 8007fec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ffc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008000:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008004:	460b      	mov	r3, r1
 8008006:	18db      	adds	r3, r3, r3
 8008008:	643b      	str	r3, [r7, #64]	; 0x40
 800800a:	4613      	mov	r3, r2
 800800c:	eb42 0303 	adc.w	r3, r2, r3
 8008010:	647b      	str	r3, [r7, #68]	; 0x44
 8008012:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008016:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800801a:	f7f8 fdaf 	bl	8000b7c <__aeabi_uldivmod>
 800801e:	4602      	mov	r2, r0
 8008020:	460b      	mov	r3, r1
 8008022:	4611      	mov	r1, r2
 8008024:	4b3b      	ldr	r3, [pc, #236]	; (8008114 <UART_SetConfig+0x2d4>)
 8008026:	fba3 2301 	umull	r2, r3, r3, r1
 800802a:	095b      	lsrs	r3, r3, #5
 800802c:	2264      	movs	r2, #100	; 0x64
 800802e:	fb02 f303 	mul.w	r3, r2, r3
 8008032:	1acb      	subs	r3, r1, r3
 8008034:	00db      	lsls	r3, r3, #3
 8008036:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800803a:	4b36      	ldr	r3, [pc, #216]	; (8008114 <UART_SetConfig+0x2d4>)
 800803c:	fba3 2302 	umull	r2, r3, r3, r2
 8008040:	095b      	lsrs	r3, r3, #5
 8008042:	005b      	lsls	r3, r3, #1
 8008044:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008048:	441c      	add	r4, r3
 800804a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800804e:	2200      	movs	r2, #0
 8008050:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008054:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008058:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800805c:	4642      	mov	r2, r8
 800805e:	464b      	mov	r3, r9
 8008060:	1891      	adds	r1, r2, r2
 8008062:	63b9      	str	r1, [r7, #56]	; 0x38
 8008064:	415b      	adcs	r3, r3
 8008066:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008068:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800806c:	4641      	mov	r1, r8
 800806e:	1851      	adds	r1, r2, r1
 8008070:	6339      	str	r1, [r7, #48]	; 0x30
 8008072:	4649      	mov	r1, r9
 8008074:	414b      	adcs	r3, r1
 8008076:	637b      	str	r3, [r7, #52]	; 0x34
 8008078:	f04f 0200 	mov.w	r2, #0
 800807c:	f04f 0300 	mov.w	r3, #0
 8008080:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008084:	4659      	mov	r1, fp
 8008086:	00cb      	lsls	r3, r1, #3
 8008088:	4651      	mov	r1, sl
 800808a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800808e:	4651      	mov	r1, sl
 8008090:	00ca      	lsls	r2, r1, #3
 8008092:	4610      	mov	r0, r2
 8008094:	4619      	mov	r1, r3
 8008096:	4603      	mov	r3, r0
 8008098:	4642      	mov	r2, r8
 800809a:	189b      	adds	r3, r3, r2
 800809c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80080a0:	464b      	mov	r3, r9
 80080a2:	460a      	mov	r2, r1
 80080a4:	eb42 0303 	adc.w	r3, r2, r3
 80080a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80080ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80080b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80080bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80080c0:	460b      	mov	r3, r1
 80080c2:	18db      	adds	r3, r3, r3
 80080c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80080c6:	4613      	mov	r3, r2
 80080c8:	eb42 0303 	adc.w	r3, r2, r3
 80080cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80080d6:	f7f8 fd51 	bl	8000b7c <__aeabi_uldivmod>
 80080da:	4602      	mov	r2, r0
 80080dc:	460b      	mov	r3, r1
 80080de:	4b0d      	ldr	r3, [pc, #52]	; (8008114 <UART_SetConfig+0x2d4>)
 80080e0:	fba3 1302 	umull	r1, r3, r3, r2
 80080e4:	095b      	lsrs	r3, r3, #5
 80080e6:	2164      	movs	r1, #100	; 0x64
 80080e8:	fb01 f303 	mul.w	r3, r1, r3
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	00db      	lsls	r3, r3, #3
 80080f0:	3332      	adds	r3, #50	; 0x32
 80080f2:	4a08      	ldr	r2, [pc, #32]	; (8008114 <UART_SetConfig+0x2d4>)
 80080f4:	fba2 2303 	umull	r2, r3, r2, r3
 80080f8:	095b      	lsrs	r3, r3, #5
 80080fa:	f003 0207 	and.w	r2, r3, #7
 80080fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4422      	add	r2, r4
 8008106:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008108:	e105      	b.n	8008316 <UART_SetConfig+0x4d6>
 800810a:	bf00      	nop
 800810c:	40011000 	.word	0x40011000
 8008110:	40011400 	.word	0x40011400
 8008114:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800811c:	2200      	movs	r2, #0
 800811e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008122:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008126:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800812a:	4642      	mov	r2, r8
 800812c:	464b      	mov	r3, r9
 800812e:	1891      	adds	r1, r2, r2
 8008130:	6239      	str	r1, [r7, #32]
 8008132:	415b      	adcs	r3, r3
 8008134:	627b      	str	r3, [r7, #36]	; 0x24
 8008136:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800813a:	4641      	mov	r1, r8
 800813c:	1854      	adds	r4, r2, r1
 800813e:	4649      	mov	r1, r9
 8008140:	eb43 0501 	adc.w	r5, r3, r1
 8008144:	f04f 0200 	mov.w	r2, #0
 8008148:	f04f 0300 	mov.w	r3, #0
 800814c:	00eb      	lsls	r3, r5, #3
 800814e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008152:	00e2      	lsls	r2, r4, #3
 8008154:	4614      	mov	r4, r2
 8008156:	461d      	mov	r5, r3
 8008158:	4643      	mov	r3, r8
 800815a:	18e3      	adds	r3, r4, r3
 800815c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008160:	464b      	mov	r3, r9
 8008162:	eb45 0303 	adc.w	r3, r5, r3
 8008166:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800816a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008176:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800817a:	f04f 0200 	mov.w	r2, #0
 800817e:	f04f 0300 	mov.w	r3, #0
 8008182:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008186:	4629      	mov	r1, r5
 8008188:	008b      	lsls	r3, r1, #2
 800818a:	4621      	mov	r1, r4
 800818c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008190:	4621      	mov	r1, r4
 8008192:	008a      	lsls	r2, r1, #2
 8008194:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008198:	f7f8 fcf0 	bl	8000b7c <__aeabi_uldivmod>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	4b60      	ldr	r3, [pc, #384]	; (8008324 <UART_SetConfig+0x4e4>)
 80081a2:	fba3 2302 	umull	r2, r3, r3, r2
 80081a6:	095b      	lsrs	r3, r3, #5
 80081a8:	011c      	lsls	r4, r3, #4
 80081aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081ae:	2200      	movs	r2, #0
 80081b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80081b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80081b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80081bc:	4642      	mov	r2, r8
 80081be:	464b      	mov	r3, r9
 80081c0:	1891      	adds	r1, r2, r2
 80081c2:	61b9      	str	r1, [r7, #24]
 80081c4:	415b      	adcs	r3, r3
 80081c6:	61fb      	str	r3, [r7, #28]
 80081c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081cc:	4641      	mov	r1, r8
 80081ce:	1851      	adds	r1, r2, r1
 80081d0:	6139      	str	r1, [r7, #16]
 80081d2:	4649      	mov	r1, r9
 80081d4:	414b      	adcs	r3, r1
 80081d6:	617b      	str	r3, [r7, #20]
 80081d8:	f04f 0200 	mov.w	r2, #0
 80081dc:	f04f 0300 	mov.w	r3, #0
 80081e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80081e4:	4659      	mov	r1, fp
 80081e6:	00cb      	lsls	r3, r1, #3
 80081e8:	4651      	mov	r1, sl
 80081ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081ee:	4651      	mov	r1, sl
 80081f0:	00ca      	lsls	r2, r1, #3
 80081f2:	4610      	mov	r0, r2
 80081f4:	4619      	mov	r1, r3
 80081f6:	4603      	mov	r3, r0
 80081f8:	4642      	mov	r2, r8
 80081fa:	189b      	adds	r3, r3, r2
 80081fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008200:	464b      	mov	r3, r9
 8008202:	460a      	mov	r2, r1
 8008204:	eb42 0303 	adc.w	r3, r2, r3
 8008208:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800820c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	67bb      	str	r3, [r7, #120]	; 0x78
 8008216:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008218:	f04f 0200 	mov.w	r2, #0
 800821c:	f04f 0300 	mov.w	r3, #0
 8008220:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008224:	4649      	mov	r1, r9
 8008226:	008b      	lsls	r3, r1, #2
 8008228:	4641      	mov	r1, r8
 800822a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800822e:	4641      	mov	r1, r8
 8008230:	008a      	lsls	r2, r1, #2
 8008232:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008236:	f7f8 fca1 	bl	8000b7c <__aeabi_uldivmod>
 800823a:	4602      	mov	r2, r0
 800823c:	460b      	mov	r3, r1
 800823e:	4b39      	ldr	r3, [pc, #228]	; (8008324 <UART_SetConfig+0x4e4>)
 8008240:	fba3 1302 	umull	r1, r3, r3, r2
 8008244:	095b      	lsrs	r3, r3, #5
 8008246:	2164      	movs	r1, #100	; 0x64
 8008248:	fb01 f303 	mul.w	r3, r1, r3
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	011b      	lsls	r3, r3, #4
 8008250:	3332      	adds	r3, #50	; 0x32
 8008252:	4a34      	ldr	r2, [pc, #208]	; (8008324 <UART_SetConfig+0x4e4>)
 8008254:	fba2 2303 	umull	r2, r3, r2, r3
 8008258:	095b      	lsrs	r3, r3, #5
 800825a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800825e:	441c      	add	r4, r3
 8008260:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008264:	2200      	movs	r2, #0
 8008266:	673b      	str	r3, [r7, #112]	; 0x70
 8008268:	677a      	str	r2, [r7, #116]	; 0x74
 800826a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800826e:	4642      	mov	r2, r8
 8008270:	464b      	mov	r3, r9
 8008272:	1891      	adds	r1, r2, r2
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	415b      	adcs	r3, r3
 8008278:	60fb      	str	r3, [r7, #12]
 800827a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800827e:	4641      	mov	r1, r8
 8008280:	1851      	adds	r1, r2, r1
 8008282:	6039      	str	r1, [r7, #0]
 8008284:	4649      	mov	r1, r9
 8008286:	414b      	adcs	r3, r1
 8008288:	607b      	str	r3, [r7, #4]
 800828a:	f04f 0200 	mov.w	r2, #0
 800828e:	f04f 0300 	mov.w	r3, #0
 8008292:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008296:	4659      	mov	r1, fp
 8008298:	00cb      	lsls	r3, r1, #3
 800829a:	4651      	mov	r1, sl
 800829c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082a0:	4651      	mov	r1, sl
 80082a2:	00ca      	lsls	r2, r1, #3
 80082a4:	4610      	mov	r0, r2
 80082a6:	4619      	mov	r1, r3
 80082a8:	4603      	mov	r3, r0
 80082aa:	4642      	mov	r2, r8
 80082ac:	189b      	adds	r3, r3, r2
 80082ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80082b0:	464b      	mov	r3, r9
 80082b2:	460a      	mov	r2, r1
 80082b4:	eb42 0303 	adc.w	r3, r2, r3
 80082b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	663b      	str	r3, [r7, #96]	; 0x60
 80082c4:	667a      	str	r2, [r7, #100]	; 0x64
 80082c6:	f04f 0200 	mov.w	r2, #0
 80082ca:	f04f 0300 	mov.w	r3, #0
 80082ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80082d2:	4649      	mov	r1, r9
 80082d4:	008b      	lsls	r3, r1, #2
 80082d6:	4641      	mov	r1, r8
 80082d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082dc:	4641      	mov	r1, r8
 80082de:	008a      	lsls	r2, r1, #2
 80082e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80082e4:	f7f8 fc4a 	bl	8000b7c <__aeabi_uldivmod>
 80082e8:	4602      	mov	r2, r0
 80082ea:	460b      	mov	r3, r1
 80082ec:	4b0d      	ldr	r3, [pc, #52]	; (8008324 <UART_SetConfig+0x4e4>)
 80082ee:	fba3 1302 	umull	r1, r3, r3, r2
 80082f2:	095b      	lsrs	r3, r3, #5
 80082f4:	2164      	movs	r1, #100	; 0x64
 80082f6:	fb01 f303 	mul.w	r3, r1, r3
 80082fa:	1ad3      	subs	r3, r2, r3
 80082fc:	011b      	lsls	r3, r3, #4
 80082fe:	3332      	adds	r3, #50	; 0x32
 8008300:	4a08      	ldr	r2, [pc, #32]	; (8008324 <UART_SetConfig+0x4e4>)
 8008302:	fba2 2303 	umull	r2, r3, r2, r3
 8008306:	095b      	lsrs	r3, r3, #5
 8008308:	f003 020f 	and.w	r2, r3, #15
 800830c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4422      	add	r2, r4
 8008314:	609a      	str	r2, [r3, #8]
}
 8008316:	bf00      	nop
 8008318:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800831c:	46bd      	mov	sp, r7
 800831e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008322:	bf00      	nop
 8008324:	51eb851f 	.word	0x51eb851f

08008328 <__errno>:
 8008328:	4b01      	ldr	r3, [pc, #4]	; (8008330 <__errno+0x8>)
 800832a:	6818      	ldr	r0, [r3, #0]
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	20000018 	.word	0x20000018

08008334 <__libc_init_array>:
 8008334:	b570      	push	{r4, r5, r6, lr}
 8008336:	4d0d      	ldr	r5, [pc, #52]	; (800836c <__libc_init_array+0x38>)
 8008338:	4c0d      	ldr	r4, [pc, #52]	; (8008370 <__libc_init_array+0x3c>)
 800833a:	1b64      	subs	r4, r4, r5
 800833c:	10a4      	asrs	r4, r4, #2
 800833e:	2600      	movs	r6, #0
 8008340:	42a6      	cmp	r6, r4
 8008342:	d109      	bne.n	8008358 <__libc_init_array+0x24>
 8008344:	4d0b      	ldr	r5, [pc, #44]	; (8008374 <__libc_init_array+0x40>)
 8008346:	4c0c      	ldr	r4, [pc, #48]	; (8008378 <__libc_init_array+0x44>)
 8008348:	f000 fcd4 	bl	8008cf4 <_init>
 800834c:	1b64      	subs	r4, r4, r5
 800834e:	10a4      	asrs	r4, r4, #2
 8008350:	2600      	movs	r6, #0
 8008352:	42a6      	cmp	r6, r4
 8008354:	d105      	bne.n	8008362 <__libc_init_array+0x2e>
 8008356:	bd70      	pop	{r4, r5, r6, pc}
 8008358:	f855 3b04 	ldr.w	r3, [r5], #4
 800835c:	4798      	blx	r3
 800835e:	3601      	adds	r6, #1
 8008360:	e7ee      	b.n	8008340 <__libc_init_array+0xc>
 8008362:	f855 3b04 	ldr.w	r3, [r5], #4
 8008366:	4798      	blx	r3
 8008368:	3601      	adds	r6, #1
 800836a:	e7f2      	b.n	8008352 <__libc_init_array+0x1e>
 800836c:	08009758 	.word	0x08009758
 8008370:	08009758 	.word	0x08009758
 8008374:	08009758 	.word	0x08009758
 8008378:	0800975c 	.word	0x0800975c

0800837c <memcpy>:
 800837c:	440a      	add	r2, r1
 800837e:	4291      	cmp	r1, r2
 8008380:	f100 33ff 	add.w	r3, r0, #4294967295
 8008384:	d100      	bne.n	8008388 <memcpy+0xc>
 8008386:	4770      	bx	lr
 8008388:	b510      	push	{r4, lr}
 800838a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800838e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008392:	4291      	cmp	r1, r2
 8008394:	d1f9      	bne.n	800838a <memcpy+0xe>
 8008396:	bd10      	pop	{r4, pc}

08008398 <memset>:
 8008398:	4402      	add	r2, r0
 800839a:	4603      	mov	r3, r0
 800839c:	4293      	cmp	r3, r2
 800839e:	d100      	bne.n	80083a2 <memset+0xa>
 80083a0:	4770      	bx	lr
 80083a2:	f803 1b01 	strb.w	r1, [r3], #1
 80083a6:	e7f9      	b.n	800839c <memset+0x4>

080083a8 <sniprintf>:
 80083a8:	b40c      	push	{r2, r3}
 80083aa:	b530      	push	{r4, r5, lr}
 80083ac:	4b17      	ldr	r3, [pc, #92]	; (800840c <sniprintf+0x64>)
 80083ae:	1e0c      	subs	r4, r1, #0
 80083b0:	681d      	ldr	r5, [r3, #0]
 80083b2:	b09d      	sub	sp, #116	; 0x74
 80083b4:	da08      	bge.n	80083c8 <sniprintf+0x20>
 80083b6:	238b      	movs	r3, #139	; 0x8b
 80083b8:	602b      	str	r3, [r5, #0]
 80083ba:	f04f 30ff 	mov.w	r0, #4294967295
 80083be:	b01d      	add	sp, #116	; 0x74
 80083c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083c4:	b002      	add	sp, #8
 80083c6:	4770      	bx	lr
 80083c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80083cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80083d0:	bf14      	ite	ne
 80083d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80083d6:	4623      	moveq	r3, r4
 80083d8:	9304      	str	r3, [sp, #16]
 80083da:	9307      	str	r3, [sp, #28]
 80083dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80083e0:	9002      	str	r0, [sp, #8]
 80083e2:	9006      	str	r0, [sp, #24]
 80083e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80083e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80083ea:	ab21      	add	r3, sp, #132	; 0x84
 80083ec:	a902      	add	r1, sp, #8
 80083ee:	4628      	mov	r0, r5
 80083f0:	9301      	str	r3, [sp, #4]
 80083f2:	f000 f869 	bl	80084c8 <_svfiprintf_r>
 80083f6:	1c43      	adds	r3, r0, #1
 80083f8:	bfbc      	itt	lt
 80083fa:	238b      	movlt	r3, #139	; 0x8b
 80083fc:	602b      	strlt	r3, [r5, #0]
 80083fe:	2c00      	cmp	r4, #0
 8008400:	d0dd      	beq.n	80083be <sniprintf+0x16>
 8008402:	9b02      	ldr	r3, [sp, #8]
 8008404:	2200      	movs	r2, #0
 8008406:	701a      	strb	r2, [r3, #0]
 8008408:	e7d9      	b.n	80083be <sniprintf+0x16>
 800840a:	bf00      	nop
 800840c:	20000018 	.word	0x20000018

08008410 <__ssputs_r>:
 8008410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008414:	688e      	ldr	r6, [r1, #8]
 8008416:	429e      	cmp	r6, r3
 8008418:	4682      	mov	sl, r0
 800841a:	460c      	mov	r4, r1
 800841c:	4690      	mov	r8, r2
 800841e:	461f      	mov	r7, r3
 8008420:	d838      	bhi.n	8008494 <__ssputs_r+0x84>
 8008422:	898a      	ldrh	r2, [r1, #12]
 8008424:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008428:	d032      	beq.n	8008490 <__ssputs_r+0x80>
 800842a:	6825      	ldr	r5, [r4, #0]
 800842c:	6909      	ldr	r1, [r1, #16]
 800842e:	eba5 0901 	sub.w	r9, r5, r1
 8008432:	6965      	ldr	r5, [r4, #20]
 8008434:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008438:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800843c:	3301      	adds	r3, #1
 800843e:	444b      	add	r3, r9
 8008440:	106d      	asrs	r5, r5, #1
 8008442:	429d      	cmp	r5, r3
 8008444:	bf38      	it	cc
 8008446:	461d      	movcc	r5, r3
 8008448:	0553      	lsls	r3, r2, #21
 800844a:	d531      	bpl.n	80084b0 <__ssputs_r+0xa0>
 800844c:	4629      	mov	r1, r5
 800844e:	f000 fb55 	bl	8008afc <_malloc_r>
 8008452:	4606      	mov	r6, r0
 8008454:	b950      	cbnz	r0, 800846c <__ssputs_r+0x5c>
 8008456:	230c      	movs	r3, #12
 8008458:	f8ca 3000 	str.w	r3, [sl]
 800845c:	89a3      	ldrh	r3, [r4, #12]
 800845e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008462:	81a3      	strh	r3, [r4, #12]
 8008464:	f04f 30ff 	mov.w	r0, #4294967295
 8008468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800846c:	6921      	ldr	r1, [r4, #16]
 800846e:	464a      	mov	r2, r9
 8008470:	f7ff ff84 	bl	800837c <memcpy>
 8008474:	89a3      	ldrh	r3, [r4, #12]
 8008476:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800847a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800847e:	81a3      	strh	r3, [r4, #12]
 8008480:	6126      	str	r6, [r4, #16]
 8008482:	6165      	str	r5, [r4, #20]
 8008484:	444e      	add	r6, r9
 8008486:	eba5 0509 	sub.w	r5, r5, r9
 800848a:	6026      	str	r6, [r4, #0]
 800848c:	60a5      	str	r5, [r4, #8]
 800848e:	463e      	mov	r6, r7
 8008490:	42be      	cmp	r6, r7
 8008492:	d900      	bls.n	8008496 <__ssputs_r+0x86>
 8008494:	463e      	mov	r6, r7
 8008496:	6820      	ldr	r0, [r4, #0]
 8008498:	4632      	mov	r2, r6
 800849a:	4641      	mov	r1, r8
 800849c:	f000 faa8 	bl	80089f0 <memmove>
 80084a0:	68a3      	ldr	r3, [r4, #8]
 80084a2:	1b9b      	subs	r3, r3, r6
 80084a4:	60a3      	str	r3, [r4, #8]
 80084a6:	6823      	ldr	r3, [r4, #0]
 80084a8:	4433      	add	r3, r6
 80084aa:	6023      	str	r3, [r4, #0]
 80084ac:	2000      	movs	r0, #0
 80084ae:	e7db      	b.n	8008468 <__ssputs_r+0x58>
 80084b0:	462a      	mov	r2, r5
 80084b2:	f000 fb97 	bl	8008be4 <_realloc_r>
 80084b6:	4606      	mov	r6, r0
 80084b8:	2800      	cmp	r0, #0
 80084ba:	d1e1      	bne.n	8008480 <__ssputs_r+0x70>
 80084bc:	6921      	ldr	r1, [r4, #16]
 80084be:	4650      	mov	r0, sl
 80084c0:	f000 fab0 	bl	8008a24 <_free_r>
 80084c4:	e7c7      	b.n	8008456 <__ssputs_r+0x46>
	...

080084c8 <_svfiprintf_r>:
 80084c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084cc:	4698      	mov	r8, r3
 80084ce:	898b      	ldrh	r3, [r1, #12]
 80084d0:	061b      	lsls	r3, r3, #24
 80084d2:	b09d      	sub	sp, #116	; 0x74
 80084d4:	4607      	mov	r7, r0
 80084d6:	460d      	mov	r5, r1
 80084d8:	4614      	mov	r4, r2
 80084da:	d50e      	bpl.n	80084fa <_svfiprintf_r+0x32>
 80084dc:	690b      	ldr	r3, [r1, #16]
 80084de:	b963      	cbnz	r3, 80084fa <_svfiprintf_r+0x32>
 80084e0:	2140      	movs	r1, #64	; 0x40
 80084e2:	f000 fb0b 	bl	8008afc <_malloc_r>
 80084e6:	6028      	str	r0, [r5, #0]
 80084e8:	6128      	str	r0, [r5, #16]
 80084ea:	b920      	cbnz	r0, 80084f6 <_svfiprintf_r+0x2e>
 80084ec:	230c      	movs	r3, #12
 80084ee:	603b      	str	r3, [r7, #0]
 80084f0:	f04f 30ff 	mov.w	r0, #4294967295
 80084f4:	e0d1      	b.n	800869a <_svfiprintf_r+0x1d2>
 80084f6:	2340      	movs	r3, #64	; 0x40
 80084f8:	616b      	str	r3, [r5, #20]
 80084fa:	2300      	movs	r3, #0
 80084fc:	9309      	str	r3, [sp, #36]	; 0x24
 80084fe:	2320      	movs	r3, #32
 8008500:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008504:	f8cd 800c 	str.w	r8, [sp, #12]
 8008508:	2330      	movs	r3, #48	; 0x30
 800850a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80086b4 <_svfiprintf_r+0x1ec>
 800850e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008512:	f04f 0901 	mov.w	r9, #1
 8008516:	4623      	mov	r3, r4
 8008518:	469a      	mov	sl, r3
 800851a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800851e:	b10a      	cbz	r2, 8008524 <_svfiprintf_r+0x5c>
 8008520:	2a25      	cmp	r2, #37	; 0x25
 8008522:	d1f9      	bne.n	8008518 <_svfiprintf_r+0x50>
 8008524:	ebba 0b04 	subs.w	fp, sl, r4
 8008528:	d00b      	beq.n	8008542 <_svfiprintf_r+0x7a>
 800852a:	465b      	mov	r3, fp
 800852c:	4622      	mov	r2, r4
 800852e:	4629      	mov	r1, r5
 8008530:	4638      	mov	r0, r7
 8008532:	f7ff ff6d 	bl	8008410 <__ssputs_r>
 8008536:	3001      	adds	r0, #1
 8008538:	f000 80aa 	beq.w	8008690 <_svfiprintf_r+0x1c8>
 800853c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800853e:	445a      	add	r2, fp
 8008540:	9209      	str	r2, [sp, #36]	; 0x24
 8008542:	f89a 3000 	ldrb.w	r3, [sl]
 8008546:	2b00      	cmp	r3, #0
 8008548:	f000 80a2 	beq.w	8008690 <_svfiprintf_r+0x1c8>
 800854c:	2300      	movs	r3, #0
 800854e:	f04f 32ff 	mov.w	r2, #4294967295
 8008552:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008556:	f10a 0a01 	add.w	sl, sl, #1
 800855a:	9304      	str	r3, [sp, #16]
 800855c:	9307      	str	r3, [sp, #28]
 800855e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008562:	931a      	str	r3, [sp, #104]	; 0x68
 8008564:	4654      	mov	r4, sl
 8008566:	2205      	movs	r2, #5
 8008568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800856c:	4851      	ldr	r0, [pc, #324]	; (80086b4 <_svfiprintf_r+0x1ec>)
 800856e:	f7f7 fe3f 	bl	80001f0 <memchr>
 8008572:	9a04      	ldr	r2, [sp, #16]
 8008574:	b9d8      	cbnz	r0, 80085ae <_svfiprintf_r+0xe6>
 8008576:	06d0      	lsls	r0, r2, #27
 8008578:	bf44      	itt	mi
 800857a:	2320      	movmi	r3, #32
 800857c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008580:	0711      	lsls	r1, r2, #28
 8008582:	bf44      	itt	mi
 8008584:	232b      	movmi	r3, #43	; 0x2b
 8008586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800858a:	f89a 3000 	ldrb.w	r3, [sl]
 800858e:	2b2a      	cmp	r3, #42	; 0x2a
 8008590:	d015      	beq.n	80085be <_svfiprintf_r+0xf6>
 8008592:	9a07      	ldr	r2, [sp, #28]
 8008594:	4654      	mov	r4, sl
 8008596:	2000      	movs	r0, #0
 8008598:	f04f 0c0a 	mov.w	ip, #10
 800859c:	4621      	mov	r1, r4
 800859e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085a2:	3b30      	subs	r3, #48	; 0x30
 80085a4:	2b09      	cmp	r3, #9
 80085a6:	d94e      	bls.n	8008646 <_svfiprintf_r+0x17e>
 80085a8:	b1b0      	cbz	r0, 80085d8 <_svfiprintf_r+0x110>
 80085aa:	9207      	str	r2, [sp, #28]
 80085ac:	e014      	b.n	80085d8 <_svfiprintf_r+0x110>
 80085ae:	eba0 0308 	sub.w	r3, r0, r8
 80085b2:	fa09 f303 	lsl.w	r3, r9, r3
 80085b6:	4313      	orrs	r3, r2
 80085b8:	9304      	str	r3, [sp, #16]
 80085ba:	46a2      	mov	sl, r4
 80085bc:	e7d2      	b.n	8008564 <_svfiprintf_r+0x9c>
 80085be:	9b03      	ldr	r3, [sp, #12]
 80085c0:	1d19      	adds	r1, r3, #4
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	9103      	str	r1, [sp, #12]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	bfbb      	ittet	lt
 80085ca:	425b      	neglt	r3, r3
 80085cc:	f042 0202 	orrlt.w	r2, r2, #2
 80085d0:	9307      	strge	r3, [sp, #28]
 80085d2:	9307      	strlt	r3, [sp, #28]
 80085d4:	bfb8      	it	lt
 80085d6:	9204      	strlt	r2, [sp, #16]
 80085d8:	7823      	ldrb	r3, [r4, #0]
 80085da:	2b2e      	cmp	r3, #46	; 0x2e
 80085dc:	d10c      	bne.n	80085f8 <_svfiprintf_r+0x130>
 80085de:	7863      	ldrb	r3, [r4, #1]
 80085e0:	2b2a      	cmp	r3, #42	; 0x2a
 80085e2:	d135      	bne.n	8008650 <_svfiprintf_r+0x188>
 80085e4:	9b03      	ldr	r3, [sp, #12]
 80085e6:	1d1a      	adds	r2, r3, #4
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	9203      	str	r2, [sp, #12]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	bfb8      	it	lt
 80085f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80085f4:	3402      	adds	r4, #2
 80085f6:	9305      	str	r3, [sp, #20]
 80085f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80086c4 <_svfiprintf_r+0x1fc>
 80085fc:	7821      	ldrb	r1, [r4, #0]
 80085fe:	2203      	movs	r2, #3
 8008600:	4650      	mov	r0, sl
 8008602:	f7f7 fdf5 	bl	80001f0 <memchr>
 8008606:	b140      	cbz	r0, 800861a <_svfiprintf_r+0x152>
 8008608:	2340      	movs	r3, #64	; 0x40
 800860a:	eba0 000a 	sub.w	r0, r0, sl
 800860e:	fa03 f000 	lsl.w	r0, r3, r0
 8008612:	9b04      	ldr	r3, [sp, #16]
 8008614:	4303      	orrs	r3, r0
 8008616:	3401      	adds	r4, #1
 8008618:	9304      	str	r3, [sp, #16]
 800861a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800861e:	4826      	ldr	r0, [pc, #152]	; (80086b8 <_svfiprintf_r+0x1f0>)
 8008620:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008624:	2206      	movs	r2, #6
 8008626:	f7f7 fde3 	bl	80001f0 <memchr>
 800862a:	2800      	cmp	r0, #0
 800862c:	d038      	beq.n	80086a0 <_svfiprintf_r+0x1d8>
 800862e:	4b23      	ldr	r3, [pc, #140]	; (80086bc <_svfiprintf_r+0x1f4>)
 8008630:	bb1b      	cbnz	r3, 800867a <_svfiprintf_r+0x1b2>
 8008632:	9b03      	ldr	r3, [sp, #12]
 8008634:	3307      	adds	r3, #7
 8008636:	f023 0307 	bic.w	r3, r3, #7
 800863a:	3308      	adds	r3, #8
 800863c:	9303      	str	r3, [sp, #12]
 800863e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008640:	4433      	add	r3, r6
 8008642:	9309      	str	r3, [sp, #36]	; 0x24
 8008644:	e767      	b.n	8008516 <_svfiprintf_r+0x4e>
 8008646:	fb0c 3202 	mla	r2, ip, r2, r3
 800864a:	460c      	mov	r4, r1
 800864c:	2001      	movs	r0, #1
 800864e:	e7a5      	b.n	800859c <_svfiprintf_r+0xd4>
 8008650:	2300      	movs	r3, #0
 8008652:	3401      	adds	r4, #1
 8008654:	9305      	str	r3, [sp, #20]
 8008656:	4619      	mov	r1, r3
 8008658:	f04f 0c0a 	mov.w	ip, #10
 800865c:	4620      	mov	r0, r4
 800865e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008662:	3a30      	subs	r2, #48	; 0x30
 8008664:	2a09      	cmp	r2, #9
 8008666:	d903      	bls.n	8008670 <_svfiprintf_r+0x1a8>
 8008668:	2b00      	cmp	r3, #0
 800866a:	d0c5      	beq.n	80085f8 <_svfiprintf_r+0x130>
 800866c:	9105      	str	r1, [sp, #20]
 800866e:	e7c3      	b.n	80085f8 <_svfiprintf_r+0x130>
 8008670:	fb0c 2101 	mla	r1, ip, r1, r2
 8008674:	4604      	mov	r4, r0
 8008676:	2301      	movs	r3, #1
 8008678:	e7f0      	b.n	800865c <_svfiprintf_r+0x194>
 800867a:	ab03      	add	r3, sp, #12
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	462a      	mov	r2, r5
 8008680:	4b0f      	ldr	r3, [pc, #60]	; (80086c0 <_svfiprintf_r+0x1f8>)
 8008682:	a904      	add	r1, sp, #16
 8008684:	4638      	mov	r0, r7
 8008686:	f3af 8000 	nop.w
 800868a:	1c42      	adds	r2, r0, #1
 800868c:	4606      	mov	r6, r0
 800868e:	d1d6      	bne.n	800863e <_svfiprintf_r+0x176>
 8008690:	89ab      	ldrh	r3, [r5, #12]
 8008692:	065b      	lsls	r3, r3, #25
 8008694:	f53f af2c 	bmi.w	80084f0 <_svfiprintf_r+0x28>
 8008698:	9809      	ldr	r0, [sp, #36]	; 0x24
 800869a:	b01d      	add	sp, #116	; 0x74
 800869c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a0:	ab03      	add	r3, sp, #12
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	462a      	mov	r2, r5
 80086a6:	4b06      	ldr	r3, [pc, #24]	; (80086c0 <_svfiprintf_r+0x1f8>)
 80086a8:	a904      	add	r1, sp, #16
 80086aa:	4638      	mov	r0, r7
 80086ac:	f000 f87a 	bl	80087a4 <_printf_i>
 80086b0:	e7eb      	b.n	800868a <_svfiprintf_r+0x1c2>
 80086b2:	bf00      	nop
 80086b4:	0800971c 	.word	0x0800971c
 80086b8:	08009726 	.word	0x08009726
 80086bc:	00000000 	.word	0x00000000
 80086c0:	08008411 	.word	0x08008411
 80086c4:	08009722 	.word	0x08009722

080086c8 <_printf_common>:
 80086c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086cc:	4616      	mov	r6, r2
 80086ce:	4699      	mov	r9, r3
 80086d0:	688a      	ldr	r2, [r1, #8]
 80086d2:	690b      	ldr	r3, [r1, #16]
 80086d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086d8:	4293      	cmp	r3, r2
 80086da:	bfb8      	it	lt
 80086dc:	4613      	movlt	r3, r2
 80086de:	6033      	str	r3, [r6, #0]
 80086e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086e4:	4607      	mov	r7, r0
 80086e6:	460c      	mov	r4, r1
 80086e8:	b10a      	cbz	r2, 80086ee <_printf_common+0x26>
 80086ea:	3301      	adds	r3, #1
 80086ec:	6033      	str	r3, [r6, #0]
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	0699      	lsls	r1, r3, #26
 80086f2:	bf42      	ittt	mi
 80086f4:	6833      	ldrmi	r3, [r6, #0]
 80086f6:	3302      	addmi	r3, #2
 80086f8:	6033      	strmi	r3, [r6, #0]
 80086fa:	6825      	ldr	r5, [r4, #0]
 80086fc:	f015 0506 	ands.w	r5, r5, #6
 8008700:	d106      	bne.n	8008710 <_printf_common+0x48>
 8008702:	f104 0a19 	add.w	sl, r4, #25
 8008706:	68e3      	ldr	r3, [r4, #12]
 8008708:	6832      	ldr	r2, [r6, #0]
 800870a:	1a9b      	subs	r3, r3, r2
 800870c:	42ab      	cmp	r3, r5
 800870e:	dc26      	bgt.n	800875e <_printf_common+0x96>
 8008710:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008714:	1e13      	subs	r3, r2, #0
 8008716:	6822      	ldr	r2, [r4, #0]
 8008718:	bf18      	it	ne
 800871a:	2301      	movne	r3, #1
 800871c:	0692      	lsls	r2, r2, #26
 800871e:	d42b      	bmi.n	8008778 <_printf_common+0xb0>
 8008720:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008724:	4649      	mov	r1, r9
 8008726:	4638      	mov	r0, r7
 8008728:	47c0      	blx	r8
 800872a:	3001      	adds	r0, #1
 800872c:	d01e      	beq.n	800876c <_printf_common+0xa4>
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	68e5      	ldr	r5, [r4, #12]
 8008732:	6832      	ldr	r2, [r6, #0]
 8008734:	f003 0306 	and.w	r3, r3, #6
 8008738:	2b04      	cmp	r3, #4
 800873a:	bf08      	it	eq
 800873c:	1aad      	subeq	r5, r5, r2
 800873e:	68a3      	ldr	r3, [r4, #8]
 8008740:	6922      	ldr	r2, [r4, #16]
 8008742:	bf0c      	ite	eq
 8008744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008748:	2500      	movne	r5, #0
 800874a:	4293      	cmp	r3, r2
 800874c:	bfc4      	itt	gt
 800874e:	1a9b      	subgt	r3, r3, r2
 8008750:	18ed      	addgt	r5, r5, r3
 8008752:	2600      	movs	r6, #0
 8008754:	341a      	adds	r4, #26
 8008756:	42b5      	cmp	r5, r6
 8008758:	d11a      	bne.n	8008790 <_printf_common+0xc8>
 800875a:	2000      	movs	r0, #0
 800875c:	e008      	b.n	8008770 <_printf_common+0xa8>
 800875e:	2301      	movs	r3, #1
 8008760:	4652      	mov	r2, sl
 8008762:	4649      	mov	r1, r9
 8008764:	4638      	mov	r0, r7
 8008766:	47c0      	blx	r8
 8008768:	3001      	adds	r0, #1
 800876a:	d103      	bne.n	8008774 <_printf_common+0xac>
 800876c:	f04f 30ff 	mov.w	r0, #4294967295
 8008770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008774:	3501      	adds	r5, #1
 8008776:	e7c6      	b.n	8008706 <_printf_common+0x3e>
 8008778:	18e1      	adds	r1, r4, r3
 800877a:	1c5a      	adds	r2, r3, #1
 800877c:	2030      	movs	r0, #48	; 0x30
 800877e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008782:	4422      	add	r2, r4
 8008784:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008788:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800878c:	3302      	adds	r3, #2
 800878e:	e7c7      	b.n	8008720 <_printf_common+0x58>
 8008790:	2301      	movs	r3, #1
 8008792:	4622      	mov	r2, r4
 8008794:	4649      	mov	r1, r9
 8008796:	4638      	mov	r0, r7
 8008798:	47c0      	blx	r8
 800879a:	3001      	adds	r0, #1
 800879c:	d0e6      	beq.n	800876c <_printf_common+0xa4>
 800879e:	3601      	adds	r6, #1
 80087a0:	e7d9      	b.n	8008756 <_printf_common+0x8e>
	...

080087a4 <_printf_i>:
 80087a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087a8:	7e0f      	ldrb	r7, [r1, #24]
 80087aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087ac:	2f78      	cmp	r7, #120	; 0x78
 80087ae:	4691      	mov	r9, r2
 80087b0:	4680      	mov	r8, r0
 80087b2:	460c      	mov	r4, r1
 80087b4:	469a      	mov	sl, r3
 80087b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087ba:	d807      	bhi.n	80087cc <_printf_i+0x28>
 80087bc:	2f62      	cmp	r7, #98	; 0x62
 80087be:	d80a      	bhi.n	80087d6 <_printf_i+0x32>
 80087c0:	2f00      	cmp	r7, #0
 80087c2:	f000 80d8 	beq.w	8008976 <_printf_i+0x1d2>
 80087c6:	2f58      	cmp	r7, #88	; 0x58
 80087c8:	f000 80a3 	beq.w	8008912 <_printf_i+0x16e>
 80087cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087d4:	e03a      	b.n	800884c <_printf_i+0xa8>
 80087d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087da:	2b15      	cmp	r3, #21
 80087dc:	d8f6      	bhi.n	80087cc <_printf_i+0x28>
 80087de:	a101      	add	r1, pc, #4	; (adr r1, 80087e4 <_printf_i+0x40>)
 80087e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087e4:	0800883d 	.word	0x0800883d
 80087e8:	08008851 	.word	0x08008851
 80087ec:	080087cd 	.word	0x080087cd
 80087f0:	080087cd 	.word	0x080087cd
 80087f4:	080087cd 	.word	0x080087cd
 80087f8:	080087cd 	.word	0x080087cd
 80087fc:	08008851 	.word	0x08008851
 8008800:	080087cd 	.word	0x080087cd
 8008804:	080087cd 	.word	0x080087cd
 8008808:	080087cd 	.word	0x080087cd
 800880c:	080087cd 	.word	0x080087cd
 8008810:	0800895d 	.word	0x0800895d
 8008814:	08008881 	.word	0x08008881
 8008818:	0800893f 	.word	0x0800893f
 800881c:	080087cd 	.word	0x080087cd
 8008820:	080087cd 	.word	0x080087cd
 8008824:	0800897f 	.word	0x0800897f
 8008828:	080087cd 	.word	0x080087cd
 800882c:	08008881 	.word	0x08008881
 8008830:	080087cd 	.word	0x080087cd
 8008834:	080087cd 	.word	0x080087cd
 8008838:	08008947 	.word	0x08008947
 800883c:	682b      	ldr	r3, [r5, #0]
 800883e:	1d1a      	adds	r2, r3, #4
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	602a      	str	r2, [r5, #0]
 8008844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008848:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800884c:	2301      	movs	r3, #1
 800884e:	e0a3      	b.n	8008998 <_printf_i+0x1f4>
 8008850:	6820      	ldr	r0, [r4, #0]
 8008852:	6829      	ldr	r1, [r5, #0]
 8008854:	0606      	lsls	r6, r0, #24
 8008856:	f101 0304 	add.w	r3, r1, #4
 800885a:	d50a      	bpl.n	8008872 <_printf_i+0xce>
 800885c:	680e      	ldr	r6, [r1, #0]
 800885e:	602b      	str	r3, [r5, #0]
 8008860:	2e00      	cmp	r6, #0
 8008862:	da03      	bge.n	800886c <_printf_i+0xc8>
 8008864:	232d      	movs	r3, #45	; 0x2d
 8008866:	4276      	negs	r6, r6
 8008868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800886c:	485e      	ldr	r0, [pc, #376]	; (80089e8 <_printf_i+0x244>)
 800886e:	230a      	movs	r3, #10
 8008870:	e019      	b.n	80088a6 <_printf_i+0x102>
 8008872:	680e      	ldr	r6, [r1, #0]
 8008874:	602b      	str	r3, [r5, #0]
 8008876:	f010 0f40 	tst.w	r0, #64	; 0x40
 800887a:	bf18      	it	ne
 800887c:	b236      	sxthne	r6, r6
 800887e:	e7ef      	b.n	8008860 <_printf_i+0xbc>
 8008880:	682b      	ldr	r3, [r5, #0]
 8008882:	6820      	ldr	r0, [r4, #0]
 8008884:	1d19      	adds	r1, r3, #4
 8008886:	6029      	str	r1, [r5, #0]
 8008888:	0601      	lsls	r1, r0, #24
 800888a:	d501      	bpl.n	8008890 <_printf_i+0xec>
 800888c:	681e      	ldr	r6, [r3, #0]
 800888e:	e002      	b.n	8008896 <_printf_i+0xf2>
 8008890:	0646      	lsls	r6, r0, #25
 8008892:	d5fb      	bpl.n	800888c <_printf_i+0xe8>
 8008894:	881e      	ldrh	r6, [r3, #0]
 8008896:	4854      	ldr	r0, [pc, #336]	; (80089e8 <_printf_i+0x244>)
 8008898:	2f6f      	cmp	r7, #111	; 0x6f
 800889a:	bf0c      	ite	eq
 800889c:	2308      	moveq	r3, #8
 800889e:	230a      	movne	r3, #10
 80088a0:	2100      	movs	r1, #0
 80088a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088a6:	6865      	ldr	r5, [r4, #4]
 80088a8:	60a5      	str	r5, [r4, #8]
 80088aa:	2d00      	cmp	r5, #0
 80088ac:	bfa2      	ittt	ge
 80088ae:	6821      	ldrge	r1, [r4, #0]
 80088b0:	f021 0104 	bicge.w	r1, r1, #4
 80088b4:	6021      	strge	r1, [r4, #0]
 80088b6:	b90e      	cbnz	r6, 80088bc <_printf_i+0x118>
 80088b8:	2d00      	cmp	r5, #0
 80088ba:	d04d      	beq.n	8008958 <_printf_i+0x1b4>
 80088bc:	4615      	mov	r5, r2
 80088be:	fbb6 f1f3 	udiv	r1, r6, r3
 80088c2:	fb03 6711 	mls	r7, r3, r1, r6
 80088c6:	5dc7      	ldrb	r7, [r0, r7]
 80088c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80088cc:	4637      	mov	r7, r6
 80088ce:	42bb      	cmp	r3, r7
 80088d0:	460e      	mov	r6, r1
 80088d2:	d9f4      	bls.n	80088be <_printf_i+0x11a>
 80088d4:	2b08      	cmp	r3, #8
 80088d6:	d10b      	bne.n	80088f0 <_printf_i+0x14c>
 80088d8:	6823      	ldr	r3, [r4, #0]
 80088da:	07de      	lsls	r6, r3, #31
 80088dc:	d508      	bpl.n	80088f0 <_printf_i+0x14c>
 80088de:	6923      	ldr	r3, [r4, #16]
 80088e0:	6861      	ldr	r1, [r4, #4]
 80088e2:	4299      	cmp	r1, r3
 80088e4:	bfde      	ittt	le
 80088e6:	2330      	movle	r3, #48	; 0x30
 80088e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80088f0:	1b52      	subs	r2, r2, r5
 80088f2:	6122      	str	r2, [r4, #16]
 80088f4:	f8cd a000 	str.w	sl, [sp]
 80088f8:	464b      	mov	r3, r9
 80088fa:	aa03      	add	r2, sp, #12
 80088fc:	4621      	mov	r1, r4
 80088fe:	4640      	mov	r0, r8
 8008900:	f7ff fee2 	bl	80086c8 <_printf_common>
 8008904:	3001      	adds	r0, #1
 8008906:	d14c      	bne.n	80089a2 <_printf_i+0x1fe>
 8008908:	f04f 30ff 	mov.w	r0, #4294967295
 800890c:	b004      	add	sp, #16
 800890e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008912:	4835      	ldr	r0, [pc, #212]	; (80089e8 <_printf_i+0x244>)
 8008914:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008918:	6829      	ldr	r1, [r5, #0]
 800891a:	6823      	ldr	r3, [r4, #0]
 800891c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008920:	6029      	str	r1, [r5, #0]
 8008922:	061d      	lsls	r5, r3, #24
 8008924:	d514      	bpl.n	8008950 <_printf_i+0x1ac>
 8008926:	07df      	lsls	r7, r3, #31
 8008928:	bf44      	itt	mi
 800892a:	f043 0320 	orrmi.w	r3, r3, #32
 800892e:	6023      	strmi	r3, [r4, #0]
 8008930:	b91e      	cbnz	r6, 800893a <_printf_i+0x196>
 8008932:	6823      	ldr	r3, [r4, #0]
 8008934:	f023 0320 	bic.w	r3, r3, #32
 8008938:	6023      	str	r3, [r4, #0]
 800893a:	2310      	movs	r3, #16
 800893c:	e7b0      	b.n	80088a0 <_printf_i+0xfc>
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	f043 0320 	orr.w	r3, r3, #32
 8008944:	6023      	str	r3, [r4, #0]
 8008946:	2378      	movs	r3, #120	; 0x78
 8008948:	4828      	ldr	r0, [pc, #160]	; (80089ec <_printf_i+0x248>)
 800894a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800894e:	e7e3      	b.n	8008918 <_printf_i+0x174>
 8008950:	0659      	lsls	r1, r3, #25
 8008952:	bf48      	it	mi
 8008954:	b2b6      	uxthmi	r6, r6
 8008956:	e7e6      	b.n	8008926 <_printf_i+0x182>
 8008958:	4615      	mov	r5, r2
 800895a:	e7bb      	b.n	80088d4 <_printf_i+0x130>
 800895c:	682b      	ldr	r3, [r5, #0]
 800895e:	6826      	ldr	r6, [r4, #0]
 8008960:	6961      	ldr	r1, [r4, #20]
 8008962:	1d18      	adds	r0, r3, #4
 8008964:	6028      	str	r0, [r5, #0]
 8008966:	0635      	lsls	r5, r6, #24
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	d501      	bpl.n	8008970 <_printf_i+0x1cc>
 800896c:	6019      	str	r1, [r3, #0]
 800896e:	e002      	b.n	8008976 <_printf_i+0x1d2>
 8008970:	0670      	lsls	r0, r6, #25
 8008972:	d5fb      	bpl.n	800896c <_printf_i+0x1c8>
 8008974:	8019      	strh	r1, [r3, #0]
 8008976:	2300      	movs	r3, #0
 8008978:	6123      	str	r3, [r4, #16]
 800897a:	4615      	mov	r5, r2
 800897c:	e7ba      	b.n	80088f4 <_printf_i+0x150>
 800897e:	682b      	ldr	r3, [r5, #0]
 8008980:	1d1a      	adds	r2, r3, #4
 8008982:	602a      	str	r2, [r5, #0]
 8008984:	681d      	ldr	r5, [r3, #0]
 8008986:	6862      	ldr	r2, [r4, #4]
 8008988:	2100      	movs	r1, #0
 800898a:	4628      	mov	r0, r5
 800898c:	f7f7 fc30 	bl	80001f0 <memchr>
 8008990:	b108      	cbz	r0, 8008996 <_printf_i+0x1f2>
 8008992:	1b40      	subs	r0, r0, r5
 8008994:	6060      	str	r0, [r4, #4]
 8008996:	6863      	ldr	r3, [r4, #4]
 8008998:	6123      	str	r3, [r4, #16]
 800899a:	2300      	movs	r3, #0
 800899c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089a0:	e7a8      	b.n	80088f4 <_printf_i+0x150>
 80089a2:	6923      	ldr	r3, [r4, #16]
 80089a4:	462a      	mov	r2, r5
 80089a6:	4649      	mov	r1, r9
 80089a8:	4640      	mov	r0, r8
 80089aa:	47d0      	blx	sl
 80089ac:	3001      	adds	r0, #1
 80089ae:	d0ab      	beq.n	8008908 <_printf_i+0x164>
 80089b0:	6823      	ldr	r3, [r4, #0]
 80089b2:	079b      	lsls	r3, r3, #30
 80089b4:	d413      	bmi.n	80089de <_printf_i+0x23a>
 80089b6:	68e0      	ldr	r0, [r4, #12]
 80089b8:	9b03      	ldr	r3, [sp, #12]
 80089ba:	4298      	cmp	r0, r3
 80089bc:	bfb8      	it	lt
 80089be:	4618      	movlt	r0, r3
 80089c0:	e7a4      	b.n	800890c <_printf_i+0x168>
 80089c2:	2301      	movs	r3, #1
 80089c4:	4632      	mov	r2, r6
 80089c6:	4649      	mov	r1, r9
 80089c8:	4640      	mov	r0, r8
 80089ca:	47d0      	blx	sl
 80089cc:	3001      	adds	r0, #1
 80089ce:	d09b      	beq.n	8008908 <_printf_i+0x164>
 80089d0:	3501      	adds	r5, #1
 80089d2:	68e3      	ldr	r3, [r4, #12]
 80089d4:	9903      	ldr	r1, [sp, #12]
 80089d6:	1a5b      	subs	r3, r3, r1
 80089d8:	42ab      	cmp	r3, r5
 80089da:	dcf2      	bgt.n	80089c2 <_printf_i+0x21e>
 80089dc:	e7eb      	b.n	80089b6 <_printf_i+0x212>
 80089de:	2500      	movs	r5, #0
 80089e0:	f104 0619 	add.w	r6, r4, #25
 80089e4:	e7f5      	b.n	80089d2 <_printf_i+0x22e>
 80089e6:	bf00      	nop
 80089e8:	0800972d 	.word	0x0800972d
 80089ec:	0800973e 	.word	0x0800973e

080089f0 <memmove>:
 80089f0:	4288      	cmp	r0, r1
 80089f2:	b510      	push	{r4, lr}
 80089f4:	eb01 0402 	add.w	r4, r1, r2
 80089f8:	d902      	bls.n	8008a00 <memmove+0x10>
 80089fa:	4284      	cmp	r4, r0
 80089fc:	4623      	mov	r3, r4
 80089fe:	d807      	bhi.n	8008a10 <memmove+0x20>
 8008a00:	1e43      	subs	r3, r0, #1
 8008a02:	42a1      	cmp	r1, r4
 8008a04:	d008      	beq.n	8008a18 <memmove+0x28>
 8008a06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a0e:	e7f8      	b.n	8008a02 <memmove+0x12>
 8008a10:	4402      	add	r2, r0
 8008a12:	4601      	mov	r1, r0
 8008a14:	428a      	cmp	r2, r1
 8008a16:	d100      	bne.n	8008a1a <memmove+0x2a>
 8008a18:	bd10      	pop	{r4, pc}
 8008a1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a22:	e7f7      	b.n	8008a14 <memmove+0x24>

08008a24 <_free_r>:
 8008a24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a26:	2900      	cmp	r1, #0
 8008a28:	d044      	beq.n	8008ab4 <_free_r+0x90>
 8008a2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a2e:	9001      	str	r0, [sp, #4]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f1a1 0404 	sub.w	r4, r1, #4
 8008a36:	bfb8      	it	lt
 8008a38:	18e4      	addlt	r4, r4, r3
 8008a3a:	f000 f913 	bl	8008c64 <__malloc_lock>
 8008a3e:	4a1e      	ldr	r2, [pc, #120]	; (8008ab8 <_free_r+0x94>)
 8008a40:	9801      	ldr	r0, [sp, #4]
 8008a42:	6813      	ldr	r3, [r2, #0]
 8008a44:	b933      	cbnz	r3, 8008a54 <_free_r+0x30>
 8008a46:	6063      	str	r3, [r4, #4]
 8008a48:	6014      	str	r4, [r2, #0]
 8008a4a:	b003      	add	sp, #12
 8008a4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a50:	f000 b90e 	b.w	8008c70 <__malloc_unlock>
 8008a54:	42a3      	cmp	r3, r4
 8008a56:	d908      	bls.n	8008a6a <_free_r+0x46>
 8008a58:	6825      	ldr	r5, [r4, #0]
 8008a5a:	1961      	adds	r1, r4, r5
 8008a5c:	428b      	cmp	r3, r1
 8008a5e:	bf01      	itttt	eq
 8008a60:	6819      	ldreq	r1, [r3, #0]
 8008a62:	685b      	ldreq	r3, [r3, #4]
 8008a64:	1949      	addeq	r1, r1, r5
 8008a66:	6021      	streq	r1, [r4, #0]
 8008a68:	e7ed      	b.n	8008a46 <_free_r+0x22>
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	b10b      	cbz	r3, 8008a74 <_free_r+0x50>
 8008a70:	42a3      	cmp	r3, r4
 8008a72:	d9fa      	bls.n	8008a6a <_free_r+0x46>
 8008a74:	6811      	ldr	r1, [r2, #0]
 8008a76:	1855      	adds	r5, r2, r1
 8008a78:	42a5      	cmp	r5, r4
 8008a7a:	d10b      	bne.n	8008a94 <_free_r+0x70>
 8008a7c:	6824      	ldr	r4, [r4, #0]
 8008a7e:	4421      	add	r1, r4
 8008a80:	1854      	adds	r4, r2, r1
 8008a82:	42a3      	cmp	r3, r4
 8008a84:	6011      	str	r1, [r2, #0]
 8008a86:	d1e0      	bne.n	8008a4a <_free_r+0x26>
 8008a88:	681c      	ldr	r4, [r3, #0]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	6053      	str	r3, [r2, #4]
 8008a8e:	4421      	add	r1, r4
 8008a90:	6011      	str	r1, [r2, #0]
 8008a92:	e7da      	b.n	8008a4a <_free_r+0x26>
 8008a94:	d902      	bls.n	8008a9c <_free_r+0x78>
 8008a96:	230c      	movs	r3, #12
 8008a98:	6003      	str	r3, [r0, #0]
 8008a9a:	e7d6      	b.n	8008a4a <_free_r+0x26>
 8008a9c:	6825      	ldr	r5, [r4, #0]
 8008a9e:	1961      	adds	r1, r4, r5
 8008aa0:	428b      	cmp	r3, r1
 8008aa2:	bf04      	itt	eq
 8008aa4:	6819      	ldreq	r1, [r3, #0]
 8008aa6:	685b      	ldreq	r3, [r3, #4]
 8008aa8:	6063      	str	r3, [r4, #4]
 8008aaa:	bf04      	itt	eq
 8008aac:	1949      	addeq	r1, r1, r5
 8008aae:	6021      	streq	r1, [r4, #0]
 8008ab0:	6054      	str	r4, [r2, #4]
 8008ab2:	e7ca      	b.n	8008a4a <_free_r+0x26>
 8008ab4:	b003      	add	sp, #12
 8008ab6:	bd30      	pop	{r4, r5, pc}
 8008ab8:	20007a7c 	.word	0x20007a7c

08008abc <sbrk_aligned>:
 8008abc:	b570      	push	{r4, r5, r6, lr}
 8008abe:	4e0e      	ldr	r6, [pc, #56]	; (8008af8 <sbrk_aligned+0x3c>)
 8008ac0:	460c      	mov	r4, r1
 8008ac2:	6831      	ldr	r1, [r6, #0]
 8008ac4:	4605      	mov	r5, r0
 8008ac6:	b911      	cbnz	r1, 8008ace <sbrk_aligned+0x12>
 8008ac8:	f000 f8bc 	bl	8008c44 <_sbrk_r>
 8008acc:	6030      	str	r0, [r6, #0]
 8008ace:	4621      	mov	r1, r4
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	f000 f8b7 	bl	8008c44 <_sbrk_r>
 8008ad6:	1c43      	adds	r3, r0, #1
 8008ad8:	d00a      	beq.n	8008af0 <sbrk_aligned+0x34>
 8008ada:	1cc4      	adds	r4, r0, #3
 8008adc:	f024 0403 	bic.w	r4, r4, #3
 8008ae0:	42a0      	cmp	r0, r4
 8008ae2:	d007      	beq.n	8008af4 <sbrk_aligned+0x38>
 8008ae4:	1a21      	subs	r1, r4, r0
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	f000 f8ac 	bl	8008c44 <_sbrk_r>
 8008aec:	3001      	adds	r0, #1
 8008aee:	d101      	bne.n	8008af4 <sbrk_aligned+0x38>
 8008af0:	f04f 34ff 	mov.w	r4, #4294967295
 8008af4:	4620      	mov	r0, r4
 8008af6:	bd70      	pop	{r4, r5, r6, pc}
 8008af8:	20007a80 	.word	0x20007a80

08008afc <_malloc_r>:
 8008afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b00:	1ccd      	adds	r5, r1, #3
 8008b02:	f025 0503 	bic.w	r5, r5, #3
 8008b06:	3508      	adds	r5, #8
 8008b08:	2d0c      	cmp	r5, #12
 8008b0a:	bf38      	it	cc
 8008b0c:	250c      	movcc	r5, #12
 8008b0e:	2d00      	cmp	r5, #0
 8008b10:	4607      	mov	r7, r0
 8008b12:	db01      	blt.n	8008b18 <_malloc_r+0x1c>
 8008b14:	42a9      	cmp	r1, r5
 8008b16:	d905      	bls.n	8008b24 <_malloc_r+0x28>
 8008b18:	230c      	movs	r3, #12
 8008b1a:	603b      	str	r3, [r7, #0]
 8008b1c:	2600      	movs	r6, #0
 8008b1e:	4630      	mov	r0, r6
 8008b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b24:	4e2e      	ldr	r6, [pc, #184]	; (8008be0 <_malloc_r+0xe4>)
 8008b26:	f000 f89d 	bl	8008c64 <__malloc_lock>
 8008b2a:	6833      	ldr	r3, [r6, #0]
 8008b2c:	461c      	mov	r4, r3
 8008b2e:	bb34      	cbnz	r4, 8008b7e <_malloc_r+0x82>
 8008b30:	4629      	mov	r1, r5
 8008b32:	4638      	mov	r0, r7
 8008b34:	f7ff ffc2 	bl	8008abc <sbrk_aligned>
 8008b38:	1c43      	adds	r3, r0, #1
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	d14d      	bne.n	8008bda <_malloc_r+0xde>
 8008b3e:	6834      	ldr	r4, [r6, #0]
 8008b40:	4626      	mov	r6, r4
 8008b42:	2e00      	cmp	r6, #0
 8008b44:	d140      	bne.n	8008bc8 <_malloc_r+0xcc>
 8008b46:	6823      	ldr	r3, [r4, #0]
 8008b48:	4631      	mov	r1, r6
 8008b4a:	4638      	mov	r0, r7
 8008b4c:	eb04 0803 	add.w	r8, r4, r3
 8008b50:	f000 f878 	bl	8008c44 <_sbrk_r>
 8008b54:	4580      	cmp	r8, r0
 8008b56:	d13a      	bne.n	8008bce <_malloc_r+0xd2>
 8008b58:	6821      	ldr	r1, [r4, #0]
 8008b5a:	3503      	adds	r5, #3
 8008b5c:	1a6d      	subs	r5, r5, r1
 8008b5e:	f025 0503 	bic.w	r5, r5, #3
 8008b62:	3508      	adds	r5, #8
 8008b64:	2d0c      	cmp	r5, #12
 8008b66:	bf38      	it	cc
 8008b68:	250c      	movcc	r5, #12
 8008b6a:	4629      	mov	r1, r5
 8008b6c:	4638      	mov	r0, r7
 8008b6e:	f7ff ffa5 	bl	8008abc <sbrk_aligned>
 8008b72:	3001      	adds	r0, #1
 8008b74:	d02b      	beq.n	8008bce <_malloc_r+0xd2>
 8008b76:	6823      	ldr	r3, [r4, #0]
 8008b78:	442b      	add	r3, r5
 8008b7a:	6023      	str	r3, [r4, #0]
 8008b7c:	e00e      	b.n	8008b9c <_malloc_r+0xa0>
 8008b7e:	6822      	ldr	r2, [r4, #0]
 8008b80:	1b52      	subs	r2, r2, r5
 8008b82:	d41e      	bmi.n	8008bc2 <_malloc_r+0xc6>
 8008b84:	2a0b      	cmp	r2, #11
 8008b86:	d916      	bls.n	8008bb6 <_malloc_r+0xba>
 8008b88:	1961      	adds	r1, r4, r5
 8008b8a:	42a3      	cmp	r3, r4
 8008b8c:	6025      	str	r5, [r4, #0]
 8008b8e:	bf18      	it	ne
 8008b90:	6059      	strne	r1, [r3, #4]
 8008b92:	6863      	ldr	r3, [r4, #4]
 8008b94:	bf08      	it	eq
 8008b96:	6031      	streq	r1, [r6, #0]
 8008b98:	5162      	str	r2, [r4, r5]
 8008b9a:	604b      	str	r3, [r1, #4]
 8008b9c:	4638      	mov	r0, r7
 8008b9e:	f104 060b 	add.w	r6, r4, #11
 8008ba2:	f000 f865 	bl	8008c70 <__malloc_unlock>
 8008ba6:	f026 0607 	bic.w	r6, r6, #7
 8008baa:	1d23      	adds	r3, r4, #4
 8008bac:	1af2      	subs	r2, r6, r3
 8008bae:	d0b6      	beq.n	8008b1e <_malloc_r+0x22>
 8008bb0:	1b9b      	subs	r3, r3, r6
 8008bb2:	50a3      	str	r3, [r4, r2]
 8008bb4:	e7b3      	b.n	8008b1e <_malloc_r+0x22>
 8008bb6:	6862      	ldr	r2, [r4, #4]
 8008bb8:	42a3      	cmp	r3, r4
 8008bba:	bf0c      	ite	eq
 8008bbc:	6032      	streq	r2, [r6, #0]
 8008bbe:	605a      	strne	r2, [r3, #4]
 8008bc0:	e7ec      	b.n	8008b9c <_malloc_r+0xa0>
 8008bc2:	4623      	mov	r3, r4
 8008bc4:	6864      	ldr	r4, [r4, #4]
 8008bc6:	e7b2      	b.n	8008b2e <_malloc_r+0x32>
 8008bc8:	4634      	mov	r4, r6
 8008bca:	6876      	ldr	r6, [r6, #4]
 8008bcc:	e7b9      	b.n	8008b42 <_malloc_r+0x46>
 8008bce:	230c      	movs	r3, #12
 8008bd0:	603b      	str	r3, [r7, #0]
 8008bd2:	4638      	mov	r0, r7
 8008bd4:	f000 f84c 	bl	8008c70 <__malloc_unlock>
 8008bd8:	e7a1      	b.n	8008b1e <_malloc_r+0x22>
 8008bda:	6025      	str	r5, [r4, #0]
 8008bdc:	e7de      	b.n	8008b9c <_malloc_r+0xa0>
 8008bde:	bf00      	nop
 8008be0:	20007a7c 	.word	0x20007a7c

08008be4 <_realloc_r>:
 8008be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008be8:	4680      	mov	r8, r0
 8008bea:	4614      	mov	r4, r2
 8008bec:	460e      	mov	r6, r1
 8008bee:	b921      	cbnz	r1, 8008bfa <_realloc_r+0x16>
 8008bf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf4:	4611      	mov	r1, r2
 8008bf6:	f7ff bf81 	b.w	8008afc <_malloc_r>
 8008bfa:	b92a      	cbnz	r2, 8008c08 <_realloc_r+0x24>
 8008bfc:	f7ff ff12 	bl	8008a24 <_free_r>
 8008c00:	4625      	mov	r5, r4
 8008c02:	4628      	mov	r0, r5
 8008c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c08:	f000 f838 	bl	8008c7c <_malloc_usable_size_r>
 8008c0c:	4284      	cmp	r4, r0
 8008c0e:	4607      	mov	r7, r0
 8008c10:	d802      	bhi.n	8008c18 <_realloc_r+0x34>
 8008c12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c16:	d812      	bhi.n	8008c3e <_realloc_r+0x5a>
 8008c18:	4621      	mov	r1, r4
 8008c1a:	4640      	mov	r0, r8
 8008c1c:	f7ff ff6e 	bl	8008afc <_malloc_r>
 8008c20:	4605      	mov	r5, r0
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d0ed      	beq.n	8008c02 <_realloc_r+0x1e>
 8008c26:	42bc      	cmp	r4, r7
 8008c28:	4622      	mov	r2, r4
 8008c2a:	4631      	mov	r1, r6
 8008c2c:	bf28      	it	cs
 8008c2e:	463a      	movcs	r2, r7
 8008c30:	f7ff fba4 	bl	800837c <memcpy>
 8008c34:	4631      	mov	r1, r6
 8008c36:	4640      	mov	r0, r8
 8008c38:	f7ff fef4 	bl	8008a24 <_free_r>
 8008c3c:	e7e1      	b.n	8008c02 <_realloc_r+0x1e>
 8008c3e:	4635      	mov	r5, r6
 8008c40:	e7df      	b.n	8008c02 <_realloc_r+0x1e>
	...

08008c44 <_sbrk_r>:
 8008c44:	b538      	push	{r3, r4, r5, lr}
 8008c46:	4d06      	ldr	r5, [pc, #24]	; (8008c60 <_sbrk_r+0x1c>)
 8008c48:	2300      	movs	r3, #0
 8008c4a:	4604      	mov	r4, r0
 8008c4c:	4608      	mov	r0, r1
 8008c4e:	602b      	str	r3, [r5, #0]
 8008c50:	f7fa fb44 	bl	80032dc <_sbrk>
 8008c54:	1c43      	adds	r3, r0, #1
 8008c56:	d102      	bne.n	8008c5e <_sbrk_r+0x1a>
 8008c58:	682b      	ldr	r3, [r5, #0]
 8008c5a:	b103      	cbz	r3, 8008c5e <_sbrk_r+0x1a>
 8008c5c:	6023      	str	r3, [r4, #0]
 8008c5e:	bd38      	pop	{r3, r4, r5, pc}
 8008c60:	20007a84 	.word	0x20007a84

08008c64 <__malloc_lock>:
 8008c64:	4801      	ldr	r0, [pc, #4]	; (8008c6c <__malloc_lock+0x8>)
 8008c66:	f000 b811 	b.w	8008c8c <__retarget_lock_acquire_recursive>
 8008c6a:	bf00      	nop
 8008c6c:	20007a88 	.word	0x20007a88

08008c70 <__malloc_unlock>:
 8008c70:	4801      	ldr	r0, [pc, #4]	; (8008c78 <__malloc_unlock+0x8>)
 8008c72:	f000 b80c 	b.w	8008c8e <__retarget_lock_release_recursive>
 8008c76:	bf00      	nop
 8008c78:	20007a88 	.word	0x20007a88

08008c7c <_malloc_usable_size_r>:
 8008c7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c80:	1f18      	subs	r0, r3, #4
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	bfbc      	itt	lt
 8008c86:	580b      	ldrlt	r3, [r1, r0]
 8008c88:	18c0      	addlt	r0, r0, r3
 8008c8a:	4770      	bx	lr

08008c8c <__retarget_lock_acquire_recursive>:
 8008c8c:	4770      	bx	lr

08008c8e <__retarget_lock_release_recursive>:
 8008c8e:	4770      	bx	lr

08008c90 <trunc>:
 8008c90:	ec51 0b10 	vmov	r0, r1, d0
 8008c94:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008c98:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8008c9c:	2b13      	cmp	r3, #19
 8008c9e:	b5d0      	push	{r4, r6, r7, lr}
 8008ca0:	460c      	mov	r4, r1
 8008ca2:	dc10      	bgt.n	8008cc6 <trunc+0x36>
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	bfa5      	ittet	ge
 8008ca8:	4a11      	ldrge	r2, [pc, #68]	; (8008cf0 <trunc+0x60>)
 8008caa:	fa42 f303 	asrge.w	r3, r2, r3
 8008cae:	2100      	movlt	r1, #0
 8008cb0:	2100      	movge	r1, #0
 8008cb2:	bfb9      	ittee	lt
 8008cb4:	2000      	movlt	r0, #0
 8008cb6:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 8008cba:	2000      	movge	r0, #0
 8008cbc:	ea24 0103 	bicge.w	r1, r4, r3
 8008cc0:	ec41 0b10 	vmov	d0, r0, r1
 8008cc4:	bdd0      	pop	{r4, r6, r7, pc}
 8008cc6:	2b33      	cmp	r3, #51	; 0x33
 8008cc8:	dd08      	ble.n	8008cdc <trunc+0x4c>
 8008cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cce:	d1f7      	bne.n	8008cc0 <trunc+0x30>
 8008cd0:	ee10 2a10 	vmov	r2, s0
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	f7f7 fae1 	bl	800029c <__adddf3>
 8008cda:	e7f1      	b.n	8008cc0 <trunc+0x30>
 8008cdc:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8008ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ce4:	fa23 f202 	lsr.w	r2, r3, r2
 8008ce8:	ea20 0602 	bic.w	r6, r0, r2
 8008cec:	4630      	mov	r0, r6
 8008cee:	e7e7      	b.n	8008cc0 <trunc+0x30>
 8008cf0:	000fffff 	.word	0x000fffff

08008cf4 <_init>:
 8008cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf6:	bf00      	nop
 8008cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cfa:	bc08      	pop	{r3}
 8008cfc:	469e      	mov	lr, r3
 8008cfe:	4770      	bx	lr

08008d00 <_fini>:
 8008d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d02:	bf00      	nop
 8008d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d06:	bc08      	pop	{r3}
 8008d08:	469e      	mov	lr, r3
 8008d0a:	4770      	bx	lr
